/* BEGIN COMMON HELPERS */
var app = {
    platform: "node"
};
this.fields = [];
this.bookmarkRoot = {
    children: [{
        children: []
    }]
};
this.info = {
        SheetType: "printer friendly letter",
        SpellsOnly: false,
        AdvLogOnly: false,
        SheetVersion: 13,
        
};
this.getField = function (name) {
    var item = this.fields.find((item) => item.name == name);
    if (item != this.undefined) {
        return item;
    }
    return {
        name: name,
        submitName: name,
        text: ""
    };
}
var npmclone = require('clone');
/* END COMMON HELPERS */
// all the very basic functions and text manipulation functions
var tDoc = this;

function Hide(field) {
	if (tDoc.getField(field)) tDoc.getField(field).display = display.hidden;
};

function DontPrint(field) {
	if (tDoc.getField(field)) tDoc.getField(field).display = display.noPrint;
};

function Show(field) {
	if (tDoc.getField(field)) tDoc.getField(field).display = display.visible;
};

function isDisplay(field) {
	return !tDoc.getField(field) ? 100 : tDoc.getField(field).display;
};

function Editable(field) {
	if (tDoc.getField(field)) tDoc.getField(field).readonly = false;
};

function Uneditable(field) {
	if (tDoc.getField(field)) tDoc.getField(field).readonly = true;
};

function Value(field, FldValue, tooltip, submitNm) {
	if (!tDoc.getField(field)) return false;
	tDoc.getField(field).value = FldValue;
	if (tooltip !== undefined) tDoc.getField(field).userName = tooltip;
	if (submitNm !== undefined) tDoc.getField(field).submitName = submitNm;
};

function What(field) {
	return tDoc.getField(field) ? tDoc.getField(field).value : BackwardsCompatible[field] ? eval(BackwardsCompatible[field]) : "";
};

function Who(field) {
	return tDoc.getField(field) ? tDoc.getField(field).userName : "";
};

function How(field) {
	return tDoc.getField(field) ? tDoc.getField(field).submitName : "";
};

function Clear(field) {
	if (tDoc.getField(field)) tDoc.getField(field).clearItems();
};

function AddTooltip(field, tooltip, submitNm) {
	if (!tDoc.getField(field)) return false;
	if (tooltip !== undefined) tDoc.getField(field).userName = tooltip;
	if (submitNm !== undefined) tDoc.getField(field).submitName = submitNm;
};

function SwapTooltip(field1, field2) {
	tt1 = Who(field1);
	tt2 = Who(field2);
	AddTooltip(field1, tt2);
	AddTooltip(field2, tt1);
};

function Checkbox(field, FldValue, tooltip, submitNm) {
	if (!tDoc.getField(field)) return false;
	var Checkit = (FldValue === undefined) ? true : FldValue;
	var checkNo = isArray(tDoc.getField(field).page) ? tDoc.getField(field).page.length : 1;
	for (var c = 0; c < checkNo; c++) {
		tDoc.getField(field).checkThisBox(c, Checkit);
	}
	if (tooltip !== undefined) tDoc.getField(field).userName = tooltip;
	if (submitNm !== undefined) tDoc.getField(field).submitName = submitNm;
};

function desc(arr) {
	return "\n   " + arr.join("\n   ");
};

// Call all the prototypes within their own function so we can call it again when importing, forcing the latest version
function setPrototypes() {
	//adding a way of capitalizing every first letter of every word in a string
	String.prototype.capitalize = function () {
		var string = this.toLowerCase().replace(/(?:^|\s|\(|\[)\w/g, function (m) {
			return m.toUpperCase();
		});

		// Certain minor words should be left lowercase unless
		// they are the first or last words in the string
		lowers = ['A', 'An', 'The', 'And', 'But', 'Or', 'For', 'Nor', 'As', 'At',
		'By', 'For', 'From', 'In', 'Into', 'Near', 'Of', 'On', 'Onto', 'To', 'With'];
		for (var Ca = 0; Ca < lowers.length; Ca++)
		string = string.replace(new RegExp('\\W' + lowers[Ca] + '\\W', 'g'), function(txt) {
			return txt.toLowerCase();
		});

		return string;
	};
	Number.prototype.capitalize = function () {
		return this.toString().capitalize();
	};
	RegExp.prototype.capitalize = function () {
		return this.toString().capitalize();
	};

	//adding a way to convert a string with special characters into a regular expression
	String.prototype.RegEscape = function () {
		return this.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
	};
	Number.prototype.RegEscape = function () {
		return this.toString().RegEscape();
	};
	RegExp.prototype.RegEscape = function () {
		return this.toString().RegEscape();
	};

	//define a way for numbers and regular expressions to return an indexOf(), match(), replace(), search(), slice(), split(), substring(), substr(), toLowerCase(), or toUpperCase() to avoid errors
	Number.prototype.indexOf = function (searchValue, fromIndex) {
		return this.toString().indexOf(searchValue, fromIndex);
	};
	Number.prototype.match = function (regexpObj) {
		return this.toString().match(regexpObj);
	};
	Number.prototype.replace = function (regexp_substr, newSubStr_function) {
		return this.toString().replace(regexp_substr, newSubStr_function);
	};
	Number.prototype.search = function (regexpObj) {
		return this.toString().search(regexpObj);
	};
	Number.prototype.slice = function (beginSlice, endSlice) {
		return this.toString().slice(beginSlice, endSlice);
	};
	Number.prototype.split = function (separator, limit) {
		return this.toString().split(separator, limit);
	};
	Number.prototype.substring = function (indexStart, indexEnd) {
		return this.toString().substring(indexStart, indexEnd);
	};
	Number.prototype.substr = function (start, length) {
		return this.toString().substr(start, length);
	};
	Number.prototype.toLowerCase = function () {
		return this.toString().toLowerCase();
	};
	Number.prototype.toUpperCase = function () {
		return this.toString().toUpperCase();
	};
	RegExp.prototype.indexOf = function (searchValue, fromIndex) {
		return this.toString().indexOf(searchValue, fromIndex);
	};
	RegExp.prototype.match = function (regexpObj) {
		return this.toString().match(regexpObj);
	};
	RegExp.prototype.replace = function(oldstr, newstr) {
		var a = this.toString();
		return RegExp(a.replace(/^\/|\/\w*$/g, "").replace(oldstr, newstr), a.match(/\/\w*$/)[0].replace("/", ""));
	};
	RegExp.prototype.search = function (regexpObj) {
		return this.toString().search(regexpObj);
	};
	RegExp.prototype.slice = function (beginSlice, endSlice) {
		return this.toString().slice(beginSlice, endSlice);
	};
	RegExp.prototype.split = function (separator, limit) {
		return this.toString().split(separator, limit);
	};
	RegExp.prototype.substring = function (indexStart, indexEnd) {
		return this.toString().substring(indexStart, indexEnd);
	};
	RegExp.prototype.substr = function (start, length) {
		return this.toString().substr(start, length);
	};
	RegExp.prototype.toLowerCase = function () {
		return this.toString().toLowerCase();
	};
	RegExp.prototype.toUpperCase = function () {
		return this.toString().toUpperCase();
	};
	Array.prototype.match = function (regexpObj) {
		return this.toString().match(regexpObj);
	};
	Array.prototype.replace = function (regexp_substr, newSubStr_function) {
		return this.toString().replace(regexp_substr, newSubStr_function);
	};
	Array.prototype.search = function (regexpObj) {
		return this.toString().search(regexpObj);
	};
	Array.prototype.split = function (separator, limit) {
		return this.toString().split(separator, limit);
	};
	Array.prototype.substring = function (indexStart, indexEnd) {
		return this.toString().substring(indexStart, indexEnd);
	};
	Array.prototype.substr = function (start, length) {
		return this.toString().substr(start, length);
	};
	Array.prototype.toLowerCase = function () {
		return this.toString().toLowerCase();
	};
	Array.prototype.toUpperCase = function () {
		return this.toString().toUpperCase();
	};
	Array.prototype.trailingIndexOf = function(e) {
		var index = -1, len = this.length;
		for (var i = len - 1; i > -1; i--) {
			if (i in this && e === this[i]) {
				index = i;
			} else {
				break;
			}
		}
		return index;
	};
};
setPrototypes();

function ChangeWidth(field, amount) {
	var Fld = tDoc.getField(field);
	var aRect = Fld.rect; // Make a copy of Fld.rect
	aRect[2] += amount; // Increment lower right x coordinate by given amount
	Fld.rect = aRect; // Update the value of Fld.rect
	Fld.value = Fld.value; //Set the value of the Fld to match the original value, as to not mess up the font scaling
}

function ClearIcons(field, clickMe) {
	if (!tDoc.getField(field)) return false;
	var iconFld = clickMe ? "SaveIMG.ClickMeIcon" : "SaveIMG.EmptyIcon";
	var oIcon = tDoc.getField(iconFld).buttonGetIcon();
	tDoc.getField(field).buttonSetIcon(oIcon);
	if (clickMe) {
		DontPrint(field);
	} else if (tDoc.getField(field).display === display.noPrint) {
		Show(field);
	}
};

function PickDropdown(field, FldValue) {
	var thisFld = tDoc.getField(field);
	if (!thisFld) return;
	if (!isNaN(FldValue) && thisFld.type === "combobox") {
		tDoc.getField(field).currentValueIndices = Number(FldValue);
	} else {
		Value(field, FldValue);
	}
};

function isArray(input) {
	var giveback = false;
	if (Object.prototype.toString.call(input) === "[object Array]") {
		giveback = true;
	}
	return giveback;
};

//remove the empty values from an array (removes all things that are considered false, such as 0, "", undefined, false)
function removeEmptyValues(array) {
	var returnArray = [];
	for (var i = 0; i < array.length; i++) {
		if (array[i]) returnArray.push(array[i]);
	}
	return returnArray;
};

function sign(x) {
	return x > 0 ? 1 : x < 0 ? -1 : x;
};

function format1(extraDec, fixedDec, unit) {
	var plusDec = extraDec && !isNaN(extraDec) ? Number(extraDec) : 0;
	var decShow = 0;
	AFNumber_Format(2 + plusDec, 1, 0, 0, "", false);
	var decLoc = event.value.indexOf(".");
	var decSep = What("Decimal Separator");

	decShow = (3 + plusDec) - decLoc;
	decShow = decShow < 0 ? 0 : decShow;

	if (fixedDec !== undefined && !isNaN(fixedDec) && fixedDec !== "") {
		decShow = fixedDec;
	}

	if (decSep === "dot") {
		AFNumber_Format(decShow, 0, 0, 0, "", false);
		if (decShow) {
			// Replace any trailing zeroes with nothing
			event.value = event.value.replace(/[0]+$/, "");
			// Replace a trailing decimal with nothing
			event.value = event.value.replace(/\.$/, "");
		}
	} else if (decSep === "comma") {
		AFNumber_Format(decShow, 2, 0, 0, "", false);
		if (decShow) {
			// Replace any trailing zeroes with nothing
			event.value = event.value.replace(/[0]+$/, "");
			// Replace a trailing decimal with nothing
			event.value = event.value.replace(/,$/, "");
		}
	}

	if (event.value !== "" && unit && unit === "mass") {
		var UnitSystem = What("Unit System");
		if (UnitSystem === "imperial") {
			event.value += " lb";
		} else if (UnitSystem === "metric") {
			event.value += " kg";
		}
	}
}

//replace all commas and dots with the set decimal separator
function format2() {
	var theDec = What("Decimal Separator") === "dot" ? "." : ",";
	if (event.value) event.value = event.value.replace(/(\.|,)/, theDec);
}

function keystroke1(allowDec, allowNegative) {
	if (!event.willCommit) {
		if (allowDec) {
			var tests = !isNaN(event.change) || ((/,|\./g).test(event.change) && (!(/,|\./g).test(event.value) || (/,|\./g).test(event.value.substring(event.selStart, event.selEnd))));
		} else {
			var tests = !isNaN(event.change);
		}
		if (allowNegative) {
			tests = tests || (event.change === "-" && event.selStart === 0 && (!(/-/g).test(event.value) || (/-/g).test(event.value.substring(event.selStart, event.selEnd))));
		}
		event.rc = tests;
	} else {
		event.rc = !isNaN(event.value.replace(/,/, "."));
	}
}

function keystroke2() {
	var allowedA = [".", ",", "-", "+", "*", "/"];
	var tests = event.value === "";
	if (!event.willCommit) {
		tests = !isNaN(event.change) || allowedA.indexOf(event.change) !== -1;
	} else if (event.value !== "") {
		tests = false;
		var toUse = event.value.replace(/(\.)+(\,)+/g, ",").replace(/(\.|\,)+/g, "$1");
		toUse = toUse.replace(/(\-)+(\+)+/g, "-").replace(/(\+|\-)+/g, "$1").replace(/(\*|\/|\+|\-)+/g, "$1").replace(/^(\*|\/)/, "");
		var toTest = toUse.replace(/,/g, ".");
		try {
			var tests = !isNaN(eval(toTest));
			event.value = toUse;
		} catch (err) {
			try {
				var tests = !isNaN(eval(toTest.slice(0, -1)));
				event.value = toUse.slice(0, -1);
			} catch (err) {
				var tests = false;
			}
		}
	}
	event.rc = tests;
};

// a format function for the "Die" field of the Hit Dice section
function FormatHD() {
	var theResult = clean(event.value, " ");
	if (theResult !== "") {
		var QI = getTemplPre(event.target.name, "AScomp");
		var theCon = Number(What(QI === true ? "Con Mod" : QI + "Comp.Use.Ability.Con.Mod"));
		event.value = "d" + theResult + (theCon < 0 ? theCon : "+" + theCon);
	}
};

//format the date (format)
function FormatDay() {
	var isDate = util.scand('yy-mm-dd', event.value);
	event.value = event.value && isDate ? util.printd(What("DateFormat_Remember"), isDate) : "";
};

//make sure the date is entered in the correct format (keystroke)
function KeystrokeDay() {
	if (event.willCommit && event.value) {
		var isDate = util.scand('yy-mm-dd', event.value);
		if (!isDate) {
			event.value = "";
			if (IsNotImport) {
				app.alert({
					cMsg : "Please enter a valid date using the date-picker (the little arrow in the field) or enter the date manually using of the form \"Year-Month-Day\".\n\nYou can change the way the date is displayed with the \"Logsheet Options\" at the top of each Adventurers Logsheet. Note that the format of the date in the field never changes, only the way it is displayed.",
					cTitle : "Invalid date format",
					nIcon : 1
				});
			};
		};
	};
};

//a field "format" function to add a space at the start and end of the field, to make sure it looks better on the sheet
function addWhitespace() {
	event.value = " " + event.value + " ";
};

function RoundTo(inputNmbr, roundNmbr, emptyAtZero, applyDec) {
	var input = isNaN(inputNmbr) ? Number(inputNmbr.replace(/,/g,".")) : inputNmbr, result = inputNmbr;

	if (roundNmbr && !isNaN(roundNmbr)) {
		if (roundNmbr >= 1) {
			result = Math.round(input / roundNmbr) * roundNmbr;
		} else if (roundNmbr > 0 && roundNmbr < 1) {
			result = Math.round(input * Math.pow(roundNmbr,-1)) / Math.pow(roundNmbr,-1);
		}
	}
	if (emptyAtZero && result === 0) {
		result = "";
	} else if (applyDec && result % 1 != 0 && What("Decimal Separator") === "comma") {
		result = result.replace(".", ",");
	}
	return result;
}

function NormDecimal(dec) {
  var i = 0;
  var first = ding.match(/,|\./);
  var result = dec.replace(/,|\./g, function(all, match) { return i++===0 ? first : ''; });
  return result;
}

//adding a way to see the number of keys in an object (i.e. length)
function ObjLength(theObj) {
	var size = 0;
	for (var thingy in theObj) {
		size++;
	}
	return size;
};

// start a progress dialog
// input can be a percentage of the progress or a string to display
// if remove is set to true, the entry corresponding to the input text is removed
// if remove is set to false, overwrite the current entry
function thermoM(input, remove) {
	if (input === "start" || !IsNotImport || IsNotImport === "no progress bar") return "";
	var t = app.thermometer;
	if (!input || input.toLowerCase() == "stop") {
		if (!thermoStopSet && t.text != undefined) thermoStopSet = app.setTimeOut("thermoStop();", 500);
		return "";
	}
	var dT = 10;
	if (remove !== undefined && isNaN(input)) { // remove the input if remove = true, or the latest entry if remove = false
		var toRem = remove ? input : thermoCount[thermoCount.length -1];
		if (thermoCount.indexOf(toRem) !== -1) {
			thermoCount.splice(thermoCount.indexOf(toRem), 1);
			if (!remove) thermoDur[input] = thermoDur[toRem];
			delete thermoDur[toRem];
			if (remove && thermoCount.length) {
				t.text = thermoCount[thermoCount.length -1];
				t.value = thermoDur[t.text];
			}
		}
	}
	if (!remove && isNaN(input)) { // start new with the input text
		if (t.text == undefined) {
			t.begin();
			t.duration = dT;
		}
		t.text = input;
		if (thermoCount.indexOf(input) == -1) {
			thermoCount.push(input);
			t.value = thermoDur[input] ? thermoDur[input] : 1;
			thermoDur[input] = t.value;
		} else {
			t.value++;
			thermoDur[input] = t.value;
		}
	} else if (!remove && t.text != undefined) { // update progress with the input number (if there is an active progress bar)
		t.value = dT * input;
		thermoDur[thermoCount[thermoCount.length -1]] = t.value;
	}
	// close all dialogs half a second after the last bit of code finishes
	if (!thermoStopSet && t.text != undefined) thermoStopSet = app.setTimeOut("thermoStop();", 500);
	return t.text != undefined ? t.text : "";
};

// end all instances of the progress dialog
function thermoStop() {
	if (thermoStopSet) {
		app.clearTimeOut(thermoStopSet);
		thermoStopSet = false;
	}
	thermoCount = [];
	thermoDur = {};
	var i = 0;
	while(i < 1000 && app.thermometer.text != undefined) {
		app.thermometer.end();
		i++
	};
};

//test if a font works or not
function testFont(fontTest) {
	var remFont = tDoc.getField((tDoc.info.AdvLogOnly ? "AdvLog." : "") + "Player Name").textFont;
	try {
		tDoc.getField((tDoc.info.AdvLogOnly ? "AdvLog." : "") + "Player Name").textFont = fontTest;
		tDoc.getField((tDoc.info.AdvLogOnly ? "AdvLog." : "") + "Player Name").textFont = remFont;
		return true;
	} catch (e) {
		return false;
	}
};

function clean(input, remove, diacretics) {
	if (remove && isArray(remove)) remove = remove.join('').replace(/(-|\\|\^|\])/g, '\\$1');
	var removeRegex = remove ? RegExp("/^[" + remove + "]+|[" + remove + "]+$", "g") : /^[ \-.,\\/:;]+|[ \-.,\\/:;]+$/g;
	input = input.replace(removeRegex, '');
	return diacretics ? removeDiacritics(input) : input;
};

//convert string to usable, complex regex
function MakeRegex(inputString, extraRegex) {
	return RegExp("^(?=.*\\b" + inputString.replace(/\W/g, " ").replace(/^ +| +$/g, "").RegEscape().replace(/('?s'?)\b/ig, "\($1\)?").replace(/ +/g, "s?\\b)(?=.*\\b") + "s?\\b)" + (extraRegex ? extraRegex : "") + ".*$", "i");
};

function toUni(input) {
	if (!What("UseUnicode")) return input;
	input = input.toString();
	var UniBoldItal = {
		"0" : "\uD835\uDFCE",
		"1" : "\uD835\uDFCF",
		"2" : "\uD835\uDFD0",
		"3" : "\uD835\uDFD1",
		"4" : "\uD835\uDFD2",
		"5" : "\uD835\uDFD3",
		"6" : "\uD835\uDFD4",
		"7" : "\uD835\uDFD5",
		"8" : "\uD835\uDFD6",
		"9" : "\uD835\uDFD7",
		"A" : "\uD835\uDE3C",
		"B" : "\uD835\uDE3D",
		"C" : "\uD835\uDE3E",
		"D" : "\uD835\uDE3F",
		"E" : "\uD835\uDE40",
		"F" : "\uD835\uDE41",
		"G" : "\uD835\uDE42",
		"H" : "\uD835\uDE43",
		"I" : "\uD835\uDE44",
		"J" : "\uD835\uDE45",
		"K" : "\uD835\uDE46",
		"L" : "\uD835\uDE47",
		"M" : "\uD835\uDE48",
		"N" : "\uD835\uDE49",
		"O" : "\uD835\uDE4A",
		"P" : "\uD835\uDE4B",
		"Q" : "\uD835\uDE4C",
		"R" : "\uD835\uDE4D",
		"S" : "\uD835\uDE4E",
		"T" : "\uD835\uDE4F",
		"U" : "\uD835\uDE50",
		"V" : "\uD835\uDE51",
		"W" : "\uD835\uDE52",
		"X" : "\uD835\uDE53",
		"Y" : "\uD835\uDE54",
		"Z" : "\uD835\uDE55",
		"a" : "\uD835\uDE56",
		"b" : "\uD835\uDE57",
		"c" : "\uD835\uDE58",
		"d" : "\uD835\uDE59",
		"e" : "\uD835\uDE5A",
		"f" : "\uD835\uDE5B",
		"g" : "\uD835\uDE5C",
		"h" : "\uD835\uDE5D",
		"i" : "\uD835\uDE5E",
		"j" : "\uD835\uDE5F",
		"k" : "\uD835\uDE60",
		"l" : "\uD835\uDE61",
		"m" : "\uD835\uDE62",
		"n" : "\uD835\uDE63",
		"o" : "\uD835\uDE64",
		"p" : "\uD835\uDE65",
		"q" : "\uD835\uDE66",
		"r" : "\uD835\uDE67",
		"s" : "\uD835\uDE68",
		"t" : "\uD835\uDE69",
		"u" : "\uD835\uDE6A",
		"v" : "\uD835\uDE6B",
		"w" : "\uD835\uDE6C",
		"x" : "\uD835\uDE6D",
		"y" : "\uD835\uDE6E",
		"z" : "\uD835\uDE6F"
	};
	var output = "";
	for (var i = 0; i < input.length; i++) {
		var tempChar = input.charAt(i);
		output += UniBoldItal[tempChar] ? UniBoldItal[tempChar] : tempChar;
	}
	return output;
};

function toSup(inString) {
	if (!What("UseUnicode")) return " ["+inString+"]";
	var doChar = function(aChar) {
		switch(aChar) {
			case "0" : return "\u2070";
			case "1" : return "\xB9";
			case "2" : return "\xB2";
			case "3" : return "\xB3";
			case "4" : return "\u2074";
			case "5" : return "\u2075";
			case "6" : return "\u2076";
			case "7" : return "\u2077";
			case "8" : return "\u2078";
			case "9" : return "\u2079";
			case "+" : return "\u207A";
			case "-" : return "\u207B";
			case "=" : return "\u207C";
			case "(" : return "\u207D";
			case ")" : return "\u207E";
			case "A" : if (useCaps) return "\u1D2C";
			case "a" : return "\u1D43";
			case "B" : if (useCaps) return "\u1D2E";
			case "b" : return "\u1D47";
			case "C" :
			case "c" : return "\u1D9C";
			case "D" : if (useCaps) return "\u1D30";
			case "d" : return "\u1D48";
			case "E" : if (useCaps) return "\u1D31";
			case "e" : return "\u1D49";
			case "F" :
			case "f" : return "\u1DA0";
			case "G" : if (useCaps) return "\u1D33";
			case "g" : return "\u1D4D";
			case "H" : if (useCaps) return "\u1D34";
			case "h" : return "\u02B0";
			case "I" : if (useCaps) return "\u1D35";
			case "i" : return "\u2071";
			case "J" : if (useCaps) return "\u1D36";
			case "j" : return "\u02B2";
			case "K" : if (useCaps) return "\u1D37";
			case "k" : return "\u1D4F";
			case "L" : if (useCaps) return "\u1D38";
			case "l" : return "\u02E1";
			case "M" : if (useCaps) return "\u1D39";
			case "m" : return "\u1D50";
			case "N" : if (useCaps) return "\u1D3A";
			case "n" : return "\u207F";
			case "O" : if (useCaps) return "\u1D3C";
			case "o" : return "\u1D52";
			case "Q" :
			case "P" : if (useCaps) return "\u1D3E";
			case "q" :
			case "p" : return "\u1D56";
			case "R" : if (useCaps) return "\u1D3F";
			case "r" : return "\u02B3";
			case "S" :
			case "s" : return "\u02E2";
			case "T" : if (useCaps) return "\u1D40";
			case "t" : return "\u1D57";
			case "U" : if (useCaps) return "\u1D41";
			case "u" : return "\u1D58";
			case "V" : if (useCaps) return "\u2C7D";
			case "v" : return "\u1D5B";
			case "W" : if (useCaps) return "\u1D42";
			case "w" : return "\u02B7";
			case "X" :
			case "x" : return "\u02E3";
			case "Y" :
			case "y" : return "\u02B8";
			case "Z" :
			case "z" : return "\u1DBB";
		}
		return aChar;
	};
	var input = inString.split(/\:|\ |\.|\,|\_/);
	var output = [];
	var useCaps = true;
	for (i = 0; i < input.length; i++) {
		useCaps = !useCaps || (/c|f|s|x|y|z/i).test(input[i]) ? false : true;
		output[i] = "";
		for (c = 0; c < input[i].length; c++) {
			output[i] += doChar(input[i].charAt(c));
		}
	}
	return output.join("-");
};

//a way to remove diacretics (leestekens)

/*
	Licensed under the Apache License, Version 2.0 (the "License");
	you may not use this file except in compliance with the License.
	You may obtain a copy of the License at

	http://www.apache.org/licenses/LICENSE-2.0

	Unless required by applicable law or agreed to in writing, software
	distributed under the License is distributed on an "AS IS" BASIS,
	WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	See the License for the specific language governing permissions and
	limitations under the License.
*/
var defaultDiacriticsRemovalMap = [
	{
		'base' : 'A',
		'letters' : '\u0041\u24B6\uFF21\u00C0\u00C1\u00C2\u1EA6\u1EA4\u1EAA\u1EA8\u00C3\u0100\u0102\u1EB0\u1EAE\u1EB4\u1EB2\u0226\u01E0\u00C4\u01DE\u1EA2\u00C5\u01FA\u01CD\u0200\u0202\u1EA0\u1EAC\u1EB6\u1E00\u0104\u023A\u2C6F'
	}, {
		'base' : 'AA',
		'letters' : '\uA732'
	}, {
		'base' : 'AE',
		'letters' : '\u00C6\u01FC\u01E2'
	}, {
		'base' : 'AO',
		'letters' : '\uA734'
	}, {
		'base' : 'AU',
		'letters' : '\uA736'
	}, {
		'base' : 'AV',
		'letters' : '\uA738\uA73A'
	}, {
		'base' : 'AY',
		'letters' : '\uA73C'
	}, {
		'base' : 'B',
		'letters' : '\u0042\u24B7\uFF22\u1E02\u1E04\u1E06\u0243\u0182\u0181'
	}, {
		'base' : 'C',
		'letters' : '\u0043\u24B8\uFF23\u0106\u0108\u010A\u010C\u00C7\u1E08\u0187\u023B\uA73E'
	}, {
		'base' : 'D',
		'letters' : '\u0044\u24B9\uFF24\u1E0A\u010E\u1E0C\u1E10\u1E12\u1E0E\u0110\u018B\u018A\u0189\uA779\u00D0'
	}, {
		'base' : 'DZ',
		'letters' : '\u01F1\u01C4'
	}, {
		'base' : 'Dz',
		'letters' : '\u01F2\u01C5'
	}, {
		'base' : 'E',
		'letters' : '\u0045\u24BA\uFF25\u00C8\u00C9\u00CA\u1EC0\u1EBE\u1EC4\u1EC2\u1EBC\u0112\u1E14\u1E16\u0114\u0116\u00CB\u1EBA\u011A\u0204\u0206\u1EB8\u1EC6\u0228\u1E1C\u0118\u1E18\u1E1A\u0190\u018E'
	}, {
		'base' : 'F',
		'letters' : '\u0046\u24BB\uFF26\u1E1E\u0191\uA77B'
	}, {
		'base' : 'G',
		'letters' : '\u0047\u24BC\uFF27\u01F4\u011C\u1E20\u011E\u0120\u01E6\u0122\u01E4\u0193\uA7A0\uA77D\uA77E'
	}, {
		'base' : 'H',
		'letters' : '\u0048\u24BD\uFF28\u0124\u1E22\u1E26\u021E\u1E24\u1E28\u1E2A\u0126\u2C67\u2C75\uA78D'
	}, {
		'base' : 'I',
		'letters' : '\u0049\u24BE\uFF29\u00CC\u00CD\u00CE\u0128\u012A\u012C\u0130\u00CF\u1E2E\u1EC8\u01CF\u0208\u020A\u1ECA\u012E\u1E2C\u0197'
	}, {
		'base' : 'J',
		'letters' : '\u004A\u24BF\uFF2A\u0134\u0248'
	}, {
		'base' : 'K',
		'letters' : '\u004B\u24C0\uFF2B\u1E30\u01E8\u1E32\u0136\u1E34\u0198\u2C69\uA740\uA742\uA744\uA7A2'
	}, {
		'base' : 'L',
		'letters' : '\u004C\u24C1\uFF2C\u013F\u0139\u013D\u1E36\u1E38\u013B\u1E3C\u1E3A\u0141\u023D\u2C62\u2C60\uA748\uA746\uA780'
	}, {
		'base' : 'LJ',
		'letters' : '\u01C7'
	}, {
		'base' : 'Lj',
		'letters' : '\u01C8'
	}, {
		'base' : 'M',
		'letters' : '\u004D\u24C2\uFF2D\u1E3E\u1E40\u1E42\u2C6E\u019C'
	}, {
		'base' : 'N',
		'letters' : '\u004E\u24C3\uFF2E\u01F8\u0143\u00D1\u1E44\u0147\u1E46\u0145\u1E4A\u1E48\u0220\u019D\uA790\uA7A4'
	}, {
		'base' : 'NJ',
		'letters' : '\u01CA'
	}, {
		'base' : 'Nj',
		'letters' : '\u01CB'
	}, {
		'base' : 'O',
		'letters' : '\u004F\u24C4\uFF2F\u00D2\u00D3\u00D4\u1ED2\u1ED0\u1ED6\u1ED4\u00D5\u1E4C\u022C\u1E4E\u014C\u1E50\u1E52\u014E\u022E\u0230\u00D6\u022A\u1ECE\u0150\u01D1\u020C\u020E\u01A0\u1EDC\u1EDA\u1EE0\u1EDE\u1EE2\u1ECC\u1ED8\u01EA\u01EC\u00D8\u01FE\u0186\u019F\uA74A\uA74C'
	}, {
		'base' : 'OI',
		'letters' : '\u01A2'
	}, {
		'base' : 'OO',
		'letters' : '\uA74E'
	}, {
		'base' : 'OU',
		'letters' : '\u0222'
	}, {
		'base' : 'OE',
		'letters' : '\u008C\u0152'
	}, {
		'base' : 'oe',
		'letters' : '\u009C\u0153'
	}, {
		'base' : 'P',
		'letters' : '\u0050\u24C5\uFF30\u1E54\u1E56\u01A4\u2C63\uA750\uA752\uA754'
	}, {
		'base' : 'Q',
		'letters' : '\u0051\u24C6\uFF31\uA756\uA758\u024A'
	}, {
		'base' : 'R',
		'letters' : '\u0052\u24C7\uFF32\u0154\u1E58\u0158\u0210\u0212\u1E5A\u1E5C\u0156\u1E5E\u024C\u2C64\uA75A\uA7A6\uA782'
	}, {
		'base' : 'S',
		'letters' : '\u0053\u24C8\uFF33\u1E9E\u015A\u1E64\u015C\u1E60\u0160\u1E66\u1E62\u1E68\u0218\u015E\u2C7E\uA7A8\uA784'
	}, {
		'base' : 'T',
		'letters' : '\u0054\u24C9\uFF34\u1E6A\u0164\u1E6C\u021A\u0162\u1E70\u1E6E\u0166\u01AC\u01AE\u023E\uA786'
	}, {
		'base' : 'TZ',
		'letters' : '\uA728'
	}, {
		'base' : 'U',
		'letters' : '\u0055\u24CA\uFF35\u00D9\u00DA\u00DB\u0168\u1E78\u016A\u1E7A\u016C\u00DC\u01DB\u01D7\u01D5\u01D9\u1EE6\u016E\u0170\u01D3\u0214\u0216\u01AF\u1EEA\u1EE8\u1EEE\u1EEC\u1EF0\u1EE4\u1E72\u0172\u1E76\u1E74\u0244'
	}, {
		'base' : 'V',
		'letters' : '\u0056\u24CB\uFF36\u1E7C\u1E7E\u01B2\uA75E\u0245'
	}, {
		'base' : 'VY',
		'letters' : '\uA760'
	}, {
		'base' : 'W',
		'letters' : '\u0057\u24CC\uFF37\u1E80\u1E82\u0174\u1E86\u1E84\u1E88\u2C72'
	}, {
		'base' : 'X',
		'letters' : '\u0058\u24CD\uFF38\u1E8A\u1E8C'
	}, {
		'base' : 'Y',
		'letters' : '\u0059\u24CE\uFF39\u1EF2\u00DD\u0176\u1EF8\u0232\u1E8E\u0178\u1EF6\u1EF4\u01B3\u024E\u1EFE'
	}, {
		'base' : 'Z',
		'letters' : '\u005A\u24CF\uFF3A\u0179\u1E90\u017B\u017D\u1E92\u1E94\u01B5\u0224\u2C7F\u2C6B\uA762'
	}, {
		'base' : 'a',
		'letters' : '\u0061\u24D0\uFF41\u1E9A\u00E0\u00E1\u00E2\u1EA7\u1EA5\u1EAB\u1EA9\u00E3\u0101\u0103\u1EB1\u1EAF\u1EB5\u1EB3\u0227\u01E1\u00E4\u01DF\u1EA3\u00E5\u01FB\u01CE\u0201\u0203\u1EA1\u1EAD\u1EB7\u1E01\u0105\u2C65\u0250'
	}, {
		'base' : 'aa',
		'letters' : '\uA733'
	}, {
		'base' : 'ae',
		'letters' : '\u00E6\u01FD\u01E3'
	}, {
		'base' : 'ao',
		'letters' : '\uA735'
	}, {
		'base' : 'au',
		'letters' : '\uA737'
	}, {
		'base' : 'av',
		'letters' : '\uA739\uA73B'
	}, {
		'base' : 'ay',
		'letters' : '\uA73D'
	}, {
		'base' : 'b',
		'letters' : '\u0062\u24D1\uFF42\u1E03\u1E05\u1E07\u0180\u0183\u0253'
	}, {
		'base' : 'c',
		'letters' : '\u0063\u24D2\uFF43\u0107\u0109\u010B\u010D\u00E7\u1E09\u0188\u023C\uA73F\u2184'
	}, {
		'base' : 'd',
		'letters' : '\u0064\u24D3\uFF44\u1E0B\u010F\u1E0D\u1E11\u1E13\u1E0F\u0111\u018C\u0256\u0257\uA77A'
	}, {
		'base' : 'dz',
		'letters' : '\u01F3\u01C6'
	}, {
		'base' : 'e',
		'letters' : '\u0065\u24D4\uFF45\u00E8\u00E9\u00EA\u1EC1\u1EBF\u1EC5\u1EC3\u1EBD\u0113\u1E15\u1E17\u0115\u0117\u00EB\u1EBB\u011B\u0205\u0207\u1EB9\u1EC7\u0229\u1E1D\u0119\u1E19\u1E1B\u0247\u025B\u01DD'
	}, {
		'base' : 'f',
		'letters' : '\u0066\u24D5\uFF46\u1E1F\u0192\uA77C'
	}, {
		'base' : 'g',
		'letters' : '\u0067\u24D6\uFF47\u01F5\u011D\u1E21\u011F\u0121\u01E7\u0123\u01E5\u0260\uA7A1\u1D79\uA77F'
	}, {
		'base' : 'h',
		'letters' : '\u0068\u24D7\uFF48\u0125\u1E23\u1E27\u021F\u1E25\u1E29\u1E2B\u1E96\u0127\u2C68\u2C76\u0265'
	}, {
		'base' : 'hv',
		'letters' : '\u0195'
	}, {
		'base' : 'i',
		'letters' : '\u0069\u24D8\uFF49\u00EC\u00ED\u00EE\u0129\u012B\u012D\u00EF\u1E2F\u1EC9\u01D0\u0209\u020B\u1ECB\u012F\u1E2D\u0268\u0131'
	}, {
		'base' : 'j',
		'letters' : '\u006A\u24D9\uFF4A\u0135\u01F0\u0249'
	}, {
		'base' : 'k',
		'letters' : '\u006B\u24DA\uFF4B\u1E31\u01E9\u1E33\u0137\u1E35\u0199\u2C6A\uA741\uA743\uA745\uA7A3'
	}, {
		'base' : 'l',
		'letters' : '\u006C\u24DB\uFF4C\u0140\u013A\u013E\u1E37\u1E39\u013C\u1E3D\u1E3B\u017F\u0142\u019A\u026B\u2C61\uA749\uA781\uA747'
	}, {
		'base' : 'lj',
		'letters' : '\u01C9'
	}, {
		'base' : 'm',
		'letters' : '\u006D\u24DC\uFF4D\u1E3F\u1E41\u1E43\u0271\u026F'
	}, {
		'base' : 'n',
		'letters' : '\u006E\u24DD\uFF4E\u01F9\u0144\u00F1\u1E45\u0148\u1E47\u0146\u1E4B\u1E49\u019E\u0272\u0149\uA791\uA7A5'
	}, {
		'base' : 'nj',
		'letters' : '\u01CC'
	}, {
		'base' : 'o',
		'letters' : '\u006F\u24DE\uFF4F\u00F2\u00F3\u00F4\u1ED3\u1ED1\u1ED7\u1ED5\u00F5\u1E4D\u022D\u1E4F\u014D\u1E51\u1E53\u014F\u022F\u0231\u00F6\u022B\u1ECF\u0151\u01D2\u020D\u020F\u01A1\u1EDD\u1EDB\u1EE1\u1EDF\u1EE3\u1ECD\u1ED9\u01EB\u01ED\u00F8\u01FF\u0254\uA74B\uA74D\u0275'
	}, {
		'base' : 'oi',
		'letters' : '\u01A3'
	}, {
		'base' : 'ou',
		'letters' : '\u0223'
	}, {
		'base' : 'oo',
		'letters' : '\uA74F'
	}, {
		'base' : 'p',
		'letters' : '\u0070\u24DF\uFF50\u1E55\u1E57\u01A5\u1D7D\uA751\uA753\uA755'
	}, {
		'base' : 'q',
		'letters' : '\u0071\u24E0\uFF51\u024B\uA757\uA759'
	}, {
		'base' : 'r',
		'letters' : '\u0072\u24E1\uFF52\u0155\u1E59\u0159\u0211\u0213\u1E5B\u1E5D\u0157\u1E5F\u024D\u027D\uA75B\uA7A7\uA783'
	}, {
		'base' : 's',
		'letters' : '\u0073\u24E2\uFF53\u00DF\u015B\u1E65\u015D\u1E61\u0161\u1E67\u1E63\u1E69\u0219\u015F\u023F\uA7A9\uA785\u1E9B'
	}, {
		'base' : 't',
		'letters' : '\u0074\u24E3\uFF54\u1E6B\u1E97\u0165\u1E6D\u021B\u0163\u1E71\u1E6F\u0167\u01AD\u0288\u2C66\uA787'
	}, {
		'base' : 'tz',
		'letters' : '\uA729'
	}, {
		'base' : 'u',
		'letters' : '\u0075\u24E4\uFF55\u00F9\u00FA\u00FB\u0169\u1E79\u016B\u1E7B\u016D\u00FC\u01DC\u01D8\u01D6\u01DA\u1EE7\u016F\u0171\u01D4\u0215\u0217\u01B0\u1EEB\u1EE9\u1EEF\u1EED\u1EF1\u1EE5\u1E73\u0173\u1E77\u1E75\u0289'
	}, {
		'base' : 'v',
		'letters' : '\u0076\u24E5\uFF56\u1E7D\u1E7F\u028B\uA75F\u028C'
	}, {
		'base' : 'vy',
		'letters' : '\uA761'
	}, {
		'base' : 'w',
		'letters' : '\u0077\u24E6\uFF57\u1E81\u1E83\u0175\u1E87\u1E85\u1E98\u1E89\u2C73'
	}, {
		'base' : 'x',
		'letters' : '\u0078\u24E7\uFF58\u1E8B\u1E8D'
	}, {
		'base' : 'y',
		'letters' : '\u0079\u24E8\uFF59\u1EF3\u00FD\u0177\u1EF9\u0233\u1E8F\u00FF\u1EF7\u1E99\u1EF5\u01B4\u024F\u1EFF'
	}, {
		'base' : 'z',
		'letters' : '\u007A\u24E9\uFF5A\u017A\u1E91\u017C\u017E\u1E93\u1E95\u01B6\u0225\u0240\u2C6C\uA763'
	}
];
var diacriticsMap = {};
for (var i = 0; i < defaultDiacriticsRemovalMap.length; i++) {
	var letters = defaultDiacriticsRemovalMap[i].letters;
	for (var j = 0; j < letters.length; j++) {
		diacriticsMap[letters[j]] = defaultDiacriticsRemovalMap[i].base;
	}
};

// "what?" version ... http://jsperf.com/diacritics/12
function removeDiacritics(str) {
	return str.replace(/[^\u0000-\u007E]/g, function (a) {
		return diacriticsMap[a] || a;
	});
};

// a way to change an attribute of a particular itemID element in a dialog.
function setDialogName(dialogElem, itemID, attrNm, setAttr) {
	if (dialogElem.description && dialogElem.description.elements) dialogElem = dialogElem.description.elements;
	for (var i = 0; i < dialogElem.length; i++) {
		var tElem = dialogElem[i];
		if (tElem.item_id && tElem.item_id === itemID) {
			tElem[attrNm] = setAttr;
			return true;
		} else if (tElem.elements) {
			var isSet = setDialogName(tElem.elements, itemID, attrNm, setAttr);
			if (isSet) return true;
		};
	};
};

//return a random number between 1 and the input 'die'
function RollD(die) {
    return Math.floor(Math.random() * die) + 1;
};

//set the other checkbox Dis/Adv off when clicking this field (on MouseUp)
function SetDisAdv() {
	var Adv = (/Adv$/).test(event.target.name);
	this.getField(event.target.name.replace(Adv ? "Adv" : "Dis", Adv ? "Dis" : "Adv")).value = "Off";
};

//see if two strings don't differ too much in length
function similarLen(str1, str2) {
	return Math.abs(str1.length - str2.length) < 5 || Math.abs(str1.length, str2.length) / Math.max(str1.length, str2.length) < 0.2;
};

//test if a template is visible or not
function isTemplVis(tempNm, returnPrefix) {
	if (!BookMarkList[tempNm] || !tDoc.getField(BookMarkList[tempNm])) return false;
	var isVisible = false;
	var multiTemp = TemplatesWithExtras.indexOf(tempNm) !== -1;
	var firstTempl = "";
	if (!multiTemp) {
		var tempPage = tDoc.getField(BookMarkList[tempNm]).page;
		isVisible = (isArray(tempPage) ? Math.max.apply(Math, tempPage) : tempPage) !== -1;
	} else {
		isVisible = What("Template.extras." + tempNm) !== "";
		firstTempl = What("Template.extras." + tempNm).split(",")[1];
	};
	if (!isVisible && tempNm === "SSfront") {
		isVisible = isTemplVis("SSmore", returnPrefix);
		if (isArray(isVisible)) {
			firstTempl = isVisible[1];
			isVisible = isVisible[0];
		};
	};
	return returnPrefix && firstTempl ? [isVisible, firstTempl] : isVisible;
};

// A way to return a new, fresh object
function newObj(inObj) {
	return eval(inObj.toSource());
};

// Returns the template prefix, or true if not the template, or an empty string if rEmpty is true
function getTemplPre(tName, templ, rEmpty) {
	templ = templ + ".";
	return tName.indexOf(templ) === -1 ? (rEmpty ? "" : true) : tName.substring(0, tName.indexOf(templ)) + templ;
};

// Change a number to a 2-spaced semantic versioning scheme (13.011 -> 13.1.10)
function nmbrToSemanticVersion(inNmbr) {
	inNmbr = parseFloat(inNmbr);
	if (isNaN(inNmbr)) return 0;
	var strV = inNmbr.toString().split(".");
	var versStr = [strV[0]];
	if (strV[1]) {
		for (var i = 0; i < strV[1].length; i++) {
			var partI2 = strV[1][i] + (strV[1][i+1] ? strV[1][i+1] : 0);
			versStr.push(Number(partI2));
			i++
		};
	};
	var theSemV = versStr.join(".").toString();
	if (versStr.length < 3) {
		for (var i = versStr.length; i < 3; i++) theSemV += ".0";
	};
	return theSemV;
};

// Change a semantic versioning scheme to a number (13.1.10 -> 13.011)
function semVersToNmbr(inSemV) {
	if (!isNaN(inSemV)) return Number(inSemV);
	if (isNaN(parseFloat(inSemV))) {
		if (!(/\d/).test(inSemV)) return 0;
		inSemV = inSemV.replace(/.*?(\d.*)/, "$1");
	};
	var strV = inSemV.toString().split(".");
	var nmbrStr = [strV[0], ""];
	if (strV[1]) {
		for (var i = 1; i < strV.length; i++) {
			var nmbrAdd = parseFloat(strV[i]);
			if (isNaN(nmbrAdd)) continue;
			nmbrStr[1] += ("0" + nmbrAdd).slice(-2);
		};
	};
	if (strV.length) nmbrStr.push(strV.join(""));
	var nmbr = parseFloat(nmbrStr.join("."));
	return isNaN(nmbr) ? 0 : nmbr;
};

// Stop calculations and drawing of fields in the whole PDF to speed up changes
// give a namedStop to make sure that it only can be started again with the same namedStop (and if no other namedStops are present)
function calcStop(noSheetUpdate) {
	noSheetUpdate = noSheetUpdate !== undefined ? noSheetUpdate : !IsNotReset || !IsNotImport;
	app.calculate = false;
	tDoc.calculate = false;
	tDoc.delay = true;
	if (!calcStartSet) calcStartSet = app.setTimeOut("calcCont(" + noSheetUpdate + ", true);", 250);
};

// function to start the calculations of the PDF again
function calcCont(noSheetUpdate, viaTimeOut) {
	if (!noSheetUpdate) UpdateSheetWeapons(); // first recalculate the weapons if set to do so, before restarting any calculations
	if (calcStartSet) {
		app.clearTimeOut(calcStartSet);
		calcStartSet = false;
	}
	var currentDirty = tDoc.dirty;
	app.calculate = true;
	tDoc.calculate = true;
	tDoc.delay = false;
	tDoc.calculateNow();
	tDoc.dirty = currentDirty;
	thermoStop();
	if (!noSheetUpdate) {
		UpdateSheetDisplay();
		thermoStop();
	} else if (viaTimeOut) {
		CurrentUpdates = {types : []};
	}
};

// function to find the value (date) of a source
function sourceDate(srcArr) {
	if (!srcArr) return 0;
	srcArr = !isArray(srcArr) ? [srcArr] : [].concat.apply([], srcArr);
	var dateArr = [0];
	for (var i = 0; i < srcArr.length; i++) {
		var src = srcArr[i];
		if (!SourceList[src] || CurrentSources.globalExcl.indexOf(src) !== -1) continue;
		var srcDate = src === "SRD" ? 1 : src === "HB" ? 90001231 : SourceList[src].date ? Number(SourceList[src].date.replace(/\D/g, "")) : 'stop';
		if (!isNaN(srcDate)) dateArr.push(srcDate);
	};
	return Math.max.apply(Math, dateArr);
};

function MakeDocName() {
	return "MorePurpleMoreBetter's D&D 5th edition " + (tDoc.info.SpellsOnly ? "Complete " + tDoc.info.SpellsOnly.capitalize() + " Spell Sheet" : (tDoc.info.AdvLogOnly ? "Adventure Logsheet" : "Character Record Sheet")) + " v" + semVers + " (" + tDoc.info.SheetType + ")";
};

function MakeButtons() {
	CreateIcons();
	try {
		if (!tDoc.info.SpellsOnly) {
			app.addToolButton({
				cName : "LayoutButton",
				cExec : minVer ? "MakeAdvLogMenu_AdvLogOptions(true);" : "MakePagesMenu(); PagesOptions();",
				oIcon : allIcons.layout,
				cTooltext : toUni("Set Pages Layout") + "\nSelect which pages are visible in the sheet and set the different lay-out options on those pages. Some pages might offer extra options on the page itself.\n\nNote that you can have multiple instances of the following pages:\n   \u2022  Companion page;\n   \u2022  Notes page;\n   \u2022  Wild Shapes page;\n   \u2022  Spell Sheet page.;\n   \u2022  Adventure Logsheet.\n\nIf you add more pages or you hide/show the pages many times, the file size might increase.",
				nPos : 0,
				cLabel : "Layout"
			});
		}
		if (!minVer) {
			app.addToolButton({
				cName : "ResetButton",
				cExec : "ResetAll();",
				oIcon : allIcons.reset,
				cTooltext : toUni("Reset") + "\nReset the entire sheet and all form fields to their initial value.",
				nPos : 1,
				cLabel : "Reset"
			});
		}
		if (!tDoc.info.AdvLogOnly) {
			app.addToolButton({
				cName : "ImportExportButton",
				cExec : "ImportExport_Button();",
				oIcon : allIcons.import,
				cTooltext :  minVer ? toUni("Add Custom Script") + "\nAdd a script to add new spells, modify spells and more, see FAQ." : toUni("Import / Export") + "\n \u2022  Import all the information from an old sheet directly;\n \u2022  Add custom script, see FAQ;\n \u2022  Alternatively, you can import or export data with the .xfdf file format. This method is depreciated, but might still be interesting if you only want to import the equipment sections or only the description sections.\n\nThe description sections include the top of first page, background page, notes, and companion description.",
				nPos : 2,
				cLabel : "Import"
			});
			app.addToolButton({
				cName : "SourcesButton",
				cExec : "resourceDecisionDialog();",
				oIcon : allIcons.sources,
				cTooltext : toUni("Select Sources") + "\nOpen a dialogue where you can select which sourcebooks and materials the sheet is allowed to use and which it has to excluded from the automation." + (this.info.SpellsOnly ? "\n\nHere you can select which sources are used for the spells or even exclude certain spells or spell schools. After you have set this, you will have to manually re-generate the spell sheet using the 'Spells' button/bookmark." : "\n\nHere you can make the sheet include all Unearthed Arcana material or even have the sheet exclude certain classes, races, spells, etc. etc.\n\nYou are advised to set the sources before filling out the sheet as it may cause certain fields to be reset."),
				nPos : 3,
				cLabel : "Sources"
			});
		}

		if (!tDoc.info.SpellsOnly) {
			app.addToolButton({
				cName : "SetTextOptionsButton",
				cExec : "MakeTextMenu_TextOptions();",
				oIcon : allIcons.textsize,
				cTooltext : toUni("Text Options") + "\nWith this button you can:\n   \u2022  Set the font of all fillable fields" + "\n   \u2022  Set the font size of fields with multiple lines;\n   \u2022  Hide\/show the text lines on all pages" + (!typePF ? "" : ";\n   \u2022  Switch between boxes or lines for single-line fields."),
				nPos : 4,
				cLabel : "Text"
			});
		}

		if (!minVer) {
			app.addToolButton({
				cName : "ClassesButton",
				cExec : "SelectClass();",
				oIcon : allIcons.classes,
				cTooltext : toUni("Set Character Classes") + "\nOpen a pop-up dialogue where you can set the classes, subclasses, and levels the character has.\n\nYou get drop-down boxes for selecting a class and its subclass, and can test what text you enter is being recognized as what class/subclass.",
				nPos : 5,
				cLabel : "Class"
			});
			app.addToolButton({
				cName : "SetToManualButton",
				cExec : "SetToManual_Button();",
				oIcon : allIcons.automanual,
				cTooltext : toUni("Auto / Manual") + "\nSwitch between manual or automatic calculation\/implementation of:\n   \u2022  Attacks;\n   \u2022  Background;\n   \u2022  Class;\n   \u2022  Feats;\n   \u2022  Race.",
				nPos : 6,
				cLabel : "Manual"
			});
			app.addToolButton({
				cName : "WeightToCalcButton",
				cExec : "WeightToCalc_Button();",
				oIcon : allIcons.weight,
				cTooltext : toUni("Weight Calculation") + "\nOpen the Total Weight dialogue where you can choose what is and what is not counted towards the Total Weight on the second page.\n\nIn the dialogue you can also select which encumbrance rules to use.",
				nPos : 7,
				cLabel : "Weight"
			});
			app.addToolButton({
				cName : "AbilityScoresButton",
				cExec : "AbilityScores_Button();",
				oIcon : allIcons.scores,
				cTooltext : toUni("Ability Scores") + "\nOpen the Ability Scores dialog where you can set them using their separate parts, see the Point Buy value, and apply a magic item that overrides.\n\nThis dialog also gives the option to add Honor/Sanity.",
				nPos : 8,
				cLabel : "Scores"
			});
			app.addToolButton({
				cName : "BlueTextButton",
				cExec : "ToggleBlueText();",
				oIcon : allIcons.modifiers,
				cTooltext : toUni("Modifier Fields") + "\nHide\/show fields where you can manually add modifiers for:\n   \u2022  Ability save DC;\n   \u2022  Attacks to hit and damage bonusses;\n   \u2022  Attacks damage die;\n   \u2022  Proficiency bonus, or the use of proficiency dice;\n   \u2022  Saves;\n   \u2022  Skills, with Jack of All Trades and Remarkable Athlete;\n   \u2022  Number of spell slots;\n   \u2022  Initiative;\n   \u2022  Carrying capacity multiplier;\n   \u2022  Weights of armor, shield, weapons, and ammunition.\n\nThese are the so-called \"blue text fields\" and they won't print, even when they are visible.",
				cMarked : "event.rc = CurrentVars.bluetxt;",
				nPos : 9,
				cLabel : "Mods"
			});
		}

		if (!tDoc.info.AdvLogOnly) {
			app.addToolButton({
				cName : "SpellsButton",
				cExec : "MakeSpellMenu_SpellOptions();",
				oIcon : allIcons.spells,
				cTooltext : toUni("Spells Options") + "\nGet a menu with the options to:\n   \u2022  Create a Spell Sheet;\n   \u2022  Select the sources for that Spell Sheet;\n   \u2022  Delete an existing Spell Sheet;" + (!typePF ? "\n   \u2022  Set the visibility of the Spell Slot check boxes to the Spell Sheet, the Limited Feature section, or both;" : "") + "\n   \u2022  Set the sheet to use Spell Points instead of Spell Slots.\n\nGenerating a Spell Sheet will involve filling out a dialog for each spellcasting class/race/feat. After that you can select which is included in the Spell Sheet and in what order.", //\n\nAlternatively you can create an empty Spell Sheet which you can fill out manually.",
				nPos : 10,
				cLabel : "Spells"
			});
		}

		if (!minVer) {
			app.addToolButton({
				cName : "AdventureLeagueButton",
				cExec : "MakeAdventureLeagueMenu(); AdventureLeagueOptions();",
				oIcon : allIcons.league,
				cTooltext : toUni("Adventurers League") + "\nHide\/show fields for Adventurers League play:\n   \u2022  'DCI' on the 1st page;\n   \u2022  'Faction Rank' and 'Renown' on the Background page;\n   \u2022  Sets HP value on the 1st page to 'always fixed';" + (typePF ? "" : "\n   \u2022  Removes the action options from the DMG on the 1st page;") + "\n   \u2022  Adds asterisks for action options taken from the DMG in the reference section.\n\nThis button can also make the \"Adventurers Logsheet\" visible if it isn't already.\n\nNote that this Character Generator\/Sheet offers some options that are not legal in Adventurer's League play regardless of enabling this button or not.",
				cMarked : "event.rc = Number(tDoc.getField('League Remember').submitName);",
				nPos : 11,
				cLabel : "League"
			});
			app.addToolButton({
				cName : "PrintButton",
				cExec : "PrintButton();",
				oIcon : allIcons.print,
				cTooltext : toUni("Print") + "\nSelect what pages you want to print and open the print dialog.\n\nThe pages you select will be remembered for the next time you press this button.\n\nYou also get an option to hide all fields on the sheet before printing.",
				nPos : 12,
				cLabel : "Print"
			});
		};
		app.addToolButton({
			cName : "MakeMobileReadyButton",
			cExec : "MakeMobileReady();",
			oIcon : allIcons.tablet,
			cTooltext : toUni("Flatten") + "\nSwitch to or from a version of the sheet that is compatible with Acrobat Reader for mobile devices.\nThis flattens all form fields and hides non-printable ones to make the sheet more usable on a phone or tablet.\n\nThe fields used during normal play will stay editable:\n   \u2022  1st page: health, attacks, actions, adv.\/disadv., etc.;\n   \u2022  2nd page: equipment and proficiencies;\n   \u2022  3rd-6th page: all except buttons and portrait\/symbol.",
			cMarked : "event.rc = CurrentVars.mobileset ? CurrentVars.mobileset.active : false;",
			nPos : 13,
			cLabel : "Flatten"
		});
		app.addToolButton({
			cName : "SetUnitDecimalsButton",
			cExec : "SetUnitDecimals_Button();",
			oIcon : allIcons.unitsystem,
			cTooltext : toUni("Unit System") + "\nOpen a dialog where you can select the following:\n   \u2022  Unit system: metric or imperial\n   \u2022  Decimal separator: dot or comma.",
			nPos : 14,
			cLabel : "Units"
		});
		app.addToolButton({
			cName : "ColorButton",
			cExec : "MakeColorMenu(); ColoryOptions();",
			oIcon : allIcons.colors,
			cTooltext : !typePF ? toUni("Set Color Theme") + "\nControl the color theme of the sheet in the following ways:\n   \u2022  Color of the Headers;\n   \u2022  Color of the Dragon Heads;" + (minVer ? "" : "\n   \u2022  Color of the HP Dragons;\n   \u2022  Color of the Ability Save DCs;") + "\n   \u2022  Color of the form field highlighting.\n\nNote that the color of the highlighting might affect other PDFs you currently have opened. It will revert to normal once you close this sheet, but will be applied again once you open this sheet." : toUni("Set Highlighting Color") + "\nSet the color of the form field highlighting.\n\nYou can select several colors, the adobe default color, or turn form field highlighting off.\n\nNote that the color of the highlighting might affect other PDFs you currently have opened. It will revert to normal once you close this sheet, but will be applied again once you open this sheet.",
			nPos : 15,
			cLabel : "Color"
		});
		app.addToolButton({
			cName : "FAQButton",
			cExec : "getFAQ();",
			oIcon : allIcons.faq,
			cTooltext : toUni("FAQ") + "\nOpen the frequently asked questions pdf.\n\nThere you can find information on how to add custom code to the sheet, like homebrew races\/weapons\/feats\/etc.",
			nPos : 16,
			cLabel : "FAQ"
		});
	} catch (err) {
		app.addToolButton({
			cName : "TempButton",
			cExec : "",
			cLabel : "Just to make it appear"
		});
		app.removeToolButton({
			cName : "TempButton"
		});
	}
};

function OpeningStatement() {
	var reminders = Number(tDoc.getField("Opening Remember").submitName);
	if (!app.viewerVersion || !reminders || (app.viewerVersion < 15 && reminders <= 3)) {
		CurrentSources.globalExcl = ["UA:TMC"];
		var oldVerAlert = app.alert({
			nIcon : 0,
			cTitle : "Please update your Adobe Acrobat",
			cMsg : "This version of Adobe Acrobat is not supported for use with MPMB's D&D 5e Character Tools. You need at least Adobe Acrobat DC (Reader, Pro, or Standard) to use this PDF's full automation. Please know that if you continue to use the sheet with this outdated version of Adobe Acrobat, some features will not work (correctly) and others might produce errors (e.g. the Source Selection and the Mystic class).\n\nDo you want to close this pdf and visit the Adobe website where you can download the latest version of Adobe Acrobat Reader for free (https://get.adobe.com/reader/)?\n\nPlease understand that if you choose 'No', there will be no support if anything doesn't work.\n\n" + (!reminders ? "As you aren't using Adobe Acrobat to view this PDF, you will not be redirected to the website to download Adobe Acrobat Reader for free. Please go there manually.\n\nhttps://get.adobe.com/reader/" : reminders == 1 ? "You will get this warning again the next two times that you open this sheet in an unsupported version of Adobe Acrobat." : reminders == 2 ? "You will get this warning again the next time you open this sheet in an unsupported version of Adobe Acrobat." : "This is the last time this pdf character sheet shows this warning."),
			nType : 2
		});
		if (oldVerAlert === 4) {
			app.launchURL("https://get.adobe.com/reader/", true);
			tDoc.closeDoc();
			return;
		};
		tDoc.getField("Opening Remember").submitName += 1;
	};
	if (What("Opening Remember") === "No") {
		this.dirty = false;
		this.pane = "bookmarks"; //open the bookmarks so that on the first opening people can see its existance
		var sheetTitle = "MorePurpleMoreBetter's " + (tDoc.info.SpellsOnly ? "Complete " + tDoc.info.SpellsOnly.capitalize() + " Spell Sheet" : (tDoc.info.AdvLogOnly ? "Adventure Logsheet" : "Character Record Sheet")) + " (" + tDoc.info.SheetType + ") v" + semVers;
		var Text = "[Can't see the 'OK' button at the bottom? Use ENTER to close this dialog]\n\n";
		Text += "Welcome to " + toUni(sheetTitle);
		Text += " (get the latest version using the bookmark).";
		Text += patreonVersion ? "" : "\n\n" + toUni("Only SRD") + ": This sheet is only allowed to contain content from the System Reference Document and no other Wizards of the Coast publications, as they are protected by copyright. If you want to get more content to use with the sheet, see the \"Add Extra Materials\" bookmark.";
		Text += "\n\n" + toUni("Tooltips") + ": This sheet makes extensive use of tooltips (mouseover texts). Hover your cursor over a field to find how you can enter things into the field, reference to the source, explanatory text, or even a list of options your selection offers you.";
		Text += "\n\n" + toUni("Functions") + ": Check out the buttons in the \'JavaScript Window\'-toolbar and the bookmarks. Hover your cursor over a button in the \'JavaScript Window\'-toolbar to see what it does.";
		Text += minVer ? "" : "\n\n" + toUni("Modifiers") + ": With the \"Mods\" button you can add modifiers to the calculated values.";
		Text += tDoc.info.SpellsOnly ? "" : "\n\n" + toUni("Layout") + ": With the \"Layout\" button you can hide, add, and remove certain pages.";
		Text += tDoc.info.AdvLogOnly ? "" : "\n\n" + toUni("Spells") + ": With the \"Spells\" button you can have the sheet generate a spell sheet based on your character, or manually create one.";
		Text += !typePF ? "\n\n" + toUni("Color Options") + ": With the \"Color\" button or the top right logo on the first page, you can change the graphical elements of this sheet to 11 different colors." : "";
		Text += tDoc.info.AdvLogOnly ? "" : "\n\n" + toUni("Sources") + ": With the \"Sources\" button you can set which resources you want the sheet to use, including most Unearthed Arcana material (e.g. the Revised Ranger). You can also get more using the \"Get Additional Content\" bookmark, like the Gunslinger, Blood Hunter, College of the Maestro by Matthew Mercer, and many others...";
		Text += "\n\nHave fun with the sheet and the adventures you embark on with its help!\n - MorePurpleMoreBetter - ";
		var oCk = {
			bInitialValue : true,
			bAfterValue : false
		};
		app.alert({
			cMsg : Text,
			nIcon : 3,
			cTitle : "Before you get started with MPMB's " + (tDoc.info.SpellsOnly ? "Complete Spell Sheet" : (tDoc.info.AdvLogOnly ? "Adventure Logsheet" : "Character Record Sheet")),
			oCheckbox : oCk
		});
		if (oCk.bAfterValue) {
			Value("Opening Remember", "Yes");
		};
		if (!minVer && CurrentSources.firstTime && app.viewerVersion >= 15) resourceDecisionDialog(true);
	};
	if (tDoc.getField("SaveIMG.Patreon").submitName !== "") {
		OpeningStatementVar = app.setTimeOut("PatreonStatement();", 66000);
	};
};

function ResetTooltips() {
	var TooltipArray = [
		"Proficiency Armor Light",
		"Proficiency Armor Medium",
		"Proficiency Armor Heavy",
		"Proficiency Shields",
		"Proficiency Weapon Simple",
		"Proficiency Weapon Martial",
		"Proficiency Weapon Other",
		"AC Misc Mod 1 Description",
		"AC Misc Mod 2 Description",
		"Speed",
		"Speed encumbered",
		"Highlighting",
		"Saving Throw advantages / disadvantages",
		"Vision"
	];
	var clearSubmits = [
		"All ST Bonus",
		"Init Bonus",
		"Passive Perception Bonus",
		"All Skills Bonus",
		"Spell DC 1 Bonus",
		"Spell DC 2 Bonus"
	]
	var clearCalcs = [];
	for (var i = 1; i <= FieldNumbers.langstools; i++) {
		TooltipArray.push("Tool " + i);
		TooltipArray.push("Language " + i);
	}
	for (i = 1; i <= FieldNumbers.actions; i++) {
		TooltipArray.push("Bonus Action " + i);
		TooltipArray.push("Reaction " + i);
	}
	for (i = 1; i <= FieldNumbers.trueactions; i++) {
		TooltipArray.push("Action " + i);
	}
	for (i = 0; i <= AbilityScores.abbreviations.length; i++) {
		TooltipArray.push((i === AbilityScores.abbreviations.length ? "HoS" : AbilityScores.abbreviations[i]) + " ST Prof");
		clearSubmits.push((i === AbilityScores.abbreviations.length ? "HoS" : AbilityScores.abbreviations[i]) + " ST Bonus");
	}
	for (i = 1; i <= FieldNumbers.limfea; i++) {
		TooltipArray.push("Limited Feature " + i);
		clearCalcs.push("Limited Feature Max Usages " + i);
	}
	for (i = 1; i <= 6; i++) {
		TooltipArray.push("Resistance Damage Type " + i);
	}
	for (i = 1; i <= FieldNumbers.attacks; i++) {
		var fld = "BlueText.Attack." + i;
		clearSubmits.push(fld + ".To Hit Bonus");
		clearSubmits.push(fld + ".Damage Bonus");
		clearSubmits.push(fld + ".Damage Die");
	}
	for (i = 1; i <= FieldNumbers.magicitems; i++) {
		clearSubmits.push("Extra.Magic Item Attuned " + i);
	}

	//remove the tooltips from every fieldname in the array
	for (i = 0; i < TooltipArray.length; i++) {
		AddTooltip(TooltipArray[i], "", "");
	};
	for (i = 0; i < clearSubmits.length; i++) {
		AddTooltip(clearSubmits[i], undefined, "");
	};
	for (i = 0; i < clearCalcs.length; i++) {
		AddTooltip(clearCalcs[i], undefined, "");
		tDoc.getField(clearCalcs[i]).setAction("Calculate", "");
	};
	AddTooltip("Equipment.menu", "Click here to add equipment to the adventuring gear section, or to reset it (this button does not print).\n\nIt is recommended to pick a pack first before you add any background's items.");
	AddTooltip("Background Extra", 'First fill out a background in the field to the left.\n\nOnce a background is recognized that offers additional options, those additional options will be displayed here. For example, the "Origin" for the "Outlander" background.');
	SetHPTooltip("reset");
	setSkillTooltips(true);
	correctMIattunedVisibility();
};

function AddResistance(input, tooltip, replaceThis, replaceMatch) {
	var useful = undefined;
	var usefulreplace = undefined;
	var inputCl = clean(input, false, true);
	var replaceThisString = replaceThis ? clean(replaceThis, false, true) : "";
	if (DamageTypes[inputCl.toLowerCase()]) {
		useful = DamageTypes[inputCl.toLowerCase()].index;
	};
	if (replaceThis && DamageTypes[replaceThisString.toLowerCase()]) {
		usefulreplace = DamageTypes[replaceThisString.toLowerCase()].index;
	};
	var tooltipString = tooltip ? formatMultiList("\"" + inputCl + "\" resistance was gained from:", tooltip) : "";
	var doReplace = false;
	var testRegex = useful !== undefined ? /does_not_match/ : MakeRegex(inputCl);
	for (var n = 1; n <= 2; n++) {
		for (var k = 1; k <= 6; k++) {
			var next = tDoc.getField("Resistance Damage Type " + k);
			if (n === 1 && (next.currentValueIndices === useful || next.value == inputCl || next.submitName == inputCl || ((testRegex).test(next.value) && similarLen(next.value, inputCl)))) {
				if (!replaceThis) {
					next.userName = tooltipString;
					next.submitName = inputCl;
				};
				return;
			} else if (n === 1 && replaceThis && (next.submitName == replaceThisString || next.value == replaceThisString || (usefulreplace !== undefined && next.currentValueIndices === usefulreplace) || (replaceMatch && replaceThisString.toLowerCase().indexOf(next.value.toLowerCase()) !== -1))) {
				doReplace = k;
			} else if (n === 2 && (doReplace === k || (!doReplace && clean(next.value) === ""))) {
				if (useful !== undefined) {
					next.currentValueIndices = useful;
				} else {
					next.value = inputCl;
				};
				if (!replaceThis) {
					next.submitName = next.value;
					next.userName = tooltipString;
				};
				break;
			};
		};
	};
};

function RemoveResistance(Input) {
	var useStr = clean(Input, false, true);
	var useReg = MakeRegex(useStr);
	for (var k = 1; k <= 6; k++) {
		var fld = "Resistance Damage Type " + k;
		var ResFld = What(fld);
		if (ResFld === useStr | ((useReg).test(ResFld) && similarLen(ResFld, useStr))) {
			DeleteItemType("Resistance Damage Type ", k, 6);
			return;
		} else if (How(fld) == useStr) {
			AddTooltip(fld, "", "");
			return;
		};
	};
};

function AddDmgType(Field, Input) {
	var useful = !Input ? 0 : (DamageTypes[Input.toLowerCase()] ? DamageTypes[Input.toLowerCase()].index : Input);
	PickDropdown(Field, useful);
};

// Toggle between text lines toggle = true to hide the lines and toggle = false to show the lines
function ToggleWhiteout(toggle) {
	if (CurrentVars.whiteout == undefined) CurrentVars.whiteout = tDoc.getField("Whiteout.Standard.0").display == display.visible;

	if (toggle !== undefined && ((toggle && CurrentVars.whiteout) || (!toggle && !CurrentVars.whiteout))) return;
	var nowWhat = !CurrentVars.whiteout; // Toggle the current state

	// Start progress bar and stop calculations
	var thermoTxt = thermoM((nowWhat ? "Hide" : "Show") + " the text lines for mult-line fields...");
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	// Add the fields for all the template pages into an array
	var compTemps = What("Template.extras.AScomp").split(","); // so include the ""
	var noteTemps = What("Template.extras.ASnotes").split(",").splice(1);
	var wildTemps = What("Template.extras.WSfront").split(",").splice(1);
	var logTemps = What("Template.extras.ALlog").split(",").splice(1);
	var templateA = compTemps.concat(noteTemps).concat(wildTemps).concat(logTemps);

	// Show/hide the whiteout fields as per the array
	for (var i = 0; i < templateA.length; i++) {
		var whiteFld = templateA[i] + "Whiteout";
		if (nowWhat) {
			Show(whiteFld);
		} else {
			Hide(whiteFld);
		}
		thermoM((i+1)/(templateA.length+2)); // Increment the progress bar
	};

	CurrentVars.whiteout = nowWhat;
	SetStringifieds("vars"); // Save the settings to a field

	// Show/hide the whiteout field on page 3 depending on the state of the layers
	LayerVisibilityOptions();

	thermoM(thermoTxt, true); // Stop progress bar
};

function ResetAll(GoOn, noTempl) {
	var oCk = {
		cMsg : "Also delete all imported scripts, both files and manual input, as well as the source selection",
		bInitialValue : false,
		bAfterValue : false
	};
	var ResetDialog = {
		cTitle : "Reset the whole sheet",
		cMsg : "Are you sure you want to reset all fields and functions to their initial value?\n\nThis will undo any changes you have made, including page layout and imported images.\n\nThis cannot be undone!",
		nIcon : 1, //Warning
		nType : 2, //Yes, No
		oCheckbox : oCk
	};
	if (!GoOn && app.alert(ResetDialog) !== 4) return;
	var keepImports = !oCk.bAfterValue;
	if (keepImports) {
		var userScriptString = What("User Script");
	};
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Resetting the sheet" + (GoOn ? ' "' + tDoc.documentFileName + '"' : '') + "...");
	calcStop(true);
	IsNotReset = false;

	//make a variable of the current state of location columns in the equipment sections
	var locColumns = What("Gear Location Remember").split(",");

	MakeMobileReady(false); // Undo flatten, if needed

	thermoM(1/9); //increment the progress dialog's progress

	//delete any extra templates and make any template that is invisible, visible
	RemoveSpellSheets(); //first do all the Spell Sheets
	var defaultShowTempl = ["ASfront", "ASbackgr", "PRsheet"];
	for (var R in TemplateDep) {
		if (R === "SSfront" || R === "SSmore" || (!typePF && R === "PRsheet")) continue; //don't do this for the spell sheets, they have their own function; also don't do it for the player reference sheet in not the Printer Friendly version, as it doesn't exist
		//first see if the template is visible
		var isTempVisible = isTemplVis(R);
		var tempExtras = What("Template.extras." + R);

		//if invisible, and one of the defaultShowTempl, make it visible
		if (!isTempVisible && defaultShowTempl.indexOf(R) !== -1) {
			DoTemplate(R, "Add");
		} else if (tempExtras) { //if there can be multiples of a template, remove them
			DoTemplate(R, "RemoveAll", false, true); //remove all of them
		} else if (isTempVisible && defaultShowTempl.indexOf(R) === -1) {
			DoTemplate(R, "Remove"); //remove all of them
		};
	};

	setListsUnitSystem("imperial"); //reset the values of some variables to the right unit system

	thermoM(2/9); //increment the progress dialog's progress

	// Reset of all the form field values
	tDoc.resetForm();
	thermoM(3/9); //increment the progress dialog's progress
	tDoc.resetForm(); // do this twice so that all variables based on fields are also reset
	for (var i = 1; i <= FieldNumbers.limfea; i++) {
		tDoc.getField("Limited Feature Max Usages " + i).setAction("Calculate", "");
		tDoc.getField("Limited Feature Max Usages " + i).submitName = "";
	};
	tDoc.getField("AC Misc Mod 1 Description").submitName = "";
	tDoc.getField("AC Misc Mod 2 Description").submitName = "";
	tDoc.getField("Opening Remember").submitName = 1;
	tDoc.getField("Character Level").submitName = 0;
	thermoM(4/9); //increment the progress dialog's progress

	//Reset the color scheme to red
	setColorThemes(true);
	thermoM(5/9); //increment the progress dialog's progress

	//reset some global variables
	CurrentClasses = {};
	classes.known = {};
	classes.old = {};
	CurrentRace = {};
	CurrentBackground = {};
	CurrentCompRace = {};
	GetStringifieds(keepImports);

	if (keepImports) { // remove the imports and reset the sources
		SetStringifieds("sources");
		SetStringifieds("scriptfiles");
		Value("User Script", userScriptString);
	} else { // re-apply the imports and keep the sources setting
		InitiateLists();
		resourceDecisionDialog(true, true); //to make sure that even if the sheet is used before re-opening, the resources are set to default
		UpdateDropdown("resources");
		spellsAfterUserScripts(true);
	};

	// Reset the calculation order
	ResetTooltips();
	setCalcOrder();

	thermoM(6/9); //increment the progress dialog's progress

	// Call upon some functions to reset other stuff than field values
	ConditionSet(true);
	ShowCalcBoxesLines();
	ToggleWhiteout(false);
	ChangeFont();
	ToggleTextSize();
	ToggleAttacks(false);
	ToggleBlueText(false);
	Toggle2ndAbilityDC("hide");
	AdventureLeagueOptions("advleague#all#0");
	SetSpellSlotsVisibility();
	ShowHonorSanity();
	delete CurrentVars.vislayers; LayerVisibilityOptions();
	ShowCompanionLayer();
	if (locColumns[0] === "true") HideInvLocationColumn("Adventuring Gear ", true);
	if (locColumns[1] === "true") HideInvLocationColumn("Extra.Gear ", true);
	ShowAttunedMagicalItems(true); // in equipment section
	SetHighlighting();
	UpdateALdateFormat();
	DnDlogo();

	thermoM(7/9); //increment the progress dialog's progress

	//Reset portrait & symbol to original blank
	ClearIcons("HeaderIcon", true);
	ClearIcons("AdvLog.HeaderIcon", true);
	ClearIcons("Portrait", true);
	ClearIcons("Symbol", true);
	ClearIcons("Comp.img.Portrait", true);

	//re-apply the rich text (deleted because of resetting the form fields)
	MakeSkillsMenu_SkillsOptions(["skills", "alphabeta"]);
	SetRichTextFields();

	thermoM(8/9); //increment the progress dialog's progress

	//generate an instance of the AScomp and ASnotes templates
	if (!noTempl) {
		DoTemplate("AScomp", "Add");
		DoTemplate("ASnotes", "Add");
	};
	// now move the focus to the first page
	tDoc.getField(BookMarkList["CSfront"]).setFocus();

	// Set global variable to reflect end of reset
	IsNotReset = true;
	InitializeEverything(true, true);
	thermoM(thermoTxt, true); // Stop progress bar
	tDoc.dirty = true;
};

// Select the text size to use (0 for auto), or if left empty, select the default text size of 5.74 (7 for Printer Friendly)
function ToggleTextSize(size) {
	if (CurrentVars.fontsize == undefined) CurrentVars.fontsize = typePF ? 7 : 5.74;
	var fontSize = size == undefined || isNaN(size) ? (typePF ? 7 : 5.74) : parseFloat(size);
	if (fontSize == CurrentVars.fontsize) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the font size to " + (fontSize ? fontSize : "'Auto'") + "...");
	calcStop();

	if (!tDoc.info.AdvLogOnly) {
		var LinesFld = [
			"Vision",
			"Saving Throw advantages / disadvantages",
			"HP Current",
			"Racial Traits",
			"Class Features",
			"Background Feature Description",
			"Personality Trait",
			"Ideal",
			"Bond",
			"Flaw",
			"Extra.Notes",
			"Extra.Other Holdings",
			"Background_History",
			"Background_Appearance",
			"Background_Enemies",
			"MoreProficiencies"
		].concat(typePF ?
			["Background_Organisation.Left", "Background_Organisation.Right"] :
			["Background_Organisation"]
		);
		for (var i = 1; i <= FieldNumbers.magicitems; i++) {
			LinesFld.push("Extra.Magic Item Description " + i);
		};
		for (var i = 1; i <= FieldNumbers.feats; i++) {
			LinesFld.push("Feat Description " + i);
		};

		//add the lines for all the companion pages
		var compTemps = What("Template.extras.AScomp").split(",");
		for (var T = 0; T < compTemps.length; T++) {
			var prefix = compTemps[T];
			LinesFld = LinesFld.concat([
				prefix + "Comp.Use.HP.Current",
				prefix + "Comp.Use.Senses",
				prefix + "Comp.Use.Features",
				prefix + "Comp.Use.Traits",
				prefix + "Cnote.Left",
				prefix + "Cnote.Right"
			]);
		}

		//add the lines for all the notes pages
		var noteTemps = What("Template.extras.ASnotes").split(",");
		for (var T = 0; T < noteTemps.length; T++) {
			var prefix = noteTemps[T];
			LinesFld = LinesFld.concat([
				prefix + "Notes.Left",
				prefix + "Notes.Right"
			]);
		}

		//add the lines for all the wild shapes pages
		var wildTemps = What("Template.extras.WSfront").split(",");
		for (var T = 0; T < wildTemps.length; T++) {
			var prefix = wildTemps[T];
			for (var W = 1; W <= 4; W++) {
				LinesFld = LinesFld.concat([
					prefix + "Wildshape." + W + ".HP Current",
					prefix + "Wildshape." + W + ".Traits"
				]);
			}
		}
	} else {
		var LinesFld = []
	}

	//add the lines for all the logsheet pages
	var logTemps = What("Template.extras.ALlog").split(",");
	for (var T = 0; T < logTemps.length; T++) {
		var prefix = logTemps[T];
		for (var L = 1; L <= FieldNumbers.logs; L++) {
			LinesFld.push(prefix + "AdvLog." + L + ".notes");
		}
	}

	for (var i = 0; i < LinesFld.length; i++) {
		tDoc.getField(LinesFld[i]).textSize = fontSize;
		thermoM((i+1)/LinesFld.length); // Increment the progress bar
	};

	CurrentVars.fontsize = fontSize;
	SetStringifieds("vars"); // Save the settings to a field
	thermoM(thermoTxt, true); // Stop progress bar
};

//set the visibility of the layers on the third page. Input is true if a menu is to be created, or false if the remembered setting is to be taken.
function show3rdPageNotes() {
	if (typePF || !What("Extra.Notes")) return;
	LayerVisibilityOptions(false, ['notes', false]);
}
function LayerVisibilityOptions(showMenu, useSelect) {
	if (typePF || minVer) return; //don't do this function in the Printer-Friendly version

	var isReset = false;
	if (CurrentVars.vislayers == undefined) {
		isReset = !showMenu;
		CurrentVars.vislayers = ["rules", "equipment"];
	}
	MakeMobileReady(false); // Undo flatten, if needed

	var possibleOptions = ["notes", "rules", "equipment"];
	if (!useSelect || useSelect === "justMenu") {
		Menus.chooselayers = [{
			cName : "Rules left - Equipment right",
			cReturn : "3rdpage#rules#equipment",
			bMarked : CurrentVars.vislayers[0] === "rules" && CurrentVars.vislayers[1] === "equipment"
		}, {
			cName : "Notes left - Equipment right",
			cReturn : "3rdpage#notes#equipment",
			bMarked : CurrentVars.vislayers[0] === "notes" && CurrentVars.vislayers[1] === "equipment"
		}, {
			cName : "Notes left - Rules right",
			cReturn : "3rdpage#notes#rules",
			bMarked : CurrentVars.vislayers[0] === "notes" && CurrentVars.vislayers[1] === "rules"
		}];
		if (useSelect === "justMenu") return;
	};

	var selection = useSelect ? useSelect : showMenu ? getMenu("chooselayers") : CurrentVars.vislayers;
	if (!selection || selection[0] == "nothing") return;

	if (selection[0] === "3rdpage") selection.shift();
	if (!selection[0] || possibleOptions.indexOf(selection[0]) == -1) selection[0] = CurrentVars.vislayers[0];
	if (!selection[1] || possibleOptions.indexOf(selection[1]) == -1) selection[1] = CurrentVars.vislayers[1];

	if (!isReset && selection[0] == CurrentVars.vislayers[0] && selection[1] == CurrentVars.vislayers[1]) return; // nothing changed

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Show the 3rd page " + selection[0] + " and " + selection[1] + " sections...");
	calcStop();

	Value("Extra.Layers Remember", selection);
	var LNotesFlds = [
		"Text.Header.Notes.Left",
		"Extra.Notes",
	];
	var HideShowLNotesFlds = "Hide";
	var LRulesFlds = [
		"Text.Header.Rules.Left",
		"Image.Rules.Left"
	];
	var HideShowLRulesFlds = "Hide";
	var RRulesFlds = [
		"Text.Header.Rules.Right",
		"Image.Header.RightRules",
		"Image.DragonheadRightRules",
		"Image.DragonheadshadowRightRules",
		"Image.Rules.Right"
	];
	var HideShowRRulesFlds = "Hide";
	var REquipFlds = [
		"Text.Header.Equip.Right",
		"Image.Equip.Right",
		"Image.DividerExtraGear",
		"Image.DragonheadExtraGear",
		"Display.Weighttxt.LbKgPage3",
		"Extra.Gear Weight Subtotal Left",
		"Extra.Gear Weight Subtotal Right",
		"Extra.Other Holdings"
	];
	var HideShowREquipFlds = "Hide";
	var REquipFldsNP = [];
	var HideShowREquipFldsNP = "Hide";
	for (i = 1; i <= FieldNumbers.extragear; i++) {
		REquipFldsNP.push("Extra.Gear Button " + i);
		REquipFlds.push("Extra.Gear Row " + i);
		REquipFlds.push("Extra.Gear Amount " + i);
		REquipFlds.push("Extra.Gear Weight " + i);
	};

	// Hide/show the whiteout fields on the right and left side depending on the visible layer and the settings of text line visibility
	if (CurrentVars.whiteout && selection[0] === "notes") {
		Show("Extra.Notes Whiteout");
	} else {
		Hide("Extra.Notes Whiteout");
	}
	if (CurrentVars.whiteout && selection[1] === "equipment") {
		Show("Extra.Other Holdings Whiteout");
	} else {
		Hide("Extra.Other Holdings Whiteout");
	}

	//do something with the input
	switch (selection[0]) {
		case "notes":
			HideShowLNotesFlds = "Show";
			break;
		case "rules":
			HideShowLRulesFlds = "Show";
			break;
	}

	switch (selection[1]) {
		case "rules":
			HideShowRRulesFlds = "Show";
			Hide("Extra.Gear Location");
			break;
		case "equipment":
			HideShowREquipFlds = "Show";
			HideShowREquipFldsNP = "DontPrint";
			if (What("Gear Location Remember").split(",")[1] === "true") {
				Show("Extra.Gear Location");
			}
			break;
	}

	//set the visibility of the fields
	for (var L = 0; L < LNotesFlds.length; L++) {
		tDoc[HideShowLNotesFlds](LNotesFlds[L]);
	}
	for (L = 0; L < LRulesFlds.length; L++) {
		tDoc[HideShowLRulesFlds](LRulesFlds[L]);
	}
	for (var R = 0; R < RRulesFlds.length; R++) {
		tDoc[HideShowRRulesFlds](RRulesFlds[R]);
	}
	for (R = 0; R < REquipFlds.length; R++) {
		tDoc[HideShowREquipFlds](REquipFlds[R]);
	}
	for (R = 0; R < REquipFldsNP.length; R++) {
		tDoc[HideShowREquipFldsNP](REquipFldsNP[R]);
	}

	CurrentVars.vislayers = selection;
	SetStringifieds("vars"); // Save the settings to a field
	thermoM(thermoTxt, true); // Stop progress bar
}

// Toggle between calculated (Toggle = false) and manual (Toggle = true) attack fields
function ToggleAttacks(Toggle) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the attacks to " + (Toggle === "Yes" ? "calculated" : "manual") + "...");
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	CurrentVars.manual.attacks = Toggle;
	var VisibleHidden = !Toggle ? "Show" : "Hide";
	var HiddenVisible = !Toggle ? "Hide" : "Show";
	var NoPrintHidden = !Toggle ? "DontPrint" : "Hide";
	var ReadOnly = !Toggle ? "Uneditable" : "Editable";
	var compTemps = What("Template.extras.AScomp").split(",");
	var incr = compTemps.length * 4 + FieldNumbers.attacks * 2;

	for (var i = 1; i <= FieldNumbers.attacks; i++) {
		tDoc[HiddenVisible]("Attack." + i + ".Weapon");
		tDoc[ReadOnly]("Attack." + i + ".To Hit");
		tDoc[ReadOnly]("Attack." + i + ".Damage");
		tDoc[VisibleHidden]("Attack." + i + ".Weapon Selection");
		tDoc[VisibleHidden]("Attack." + i + ".Proficiency");
		tDoc[VisibleHidden]("Attack." + i + ".Mod");
		thermoM(i/incr); //increment the progress dialog's progress
	}

	for (var T = 0; T < compTemps.length; T++) {
		for (var i = 1; i <= 3; i++) {
			var prefix = compTemps[T];
			tDoc[HiddenVisible](prefix + "Comp.Use.Attack." + i + ".Weapon");
			tDoc[ReadOnly](prefix + "Comp.Use.Attack." + i + ".To Hit");
			tDoc[ReadOnly](prefix + "Comp.Use.Attack." + i + ".Damage");
			tDoc[VisibleHidden](prefix + "Comp.Use.Attack." + i + ".Weapon Selection");
			tDoc[VisibleHidden](prefix + "Comp.Use.Attack." + i + ".Proficiency");
			tDoc[VisibleHidden](prefix + "Comp.Use.Attack." + i + ".Mod");
			thermoM((i * (T + 1) + FieldNumbers.attacks)/incr); //increment the progress dialog's progress
		}
		tDoc[VisibleHidden](prefix + "Attack.Titles");
	}

	if (CurrentVars.bluetxt) {
		tDoc[NoPrintHidden]("BlueText.Attack");
		for (var T = 0; T < compTemps.length; T++) {
			prefix = compTemps[T];
			tDoc[NoPrintHidden](prefix + "BlueText.Comp.Use.Attack");
			thermoM((T + 1 + FieldNumbers.attacks + compTemps.length * 3)/incr); //increment the progress dialog's progress
		}
		for (var i = 1; i <= FieldNumbers.attacks; i++) {
			DontPrint("BlueText.Attack." + i + ".Weight Title");
			DontPrint("BlueText.Attack." + i + ".Weight");
			thermoM((i + FieldNumbers.attacks + compTemps.length * 4)/incr); //increment the progress dialog's progress
		};
	}

	thermoM(thermoTxt, true); // Stop progress bar
};

// Show the bluetext modifier fields (toggle = true) or hide them (toggle = false)
// If toggle is undefined, toggle their visibility
function ToggleBlueText(toggle) {
	if (CurrentVars.bluetxt == undefined) CurrentVars.bluetxt = false;

	if (toggle !== undefined && ((toggle && CurrentVars.bluetxt) || (!toggle && !CurrentVars.bluetxt))) return;
	var nowWhat = !CurrentVars.bluetxt; // Toggle the current state

	// Start progress bar and stop calculations
	var thermoTxt = thermoM((nowWhat ? "Showing" : "Hiding") + " the modifier fields...");
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	var HiddenNoPrint = nowWhat ? "DontPrint" : "Hide";

	var BlueTxt = [
		"BlueText",
		"Proficiency Bonus Modifiers Title",
		"Proficiency Bonus Modifier",
		"Proficiency Bonus Dice Title",
		"Proficiency Bonus Dice",
		"Skill Modifiers Title",
		"Acr Bonus",
		"Ani Bonus",
		"Arc Bonus",
		"Ath Bonus",
		"Dec Bonus",
		"His Bonus",
		"Ins Bonus",
		"Inti Bonus",
		"Inv Bonus",
		"Med Bonus",
		"Nat Bonus",
		"Perc Bonus",
		"Perf Bonus",
		"Pers Bonus",
		"Rel Bonus",
		"Sle Bonus",
		"Ste Bonus",
		"Sur Bonus",
		"Too Bonus",
		"All Skills Bonus",
		"Skill Modifiers All Text",
		"Save Modifiers Title",
		"Str ST Bonus",
		"Dex ST Bonus",
		"Con ST Bonus",
		"Int ST Bonus",
		"Wis ST Bonus",
		"Cha ST Bonus",
		"All ST Bonus",
		"Save Modifiers All Text",
		"Passive Perception Bonus",
		"Spell DC 1 Bonus",
		"Carrying Capacity Multiplier",
		"Carrying Capacity Multiplier Title",
		"Remarkable Athlete",
		"Remarkable Athlete Title",
		"Jack of All Trades",
		"Jack of All Trades Title",
		"AC Armor Weight Title",
		"AC Armor Weight",
		"AC Shield Weight Title",
		"AC Shield Weight",
		"AmmoLeftDisplay.WeightText",
		"AmmoLeftDisplay.Weight",
		"AmmoRightDisplay.WeightText",
		"AmmoRightDisplay.Weight"
	];

	if (typePF) {
		BlueTxt.push("Init Bonus");
		BlueTxt.push("Comp.Use.Combat.Init.Bonus");
		BlueTxt.push("AC Stealth Disadvantage");
		BlueTxt.push("AC Stealth Disadvantage Title");
	}

	//add the fields for all the companion template pages into the array
	var compTemps = What("Template.extras.AScomp").split(",");
	compTemps.splice(compTemps.indexOf(""), 1);
	for (var T = 0; T < compTemps.length; T++) {
		BlueTxt.push(compTemps[T] + "BlueText");
		if (typePF) {
			BlueTxt.push(compTemps[T] + "Comp.Use.Combat.Init.Bonus");
		}
	}

	for (var i = 0; i < BlueTxt.length; i++) {
		tDoc[HiddenNoPrint](BlueTxt[i]);
		thermoM(i/(BlueTxt.length + 7)); //increment the progress dialog's progress
	};

	//only show the modifier "Spell DC 2 Bonus" if the second spell DC is actually visible
	if (HiddenNoPrint === "Hide" || tDoc.getField("ShowHide 2nd DC").buttonGetCaption() === "Hide 2nd DC") {
		tDoc[HiddenNoPrint]("Spell DC 2 Bonus");
	}

	//undo the showing of certain blue text fields depending on the manual settings
	if (CurrentVars.manual.attacks) {
		Hide("BlueText.Attack");
		Hide("BlueText.Comp.Use.Attack");
		for (var T = 0; T < compTemps.length; T++) {
			Hide(compTemps[T] + "BlueText.Comp.Use.Attack");
		}
	};

	//because of the above, some fields may be hidden even though they should be visible
	for (var i = 1; i <= FieldNumbers.attacks; i++) {
		tDoc[HiddenNoPrint]("BlueText.Attack." + i + ".Weight Title");
		tDoc[HiddenNoPrint]("BlueText.Attack." + i + ".Weight");
	};

	//show the spellslots bluetext fields or hide them
	var SSarray = What("Template.extras.SSfront").split(",");
	var SSvisible = SSarray.length > 1;
	var SSpresuffix = [];
	if (!typePF) {
		var showSlots = eval(What("SpellSlotsRemember"));
		if (showSlots[0]) SSpresuffix.push(["", ".0"]); //show the ones on the first page
		if (showSlots[1]) SSpresuffix.push(["", ".1"]); //show the ones on the spell sheet template page
		if (showSlots[1] && SSvisible) SSpresuffix.push([SSarray[1], ""]); //show the ones on the spell sheet page, if visible
	} else if (What("SpellSlotsRemember") !== "[false,false]") { //only do something if not currently using spell points
		SSpresuffix = [["", ""]];
		if (SSvisible) SSpresuffix.push([SSarray[1], ""]); //show the ones on the spell sheet page, if visible
	}
	for (var e = 0; e < SSpresuffix.length; e++) {
		for (var i = 1; i <= 9; i++) {
			tDoc[HiddenNoPrint](SSpresuffix[e][0] + "SpellSlots.CheckboxesSet.lvl" + i + SSpresuffix[e][1]);
		};
	};

	for (var i = 1; i <= FieldNumbers.magicitems; i++) {
		if (!typePF) {
			tDoc[HiddenNoPrint]("Extra.Magic Item Weight Title " + i);
		}
		tDoc[HiddenNoPrint]("Extra.Magic Item Weight " + i);
		thermoM((BlueTxt.length + i)/(BlueTxt.length + FieldNumbers.magicitems)); //increment the progress dialog's progress
	};
	if (typePF) {
		tDoc[HiddenNoPrint]("Extra.Magic Item Weight Title");
	};

	//now go through all the spell sheets and show the correct blueText fields
	SSarray = SSarray.concat(What("Template.extras.SSmore").split(","));
	if (HiddenNoPrint === "DontPrint") Hide("BlueText.spellshead"); //first hide all the bluetext fields of the spell sheet templates
	if (SSvisible) {
		for (var A = 0; A < SSarray.length; A++) {
			var prefix = SSarray[A];
			if (prefix === "") continue; //skip the ones where the prefix is nothing
			for (var i = 0; i < 4; i++) {
				var SSfieldsArray = [
					prefix + "spellshead.Text.header." + i, //0
					prefix + "spellshead.class." + i, //1
					prefix + "BlueText.spellshead.prepare." + i, //2
					prefix + "BlueText.spellshead.attack." + i, //3
					prefix + "BlueText.spellshead.dc." + i,  //4
					prefix + "spellshead.prepare." + i, //5
				];
				if (HiddenNoPrint === "Hide") {
					Hide(SSfieldsArray[2]);
					Hide(SSfieldsArray[3]);
					Hide(SSfieldsArray[4]);
				} else if (HiddenNoPrint === "DontPrint" && tDoc.getField(SSfieldsArray[0]).display === display.visible) {
					var aCast = What(SSfieldsArray[1]);
					if (tDoc.getField(SSfieldsArray[5]).display === display.visible) {
						DontPrint(SSfieldsArray[2]);
					}
					DontPrint(SSfieldsArray[3]);
					DontPrint(SSfieldsArray[4]);
				}
			}
		}
	}

	if (What("HoSRememberState") && HiddenNoPrint === "DontPrint") {
		DontPrint("HoS ST Bonus");
	} else {
		Hide("HoS ST Bonus");
	}

	CurrentVars.bluetxt = nowWhat;
	SetStringifieds("vars"); // Save the settings to a field
	thermoM(thermoTxt, true); // Stop progress bar
};

//make a menu for the adventure league button/bookmark and put it in the global variable
function MakeAdventureLeagueMenu() {
	var submenuItems = [
		["Set the HP on the 1st page to automatically use fixed values", "hp", tDoc.getField("HP Max").submitName.split(",")[3] === "fixed"], // 0
		["Show DCI field on 1st page", "dci", isDisplay("DCI.Text") === display.visible] // 1
	].concat(typePF ?
		[["Show Renown on the Background page", "renown", isDisplay("Background_Renown.Text") === display.visible]] : // 2
		[["Remove DMG actions from 1st page (not legal in AL play)", "actions", true]] // 2
	).concat([
		[typePF ? "Show space for Faction Rank on the Background page" : "Show space for Faction, Faction Rank, and Renown on the Background page", "factionrank", isDisplay("Background_FactionRank.Text") === display.visible], // 3
	]).concat(typePF ?
		[["Mark actions on the Player Reference page that are not legal in AL play", "asterisks", isDisplay("Text.PRsheet.AL.asterisk") === display.visible]] : //4
		[]
	).concat([
		["Use the fixed carrying capacity rules", "encumbrance", tDoc.getField("Weight Carrying Capacity.Field").display === display.visible], // 5
		["-", "-", false], // 6
		["Show Adventure Logsheet(s)", "allog", isTemplVis("ALlog")], // 7
		["-", "-", false], // 8
		["Prepare the sheet for Adventurers League play (i.e. do all of the above)", "all#1", false], // 9
		["Undo all of those marked above", "all#0", false] // 10
	]);

	if (!typePF) {
		for (var i = 1; i <= FieldNumbers.trueactions; i++) {
			if ((/^(?=.*overrun)(?=.*tumble).*$/i).test(What("Action " + i))) {
				submenuItems[2][2] = false;
				break;
			};
		};
	};

	var AdvLeagueMenu = [];
	for (i = 0; i < submenuItems.length; i++) {
		AdvLeagueMenu.push({
			cName : submenuItems[i][0],
			cReturn : "advleague#" + submenuItems[i][1] + "#" + (submenuItems[i][2] ? 0 : 1),
			bMarked : submenuItems[i][2]
		});
	};

	Menus.adventureLeague = AdvLeagueMenu;

	tDoc.getField("League Remember").submitName = submenuItems.slice(0,4).every(function(theN) { return theN[2]; }) ? 1 : 0;
};

//call the adventure league menu (or use the input) and do something with the results
function AdventureLeagueOptions(MenuSelection) {
	MenuSelection = MenuSelection ? MenuSelection : getMenu("adventureLeague");

	if (MenuSelection[0] !== "advleague") return;

	var set = Number(MenuSelection[2]);
	var toSaveSelection = {};
	var selectionAll = {};
	for (i = 0; i < Menus.adventureLeague.length; i++) {
		var theAll = Menus.adventureLeague[i];
		var thecReturn = theAll.cReturn.split("#")[1];
		toSaveSelection[thecReturn] = MenuSelection[1] === "all" || MenuSelection[1] === thecReturn ? set : theAll.bMarked;
		if (MenuSelection[1] !== "all" || (/^(-|all)$/i).test(thecReturn) || set == theAll.bMarked) continue;
		selectionAll[thecReturn] = set;
	};
	if (MenuSelection[1] === "all") {
		tDoc.getField("League Remember").submitName = set;
		ToggleAdventureLeague(selectionAll);
	} else {
		var selection = {
			allog : undefined,
			dci : undefined,
			factionrank : undefined,
			renown : undefined,
			actions : undefined,
			asterisks : undefined,
			hp : undefined,
			encumbrance : undefined
		};
		selection[MenuSelection[1]] = set;
		ToggleAdventureLeague(selection);
		if (!set) tDoc.getField("League Remember").submitName = set;
	};
	//Save the toSaveSelection for later reprisal when importing
	Value("League Remember", toSaveSelection.toSource());
};

// Set the visibility of the fields for faction, faction ranks, renown, and DCI
function ToggleAdventureLeague(Setting) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the Adventurers League settings...");
	calcStop();

	Setting = Setting ? Setting : {};
	var isBackgrVisible = isTemplVis("ASbackgr");

	MakeMobileReady(false); // Undo flatten, if needed

	//Show the adventurers log, if not already visible
	if (Setting.allog !== undefined) {
		if (isTemplVis("ALlog")) {
			DoTemplate("ALlog", "RemoveAll");
		} else {
			DoTemplate("ALlog", "Add");
		};
	};

	//Show the DCI field
	if (Setting.dci !== undefined) {
		tDoc[Setting.dci ? "Show" : "Hide"]("DCI.Title");
		tDoc[Setting.dci ? "Show" : "Hide"]("DCI.Text");
		if (!typePF) {
			tDoc[Setting.dci ? "Hide" : "Show"]("Class and Levels.0");
			tDoc[Setting.dci ? "Show" : "Hide"]("Class and Levels.1");
		};
	};

	//Show the Faction and Renown fields
	if (Setting.factionrank !== undefined) {
		var VisibleHidden = Setting.factionrank ? "Show" : "Hide";
		var HiddenVisible = Setting.factionrank ? "Hide" : "Show";
		if (!typePF) {
			var FactionList = [
				"Background_Organisation.1",
				"Background_Faction.Title",
				"Background_Faction.Text",
				"Background_FactionRank.Title",
				"Background_FactionRank.Text",
				"Background_Renown.Title",
				"Background_Renown.Text"
			];
			if (isBackgrVisible) {
				FactionList.push("Background_Organisation.3");
				tDoc[HiddenVisible]("Background_Organisation.2");
			};
			for (var i = 0; i < FactionList.length; i++) {
				tDoc[VisibleHidden](FactionList[i]);
			};
		} else {
			tDoc[VisibleHidden]("Background_FactionRank.Text");
			tDoc[VisibleHidden]("Image.Background_FactionRank");
			tDoc[HiddenVisible]("Background_Organisation.Right");
		};
	};

	//Show the Renown field
	if (typePF && Setting.renown !== undefined) {
		tDoc[Setting.renown ? "Show" : "Hide"]("Background_Renown.Title");
		tDoc[Setting.renown ? "Show" : "Hide"]("Background_Renown.Text");
	};

	//Show the asterisks on the reference sheet field
	if (typePF && Setting.asterisks !== undefined) {
		tDoc[Setting.asterisks ? "Show" : "Hide"]("Text.PRsheet.AL");
	};

	//Remove the DMG actions on the 1st page
	if (!typePF && Setting.actions !== undefined) {
		if (Setting.actions) {
			RemoveAction("action", "Overrun / Tumble (or as bonus action)", "Default action");
			AddAction("action", "Grapple / Shove (instead of 1 attack)", "Default action", "As 1 attack: Disarm / Grapple / Shove");
		} else {
			AddAction("action", "Overrun / Tumble (or as bonus action)", "Default action");
			AddAction("action", "As 1 attack: Disarm / Grapple / Shove", "Default action", "Grapple / Shove (instead of 1 attack)");
		};
	};

	//Set the HP to using fixed values
	if (Setting.hp !== undefined) {
		var theHP = tDoc.getField("HP Max").submitName.split(",");
		theHP[3] = Setting.hp ? "fixed" : "nothing";
		tDoc.getField("HP Max").submitName = theHP.join();
		if (Setting.hp) CurrentUpdates.types.push("hp");
	};

	//Set the encumbrance rules to using fixed value
	if (Setting.encumbrance !== undefined) {
		SetEncumbrance(!Setting.encumbrance);
	};

	thermoM(thermoTxt, true); // Stop progress bar
};

//search the string for possible armour
function ParseArmor(input, onlyInv) {
	var found = "";
	if (!input) return found;

	input = removeDiacritics(input);
	var foundLen = 0;
	var foundDat = 0;

	for (var key in ArmourList) {
		var kObj = ArmourList[key];
		if ((onlyInv && kObj.weight == undefined) // see if only doing equipable items
			|| !kObj.regExpSearch || !(kObj.regExpSearch).test(input) // see if the regex matches
			|| testSource(key, kObj, "armorExcl") // test if the armour or its source isn't excluded
		) continue;

		// only go on with this entry if:
		// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
		// or if we are not using the search length, just look at the newest source date
		var tempDate = sourceDate(kObj.source);
		if ((!ignoreSearchLength && kObj.name.length < foundLen) || (!ignoreSearchLength && kObj.name.length == foundLen && tempDate < foundDat) || (ignoreSearchLength && tempDate <= foundDat)) continue;

		// we have a match, set the values
		found = key;
		foundLen = kObj.name.length
		foundDat = tempDate;
	}
	return found;
};

//Find if the armor is a known armor
function FindArmor(input) {
	if (input === undefined) {
		CurrentArmour.field = What("AC Armor Description").toLowerCase();
	};
	var tempString = CurrentArmour.field;
	var temp = "";
	var tempFound = false;
	CurrentArmour.known = ParseArmor(tempString);

	CurrentArmour.dex = "";
	if (CurrentArmour.known && ArmourList[CurrentArmour.known] && ArmourList[CurrentArmour.known].dex !== undefined && !isNaN(ArmourList[CurrentArmour.known].dex)) {
		CurrentArmour.dex = ArmourList[CurrentArmour.known].dex;
	}

	//add magical bonus, denoted by a "+"
	CurrentArmour.magic = 0;
	var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
	if (magicRegex.test(tempString)) {
		CurrentArmour.magic = parseFloat(tempString.match(magicRegex)[1]);
	}

	CurrentArmour.mod = "";
	if (CurrentArmour.known && ArmourList[CurrentArmour.known] && ArmourList[CurrentArmour.known].addMod) {
		// check if it is an ability score
		for (var i = 0; i < AbilityScores.abbreviations.length; i++) {
			temp = AbilityScores.abbreviations[i];
			if (tempString.indexOf(temp.toLowerCase()) !== -1) {
				CurrentArmour.mod = temp + " Mod";
				i = AbilityScores.abbreviations.length;
			}
		}
		// or perhaps it wants to add the proficiency bonus
		if (!CurrentArmour.mod && tempString.indexOf("prof") !== -1) {
			CurrentArmour.mod = "Proficiency Bonus";
		}
	}
};

// Change the armor features
function ApplyArmor(input) {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying armor...");
	calcStop();

	CurrentArmour.field = input.toLowerCase();
	var ArmorFields = [
		"AC Armor Bonus", //0
		"Medium Armor", //1
		"Heavy Armor", //2
		"AC Stealth Disadvantage", //3
		"AC Armor Weight", //4
		"AC Dexterity Modifier" //5
	];
	FindArmor(input);

	tDoc.getField(ArmorFields[0]).setAction("Calculate", "var placeholder = \"just to keep the calculation from being done too late\";");

	if (CurrentArmour.known !== undefined && ArmourList[CurrentArmour.known] !== undefined) {
		var ArmorType = ArmourList[CurrentArmour.known].type ? ArmourList[CurrentArmour.known].type.toLowerCase() : "";
		var ArmorStealth = (ArmorType === "medium" && What("Medium Armor Max Mod") === 3) || (/mithral|vind rune/i).test(CurrentArmour.field) ? false : ArmourList[CurrentArmour.known].stealthdis ? ArmourList[CurrentArmour.known].stealthdis : false;
		Checkbox(ArmorFields[3], ArmorStealth);
		Checkbox(ArmorFields[1], ArmorType === "medium");
		Checkbox(ArmorFields[2], ArmorType === "heavy");
		thermoM(1/3); //increment the progress dialog's progress

		if (CurrentArmour.mod) {
			var theCalc = "event.value = " + ArmourList[CurrentArmour.known].ac + ' + Number(' + (!CurrentArmour.mod ? 0 : CurrentArmour.mod == "Proficiency Bonus" ? 'How("Proficiency Bonus")' : 'What("' + CurrentArmour.mod + '")') + ') + ' + CurrentArmour.magic;
			tDoc.getField(ArmorFields[0]).setAction("Calculate", theCalc);
		} else {
			Value(ArmorFields[0], ArmourList[CurrentArmour.known].ac + CurrentArmour.magic);
		}
		thermoM(2/3); //increment the progress dialog's progress

		//add weight of the armor
		if (ArmourList[CurrentArmour.known].weight) {
			var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
			Value(ArmorFields[4], RoundTo(ArmourList[CurrentArmour.known].weight * massMod, 0.001, true));
		} else {
			Value(ArmorFields[4], 0);
		}
	} else {
		tDoc.resetForm(ArmorFields);
	}
	ConditionSet();
	thermoM(thermoTxt, true); // Stop progress bar
};

//a function to calculate the value of the Dex field in the Armour section (returns a value)
function calcMaxDexToAC() {
	var dexMod = What("Dex Mod");
	if (dexMod === "" || isNaN(dexMod)) return "";
	dexMod = Number(dexMod);
	if (CurrentArmour.dex !== "" && CurrentArmour.dex !== undefined && !isNaN(CurrentArmour.dex)) {
		dexMod = CurrentArmour.dex == -10 ? 0 : Math.min(dexMod, CurrentArmour.dex);
	} else if (tDoc.getField("Heavy Armor").isBoxChecked(0)) {
		dexMod = 0;
	} else if (tDoc.getField("Medium Armor").isBoxChecked(0)) {
		dexMod = Math.min(dexMod, Number(What("Medium Armor Max Mod")));
	};

	return dexMod;
};

//a function to calculate the value of the Dex field in the Armour section (returns a value)
function calcCompMaxDexToAC(prefix, armourKey) {
	if (!prefix || !ArmourList[armourKey]) return 0;
	var dexMod = Number(What(prefix + "Comp.Use.Ability.Dex.Mod"));
	var theArmour = ArmourList[armourKey];
	if (theArmour.dex) {
		dexMod = theArmour.dex == -10 ? 0 : Math.min(dexMod, theArmour.dex);
	} else if (theArmour.type === "heavy") {
		dexMod = 0;
	} else if (theArmour.type === "medium" && dexMod > 2) {
		dexMod = 2;
	};
	return dexMod;
};

// add the armour; only overwrites if force == true
function AddArmor(armour, force, comp) {
	if (!armour) return;
	var prefix = comp ? comp : !event.target || !event.target.name ? "" : getTemplPre(event.target.name, "AScomp", true);
	var ACfld = prefix ? prefix + "Comp.Use.AC" : "AC Armor Description";
	var curAC = What(ACfld);
	if (curAC && !force) return;
	if (prefix) { // calculate what the value should be and add it
		var armKey = ParseArmor(armour);
		if (!armKey) return;
		var newAC = ArmourList[armKey].ac + calcCompMaxDexToAC(prefix, armKey);
		Value(ACfld, newAC);
	} else {
		Value(ACfld, armour);
	};
};
// remove the armour if it is the same
function RemoveArmor(armour, comp) {
	if (!armour) return;
	var prefix = comp ? comp : !event.target || !event.target.name ? "" : getTemplPre(event.target.name, "AScomp", true);
	var ACfld = prefix ? prefix + "Comp.Use.AC" : "AC Armor Description";
	var curAC = What(ACfld);
	var armKey = ParseArmor(armour);
	if (armKey && prefix) { // calculate what the value would be
		var newAC = ArmourList[armKey].ac + calcCompMaxDexToAC(prefix, armKey);
		if (curAC == newAC) tDoc.resetForm([ACfld]); // remove it if it's the same
	} else if (!prefix && (CurrentArmour.known === armKey || (!armKey && curAC.indexOf(armour) !== -1))) {
		tDoc.resetForm([ACfld]);
	};
};

// find the magic bonus in the shield description
function FindShield(input) {
	if (!input) {
		CurrentShield.field = What("AC Shield Bonus Description").toLowerCase();
	}
	var tempString = CurrentShield.field;
	var temp = "";

	//add magical bonus, denoted by a "+"
	CurrentShield.magic = 0;
	var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
	if (magicRegex.test(tempString)) {
		CurrentShield.magic = parseFloat(tempString.match(magicRegex)[1]);
	}
}

// Change the armor features
function ApplyShield(input) {
	CurrentShield.field = input.toLowerCase();

	FindShield(input);

	if (input) {
		var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
		Value("AC Shield Bonus", 2 + CurrentShield.magic);
		Value("AC Shield Weight", RoundTo(6 * massMod, 0.001, true));
	} else {
		tDoc.resetForm(["AC Shield Bonus", "AC Shield Weight"]);
	}
}

//Change advantage or disadvantage of saves, skills, checks, attacks, etc. based on condition
function ConditionSet(isReset) {
	if (!isReset && !IsNotConditionSet) return;
	if (typePF) { // only the stealth disadvantage is part of the printer friendly version
		// Start progress bar and stop calculations
		var thermoTxt = thermoM("Armor stealth disadvantage...");
		calcStop();
		IsNotConditionSet = false;
		var thisFld = "ArmDis";
		var thisChck = !isReset && tDoc.getField("AC Stealth Disadvantage").isBoxChecked(0) ? true : false;
		SetProf("advantage", thisChck, ["Ste", false], "Armor");
		IsNotConditionSet = true;
		thermoM(thermoTxt, true); // Stop progress bar
		return;
	}
	var cFlds = {
		Exh1 : { name : "Extra.Exhaustion Level 1" },
		Exh2 : { name : "Extra.Exhaustion Level 2" },
		Exh3 : { name : "Extra.Exhaustion Level 3" },
		Exh4 : { name : "Extra.Exhaustion Level 4" },
		Exh5 : { name : "Extra.Exhaustion Level 5" },
		Exh6 : { name : "Extra.Exhaustion Level 6" },
		Blinded : { name : "Extra.Condition 1" },
		Deafened : { name : "Extra.Condition 3" },
		Frightened : { name : "Extra.Condition 4" },
		Grappled : { name : "Extra.Condition 5" },
		Incapacitated : { name : "Extra.Condition 6" },
		Invisible : { name : "Extra.Condition 7" },
		Paralyzed : { name : "Extra.Condition 8" },
		Petrified : { name : "Extra.Condition 9" },
		Poisoned : { name : "Extra.Condition 10" },
		Prone : { name : "Extra.Condition 11" },
		Restrained : { name : "Extra.Condition 12" },
		Stunned : { name : "Extra.Condition 13" },
		Unconscious : { name : "Extra.Condition 14" },
		ArmDis : { name : "AC Stealth Disadvantage" }
	}

	var thisFld = "ArmDis";
	for (var aFld in cFlds) {
		if (!tDoc.getField(cFlds[aFld].name)) continue;
		cFlds[aFld].checked = tDoc.getField(cFlds[aFld].name).isBoxChecked(0);
		if (event.target && event.target.name && cFlds[aFld].name == event.target.name) thisFld = aFld;
		if ((/Exh\d/).test(aFld)) cFlds[aFld].origchecked = thisFld === aFld ? !cFlds[aFld].checked : cFlds[aFld].checked;
	}
	var thisChck = !isReset && thisFld && cFlds[thisFld].checked ? true : false;
	if (!isReset && (!thisFld || !tDoc.getField(cFlds[aFld].name))) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying the conditions...");
	calcStop();
	IsNotConditionSet = false;

	// Do something with other fields dependent on the selection
	//var stealthLoc = Who("Text.SkillsNames") === "alphabeta" ? "Ste" : "Ath";
	if (isReset || (/Exh\d/).test(thisFld)) {
		// If this is an exhaustion level, check the ones below and/or uncheck the ones above
		if (!isReset) {
			var exhNmbr = Number(thisFld.slice(-1));
			var strtNmbr = thisChck ? 1 : exhNmbr;
			var endNmbr = thisChck ? exhNmbr : 7;
			for (var X = strtNmbr; X < endNmbr; X++) {
				Checkbox("Extra.Exhaustion Level " + X, thisChck);
				cFlds["Exh" + X].checked = thisChck;
			}
		}
		// if the level 2 changes, set the current speed
		if (isReset || cFlds.Exh2.origchecked != cFlds.Exh2.checked || cFlds.Exh5.origchecked != cFlds.Exh5.checked) {
			SetProf("speed", cFlds.Exh5.checked ? false : cFlds.Exh2.checked, { allModes : "/2" }, "Exhaustion level 2 (condition)");
		}
		// if the level 3 changed, set all the saving throws to adv/dis
		if (isReset || cFlds.Exh3.origchecked != cFlds.Exh3.checked) {
			for (var B = 0; B < AbilityScores.abbreviations.length; B++) {
				SetProf("advantage", cFlds.Exh3.checked, [AbilityScores.abbreviations[B], false], "Exhaustion level 2 (condition)");
			};
		}
		// if the level 4 changes, set the current HP max
		if (!isReset && cFlds.Exh4.origchecked != cFlds.Exh4.checked) {
			var maxHP = What("HP Max");
			var halfMaxHP = Math.floor(maxHP / 2);
			var curMaxHP = What("HP Max Current");
			if (cFlds.Exh4.checked) {
				var extraMin = curMaxHP ? maxHP - curMaxHP : 0;
				Value("HP Max Current", halfMaxHP - extraMin);
			} else if (curMaxHP == halfMaxHP || !halfMaxHP) {
				Value("HP Max Current", "");
			} else {
				var extraMin = halfMaxHP - curMaxHP;
				Value("HP Max Current", maxHP - extraMin);
			}
		}
	}
	if (isReset || (/Unconscious|Paralyzed|Petrified|Stunned/).test(thisFld)) {
		if (thisFld == "Unconscious" && thisChck) {
			// if unconscious, also check prone, but don't automatically stand up when no longer unconscious
			Checkbox(cFlds.Prone.name, true);
			cFlds.Prone.checked = true;
		} else if (isReset || thisFld == "Petrified") {
			SetProf("resistance", thisChck, "All", "Petrified (condition)", "All (petrified)");
			SetProf("savetxt", thisChck, { immune : ["poison", "disease"] }, "Petrified (condition)");
		}
		// Incapacitated and fail str/dex saves if any of these are checked, but only undo if none are
		var anyChecked = cFlds.Paralyzed.checked || cFlds.Petrified.checked || cFlds.Stunned.checked || cFlds.Unconscious.checked;
		Checkbox(cFlds.Incapacitated.name, anyChecked);
		cFlds.Incapacitated.checked = anyChecked;
		SetProf("savetxt", anyChecked, { text : ["Fail Str/Dex saves"] }, "Conditions (paralyzed, petrified, stunned, or unconscious)");
	}
	if (isReset || thisFld == "Blinded") {
		SetProf("vision", thisChck, "Blinded: fail checks involving sight", "Blinded (condition)", 0);
	}
	if (isReset || thisFld == "Deafened") {
		SetProf("vision", thisChck, "Deafened: fail checks involving hearing", "Deafened (condition)", 0);
	}
	if (isReset || thisFld == "Restrained") {
		SetProf("advantage", thisChck, ["Dex", false], "Restrained (condition)");
	}
	if (isReset || thisFld == "Invisible") {
		SetProf("advantage", thisChck, ["Att", true], "Invisible (condition)");
	}
	if (!isReset && thisFld == "Incapacitated" && (cFlds.Unconscious.checked || cFlds.Paralyzed.checked || cFlds.Petrified.checked || cFlds.Stunned.checked)) {
		Checkbox(cFlds.Incapacitated.name, true);
		cFlds.Incapacitated.checked = true;
	}
	if (isReset || thisFld == "ArmDis") {
		SetProf("advantage", thisChck, ["Ste", false], "Armor");
	}
	thermoM(0.25); //increment the progress dialog's progress

	// Ability checks disadvantage
	if (isReset || (/Exh|Frightened|Poisoned/).test(thisFld)) {
		var abiDisadv = cFlds.Exh1.checked || cFlds.Frightened.checked || cFlds.Poisoned.checked;
		for (var S = 0; S < SkillsList.abbreviations.length; S++) {
			SetProf("advantage", abiDisadv, [SkillsList.abbreviations[S], false], "Exhaustion, Frightened, or Poisoned (conditions)");
		};
	}
	thermoM(0.5); //increment the progress dialog's progress

	// Attack disadvantage
	if (isReset || (/Exh|Blinded|Frightened|Poisoned|Prone|Restrained/).test(thisFld)) {
		var attDisadv = cFlds.Exh3.checked || cFlds.Frightened.checked || cFlds.Poisoned.checked || cFlds.Prone.checked || cFlds.Restrained.checked || (cFlds.Blinded.checked && What("Class Features").toLowerCase().indexOf("feral senses") === -1);
		SetProf("advantage", attDisadv, ["Att", false], "Exhaustion, Blinded, Frightened, Poisoned, Prone, or Restrained (conditions)");
	}
	thermoM(0.75); //increment the progress dialog's progress

	// Set movement speed
	if (isReset || (/Exh|Grappled|Paralyzed|Petrified|Restrained|Stunned|Unconscious/).test(thisFld)) {
		var spdFormat = cFlds.Exh5.checked || cFlds.Grappled.checked || cFlds.Paralyzed.checked || cFlds.Petrified.checked || cFlds.Restrained.checked || cFlds.Stunned.checked || cFlds.Unconscious.checked ? "event.value = '0 " + (What("Unit System") == "imperial" ? "ft" : "m") + "';" :"";
		var spdFlds = ["Speed", "Speed encumbered"];
		for (var i = 0; i < spdFlds.length; i++) {
			tDoc.getField(spdFlds[i]).setAction("Format", spdFormat);
			Value(spdFlds[i], What(spdFlds[i]));
		}
	}

	IsNotConditionSet = true;
	thermoM(thermoTxt, true); // Stop progress bar
};

// apply the Class and Levels field change (field validation)
function classesFieldVal() {
	// if you ctrl/shift click into the field, any changes in it must be ignored as the class selection dialog is opened
	if (event.target.remVal !== undefined) {
		event.value = event.target.remVal;
		delete event.target.remVal;
	} else {
		ApplyClasses(event.value, true);
	};
}

// search the string for possible class and subclass
function ParseClass(input) {
	var classFound = "", classFoundLen = 0, classFoundDat = 0;
	var subFound = "", subFoundLen = 0, subFoundDat = 0;
	input = removeDiacritics(input);

	// Loop through all the classes and see if any of them match and then look for its subclasses
	// If that doesn't yield anything, look if any of the subclasses match regardless of class' names
	for (var i = 1; i <= 2; i++) {
		if (i == 2 && classFound) break; // something was already found in round 1, so no need for round 2
		for (var key in ClassList) { //scan string for all classes, choosing subclasses over classes
			var kObj = ClassList[key];
			if (i == 1) { // reset the subs for every class we look through if still looking at classes mainly
				subFoundLen = 0;
				subFoundDat = 0;
			}

			if ((i == 1 && !(kObj.regExpSearch).test(input)) // see if the class regex matches (round 1 only)
				|| testSource(key, kObj, "classExcl") // test if the class or its source isn't excluded
				|| (key === "ranger" && !testSource("rangerua", ClassList.rangerua, "classExcl")) // ignore the PHB ranger if the UA ranger is present
			) continue;

			// only go on with this entry if:
			// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
			// or if we are not using the search length, just look at the newest source date
			var tempDate = sourceDate(kObj.source);
			if (i == 1 && ((!ignoreSearchLength && kObj.name.length < classFoundLen) || (!ignoreSearchLength && kObj.name.length == classFoundLen && tempDate < classFoundDat) || (ignoreSearchLength && tempDate <= classFoundDat))) continue;

			if (i == 1) { // we have a matching class! (round 1 only)
				classFound = key;
				classFoundLen = kObj.name.length;
				classFoundDat = tempDate;
				subFound = "";
				subFoundLen = 0;
				subFoundDat = 0;
			}

			// see if any of the sublasses match
			for (var sub = 0; sub < kObj.subclasses[1].length; sub++) {
				var subKey = kObj.subclasses[1][sub];
				var sObj = ClassSubList[subKey];

				if (!sObj // skip if the subclass isn't known in the ClassSubList object
					|| !(sObj.regExpSearch).test(input) // see if the subclass regex matches (round 1 only)
					|| testSource(subKey, sObj, "classExcl") // test if the subclass or its source isn't excluded
				) continue;

				// only go on with this entry if:
				// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
				// or if we are not using the search length, just look at the newest source date
				var tempSubDate = sourceDate(sObj.source);
				if ((!ignoreSearchLength && sObj.subname.length < subFoundLen) || (!ignoreSearchLength && sObj.subname.length == subFoundLen && tempSubDate < subFoundDat) || (ignoreSearchLength && tempSubDate <= subFoundDat)) continue;

				// we have a match for both the class and the subclass!
				classFound = key;
				classFoundLen = kObj.name.length;
				classFoundDat = tempDate;
				subFound = subKey;
				subFoundLen = sObj.subname.length;
				subFoundDat = tempSubDate;
			}
		}
	}
	return classFound ? [classFound, subFound] : false;
};

// detects classes entered and parses information to global classes variable
function FindClasses(NotAtStartup, isFieldVal) {
	if (!NotAtStartup) classes.field = What("Class and Levels"); // called from startup

	// Remove starting numbers and clean the start/end of the string
	classes.field = classes.field.replace(/^[ \-.,\\/:;\d]+|[ \-.,\\/:;]+$/g, '');
	classes.totallevel = 0;

	// Initialize some variables
	var primeClass = "";

	// Put the old classes.known in classes.old so the differences in level can be queried later
	var oldClasses = eval(classes.old.toSource());
	classes.old = {};
	classes.oldprimary = classes.primary;
	classes.oldspellcastlvl = classes.spellcastlvl;
	for (var aClass in classes.known) {
		classes.old[aClass] = {
			classlevel : classes.known[aClass].level,
			subclass : classes.known[aClass].subclass,
			fullname : CurrentClasses[aClass].fullname
		}
	}

	// Get the different classes from the class field string
	classes.parsed = [];
	if (classes.field != "") {
		var ClDelimiter = clean(What("Delimiter"));
		var fieldRem = classes.field;
		var fieldSplit = fieldRem.match(/\D+|(\d+(\.|,))?\d+/g);
		var tempLevel = fieldSplit.length > 2 ? 1 : Math.max(Number(What("Character Level")), 1);
		// now loop through the found elements and add them to the classes.parsed array
		for (var i = 0; i < fieldSplit.length; i = i+2) {
			if (ClDelimiter) fieldSplit[i].replace(RegExp("^" + ClDelimiter.RegEscape(), "i"), '');
			var fieldLevel = fieldSplit[i+1] !== undefined ? parseFloat(fieldSplit[i+1]) : tempLevel;
			classes.parsed.push([clean(fieldSplit[i]), fieldLevel]);
			classes.totallevel += fieldLevel;
		}
	}

	// Reset the global classes variables
	classes.hd = [];
	classes.hp = 0;

	//find known classes and push them into known array, add hd
	var classesTemp = {};
	for (i = 0; i < classes.parsed.length; i++) {
		var tempLevel = classes.parsed[i][1];
		var tempFound = ParseClass(classes.parsed[i][0]);

		if (!tempFound) continue; // class not detected
		var tempClass = tempFound[0];
		var tempSubClass = tempFound[1];
		var tempSubClassOld = classes.old[aClass] && classes.old[aClass].subclass ? classes.old[aClass].subclass : false;
		var tempClObj = ClassList[tempClass];
		var tempDie = tempSubClass && ClassSubList[tempSubClass].die ? ClassSubList[tempSubClass].die : tempClObj.die;

		// see if the found class isn't a prestige class and if all prereqs are met. If not, skip this class
		var tempPrereq = !ignorePrereqs && tempClObj.prestigeClassPrereq ? tempClObj.prestigeClassPrereq : false;
		if (tempPrereq) {
			if (!isNaN(tempPrereq)) {
				tempPrereq = Number(tempPrereq) <= (classes.totallevel - tempLevel);
			} else {
				try {
					tempPrereq = eval(tempPrereq);
				} catch (err) {
					tempPrereq = true;
				}
			}
			// ask the user if we should apply this prestige class (only if not a reset, import, or load on startup)
			if (tempPrereq === false && IsNotReset && IsNotImport && NotAtStartup) {
				var prestClMsg = app.alert({
					nType : 2, // Yes,No
					nIcon : 1, // Warning
					cTitle : "Prestige class prerequisites not met!",
					cMsg : "The prestige class '" + tempClObj.name + "' has a prerequisite which wasn't met. Apply this prestige class anyway?\n\nIf you select 'No', the " + tempLevel + " level(s) of this prestige class will be counted towards the total character level, but none of its features will be added."
				});
				if (prestClMsg == 3) continue; // user decided not to apply the prestige class
			}
		}

		// set the primary class if not yet defined and this is not a prestige class
		if (primeClass === "" && !tempClObj.prestigeClassPrereq) primeClass = tempClass;

		// set the object for this class (later to be set to classes.known)
		classesTemp[tempClass] = {
			name : tempClass,
			level : tempLevel,
			subclass : tempSubClass,
			string : classes.parsed[i][0]
		};

		// Ask for subclass if none is defined and this is not a reset, import, or a sheet startup event and not after just removing a subclass
		if (IsNotReset && IsNotImport && NotAtStartup && !tempSubClass && tempClObj.subclasses[1].length && !tempSubClassOld) {
			// first check at what level this class gets it subclass and if we are at that level yet
			var enoughLevel = false;
			for (var propKey in tempClObj.features) {
				var tempProp = tempClObj.features[propKey];
				if (propKey.indexOf("subclassfeature") == -1 || !tempProp.minlevel || tempProp.minlevel > tempLevel) continue;
				enoughLevel = true;
				break;
			}
			if (enoughLevel) {
				var newSubClass = PleaseSubclass(tempClass, classesTemp[tempClass].string);
				if (newSubClass) {
					classesTemp[tempClass].subclass = newSubClass[0];
					classesTemp[tempClass].string = newSubClass[1];
					classes.field = classes.field.replace(classes.parsed[i][0], newSubClass[1]);
					classes.parsed[i][0] = newSubClass[1];
				}
			}
		}

		if (classes.hd[tempDie] === undefined) { //add hd
			classes.hd[tempDie] = [tempDie, tempLevel];
		} else {
			classes.hd[tempDie][1] += tempLevel;
		};

		if (classes.hp === 0) { //add first level hp
			classes.hp = tempDie;
		};
	};

	// if there is only a single class, remove the level from the classes.field (if present)
	if (classes.parsed.length == 1 && classes.field.indexOf(classes.parsed[0][1]) !== -1) {
		classes.field = clean(classes.field.replace(classes.parsed[0][1], ''));
	}

	// if any of the above changed the classes.field set it
	if (NotAtStartup && !isFieldVal && What("Class and Levels") != classes.field) {
		tDoc.getField("Class and Levels").remVal = classes.field;
		Value("Class and Levels", classes.field);
	} else if (NotAtStartup && isFieldVal && event.value != classes.field) {
		event.value = classes.field;
	}

	// if the found classes are the exact same as the classes.known, don't do anything
	var isChange = primeClass !== classes.primary;
	if (!isChange) {
		var testArray = [];
		for (var testCl in classesTemp) testArray.push(testCl);
		for (var testCl in classes.known) testArray.push(testCl);
		for (var t = 0; t < testArray.length; t++) {
			var theKcl = classes.known[testArray[t]];
			var theNcl = classesTemp[testArray[t]];
			if (theKcl && theNcl && theNcl.name === theKcl.name && theNcl.level === theKcl.level && theNcl.subclass === theKcl.subclass) {
				theKcl.string = theNcl.string; // because otherwise we skip this change, if it is the only thing that changes
				continue;
			}
			isChange = true;
			break;
		};
	};
	if (!isChange) {
		ApplyClassLevel(true);
		return true;
	};

	// Check every class in classes old and if they are not in classesTemp, remove their features
	if (NotAtStartup) { for (var oClass in classes.old) {
		var tempCl = CurrentClasses[oClass];

		// if this class exists, was the primary class, and is no longer, change things up
		if (classesTemp[oClass] && classes.primary === oClass && primeClass !== classes.primary) {
			// first remove its primary class attributes
			ApplyClassBaseAttributes(false, oClass, true);
			// then add its non-primary class attributes
			ApplyClassBaseAttributes(true, oClass, false);
		}

		if (!classesTemp[oClass]) {
			// remove the class base features if removing the class
			ApplyClassBaseAttributes(false, oClass, classes.primary == oClass);
			// reset the tooltip of the equipment menu
			AddTooltip("Equipment.menu", "Click here to add equipment to the adventuring gear section, or to reset it (this button does not print).\n\nIt is recommended to pick a pack first before you add any background's items.");
			// remove the class from the CurrentSpells variable
			delete CurrentSpells[oClass];
		} else if (classesTemp[oClass].subclass !== classes.old[oClass].subclass) {
			// when only changing the subclass, or adding a new one, remove the base features of the subclass and add those of the new class
			ApplyClassBaseAttributes([classes.old[oClass].subclass, classesTemp[oClass].subclass], oClass, classes.primary == oClass);
			// if the class doesn't have spellcasting, but the old subclass did, remove it from the CurrentSpells variable
			var oldSubClass = classes.old[oClass].subclass ? ClassSubList[classes.old[oClass].subclass] : false;
			if (oldSubClass && oldSubClass.spellcastingFactor && !ClassList[oClass].spellcastingFactor) delete CurrentSpells[oClass];
		}

		// update things when removing a whole class or when removing a subclass
		if (!classesTemp[oClass] || (classesTemp[oClass].subclass !== classes.old[oClass].subclass && classes.old[oClass].subclass)) {
			// Temporarily add the class to classes known for the next step
			classes.known = {};
			classes.known[oClass] = {
				name : oClass,
				level : 0,
				subclass : classes.old[oClass].subclass
			}
			// Remove all the features of the class (remember, new level is set to 0 above)
			UpdateLevelFeatures("class");

			// If changing subclass, set the class' old level to 0 so all features are added again in full
			if (classesTemp[oClass]) classes.old[oClass].classlevel = 0;

			// If removing the (sub)class, also remove the class from the SubClass Remember field
			if (!classesTemp[oClass] || !classesTemp[oClass].subclass) {
				RemoveString("SubClass Remember", oClass, false);
			}
		}
	} }

	classes.known = classesTemp;
	classes.primary = primeClass;

	var multiCaster = {default : 0, warlock : 0};

	temp = [1];
	//lookup classes and subclasses and put their attributes in CurrentClasses global variable
	for (var aClass in classes.known) {

		//define new global variable based on the known classes
		CurrentClasses[aClass] = {
			name : "", //must exist
			subname : "", //must exist
			fullname : "", //must exist
			source : "", //must exist
			attacks : [1], //must exist
			features : {}, //must exist
			equipment : "", //must exist
			prereqs : "", //must exist
			primaryAbility : "", //must exist
			improvements : [0] //must exist
		};

		var Temps = CurrentClasses[aClass];
		var classObj = ClassList[aClass];
		var subClObj = classes.known[aClass].subclass && ClassSubList[classes.known[aClass].subclass] ? ClassSubList[classes.known[aClass].subclass] : false;

		// Fill in the properties of this newly defined global variable and prefer subclass attributes over class attributes
		for (var prop in classObj) { // the class
			if ((/^(subname|features)$/i).test(prop)) continue;
			Temps[prop] = classObj[prop];
		}
		if (subClObj) { // the subclass, if it exists
			for (var prop in subClObj) {
				if ((/^(name|features|prereqs|primaryAbility)$/i).test(prop)) continue;
				Temps[prop] = subClObj[prop];
			}
			// --- backwards compatibility --- //
			// if an old attribute exists in the subclass, but the ClassList object uses the new attribute name, make sure the subclass's version is used
			var backwardsAttr = [["armor", "armorProfs"], ["weapons", "weaponProfs"]];
			for (var i = 0; i < backwardsAttr.length; i++) {
				var aBW = backwardsAttr[i];
				if (subClObj[aBW[0]] && subClObj[aBW[1]] == undefined && classObj[aBW[1]]) delete Temps[aBW[1]];
			}
		}

		//special something for classes that have alternative ability scores that can be used for the DC
		if (Temps.abilitySave && Temps.abilitySaveAlt) {
			var as1 = Number(What(AbilityScores.abbreviations[Temps.abilitySave - 1]));
			var as2 = Number(What(AbilityScores.abbreviations[Temps.abilitySaveAlt - 1]));
			if (as1 < as2) Temps.abilitySave = Temps.abilitySaveAlt;
		}

		var fAB = [];
		var fTrans = {};
		//add features of the class
		for (prop in classObj.features) {
			var cPropAtt = classObj.features[prop];
			var fNm = ("0" + cPropAtt.minlevel).slice(-2) + ((/subclassfeature/i).test(prop) ? "" : "()") + cPropAtt.name;
			//subClObj && subClObj.features[prop]
			if (fNm.toString().length > 2) {
				fAB.push(fNm);
				fTrans[fNm] = {name: prop, list: "ClassList", item: aClass};
			}
		}

		//add features of subclass
		if (subClObj && subClObj.features) {
			for (prop in subClObj.features) {
				var csPropAtt = subClObj.features[prop];
				var fNm = ("0" + csPropAtt.minlevel).slice(-2) + csPropAtt.name;
				if (fNm.toString().length > 2) {
					fAB.push(fNm);
					fTrans[fNm] = {name: prop, list: "ClassSubList", item: classes.known[aClass].subclass};
				}
			}
		}

		fAB.sort();

		for (var f = 0; f < fAB.length; f++) {
			var propAtt = fTrans[fAB[f]];
			if (subClObj && propAtt.list === "ClassList" && subClObj.features[propAtt.name]) continue; // skip any features from the class if a subclass is known and has that same feature
			Temps.features[propAtt.name] = tDoc[propAtt.list][propAtt.item].features[propAtt.name];
		}

		//make fullname if not defined by subclass
		if (Temps.fullname === "") {
			Temps.fullname = Temps.name + (Temps.subname ? " (" + Temps.subname + ")" : "");
		}

		//see if this class is a spellcaster and what we need to do with that
		if (Temps.spellcastingFactor) {
			var casterType = !isNaN(Temps.spellcastingFactor) ? "default" : Temps.spellcastingFactor.replace(/\d/g, "");
			var casterFactor = !isNaN(Temps.spellcastingFactor) ? Number(Temps.spellcastingFactor) : (/\d/g).test(Temps.spellcastingFactor) ? Number(Temps.spellcastingFactor.match(/\d/g).join("")) : 1;
			// now only continue if the class level is the factor or higher
			var casterAtCurLvl = Math.max(casterFactor, 1) <= classes.known[aClass].level;
			// or if the class has its own spell slot progression, check against that
			if (!casterAtCurLvl && Temps.spellcastingTable && Temps.spellcastingTable[classes.known[aClass].level]) {
				casterAtCurLvl = 0 < Temps.spellcastingTable[classes.known[aClass].level].reduce(function (total, num) {
					return total + num;
				});
			}
			if (casterAtCurLvl) {
				// add one to the casterType for seeing if this casterType is multiclassing later on
				if (multiCaster[casterType]) {
					multiCaster[casterType] += 1;
				} else {
					multiCaster[casterType] = 1;
				}
				// create the base object (or update if already exists)
				CreateCurrentSpellsEntry("class", aClass);
				// then update this base object so that it is a spellcasting class with options
				var cSpells = CurrentSpells[aClass];
				cSpells.list = Temps.spellcastingList ? Temps.spellcastingList : {class : aClass};
				cSpells.known = Temps.spellcastingKnown ? Temps.spellcastingKnown : "";
				cSpells.typeSp = !cSpells.known || !cSpells.known.spells || isArray(cSpells.known.spells) || !isNaN(cSpells.known.spells) ? "known" : cSpells.known.spells;
				cSpells.factor = [casterFactor, casterType];
				cSpells.spellsTable = Temps.spellcastingTable ? Temps.spellcastingTable : false;
				if (Temps.spellcastingExtra) cSpells.extra = Temps.spellcastingExtra;
			} else if (CurrentSpells[aClass]) {
				// not high enough level to be a spellcaster anymore, so remove the object if it exists
				delete CurrentSpells[aClass];
				CurrentUpdates.types.push("spells");
			}
		}

		//add number of attacks to temp array
		temp.push(Temps.attacks[Math.min(classes.known[aClass].level, Temps.attacks.length) - 1]);
	}
	//pick highest number of attacks in temp array and put that into global classes variable
	classes.attacks = Math.max.apply(Math, temp);

	//reset the global variable for spellcasting levels
	classes.spellcastlvl = {default : 0, warlock : 0};
	//loop through the classes to find the new spellcasting level totals (can't be done in previous loop, because we need to know the total amount of casters of each type, which is set in previous loop)
	for (var aClass in classes.known) {
		var Temps = CurrentClasses[aClass];
		var cSpells = CurrentSpells[aClass];
		// don't go on if this is not a spellcaster or its factor is lower than its level (thus, no spell slots at this level)
		if (!cSpells || !cSpells.factor || (!Temps.spellcastingTable && cSpells.factor[0] > cSpells.level)) continue;
		var casterFactor = cSpells.factor[0];
		var casterType = cSpells.factor[1];
		// Now calculate the effective caster level and add it to the casterType
		if (Temps.spellcastingTable && multiCaster[casterType] === 1) {
			var casterLvl = Math.min(Temps.spellcastingTable.length - 1, classes.known[aClass].level);
			// Sum the values in the row at the current caster level and add it to the otherTables
			classes.spellcastlvl.otherTables = !classes.spellcastlvl.otherTables ? Temps.spellcastingTable[casterLvl] : classes.spellcastlvl.otherTables.map(function (num, idx) {
				return num + Temps.spellcastingTable[casterLvl][idx];
			});
		} else {
			if (classes.spellcastlvl[casterType] == undefined) classes.spellcastlvl[casterType] = 0;
			classes.spellcastlvl[casterType] += Math[multiCaster[casterType] > 1 && !Temps.spellcastingFactorRoundupMulti ? "floor" : "ceil"](cSpells.level / casterFactor);
		}
	}

	if (!NotAtStartup) { // add the current classes.known into classes.old on startup of the sheet
		for (var aClass in classes.known) {
			classes.old[aClass] = {
				classlevel : classes.known[aClass].level,
				subclass : classes.known[aClass].subclass,
				fullname : CurrentClasses[aClass].fullname
			}
		}
		classes.oldspellcastlvl = classes.spellcastlvl;
		classes.oldprimary = classes.primary;
	} else { // if not a startup event, update the field with the CurrentSpells variable
		SetStringifieds("spells");
	}

	return false;
};

// apply the effect of the classes
function ApplyClasses(inputclasstxt, isFieldVal) {
	isFieldVal = isFieldVal ? isFieldVal : false;
	classes.field = inputclasstxt;

	// Stop if class is set to manual or if the entered classes are the same as classes.known
	if (CurrentVars.manual.classes || FindClasses(true, isFieldVal)) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying the class(es)...");
	calcStop();
	thermoM(1/5); // Increment the progress bar

	// Put hit dice on sheet
	var hdChanged = false;
	if (classes.hd.length > 0) classes.hd.sort(function (a, b) { return a - b; }); // sort by biggest HD
	for (var i = 0; i < 3; i++) { // loop through the 3 HD fields
		var hdLvl = classes.hd[i] ? Math.min(classes.hd[i][1], 999) : "";
		var hdDie = classes.hd[i] ? classes.hd[i][0] : "";
		if (!hdChanged) hdChanged = What("HD" + (i+1) + " Level") != hdLvl || What("HD" + (i+1) + " Die") != hdDie;
		Value("HD" + (i+1) + " Level", hdLvl);
		Value("HD" + (i+1) + " Die", hdDie);
	}
	// If the HD changed, prompt the user about this
	if (hdChanged) CurrentUpdates.types.push("hp");

	thermoM(2/5); // Increment the progress bar

	// Add attributes of each class, if we didn't do so already
	var primaryChange = !classes.oldprimary || classes.oldprimary !== classes.primary;
	for (var aClass in classes.known) {
		// don't process this class if it already existed, but do process it if it became the new primary class
		if (classes.old[aClass] && (!primaryChange || classes.primary !== aClass)) continue;
		// process its attributes
		ApplyClassBaseAttributes(true, aClass, classes.primary == aClass);
		// set the tooltip if the new primary class
		if (classes.primary == aClass) {
			AddTooltip("Equipment.menu", "Click here to add equipment to the adventuring gear section, or to reset it (this button does not print).\n\nIt is recommended to pick a pack first before you add any background's items.\n\n" + CurrentClasses[classes.primary].equipment);
		}
	}

	thermoM(3/5); // Increment the progress bar

	// Set some things dependent on class-levels
	SetTheAbilitySaveDCs();
	AddAttacksPerAction();
	if (MakeClassMenu()) { // Show the option button if a class has features that offers a choice
		DontPrint("Class Features Menu");
	} else {
		Hide("Class Features Menu");
	}

	// Have the prompt check if something changed in Ability Score Increases gained form levels
	CurrentUpdates.types.push("testasi");

	thermoM(4/5); //increment the progress dialog's progress

	// If something changed in spellcasting
	if (classes.oldspellcastlvl.toSource() != classes.spellcastlvl.toSource()) {
		thermoTxt = thermoM("Setting spell slots...", false); //change the progress dialog text
		// Set the spell slots of the class' levels
		for (var ss = 0; ss <= 8; ss++) {
			var SpellSlotsName = "SpellSlots.CheckboxesSet.lvl" + (ss + 1);
			var SpellSlotsField = Number(What(SpellSlotsName));
			var SpellSlotsTotal = SpellSlotsField;
			for (var casterType in classes.spellcastlvl) {
				var spTable = tDoc[casterType + "SpellTable"];
				if (casterType == "otherTables") {
					SpellSlotsTotal += classes.spellcastlvl.otherTables[ss];
				} else if (spTable) {
					SpellSlotsTotal += spTable[Math.min(spTable.length - 1, classes.spellcastlvl[casterType])][ss];
					SpellSlotsTotal -= classes.oldspellcastlvl[casterType] ? spTable[Math.min(spTable.length - 1, classes.oldspellcastlvl[casterType])][ss] : 0;
				}
			}
			if (classes.oldspellcastlvl.otherTables) SpellSlotsTotal -= classes.oldspellcastlvl.otherTables[ss];
			if (SpellSlotsField != SpellSlotsTotal) Value(SpellSlotsName, SpellSlotsTotal);
		}
		// Have the prompt check if something changed to warrant generating new spell sheets
		CurrentUpdates.types.push("testclassspellcasting");
	}

	thermoM(thermoTxt, true); // Stop progress bar

	ApplyClassLevel(); // Lastly, update the level and level-dependent features (or just the class features if level didn't change)
};

// a function to apply the class level depending on how it was changed
function ApplyClassLevel(noChange) {
	if (IsCharLvlVal !== false) { // called during a Level field change event
		IsCharLvlVal = classes.totallevel;
	} else if (Number(What("Character Level")) != classes.totallevel) {
		Value("Character Level", classes.totallevel);
	} else if (!noChange) { // the classes changed, but the total level didn't, so only call to update the class features
		UpdateLevelFeatures("class");
	}
}

// apply the Character Level field change (field validation)
function levelFieldVal() {
	var lvlOld = Number(What(event.target.name));
	var lvl = Number(event.value);
	if (lvlOld == lvl) { // no level change, but it could be an empty string changed to '0' or vice versa
		event.value = lvl > 0 ? lvl : '';
		return;
	}

	IsCharLvlVal = lvl; // save level to global variable

	if (lvl != classes.totallevel && IsNotReset && IsNotImport) { // new level not the same as total level for found classes, so ask how to allocate this level to a (new) class
		AskMulticlassing();
	}

	if (IsCharLvlVal != lvl) { // the above might have changed the total level, so correct that
		lvl = IsCharLvlVal;
	}

	UpdateLevelFeatures("all", Math.max(1,lvl)); // update all level features and use the set level

	// the following should change to be part UpdateLevelFeatures() once custom companions can be imported
	UpdateRangerCompanions(lvl); // update level-dependent things for any ranger companions

	IsCharLvlVal = false; // reset global variable

	// make sure to update the experience points (or similar system) and alert the user
	CurrentUpdates.types.push("xp");

	event.value = lvl > 0 ? lvl : '';
}

function getCurrentLevelByXP(level, exp) {
	level = Number(level);
	exp = Number(exp.replace(",", "."));
	var LVLbyXP = ExperiencePointsList.reduce(function(acc, val) { return acc += exp >= Number(val) ? 1 : 0; }, 0);
	var XPforLVL = !level || isNaN(level) || level < 2 ? 0 : ExperiencePointsList[Math.min(ExperiencePointsList.length - 1, level - 1)];
	return [LVLbyXP, XPforLVL];
}

//Check if the level or XP entered matches the XP or level
function CalcExperienceLevel() {
	// initialise some variables
	var Level = Number(What("Character Level"));
	var exp = What("Total Experience");
	var getLvlXp = getCurrentLevelByXP(Level, exp);
	var LVLbyXP = getLvlXp[0];
	var XPforLVL = getLvlXp[1];

	// if the level and experience points match or both are 0, stop this function
	// also stop this function if the level is higher than the xp table allows (> 20)
	// also stop this function if the experience points are more than the xp table allows (> 1000000000)
	if (Level === LVLbyXP || (!Level && !exp) || Level >= ExperiencePointsList.length || LVLbyXP >= (ExperiencePointsList.length)) return;

	// create the strings for the dialog
	var LVLtxt = Level >= ExperiencePointsList.length ? "a level higher than 20" : "level " + Level;
	var XPtxt = !exp ? "no" : "only " + exp;
	var StringHigherLvl = "This character has " + XPtxt + " experience points. This is not enough to attain the level is currently has (" + Level + "). You need at least " + XPforLVL + " experience points for " + LVLtxt + ".\n\nYou can upgrade the experience points to " + XPforLVL + ", downgrade the level to " + LVLbyXP + ", or leave it as it is.";
	var StringHigherXP = "This character is level " + Level + ", but already has " + exp + " experience points. This amount is enough to attain level " + LVLbyXP + ".\n\nYou can upgrade the level to " + LVLbyXP + ", downgrade the experience points to " + XPforLVL + ", or leave it as it is.";

	var Experience_Dialog = {
		result : false,
		//when pressing the ok button
		commit : function (dialog) {
			this.result = Level > LVLbyXP ? "XPre" : "LVLr";
		},
		//when pressing the other button
		other : function (dialog) {
			this.result = Level > LVLbyXP ? "LVLr" : "XPre";
			dialog.end("ok");
		},
		description : {
			name : "Level and Experience Points do not match!",
			elements : [{
				type : "view",
				elements : [{
					type : "static_text",
					name : "Level and Experience Points do not match!",
					item_id : "head",
					alignment : "align_top",
					font : "heading",
					bold : true,
					height : 21,
					char_width : 45
				}, {
					type : "static_text",
					item_id : "text",
					alignment : "align_fill",
					font : "dialog",
					char_width : 45,
					wrap_name : true,
					name : Level > LVLbyXP ? StringHigherLvl : StringHigherXP
				}, {
					type : "ok_cancel_other",
					ok_name : Level > LVLbyXP ? "Upgrade XP to " + XPforLVL : "Upgrade level to " + LVLbyXP,
					other_name : Level > LVLbyXP ? "Downgrade level to " + LVLbyXP : "Downgrade XP to " + XPforLVL,
				}]
			}]
		}
	};

	var dia = app.execDialog(Experience_Dialog);
	switch (Experience_Dialog.result) {
		case "LVLr":
			Value("Character Level", LVLbyXP);
			break;
		case "XPre":
			Value("Total Experience", XPforLVL);
			break;
	};
};

function AddExperiencePoints() {
	if (!What("Add Experience")) return;
	var XPS = Number(What("Total Experience").replace(/,/g, "."));
	var AddXP = Number(What("Add Experience").replace(/,/g, "."));
	Value("Total Experience", RoundTo(XPS + AddXP, 0.01));
	Value("Add Experience", "");
	CalcExperienceLevel(true);
};

function ParseRace(input) {
	var resultArray = ["", "", []];
	if (!input) return resultArray;

	input = removeDiacritics(input);
	var foundLen = 0;
	var foundDat = 0;

	for (var key in RaceList) {
		var kObj = RaceList[key];

		if (!(kObj.regExpSearch).test(input) // see if race regex matches
			|| testSource(key, kObj, "racesExcl") // test if the race or its source isn't excluded
		) continue;

		// only go on with this entry if:
		// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
		// or if we are not using the search length, just look at the newest source date
		var tempDate = sourceDate(kObj.source);
		if ((!ignoreSearchLength && kObj.name.length < foundLen) || (!ignoreSearchLength && kObj.name.length == foundLen && tempDate < foundDat) || (ignoreSearchLength && tempDate <= foundDat)) continue;

		// we have a match, set the values
		resultArray = [key, "", []];
		foundLen = kObj.name.length;
		foundDat = tempDate;

		// now see if we need to look for racial variants
		if (kObj.variants) {
			var foundLen2 = 0;
			var foundDat2 = 0;
			for (var sub = 0; sub < kObj.variants.length; sub++) { // scan string for all variants of the race
				var theR = key + "-" + kObj.variants[sub];
				var rVars = RaceSubList[theR];
				if (!rVars) {
					console.println("The racial variant '" + kObj.variants[sub] + "' for the '" + kObj.name + "' race is not found in the RaceSubList. Please contact the author of this race to have this issue corrected. The variant will be ignored for now.");
					console.show();
					continue;
				}
				var theRname = rVars.name ? rVars.name : kObj.variants[sub];

				// test if the racial variant or its source isn't excluded
				if (testSource(theR, rVars, "racesExcl")) continue;

				resultArray[2].push(kObj.variants[sub]);

				// see if racial variant regex matches
				if (!(rVars.regExpSearch).test(input)) continue;

				// only go on with this entry if:
				// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
				// or if we are not using the search length, just look at the newest source date
				var tempDate = sourceDate(rVars.source);
				if ((!ignoreSearchLength && theRname.length < foundLen2) || (!ignoreSearchLength && theRname.length == foundLen2 && tempDate < foundDat) || (ignoreSearchLength && tempDate <= foundDat)) continue;

				// we have a match, set the values
				resultArray[1] = kObj.variants[sub];
				foundLen2 = theRname.length;
				foundDat2 = tempDate;
			}
		}
	}
	return resultArray;
};

//detects race entered and put information to global CurrentRace variable
function FindRace(inputracetxt, novardialog) {
	var tempString = inputracetxt === undefined ? What("Race Remember") : inputracetxt;
	var tempFound = ParseRace(tempString);

	CurrentRace = {
		known : tempFound[0],
		variant : tempFound[1],
		variants : tempFound[2],
		level : 0,
		name : "", //must exist
		source : "", //must exist
		plural : "", //must exist
		size : 3, //must exist
		age : "", //must exist
		height : "", //must exist
		weight : "", //must exist
		trait : "", //must exist
		features : "" //must exist
	};

	if (inputracetxt === undefined && CurrentVars.manual.race) return; // don't do the rest of this function if race is set to manual and this is not a startup event

	//show the option button if the race has selectable variants
	if (!tempFound[2].length) {
		Hide("Race Features Menu");
	} else {
		DontPrint("Race Features Menu");
		// if no variant was found, ask the user if he wants to select one
		if (!novardialog && IsNotImport && inputracetxt && !tempFound[1] && !CurrentVars.manual.race) {
			var aRace = RaceList[tempFound[0]];
			var rSource = stringSource(aRace, 'first,abbr', "    [", "]");
			var aBasic = "Basic " + aRace.name.toLowerCase() + rSource;
			var rVarNames = [aBasic];
			var rVarObj = {};
			rVarObj[aBasic] = "";
			for (var i = 0; i < tempFound[2].length; i++) {
				var varR = tempFound[2][i];
				var varRobj = RaceSubList[tempFound[0] + "-" + varR];
				var varRname = varR.capitalize() + " " + aRace.name.toLowerCase();
				var varRsrc = varRobj && varRobj.source ? stringSource(varRobj, 'first,abbr', "    [", "]") : rSource;
				rVarNames.push(varRname + varRsrc);
				rVarObj[varRname + varRsrc] = varR;
			}
			var aResp = AskUserOptions("Select Racial Variant", "The '" + aRace.name + "' race offers a choice of variants. Note that variants are not the same as subraces. If you want to select a different subrace, use the drop-down box in the Race field.\n\nYou can change the selected variant by typing the full name of another variant into the Race field, or with the Racial Options button in the Racial Traits section on the second page.", rVarNames, "radio", true);
			if (rVarObj[aResp]) CurrentRace.variant = rVarObj[aResp];
		}
	}

	// set the properties of the CurrentRace object
	if (CurrentRace.known) {
		// the properties of the main race
		for (var prop in RaceList[CurrentRace.known]) {
			if ((/^(known|variants?|level)$/i).test(prop)) continue;
			CurrentRace[prop] = RaceList[CurrentRace.known][prop];
		}
		// the properties of the variant (overriding anything from the main)
		if (CurrentRace.variant) {
			var subrace = CurrentRace.known + "-" + CurrentRace.variant;
			for (var prop in RaceSubList[subrace]) {
				if ((/^(known|variants?|level)$/i).test(prop)) continue;
				CurrentRace[prop] = RaceSubList[subrace][prop];
			}
			// --- backwards compatibility --- //
			// if an old attribute exists in the racial variant, but the RaceList object uses the new attribute name, make sure the variant's version is used
			var backwardsAttr = [["improvements", "scorestxt"], ["armor", "armorProfs"], ["addarmor", "armorAdd"], ["weaponprofs", "weaponProfs"], ["weapons", "weaponsAdd"]];
			for (var i = 0; i < backwardsAttr.length; i++) {
				var aBW = backwardsAttr[i];
				if (RaceSubList[subrace][aBW[0]] && RaceSubList[subrace][aBW[1]] == undefined && RaceList[CurrentRace.known][aBW[1]]) delete CurrentRace[aBW[1]];
			}

		}
	}

	// set the current race level when loading the sheet
	if (!inputracetxt && CurrentRace.known) CurrentRace.level = What("Character Level") ? Number(What("Character Level")) : 1;
};

//apply the effect of the player's race
function ApplyRace(inputracetxt, novardialog) {
	if (IsSetDropDowns) return; // when just changing the dropdowns or race is set to manual, don't do anything

	if (CurrentVars.manual.race) { // if race is set to manual, just put the text in the Race Remember
		var newRace = ParseRace(inputracetxt);
		Value("Race Remember", newRace[0] + (newRace[1] ? "-" + newRace[1]  : ""));
		return;
	}

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying race...");
	calcStop();

	var newRace = ParseRace(inputracetxt);
	var oldRace = [CurrentRace.known, CurrentRace.variant];
	if (newRace[0] !== oldRace[0] || newRace[1] !== oldRace[1]) {
		if (CurrentRace.known) {// remove the old race if one was detected
			thermoTxt = thermoM("Removing the " + CurrentRace.name + " features...", false); //change the progress dialog text

			// Remove tooltips from some fields
			var tooltipRemove = ["Height", "Weight", "Age"];
			for (i = 0; i < tooltipRemove.length; i++) {
				AddTooltip(tooltipRemove[i], "", "");
			};
			AddTooltip("Size Category", "Selected size category will effect encumbrance on the second page.");
			Value("Racial Traits", "", "");

			// Remove the common attributes from the CurrentRace object and remove the CurrentRace features
			UpdateLevelFeatures("race", 0);
		}
		FindRace(inputracetxt, novardialog);
		Value("Race Remember", CurrentRace.known + (CurrentRace.variant ? "-" + CurrentRace.variant : ""));
	}

	if (CurrentRace.known && (CurrentRace.known !== oldRace[0] || CurrentRace.variant !== oldRace[1])) {
		thermoTxt = thermoM("Applying the " + CurrentRace.name + " features...", false); //change the progress dialog text
		thermoM(1/10); //increment the progress dialog's progress

		// Add race height
		var theHeight = What("Unit System") === "metric" && CurrentRace.heightMetric ? CurrentRace.heightMetric : CurrentRace.height;
		AddTooltip("Height", CurrentRace.plural + theHeight);
		// Add race weight
		var theWeight = What("Unit System") === "metric" ? CurrentRace.weightMetric : CurrentRace.weight;
		AddTooltip("Weight", CurrentRace.plural + theWeight);
		// Add race age
		AddTooltip("Age", CurrentRace.plural + CurrentRace.age);
		// Add race size
		PickDropdown("Size Category", CurrentRace.size);
		var theSize = tDoc.getField("Size Category").getItemAt(CurrentRace.size, false);
		AddTooltip("Size Category", CurrentRace.plural + " size is " + theSize + ".\nSelected size category will affect encumbrance on the second page.");
		// Add racial traits
		var tempString = stringSource(CurrentRace, "full,page", CurrentRace.name + " is found in ", ".");
		var theTraits = What("Unit System") === "imperial" ? CurrentRace.trait : ConvertToMetric(CurrentRace.trait, 0.5);
		Value("Racial Traits", theTraits, tempString);

		thermoM(2/6); //increment the progress dialog's progress

		// Process the common attributes from the CurrentRace object and its features
		UpdateLevelFeatures("race");

		thermoM(3/4); //increment the progress dialog's progress
	};

	thermoTxt = thermoM("Finalizing the changes of the race...", false); //change the progress dialog text
	SetTheAbilitySaveDCs();

	SetStringifieds(); // set the global variables to their fields for future reference

	thermoM(thermoTxt, true); // Stop progress bar
};

//search the string for possible weapon
function ParseWeapon(input, onlyInv) {
	var found = "";
	if (!input) return found;

	input = removeDiacritics(input.replace(/off.{0,3}hand/i, ""));
	var foundLen = 0;
	var foundDat = 0;
	for (var key in WeaponsList) {
		var kObj = WeaponsList[key];
		var bObj = kObj.baseWeapon ? WeaponsList[kObj.baseWeapon] : false;
		if ((onlyInv && kObj.weight == undefined) // see if only doing equipable items
			|| (kObj.baseWeapon && !bObj) // see if it has a baseWeapon, but that baseWeapon doesn't exist
			|| !kObj.regExpSearch || !(kObj.regExpSearch).test(input) // see if the regex matches
			|| testSource(key, kObj, "weapExcl") // test if the armour or its source isn't excluded
		) continue;

		/* Only go with this entry if:
			(1) we are using the search length (default) and this entry has a longer name
			or (2) we are using the search length and this entry has an equal length name but has a newer source
			or (3) if we are not using the search length, just look at the newest source date.
		However,
			use its baseWeapon name length if it is more than its name length.
			or the lenght of the matching regex if it is less. */
		var tempNmLn = ignoreSearchLength ? 0 : Math.min(input.length, input.match(kObj.regExpSearch)[0].length, kObj.name.length);
		if (!ignoreSearchLength && bObj) {
			// has a baseWeapon, so use that as well to determine the length to test with
			var tempNmLn = Math.max(tempNmLn, Math.min(input.length, (bObj.regExpSearch).test(input) ? input.match(bObj.regExpSearch)[0].length : 100, bObj.name.length));
		}
		var tempDate = sourceDate(kObj.source);
		if ((!ignoreSearchLength && tempNmLn < foundLen)
			|| (!ignoreSearchLength && tempNmLn == foundLen && tempDate < foundDat)
			|| (ignoreSearchLength && tempDate <= foundDat)
		) continue;

		// we have a match, set the values
		found = key;
		foundLen = tempNmLn
		foundDat = tempDate;
	}
	return found;
};

//detects weapons entered and put information to global CurrentWeapons variable
function FindWeapons(ArrayNmbr) {
	var tempArray = [];
	var startArray = ArrayNmbr;
	var endArray = ArrayNmbr + 1;

	//do all the weapons, if no ArrayNmbr has been entered
	if (ArrayNmbr === undefined) {
		for (var i = 0; i < FieldNumbers.attacks; i++) {
			CurrentWeapons.field[i] = What("Attack." + (i + 1) + ".Weapon Selection").toLowerCase();
		}
		var startArray = 0;
		var endArray = CurrentWeapons.field.length;
	}

	//parse the weapons into tempArray
	for (var j = startArray; j < endArray; j++) {
		var tempString = CurrentWeapons.field[j];
		tempArray[j] = [
			ParseWeapon(tempString), //see if the field contains a known weapon
			0, // the magical bonus
			true, // whether to add the ability modifier to damage or not
			"", // the spell/cantrip this attack refers to
			[] // if a spell/cantrip, this will be an array of the classes on which spell list this attack is
		];

		var theWea = WeaponsList[tempArray[j][0]];

		//add magical bonus, denoted by a "+" or "-"
		var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
		if (magicRegex.test(tempString)) {
			tempArray[j][1] = parseFloat(tempString.match(magicRegex)[1]);
		}

		//add the true/false switch for adding ability score to damage or not
		tempArray[j][2] = theWea && theWea.abilitytodamage !== undefined ? theWea.abilitytodamage : true;

		//if this is a spell or a cantrip, see if we can link it to an object in the CurrentCasters variable
		var isSpell = !theWea ? ParseSpell(tempString) : theWea.SpellsList ? theWea.SpellsList : SpellsList[tempArray[j][0]] ? tempArray[j][0] : ParseSpell(tempArray[j][0]);
		if (isSpell && (!theWea || (/spell|cantrip/i).test(theWea.type + theWea.list))) {
			tempArray[j][3] = isSpell;
			if (!tempArray[j][0]) tempArray[j][2] = false;
			tempArray[j][4] = isSpellUsed(isSpell);
		};

		//put tempArray in known
		CurrentWeapons.known[j] = tempArray[j];
	};
};

//update the weapons to apply the change in proficiencies
function ReCalcWeapons(justProfs, force) {
	// Stop calculations
	calcStop();

	justProfs = justProfs && !force && !CurrentEvals.atkAdd;
	for (var xy = 0; xy < CurrentWeapons.known.length; xy++) {
		if (CurrentWeapons.field[xy]) {
			ApplyWeapon(CurrentWeapons.field[xy], "Attack." + (xy + 1) + ".Weapon Selection", true, justProfs);
		};
	};
};

function SetWeaponsdropdown(forceTooltips) {
	var tempString = "Type in the name of the attack (or select it from the drop-down menu) and all its attributes will be filled out automatically, provided that its a recognized attack.";
	tempString += "\n\n" + toUni("Magic bonus") + '\nAny magical bonus you type in this field is added to both the to hit and damage (e.g. type " +2Longsword").';
	tempString += "\n\n" + toUni("Off-hand weapons") + '\nIf the name or description fields include the word "off-hand", "secondary", "spell", or "cantrip", the ability modifier will only be added to the to hit bonus, and not to the damage.';
	tempString += "\n\n" + toUni("Damage Die") + '\nThis is determined by the value in the "modifier" field, see below.';
	tempString += "\n\n" + toUni("To Hit and Damage calculations") + '\nThese are calculated using the proficiency bonus, the selected ability modifier and any bonus added in the "modifier" fields, see below.';
	tempString += "\n\n" + toUni("Context-aware calculations") + "\nSome class features, racial features, and feats can affect the attack to hit and damage calculations. You can read what these are by clicking the button in this line.";
	tempString += "\n\n" + toUni("Modifier or blue text fields") + '\nThese are hidden by default. You can toggle their visibility with the "Mods" button in the \'JavaScript Window\' or the "Modifiers" bookmark.';

	var added = [], otherLists = [];
	var weaponlists = {
		startlist : [],
		endlist : [
			"Axe, Hand",
			"Axe, Battle",
			"Axe, Great",
			"Bow, Short",
			"Bow, Long",
			"Crossbow, Hand",
			"Crossbow, Light",
			"Crossbow, Heavy",
			"Hammer, Light",
			"Hammer, War",
			"Hammer, Great",
			"Sword, Short",
			"Sword, Long",
			"Sword, Great"
		],
		melee : [],
		ranged : [],
		improvised : [],
		spell : []
	};

	for (var key in WeaponsList) {
		var weaKey = WeaponsList[key];
		var weaList = weaKey.list ? weaKey.list.toLowerCase() : "";
		if (!weaList || testSource(key, weaKey, "weapExcl")) continue; // test if the weapon or its source is set to be included
		if (!weaponlists[weaList]) {
			otherLists.push(weaList);
			weaponlists[weaList] = [];
		}
		var weaName = WeaponsList[key].name.capitalize();
		if (added.indexOf(weaName) === -1) {
			added.push(weaName);
			weaponlists[weaList].push(weaName);
		}
	};

	// make the definitive list of weapons for the dropdown box
	var setweapons = [];
	var addWeaList = function (weArr, addFirst, noSort, addAtStart) {
		if (!noSort) weArr.sort();
		if (addFirst) weArr.unshift(addFirst);
		if (weArr.length) {
			weArr.unshift("");
			setweapons = !addAtStart ? setweapons.concat(weArr) : weArr.concat(setweapons);
		}
	};
	addWeaList(weaponlists.melee.concat(weaponlists.ranged), "Unarmed Strike"); // add the natural weapons
	addWeaList(weaponlists.improvised, "Improvised Weapon"); // add the improvised weapons
	addWeaList(weaponlists.spell, "Spell Attack"); // add the spells/cantrips
	addWeaList(weaponlists.endlist, false, true); // add the endlist weapons
	// now add any lists that are not preset
	otherLists.sort();
	for (var i = 0; i < otherLists.length; i++) addWeaList(weaponlists[otherLists[i]]);

	// first set the companion sheets attack dropdowns
	var AScompA = What("Template.extras.AScomp").split(",");
	var listToSource = setweapons.toSource();
	for (var i = 0; i < AScompA.length; i++) {
		var prefix = AScompA[i];
		for (var c = 1; c <= 3; c++) {
			var theFld = prefix + "Comp.Use.Attack." + c + ".Weapon Selection";
			var theFldSuNm = prefix + "Comp.Use.Attack." + c + ".Proficiency";
			if (tDoc.getField(theFldSuNm).submitName === listToSource) {
				if (forceTooltips) AddTooltip(theFld, tempString);
				continue; // no changes, so no reason to set this field
			}
			tDoc.getField(theFldSuNm).submitName = listToSource;
			var theFldVal = What(theFld);
			IsNotWeaponMenu = false;
			tDoc.getField(theFld).setItems(setweapons);
			IsNotWeaponMenu = true;
			if (theFldVal !== What(theFld)) Value(theFld, theFldVal, tempString);
		};
	}

	// now add the special weapons added by features, as we only want those on the first page
	addWeaList(weaponlists.startlist, false, false, true);
	listToSource = setweapons.toSource();

	// lastly set this array for the attack dropdowns on the first page
	for (var i = 1; i <= FieldNumbers.attacks; i++) {
		var theFld = "Attack." + i + ".Weapon Selection";
		var theFldSuNm = "Attack." + i + ".Proficiency";
		if (tDoc.getField(theFldSuNm).submitName === listToSource) {
			if (forceTooltips) AddTooltip(theFld, tempString);
			continue; // no changes, so no reason to set this field
		}
		tDoc.getField(theFldSuNm).submitName = listToSource;
		var theFldVal = What(theFld);
		IsNotWeaponMenu = false;
		tDoc.getField(theFld).setItems(setweapons);
		IsNotWeaponMenu = true;
		if (theFldVal !== What(theFld)) Value(theFld, theFldVal, tempString);
	};
};

function SetArmordropdown(forceTooltips) {
	var tempString = toUni("Armor AC") + "\nType the name of the armor (or select it from the drop-down menu) and its AC and features will be filled out automatically, provided that its a recognized armor.";
	tempString += "\n\n" + toUni("Alternative spelling") + '\nYou can use alternative spellings, descriptions and embellishments. For example: "Golden Breastplate of Lathander" will result in the AC and attributes of a "Breastplate".';
	tempString += "\n\n" + toUni("Unarmored Defense") + '\nUsing either "unarmored", "naked", "nothing", or "no armor" combined with an abbreviation of one of the six ability scores will result in the armor being calculated with that ability score. For example: "Unarmored Defense (Int)".\nIf you do not include the abbreviation, the sheet will auto-fill an armor AC of 10.';
	tempString += "\n\n" + toUni("Magic bonus") + '\nAny magical bonus you type in this field is added to the AC of the armor type. For example: "Chain mail +1" or "Plate -2".';

	var added = [], otherLists = [];
	var presetLists = ["firstlist", "magic", "light", "medium", "heavy"];
	var aLists = { startlist : [], firstlist : [""], light : [""], medium : [], heavy : [], magic : [] };
	for (var key in ArmourList) {
		var theArm = ArmourList[key]
		// first test if the armour or its source isn't excluded
		if (testSource(key, theArm, "armorExcl")) continue;
		var armNm = theArm.name.capitalize();
		var armList = theArm.list ? theArm.list.toLowerCase() : theArm.type ? theArm.type.toLowerCase() : "";
		// test if the armour should be excluded (no list/type) or is already listed
		if (!armList || added.indexOf(armNm) !== -1) continue;
		added.push(armNm);

		if (!aLists[armList]) {
			otherLists.push(armList);
			aLists[armList] = [armNm];
		} else {
			aLists[armList].push(armNm);
		}
	};

	// now create the final array element to set to the armour field
	var setarmours = [];

	// first add the startlist if it has any members
	if (aLists.startlist.length) {
		aLists.startlist.sort();
		aLists.startlist.unshift("");
		setarmours = aLists.startlist;
	}
	// then add the presetLists
	for (var i = 0; i < presetLists.length; i++) setarmours = setarmours.concat(aLists[presetLists[i]]);
	// then add the newly added otherLists
	otherLists.sort();
	for (var i = 0; i < otherLists.length; i++) {
		aLists[otherLists[i]].sort();
		aLists[otherLists[i]].unshift("");
		setarmours = setarmours.concat(aLists[otherLists[i]]);
	}

	var listToSource = setarmours.toSource();
	if (tDoc.getField("AC Armor Description").submitName === listToSource) {
		if (forceTooltips) AddTooltip("AC Armor Description", tempString);
		return; // no changes, so no reason to do any more
	}
	tDoc.getField("AC Armor Description").submitName = listToSource;

	var theFldVal = What("AC Armor Description");
	tDoc.getField("AC Armor Description").setItems(setarmours);
	Value("AC Armor Description", theFldVal, tempString);
};

function SetBackgrounddropdown(forceTooltips) {
	var ArrayDing = [""];
	var tempString = "";
	tempString += toUni("Background") + "\nType in the name of the background (or select it from the drop-down menu) and its features and proficiencies will be filled out automatically, provided that its a recognized background.";
	tempString += "\n\n" + toUni("Changing background") + "\nIf you change the background, all the features of the previous background will be removed and the features of the new background will be applied.";

	for (var key in BackgroundList) {
		if (testSource(key, BackgroundList[key], "backgrExcl")) continue;
		ArrayDing.push(BackgroundList[key].name);
		var varArr = BackgroundList[key].variant ? BackgroundList[key].variant : [];
		for (var i = 0; i < varArr.length; i++) {
			var varKey = varArr[i];
			if (testSource(varKey, BackgroundSubList[varKey], "backgrExcl")) continue;
			var backNm = BackgroundSubList[varKey].name;
			if (ArrayDing.indexOf(backNm) === -1) ArrayDing.push(backNm);
		}
	};
	ArrayDing.sort();
	if (tDoc.getField("Background").submitName === ArrayDing.toSource()) {
		if (forceTooltips) AddTooltip("Background", tempString);
		return; //no changes, so no reason to do this
	}
	tDoc.getField("Background").submitName = ArrayDing.toSource();
	var theFldVal = What("Background");
	tDoc.getField("Background").setItems(ArrayDing);
	Value("Background", theFldVal, tempString);
};

function SetRacesdropdown(forceTooltips) {
	var tempString = "";
	var ArrayDing = [""];
	tempString += toUni("Race") + "\nType in the name of the race (or select it from the drop-down menu) and its traits and features will be filled out automatically, provided that its a recognized race. You are not limited by the names in the list. Just typing \"Drow\" will also be recognized, for example.";
	tempString += "\n\n" + toUni("Alternative spelling") + "\nDifferent, setting-dependent race names are recognized as well. For example, typing \"Moon Elf\" will result in all the traits and features of the \"High Elf\" from the Player's Handbook.";
	tempString += "\n\n" + toUni("Changing race") + "\nIf you change the race, all the features of the previous race will be removed and the features of the new race will be applied.";

	for (var key in RaceList) {
		if (testSource(key, RaceList[key], "racesExcl")) continue;
		var raceNm = RaceList[key].sortname ? RaceList[key].sortname : RaceList[key].name.capitalize();
		if (ArrayDing.indexOf(raceNm) === -1) ArrayDing.push(raceNm);
	}
	ArrayDing.sort();
	if (tDoc.getField("Race").submitName === ArrayDing.toSource()) {
		if (forceTooltips) AddTooltip("Race", tempString);
		return; //no changes, so no reason to do this
	}
	tDoc.getField("Race").submitName = ArrayDing.toSource();
	var theFldVal = What("Race");
	tDoc.getField("Race").setItems(ArrayDing);
	Value("Race", theFldVal, tempString);
};

//parse the results from the menu into an array
function getMenu(menuname) {
	try {
		var temp = app.popUpMenuEx.apply(app, Menus[menuname]);
	} catch (err) {
		var temp = null;
	}
	return temp === null ? ["nothing", "toreport"] : temp.toLowerCase().split("#");
};

/* ---- INVENTORY FUNCTIONS START ---- */

// set the value of the gear field to be remembered (on focus)
function RememberGearTempOnFocus() {
	event.target.temp = event.target.value;
};

// set the weight of the gear field (on blur)
function SetGearWeightOnBlur() {
	var theValue = event.target.value;
	var weightFld = event.target.name.replace("Row", "Weight");

	if (!theValue) {
		tDoc.resetForm([weightFld, event.target.name.replace("Row", "Amount")])
	} else if (event.target.temp && event.target.temp === theValue) {
		//do nothing
	} else {
		var theGear = ParseGear(theValue);
		if (theGear) {
			var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
			var theWeight = RoundTo(tDoc[theGear[0]][theGear[1]].weight * massMod, 0.001, true);
			var weightCurrent = What(weightFld);
			var setWeight = false;
			if (weightCurrent && event.target.temp) {
				var theGearOld = event.target.temp ? ParseGear(event.target.temp) : "";
				if (theGearOld && (theGearOld[0] !== theGear[0] || theGearOld[1] !== theGear[1])) setWeight = true;
			} else if (!weightCurrent || weightCurrent !== theWeight) {
				setWeight = true;
			}
			if (setWeight) Value(weightFld, theWeight);
		}
	}

	//now reset the temp
	delete event.target.temp;
};

// find if the entry is an equipment
function ParseGear(input) {
	if (!input) return false;
	var foundLen = 0;
	var result = false;
	var tempString = removeDiacritics(input.toLowerCase());

	//see if it is an armour
	var findArmor = ParseArmor(tempString, true);
	if (findArmor) {
		foundLen = tempString.match(ArmourList[findArmor].regExpSearch)[0].length;
		if (foundLen === tempString.length) foundLen = findArmor.length;
		result = ["ArmourList", findArmor];
	};

	//see if it is a weapon
	var findWeapon = ParseWeapon(tempString, true);
	if (findWeapon) {
		var testLen = tempString.match(WeaponsList[findWeapon].regExpSearch)[0].length;
		if (testLen === tempString.length) testLen = findWeapon.length;
		if (testLen > foundLen) {
			foundLen = testLen;
			result = ["WeaponsList", findWeapon];
		};
	};

	//see if it is an ammunition weapon
	var findAmmo = ParseAmmo(tempString, true);
	if (findAmmo) {
		var testLen = findAmmo[1];
		if (testLen > foundLen) {
			foundLen = testLen;
			result = ["AmmoList", findAmmo[0]];
		};
	};

	//see if it is gear
	for (var key in GearList) { //scan string for all gear
		var aList = GearList[key];
		if (!aList.name || aList.name === "-" || testSource(key, aList, "gearExcl")) continue;
		var searchName = aList.name.replace(/\uFEFF|,[^,]+$/g, "");
		var aListRegEx = MakeRegex(searchName);
		if ((aListRegEx).test(tempString)) {
			var testLen = searchName.length;
			if (testLen >= foundLen) {
				result = ["GearList", key];
				foundLen = testLen;
			};
		};
	};

	//see if it is a tool
	for (var key in ToolsList) { //scan string for all tools
		var aList = ToolsList[key];
		if (!aList.name || aList.name === "-" || testSource(key, aList, "gearExcl")) continue;
		var searchName = aList.name.replace(/\uFEFF|,[^,]+$/g, "");
		var aListRegEx = MakeRegex(searchName);
		if ((aListRegEx).test(tempString)) {
			var testLen = searchName.length;
			if (testLen >= foundLen) {
				result = ["ToolsList", key];
				foundLen = testLen;
			};
		};
	};

	return result;
};

// a way to add an item to one of the equipment sections
// area = "gear" "magic" "extra" "comp"
// column = "l", "m", "r"; can be followed/preceded by 'only' to limit searching to just that column
function AddToInv(area, column, item, amount, weight, location, searchRegex, AddTestReplace, checkKey, isCorrectUnits) {
	if (item == undefined || area == undefined) return;
	//set area and prefix, if any
	var prefix = area.indexOf("AScomp.") !== -1 ? area.substring(0, area.indexOf("AScomp.") + 7) : "";
	area = area.toLowerCase();
	if (!checkKey) {
		var isItem = ParseGear(item);
		if (isItem) checkKey = isItem[1]
	};
	//set start and end row
	var maxRow = FieldNumbers[(/adventuring|gear|magic/).test(area) ? "gear" : area.indexOf("extra") !== -1 ? "extragear" : area.indexOf("comp") !== -1 ? "compgear" : false];
	if (!maxRow) return;
	column = column ? column.toLowerCase() : "";
	var columnCalc = !column ? false : typePF && (/adventuring|gear/).test(area) ? (column.indexOf("r") !== -1 ? 1.5 : column.indexOf("m") !== -1 ? 3 : false) : (column.indexOf("r") !== -1 ? 2 : false);
	var startRow = area.indexOf("magic") !== -1 ? FieldNumbers.gearMIrow + 1 : columnCalc ? Math.round(maxRow / columnCalc + 1) : 1;
	var endRow = (/adventuring|gear/).test(area) && !What("Adventuring Gear Remember") ? maxRow - 4 : maxRow;

	//set start and end row for searching
	var startSearch = column.indexOf("only") !== -1 ? startRow : 1;
	var endSearch = column.indexOf("only") === -1 ? endRow : typePF && (/adventuring|gear/).test(area) ? (!columnCalc ? Math.round(maxRow / 3) : columnCalc === 3 ? Math.round(maxRow / 1.5) : endRow) : (columnCalc ? endRow : Math.round(maxRow / 2));

	//define the names
	var rowNm = prefix + (area.indexOf("extra") !== -1 ? "Extra.Gear " :  area.indexOf("comp") !== -1 ? "Comp.eqp.Gear " : "Adventuring Gear ");
	var itemRow = rowNm + "Row ";
	var amountRow = rowNm + "Amount ";
	var weightRow = rowNm + "Weight ";
	var locationRow = rowNm + "Location.Row ";

	//prepare the item name for searching
	var searchItem = clean(item, false, true);
	searchRegex = searchRegex ? searchRegex : MakeRegex(searchItem.replace(/\uFEFF|\,[^\,]+$/g, (/(\+|-)\d+/).test(searchItem) ? "" : "(?!.*(\\+|-)\\d+)"));

	//search through the items and do something if it is found
	for (var i = startSearch; i <= endSearch; i++) {
		var theRow = clean(What(itemRow + i), false, true);
		var isKey = !checkKey ? false : ParseGear(theRow);
		if ((theRow === searchItem || (searchRegex).test(theRow)) && (!checkKey || isKey[1] === checkKey)) {
			if (!AddTestReplace) {
				var curAmount = What(amountRow + i);
				if (curAmount === "") {
					Value(amountRow + i, 1 + (amount && !isNaN(amount) ? amount : 1));
				} else if (!isNaN(curAmount)) {
					Value(amountRow + i, Number(curAmount) + (amount && !isNaN(amount) ? amount : 1));
				} else {
					Value(itemRow + i, What(itemRow + i) + " (+ one more)");
				};
			} else if (AddTestReplace === "replace") {
				Value(amountRow + i, amount);
			};
			return;
		};
	};

	//as nothing above was found, add the item to the first empty row of the selected column
	var Container = "";
	if (!isCorrectUnits && What("Unit System") !== "imperial") weight = RoundTo(weight * UnitsList.metric.mass, 0.001, true);
	item = clean(item, [" ", "-", ".", ",", "\\", "/", ";"]);
	for (var i = startRow; i <= endRow; i++) {
		var theRow = What(itemRow + i);
		if (!theRow) {
			Value(itemRow + i, Container + item);
			Value(amountRow + i, amount !== undefined ? amount : "");
			Value(weightRow + i, weight !== undefined ? weight : "");
			Value(locationRow + i, location !== undefined ? location : "");
			return;
		} else {
			Container = (/^.{0,2}-|backpack|\bbag\b|^(?=.*saddle)(?=.*bag).*$|\bsack\b|\bchest\b|, with|, contain/i).test(theRow) ? "- " : "";
		};
	};
};

// redirect the old function names for legacy support
function AddInvL(item, amount, weight, location) { AddToInv("gear", "l", item, amount, weight, location, false, false, false, true); };
function AddInvM(item, amount, weight, location) { AddToInv("gear", "m", item, amount, weight, location, false, false, false, true); };
function AddInvR(item, amount, weight, location) { AddToInv("gear", "r", item, amount, weight, location, false, false, false, true); };
function AddInvMagic(item, amount, weight, location) { AddToInv("magic", false, item, amount, weight, location, false, false, false, true); };
function AddInvLExtra(item, amount, weight, location) { AddToInv("extra", "l", item, amount, weight, location, false, false, false, true); };
function AddInvRExtra(item, amount, weight, location) { AddToInv("extra", "r", item, amount, weight, location, false, false, false, true); };
function AddInvLComp(item, amount, weight, prefix) { AddToInv(prefix + "comp", "l", item, amount, weight, location, false, false, false, true); };
function AddInvRComp(item, amount, weight, prefix) { AddToInv(prefix + "comp", "r", item, amount, weight, location, false, false, false, true); };

// make an array of all the gear, tools, and packs, saving each to the menus variable
function SetGearVariables() {
	if (minVer) return;
	//make a menu array for all the packs
	GearMenus.packs = [];
	var packArray = [];
	for (var key in PacksList) {
		if (testSource(key, PacksList[key], "gearExcl")) continue;
		packArray.push(key);
	};
	packArray.sort();
	for (var i = 0; i < packArray.length; i++) {
		GearMenus.packs.push({
			cName : PacksList[packArray[i]].name,
			cReturn : "pack#" + packArray[i]
		});
	};

	//make a menu array for all the gear
	GearMenus.gear = [];
	var gearTypes = {};
	var gearArray = [];
	for (var key in GearList) {
		if (testSource(key, GearList[key], "gearExcl")) continue;
		if (!GearList[key].type) {
			gearArray.push(key);
		} else {
			var aType = GearList[key].type.toLowerCase();
			if (gearArray.indexOf(aType) == -1) {
				gearArray.push(aType);
				gearTypes[aType] = [];
			}
			gearTypes[aType].push(key);
		}
	};
	gearArray.sort();
	for (var i = 0; i < gearArray.length; i++) {
		var aGear = gearArray[i];
		if (gearTypes[aGear]) {
			gearTypes[aGear].sort();
			var theSub = gearTypes[aGear].map( function (n) {
				return {
					cName : GearList[n].infoname,
					cReturn : "gear#" + n
				}
			});
			GearMenus.gear.push({
				cName : aGear.capitalize(),
				oSubMenu : theSub
			});
		} else {
			var theGear = GearList[aGear];
			GearMenus.gear.push({
				cName : theGear.infoname,
				cReturn : "gear#" + aGear
			});
		}
	};

	//make a menu array for all the tools
	GearMenus.tools = [];
	var toolsTypes = {};
	var toolsArray = [];
	for (var key in ToolsList) {
		if (testSource(key, ToolsList[key], "gearExcl")) continue;
		if (!ToolsList[key].type) {
			toolsArray.push(key);
		} else {
			var aType = ToolsList[key].type.toLowerCase();
			if (toolsArray.indexOf(aType) == -1) {
				toolsArray.push(aType);
				toolsTypes[aType] = [];
			}
			toolsTypes[aType].push(key);
		}

	};
	toolsArray.sort();
	for (var i = 0; i < toolsArray.length; i++) {
		var aTool = toolsArray[i];
		if (toolsTypes[aTool]) {
			toolsTypes[aTool].sort();
			var theSub = toolsTypes[aTool].map( function (n) {
				return {
					cName : ToolsList[n].infoname,
					cReturn : "tool#" + n
				}
			});
			GearMenus.tools.push({
				cName : aTool.capitalize(),
				oSubMenu : theSub
			});
		} else {
			var theTool = ToolsList[aTool];
			GearMenus.tools.push({
				cName : theTool.infoname,
				cReturn : "tool#" + aTool
			});
		}
	};
};

//Make menu for 'add equipment' button and parse it to Menus.inventory
function MakeInventoryMenu() {
	var InvMenu = [];

	var backgroundKn = CurrentBackground.name ? CurrentBackground.name : "Background";

	//first make the top three entries (Pack, Gear, Tool)
	var itemMenu = function(menu, name, array, object) {
		var temp = {
			cName : name,
			oSubMenu : []
		};
		for (var i = 0; i < array.length; i++) {
			temp.oSubMenu[i] = {
				cName : array[i][0],
				oSubMenu : eval(object.toSource())
			};
			for (var j = 0; j < temp.oSubMenu[i].oSubMenu.length; j++) {
				var tempObject = temp.oSubMenu[i].oSubMenu[j];
				if (tempObject.cReturn) tempObject.cReturn += "#" + array[i][1];
				if (tempObject.oSubMenu) {
					for (var k = 0; k < tempObject.oSubMenu.length; k++) {
						var tempObjectK = tempObject.oSubMenu[k];
						if (tempObjectK.cReturn) tempObjectK.cReturn += "#" + array[i][1];
					}
				}
			};
		};
		menu.push(temp);
	};

	var menuExtraTypes = [
		["To left column", "lonly"],
		["To middle column", "monly"],
		["To right column", "ronly"]
	];
	if (!typePF) menuExtraTypes.splice(1, 1);
	itemMenu(InvMenu, "Pack", menuExtraTypes, GearMenus.packs);
	itemMenu(InvMenu, "Gear", menuExtraTypes, GearMenus.gear);
	itemMenu(InvMenu, "Tool", menuExtraTypes, GearMenus.tools);

	//add the other single-level options to the menu
	var menuLVL1 = function (item, array) {
		for (i = 0; i < array.length; i++) {
			var isMarked = array[i][1] === "attuned" ? What("Adventuring Gear Remember") == false :
				array[i][1] === "location2" ? What("Gear Location Remember").split(",")[0] == "true" :
				array[i][1] === "location3" ? What("Gear Location Remember").split(",")[1] == "true" : false;
			var isEnabled = array[i][1] === "location3" ? isTemplVis("ASfront") : array[i][1].indexOf("background") !== -1 ? backgroundKn !== "Background" : true;
			item.push({
				cName : array[i][0],
				cReturn : array[i][1],
				bMarked : isMarked,
				bEnabled : isEnabled
			});
		}
	};

	menuLVL1(InvMenu, [
		["-", "-"],
		[backgroundKn + "'s items and gold", "background"],
		["Armor && Shield (from 1st page) [only adds new]", "armour"],
		["Weapons && Ammunition (from 1st page) [only updates/adds new]", "weapon"],
		["-", "-"],
		["All three of the above (" + backgroundKn + ", armour, weapons)", "background-armour-weapon"],
		["Just two of the above (armour, weapons)", "armour-weapon"],
		["-", "-"],
		["Reset equipment section", "reset"],
		["-", "-"],
		["Show 'Attuned Magical Items' subsection", "attuned"],
		["Show location column for Equipment (this page)", "location2"],
		["Show location column for Extra Equipment (3rd page)", "location3"]
	]);

	Menus.inventory = InvMenu;
};

//call the inventory menu ('add equipment' button) and do something with the results
function InventoryOptions(input) {
	var MenuSelection = input ? input : getMenu("inventory");

	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying the inventory menu option...");
	thermoM(0.5); // Increment the progress bar
	calcStop();

	if (MenuSelection[0] === "pack") {
		var thePack = PacksList[MenuSelection[1]];
		thermoTxt = thermoM("Adding pack " + thePack.name + "...", false); //change the progress dialog text
		var columnCalc = typePF ? (MenuSelection[2].indexOf("r") !== -1 ? 1.5 : MenuSelection[2].indexOf("m") !== -1 ? 3 : false) : (MenuSelection[2].indexOf("r") !== -1 ? 2 : false);
		var startRow = columnCalc ? Math.round(FieldNumbers.gear / columnCalc + 1) : 1;
		if (What("Adventuring Gear Row " + startRow)) InvInsert("Adventuring ", startRow);
		for (var i = 0; i < thePack.items.length; i++) {
			var theGear = thePack.items[i];
			AddToInv("gear", MenuSelection[2], theGear[0], theGear[1], theGear[2]);
		};
	} else if (MenuSelection[0] === "gear" || MenuSelection[0] === "tool") {
		var theGear = MenuSelection[0] === "gear" ? GearList[MenuSelection[1]] : ToolsList[MenuSelection[1]];
		thermoTxt = thermoM("Adding '" + theGear.name + "' to the adventuring gear...", false); //change the progress dialog text
		AddToInv("gear", MenuSelection[2], theGear.name, theGear.amount, theGear.weight);
	} else if (MenuSelection[0] === "reset") {
		thermoTxt = thermoM("Resetting the equipment section...", false); //change the progress dialog text
		var tempArray = ["Platinum Pieces", "Gold Pieces", "Electrum Pieces", "Silver Pieces", "Copper Pieces"];
		if (!typePF) {
			for (var i = 1; i < 5; i++) { tempArray.push("Valuables" + i); };
			tempArray = tempArray.concat(["Lifestyle", "Lifestyle daily cost"]);
		};
		for (var i = 1; i <= FieldNumbers.gear; i++) {
			tempArray.push("Adventuring Gear Row " + i);
			tempArray.push("Adventuring Gear Location.Row " + i);
			tempArray.push("Adventuring Gear Amount " + i);
			tempArray.push("Adventuring Gear Weight " + i);
		};
		tDoc.resetForm(tempArray);
	} else if (MenuSelection[0] === "attuned") {
		thermoTxt = thermoM("Toggling the visibility of the Attuned Magical Items subsection...", false);
		ShowAttunedMagicalItems(What("Adventuring Gear Remember") === true);
	} else if (MenuSelection[0] === "location2") {
		thermoTxt = thermoM("Toggling the visibility of the location column on page 2...", false);
		HideInvLocationColumn("Adventuring Gear ", What("Gear Location Remember").split(",")[0] === "true");
	} else if (MenuSelection[0] === "location3") {
		thermoTxt = thermoM("Toggling the visibility of the location column on page 3...", false);
		HideInvLocationColumn("Extra.Gear ", What("Gear Location Remember").split(",")[1] === "true");
	} else if (MenuSelection[0].indexOf("background") !== -1) {
		thermoTxt = thermoM("Adding background items to equipment section...", false);
		AddInvBackgroundItems();
	};
	if (MenuSelection[0].indexOf("armour") !== -1) {
		thermoTxt = thermoM("Adding/updating armor and shield in equipment section...", false);
		AddInvArmorShield();
	};
	if (MenuSelection[0].indexOf("weapon") !== -1) {
		thermoTxt = thermoM("Adding/updating weapons and ammunition in equipment section...", false);
		AddInvWeaponsAmmo();
	};

	thermoM(thermoTxt, true); // Stop progress bar
};

function AddInvBackgroundItems() {
	if (!CurrentBackground.known) return;
	if (CurrentBackground.gold) Value("Gold Pieces", Number(What("Gold Pieces").replace(",", ".")) + CurrentBackground.gold);
	var addEquip = function (array, LR) {
		for (var i = 0; i < array.length; i++) {
			AddToInv("gear", LR, array[i][0], array[i][1], array[i][2]);
		};
	};
	if (CurrentBackground.equipleft) addEquip(CurrentBackground.equipleft, "l");
	if (CurrentBackground.equipright) addEquip(CurrentBackground.equipright, "r");
};

function AddInvArmorShield() {
	//add the armour
	var theArm = What("AC Armor Description");
	var theArmWght = What("AC Armor Weight");
	var theArmKn = ArmourList[CurrentArmour.known];
	if (theArm && theArmWght && (theArmKn ? theArmKn.weight : true)) {
		var regexArmNm = RegExp("(" + theArmKn.name.RegEscape() + ")", "i");
		var hasInvName = theArmKn && theArmKn.invName ? theArmKn.invName.replace(regexArmNm, "") : false;
		var theTxt = hasInvName && !(RegExp(hasInvName.RegEscape(), "i")).test(theArm) && (regexArmNm).test(theArm) && similarLen(theArmKn.name, theArm) ? theArm.replace(regexArmNm, "$1" + hasInvName) : theArm;
		var searchRegex = MakeRegex(theTxt.replace(/ ?\([^\)]\)| ?\[[^\]]\]/g, ""), theArmKn.magic ? "" : "(?!.*(\\+|-)\\d+)");

		AddToInv("gear", "r", theTxt, "", theArmWght, "", searchRegex, "replace", false, true);
	};


	//add the shield
	var theShi = What("AC Shield Bonus Description");
	var theShiWght = What("AC Shield Weight");
	if (theShi && theShiWght) {
		var theTxt = theShi + (theShi.length < 6 && !(/shield/i).test(theShi) ? " shield" : "");
		var searchRegex = MakeRegex(theTxt.replace(/ ?\([^\)]\)| ?\[[^\]]\]/g, ""), CurrentShield.magic ? "" : "(?!.*(\\+|-)\\d+)");

		AddToInv("gear", "r", theTxt, "", theShiWght, "", searchRegex, "replace", false, true);
	}
};

//add all the weapons and ammo from the first page to the second page
function AddInvWeaponsAmmo() {
	//a way to see if there are any special calculation-driven entries in the attack's name
	var specialAtkName = function (atkNm) {
		var isSpecial = false;
		var toMatch = /\(\/.*?\/i?g?i?\)\.test\(WeaponText\)/g;
		if (CurrentEvals.atkCalc && (toMatch).test(CurrentEvals.atkCalc)) {
			isSpecial = CurrentEvals.atkCalc.match(toMatch).some( function (C) {
				try {
					return eval(C.replace("WeaponText", "atkNm"));
				} catch (err) {};
			});
		};
		return isSpecial;
	};

	//make an array of the weapons to add; only those with weight and not alternative attack entries
	var testArray = [];
	var items = {};
	for (var i = 1; i <= FieldNumbers.attacks; i++) {
		var theAtk = CurrentWeapons.known[i - 1];
		var theWea = theAtk[0] ? theAtk[0] : false;
		var theFld = What("Attack." + i + ".Weapon Selection");
		var theWeight = What("BlueText.Attack." + i + ".Weight");
		if (theWeight && !theAtk[3] && !specialAtkName(theFld)) {
			var theTxt = (theWea ? theWea : theFld) + theAtk[1];
			if (testArray.indexOf(theTxt) === -1) {
				items[theTxt] = {
					key : theWea, // item key
					name : clean(theFld.replace(/\(?\[?(off.{0,3}hand|secondary)\)?\]?/i, "")), // the name in the field
					weight : theWeight,
					magic : theAtk[1], // magic bonus
					amount : 1, // the number of these
					isOffHand : (/^(?!.*(spell|cantrip))(?=.*(off.{0,3}hand|secondary)).*$/i).test(theFld)
				};
			} else {
				if (similarLen(theFld.replace(/off.{0,3}hand|secondary/i, ""), items[theTxt].name)) {
					if ((/^(?!.*(spell|cantrip))(?=.*(off.{0,3}hand|secondary)).*$/i).test(theFld) || items[theTxt].isOffHand) {
						items[theTxt].amount = 2;
						items[theTxt].isOffHand = false;
					}
				} else if (theWea && !items[theFld]) {
					items[theFld] = {
						key : theWea, // item key
						name : clean(theFld.replace(/\(?\[?(off.{0,3}hand|secondary)\)?\]?/i, "")), // the name in the field
						weight : theWeight,
						magic : theAtk[2], // magic bonus
						amount : 1, // the number of these
						isOffHand : (/^(?!.*(spell|cantrip))(?=.*(off.{0,3}hand|secondary)).*$/i).test(theFld)
					};
				};
			};
			testArray.push(theTxt);
		};
	};

	//then do the ammo
	var addAmmo = function(aNm, aNr, aWght) {
		var theAmmo = ParseAmmo(aNm);
		var magicBonus = 0;
		var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
		if (magicRegex.test(aNm)) {
			magicBonus = parseFloat(aNm.match(magicRegex)[1])
		};
		if (isNaN(magicBonus)) magicBonus = 0;
		for (var it in items) {
			var aItem = items[it];
			if (aItem.magic === magicBonus && ((!theAmmo && aItem.name.indexOf(aNm) !== -1) || (theAmmo && aItem.key === theAmmo && (it.replace(/\d+/, "") === theAmmo || similarLen(aItem.name, aNm))))) {
				aItem.amount = aNr + (theAmmo && aItem.isAmmo ? aItem.amount : 0);
				aItem.isAmmo = true;
				return;
			};
		};
		var theTxt = theAmmo ? theAmmo : aNm;
		if (!items[theTxt]) {
			var InvName = theAmmo && AmmoList[theAmmo].invName ? AmmoList[theAmmo].invName : aNm;
			var parsedInv = ParseGear(InvName);
			items[theTxt] = {
				key : parsedInv ? parsedInv[1] : theAmmo, // item key
				name : InvName, // the name of the ammo
				weight : aWght,
				magic : 0, // magic bonus
				amount : aNr, // the number of these
				isAmmo : true
			};
		};
	};
	if (What("AmmoLeftDisplay.Weight") && What("AmmoLeftDisplay.Amount")) addAmmo(What("AmmoLeftDisplay.Name"), What("AmmoLeftDisplay.Amount"), What("AmmoLeftDisplay.Weight"));
	if (What("AmmoRightDisplay.Weight") && What("AmmoRightDisplay.Amount")) addAmmo(What("AmmoRightDisplay.Name"), What("AmmoRightDisplay.Amount"), What("AmmoRightDisplay.Weight"));

	// loop through the items and add them to the adventuring gear
	for (var it in items) {
		var aItem = items[it];
		var searchRegex = MakeRegex(aItem.name.replace(/ ?\([^\)]\)| ?\[[^\]]\]/g, ""), aItem.magic ? "" : "(?!.*(\\+|-)\\d+)");
		AddToInv("gear", "r", aItem.name, aItem.amount, aItem.weight, "", searchRegex, "replace", aItem.key, true);
	};
};

//Make menu for the button on each equipment line and parse it to Menus.gearline
function MakeInventoryLineMenu() {
	var type = event.target.name.indexOf("Adventuring") !== -1 ? "Adventuring " :
		event.target.name.indexOf("Extra.") !== -1 ? "Extra." :
		event.target.name.substring(0, event.target.name.indexOf("Comp.") + 8) + ".";
	var lineNmbr = Number(event.target.name.slice(-2));
	var theField = What(type + "Gear Row " + lineNmbr);
	var hasMagic = type === "Adventuring " && What("Adventuring Gear Remember") === false;
	var magic = hasMagic && lineNmbr > FieldNumbers.gearMIrow;
	var maxRow = FieldNumbers[type === "Adventuring " ? "gear" : type === "Extra." ? "extragear" : "compgear"];
	var upRow = lineNmbr === 1 ? false : magic ? lineNmbr !== FieldNumbers.gearMIrow + 1 : true;
	var downRow = lineNmbr === maxRow ? false : hasMagic ? lineNmbr !== FieldNumbers.gearMIrow - 1 : true;

	var numColumns = typePF && type === "Adventuring " ? 3 : 2;
	var curCol = typePF && type.indexOf("Comp.") !== -1 ? 1 : Math.ceil(lineNmbr / Math.round(maxRow / numColumns));
	var moveCol = curCol > 1 ? "left" : numColumns === 3 ? "middle" : "right";
	var moveCol2 = numColumns !== 3 ? false : curCol === 3 ? "middle" : "right";

	var amendMenu = function(inputArray) {
		var array = eval(inputArray.toSource());
		for (var i = 0; i < array.length; i++) {
			if (array[i].oSubMenu) {
				var theSub = array[i].oSubMenu;
				for (var j = 0; j < theSub.length; j++) {
					if (theSub[j].cReturn) theSub[j].cReturn = type + "#" + lineNmbr + "#" + theSub[j].cReturn;
				}
			} else {
				array[i].cReturn = type + "#" + lineNmbr + "#" + array[i].cReturn;
			}
		};
		return array;
	};

	var gearMenu = [{
		cName : "Put item on this line" + (theField ? " (overwrites current)" : ""),
		oSubMenu : [{
			cName : "Gear",
			oSubMenu : amendMenu(GearMenus.gear)
		}, {
			cName : "Tool",
			oSubMenu : amendMenu(GearMenus.tools)
		}]
	}, {
		cName : "-"
	}];

	var menuLVL1 = function (menu, array) {
		for (var i = 0; i < array.length; i++) {
			var isEnabled = (array[i][1] === "up" && !upRow) || (array[i][1] === "down" && !downRow) || (!theField && (/move|insert/i).test(array[i][1])) ? false : true;
			menu.push({
				cName : array[i][0],
				cReturn : type + "#" + lineNmbr + "#" + array[i][1],
				bEnabled : isEnabled
			});
		};
	};

	var AddCompOptions = function(menu) {
		var AScompA = What("Template.extras.AScomp").split(",").splice(1);
		var prefix = type.substring(0, type.indexOf("Comp."));
		if (type.indexOf("Comp.") !== -1) AScompA.splice(AScompA.indexOf(prefix), 1);
		if (!theField || !AScompA.length) {
			menu.push({
				cName : "Move to a Companion's Equipment",
				bEnabled : false
			})
			return;
		};
		var temp = {
			cName : "Move to a Companion's Equipment",
			oSubMenu : []
		};
		for (var i = 0; i < AScompA.length; i++) {
			//if (type.indexOf("Comp.") !== -1 && prefix === AScompA[i]) continue;
			var CompNm = What(AScompA[i] + "Comp.Desc.Name");
			var CompPg = tDoc.getField(AScompA[i] + "Comp.Desc.Name").page + 1;
			var eqpVis = eval(What(AScompA[i] + "Companion.Layers.Remember"))[1];
			temp.oSubMenu.push({
				cName : (CompNm ? CompNm : "NAME") + "'s Equipment Section " + (eqpVis ? "" : "\[not visible currently\] ") + "(page " + CompPg + ")",
				cReturn : type + "#" + lineNmbr + "#" + "movepage#" + AScompA[i] + "Comp."
			});
		};
		menu.push(temp);
	};

	menuLVL1(gearMenu, [
		["Move up", "up"],
		["Move down", "down"],
		["-", "-"]
	]);
	if (!typePF || type.indexOf("Comp.") === -1) menuLVL1(gearMenu, [["Move to " + moveCol + " column", "movecol#" + moveCol.substr(0, 1) + "only"]]);
	if (moveCol2) menuLVL1(gearMenu, [["Move to " + moveCol2 + " column", "movecol#" + moveCol2.substr(0, 1) + "only"]]);

	gearMenu.push({cName : "-"});

	if (type !== "Adventuring ") menuLVL1(gearMenu, [["Move to Equipment (page 2)", "movepage#gear"]]);
	if (type !== "Extra.") menuLVL1(gearMenu, [["Move to Extra Equipment (page 3)", "movepage#extra"]]);
	AddCompOptions(gearMenu);

	gearMenu.push({cName : "-"});

	if (magic) menuLVL1(gearMenu, [["Copy to Magic Items (page 3)", "copy#magic"], ["-", "-"]]);

	menuLVL1(gearMenu, [
		["Insert line", "insert"],
		["Delete line", "delete"],
		["Clear line", "clear"]
	]);

	Menus.gearline = gearMenu;
};

//call the inventory line menu and do something with the results
function InventoryLineOptions() {

	var MenuSelection = getMenu("gearline");

	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying inventory line menu option...");
	calcStop();

	var toRightCase = function (intxt) {
		return intxt.split(".").map(function (n) {
			return n == "eqp" ? n : n == "ascomp" ? "AScomp" : n.substr(0,1).toUpperCase() + n.substr(1);
		}).join(".");
	}
	var type = toRightCase(MenuSelection[0]);
	var lineNmbr = Number(MenuSelection[1]);

	var Fields = [
		type + "Gear Row " + lineNmbr,
		type + "Gear Amount " + lineNmbr,
		type + "Gear Weight " + lineNmbr,
		type + "Gear Location.Row " + lineNmbr
	];
	var FieldsValue = [
		What(Fields[0]),
		What(Fields[1]),
		What(Fields[2]),
		What(Fields[3])
	];

	switch (MenuSelection[2]) {
	 case "up" :
	 case "down" :
		thermoTxt = thermoM("Moving the gear " + MenuSelection[2] + "...", false); //change the progress dialog text
		var A = MenuSelection[2] === "up" ? -1 : 1;
		var FieldsNext = [
			type + "Gear Row " + (lineNmbr + A),
			type + "Gear Amount " + (lineNmbr + A),
			type + "Gear Weight " + (lineNmbr + A),
			type + "Gear Location.Row " + (lineNmbr + A)
		];
		var FieldsNextValue = [
			What(FieldsNext[0]),
			What(FieldsNext[1]),
			What(FieldsNext[2]),
			What(FieldsNext[3])
		];
		for (var H = 0; H < Fields.length; H++) {
			Value(FieldsNext[H], FieldsValue[H]);
			Value(Fields[H], FieldsNextValue[H]);
			thermoM(H/Fields.length); //increment the progress dialog's progress
		};
		break;
	 case "movecol" :
		var toCol = MenuSelection[3];
		thermoTxt = thermoM("Moving the gear to the " + (toCol.indexOf("r") !== -1 ? "right" : toCol.indexOf("m") !== -1 ? "middle" : "left") + " column...", false); //change the progress dialog text
		InvDelete(type, lineNmbr);
		AddToInv(type, MenuSelection[3], FieldsValue[0], FieldsValue[1], FieldsValue[2], FieldsValue[3], false, false, false, true);
		break;
	 case "movepage" :
		thermoTxt = thermoM("Moving the gear to another page...", false); //change the progress dialog text
		InvDelete(type, lineNmbr);
		var toPageType = toRightCase(MenuSelection[3]);
		AddToInv(toPageType, "l", FieldsValue[0], FieldsValue[1], FieldsValue[2], FieldsValue[3], false, false, false, true);
		break;
	 case "copy" :
		thermoTxt = thermoM("Copying the gear to magic items on page 3...", false); //change the progress dialog text
		AddMagicItem(FieldsValue[0], true, "", FieldsValue[2]);
		break;
	case "insert":
		thermoTxt = thermoM("Inserting empty gear line...", false); //change the progress dialog text
		InvInsert(type, lineNmbr);
		break;
	case "delete":
		thermoTxt = thermoM("Deleting gear line...", false); //change the progress dialog text
		InvDelete(type, lineNmbr);
		break;
	case "clear":
		thermoTxt = thermoM("Clearing gear line...", false); //change the progress dialog text
		tDoc.resetForm(Fields);
		break;
	case "gear":
	case "tool":
		var theGear = MenuSelection[2] === "gear" ? GearList[MenuSelection[3]] : ToolsList[MenuSelection[3]];
		thermoTxt = thermoM("Adding '" + theGear.name + "' to the line...", false); //change the progress dialog text
		var theNm = (lineNmbr > 1 && (/^.{0,2}-|backpack|\bbag\b|^(?=.*saddle)(?=.*bag).*$|\bsack\b|\bchest\b|, with|, contain/i).test(What(type + "Gear Row " + (lineNmbr - 1))) ? "- " : "") + theGear.name;
		Value(Fields[0], theNm);
		Value(Fields[1], theGear.amount);
		Value(Fields[2], What("Unit System") === "metric" ? RoundTo(theGear.weight * UnitsList.metric.mass, 0.001, true) : theGear.weight);
		break;
	};

	thermoM(thermoTxt, true); // Stop progress bar
};

//insert a slot at the position wanted
function InvInsert(type, slot, extraPre) {
	//stop the function if the selected slot is already empty
	if (What(type + "Gear Row " + slot) === "") {
		return;
	}

	var isComp = type.indexOf("Comp.") !== -1;
	var totalslots = isComp ? FieldNumbers.compgear : (type === "Extra." ? FieldNumbers.extragear : (What("Adventuring Gear Remember") === false && slot <= FieldNumbers.gearMIrow ? FieldNumbers.gearMIrow : FieldNumbers.gear));

	//look for the first empty slot below the slot
	var endslot = "";
	for (var i = slot + 1; i <= totalslots; i++) {
		if (What(type + "Gear Row " + i) === "") {
			endslot = i;
			i = totalslots + 1;
		}
	}

	//only continue if an empty slot was found in the fields
	if (endslot) {
		var extraPre = extraPre ? extraPre : "";
		//cycle to the slots starting with the empty one and add the values of the one above
		for (var i = endslot; i > slot; i--) {
			var lastRowName = What(type + "Gear Row " + (i - 1));
			lastRowName = (extraPre && lastRowName.indexOf(extraPre) !== 0 ? extraPre : "") + lastRowName;
			Value(type + "Gear Row " + i, lastRowName);
			Value(type + "Gear Amount " + i, What(type + "Gear Amount " + (i - 1)));
			Value(type + "Gear Weight " + i, What(type + "Gear Weight " + (i - 1)));
			if (!isComp) Value(type + "Gear Location.Row " + i, What(type + "Gear Location.Row " + (i - 1)));
		}

		//empty the selected slot
		Value(type + "Gear Row " + slot, "");
		Value(type + "Gear Amount " + slot, "");
		Value(type + "Gear Weight " + slot, "");
		if (!isComp) Value(type + "Gear Location.Row " + slot, "");
	}
}

//delete a slot at the position wanted and move the rest up
function InvDelete(type, slot) {
	var isComp = type.indexOf("Comp.") !== -1;
	var lastslot = isComp ? FieldNumbers.compgear : (type === "Adventuring " ? FieldNumbers.gear : FieldNumbers.extragear);
	var numColumns = typePF && type === "Adventuring " ? 3 : 2;
	var perColumn = Math.round(lastslot / numColumns);
	var endslot = isComp && typePF ? lastslot : perColumn * Math.ceil(slot / perColumn);
	if (type === "Adventuring " && endslot === FieldNumbers.gear && What("Adventuring Gear Remember") === false && slot <= FieldNumbers.gearMIrow) {
		endslot = FieldNumbers.gearMIrow;
	}

	//move every line up one space, starting with the selected line
	for (var i = slot; i < endslot; i++) {
		Value(type + "Gear Row " + i, What(type + "Gear Row " + (i + 1)));
		Value(type + "Gear Amount " + i, What(type + "Gear Amount " + (i + 1)));
		Value(type + "Gear Weight " + i, What(type + "Gear Weight " + (i + 1)));
		if (!isComp) Value(type + "Gear Location.Row " + i, What(type + "Gear Location.Row " + (i + 1)));
	}
	//delete the contents of the final line
	var resetA = [
		type + "Gear Row " + endslot,
		type + "Gear Amount " + endslot,
		type + "Gear Weight " + endslot,
		type + "Gear Location.Row " + endslot
	];
	if (!isComp) resetA.pop();
	tDoc.resetForm(resetA);
}

/* ---- INVENTORY FUNCTIONS END ---- */

//see if text contains a background
function ParseBackground(input) {
	var resultArray = ["", ""];
	if (!input) return resultArray;

	input = removeDiacritics(input);
	var foundLen = 0;
	var foundDat = 0;

	for (var key in BackgroundList) {
		var kObj = BackgroundList[key];

		// first we look for background variants
		if (kObj.variant) {
			var matchedThisSub = false;
			var BackOpt = kObj.variant;
			for (var sub = 0; sub < BackOpt.length; sub++) { // scan string for all variants of the background
				var bVars = BackgroundSubList[BackOpt[sub]];

				if (!(bVars.regExpSearch).test(input) // see if background variant regex matches
					|| testSource(BackOpt[sub], bVars, "backgrExcl") // test if the background variant or its source isn't excluded
				) continue;

				// only go on with this entry if:
				// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
				// or if we are not using the search length, just look at the newest source date
				var tempDate = sourceDate(bVars.source);
				if ((!ignoreSearchLength && bVars.name.length < foundLen) || (!ignoreSearchLength && bVars.name.length == foundLen && tempDate < foundDat) || (ignoreSearchLength && tempDate <= foundDat)) continue;

				// we have a match, set the values
				resultArray = [key, BackOpt[sub]];
				foundLen = bVars.name.length;
				foundDat = tempDate;
				matchedThisSub = true;
			}
		}

		// continue with the background object, maybe it is a (better) match
		if (!(kObj.regExpSearch).test(input) // see if regex matches
			|| testSource(key, kObj, "backgrExcl") // test if the background or its source isn't excluded
		) continue;

		// only go on with this entry if:
		// we are using the search length (default) and this entry has a longer name or this entry has an equal length name but has a newer source
		// or if we are not using the search length, just look at the newest source date
		var tempDate = sourceDate(kObj.source);
		if ((!ignoreSearchLength && kObj.name.length < foundLen) || (!ignoreSearchLength && kObj.name.length == foundLen && tempDate < foundDat) || (ignoreSearchLength && tempDate <= foundDat)) continue;

		// we have a match, set the values
		resultArray = [key, matchedThisSub ? resultArray[1] : ""];
		foundLen = kObj.name.length;
		foundDat = tempDate;
	}
	return resultArray;
};

//detects background entered and put information to global CurrentBackground variable
function FindBackground(input) {
	var tempString = input === undefined ? What("Background").toLowerCase() : input;
	var tempFound = ParseBackground(tempString);
	CurrentBackground = {
		known : tempFound[0],
		variant : tempFound[1],
		name : "", //must exist
		source : [], //must exist
		trait : [], //must exist
		ideal : [], //must exist
		bond : [], //must exist
		flaw : [] //must exist
	};

	// set the properties of the CurrentBackground object
	if (tempFound[0]) {
		// the properties of the main background
		for (var prop in BackgroundList[tempFound[0]]) {
			if ((/^(known|variants?|level)$/i).test(prop)) continue;
			CurrentBackground[prop] = BackgroundList[tempFound[0]][prop];
		}
		// the properties of the variant (overriding anything from the main)
		if (tempFound[1]) {
			for (var prop in BackgroundSubList[tempFound[1]]) {
				if ((/^(known|variants?|level)$/i).test(prop)) continue;
				CurrentBackground[prop] = BackgroundSubList[tempFound[1]][prop];
			}
		}
	}
};

//apply the various attributes of the background
function ApplyBackground(input) {
	if (IsSetDropDowns || CurrentVars.manual.background) return; // when just changing the dropdowns or background is set to manual, don't do anything

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying background...");
	calcStop();

	var xtrFld = tDoc.getField("Background Extra");
	var newBackground = ParseBackground(input);
	var oldBackground = [CurrentBackground.known, CurrentBackground.variant];
	if (newBackground[0] !== oldBackground[0] || newBackground[1] !== oldBackground[1]) {
		if (CurrentBackground.known) {
			thermoTxt = thermoM("Removing the " + CurrentBackground.name + " background features...", false); //change the progress dialog text

			// remove the background common attributes
			var Fea = ApplyFeatureAttributes(
				"background", // type
				CurrentBackground.known, // fObjName [aParent, fObjName]
				[1, 0, false], // lvlA [old-level, new-level, force-apply]
				false, // choiceA [old-choice, new-choice, "only"|"change"]
				false // forceNonCurrent
			);

			// reset the background feature
			if (CurrentBackground.feature) Value("Background Feature", "");

			// reset the background extra field
			xtrFld.clearItems();
			xtrFld.userName = "First fill out a background in the field " + (typePF ? "above" : "to the left") + '.\n\nOnce a background is recognized that offers additional options (e.g. the "Origin" of the "Outlander" background), those additional options will be available here.';

			// reset the lifestyle
			if (CurrentBackground.lifestyle && What("Lifestyle") === CurrentBackground.lifestyle) Value("Lifestyle", "");

			thermoM(2/5); //increment the progress dialog's progress
		};
		FindBackground(input);
	}

	if (CurrentBackground.known && (CurrentBackground.known !== oldBackground[0] || CurrentBackground.variant !== oldBackground[1])) {
		thermoTxt = thermoM("Applying the " + CurrentBackground.name + " background features...", false); //change the progress dialog text

		// Apply the background feature
		if (CurrentBackground.feature) Value("Background Feature", CurrentBackground.feature);

		// Apply the background extra
		if (CurrentBackground.extra) {
			xtrFld.setItems([""].concat(CurrentBackground.extra.slice(1)));
			xtrFld.userName = CurrentBackground.extra[0] + "\n(" + CurrentBackground.name + " background)";
		} else {
			xtrFld.userName = "There are no extra choices defined for your " + CurrentBackground.name + " background.\nThus, this drop-down box is empty.\n\nFeel free to use it for additional background comments.";
		};

		// Apply the lifestyle, if defined
		if (CurrentBackground.lifestyle) Value("Lifestyle", CurrentBackground.lifestyle);

		thermoM(3/5); //increment the progress dialog's progress

		// Apply the background common attributes
		var Fea = ApplyFeatureAttributes(
			"background", // type
			CurrentBackground.known, // fObjName [aParent, fObjName]
			[0, 1, false], // lvlA [old-level, new-level, force-apply]
			false, // choiceA [old-choice, new-choice, "only"|"change"]
			false // forceNonCurrent
		);
	}

	thermoM(thermoTxt, true); // Stop progress bar
};

//Make menu for 'background traits' button and parse it to Menus.background
function MakeBackgroundMenu() {
	var backMenu = [];

	var menuLVL1 = function (item, array) {
		for (i = 0; i < array.length; i++) {
			item.push({
				cName : array[i][0],
				cReturn : item + "#" + array[i][1],
				bEnabled : array[i][1] !== "nothing"
			});
		}
	};

	var menuLVL2 = function (menu, name, array) {
		var temp = {
			cName : name + (name == "Personality Trait" ? " (select 2)" : ""),
			oSubMenu : []
		};
		var theEntry = What(name);
		for (i = 0; i < array.length; i++) {
			var toUse = isArray(array[i]) ? array[i][1] : array[i];
			temp.oSubMenu.push({
				cName : toUse,
				cReturn : name + "#" + i,
				bMarked : (RegExp(toUse.RegEscape(), "i")).test(theEntry)
			})
		}
		menu.push(temp);
	};

	if (CurrentBackground.known) {
		menuLVL2(backMenu, "Personality Trait", CurrentBackground.trait);
		menuLVL2(backMenu, "Ideal", CurrentBackground.ideal);
		menuLVL2(backMenu, "Bond", CurrentBackground.bond);
		menuLVL2(backMenu, "Flaw", CurrentBackground.flaw);
	} else {
		menuLVL1(backMenu, [["No background entry has been detected on the first page", "nothing"]]);
	};

	menuLVL1(backMenu, ["-", ["Reset the four fields", "reset"]]);

	Menus.background = backMenu;
};

//call the background menu and do something with the results
function BackgroundOptions() {
	var MenuSelection = getMenu("background");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;
	if (MenuSelection[0] === "personality trait") {
		AddString("Personality Trait", CurrentBackground.trait[MenuSelection[1]], " ");
	} else if (MenuSelection[0] === "ideal") {
		Value("Ideal", CurrentBackground.ideal[MenuSelection[1]][1]);
	} else if (MenuSelection[0] === "bond") {
		Value("Bond", CurrentBackground.bond[MenuSelection[1]]);
	} else if (MenuSelection[0] === "flaw") {
		Value("Flaw", CurrentBackground.flaw[MenuSelection[1]]);
	} else if (MenuSelection[1] === "reset") {
		tDoc.resetForm(["Personality Trait", "Ideal", "Bond", "Flaw"]);
	}
};

// add a tool or a language (typeLT = "tool" || "language"); uniqueID is the whole submitname for something that has a choice, it is the input + ID
function AddLangTool(typeLT, input, tooltip, uniqueID, replaceThis, replaceMatch) {
	switch (clean(typeLT, false, true).toLowerCase()) {
		case "language" :
			var fld = "Language ";
			var type = "language";
			break;
		case "tool" :
			var fld = "Tool ";
			var type = "tool";
			break;
		default :
			return;
	};
	var inputCl = clean(input, false, true);
	var replaceThisString = replaceThis ? clean(replaceThis, false, true) : false;
	var doReplace = false;
	var overflow = What("MoreProficiencies").toLowerCase().indexOf(inputCl.toLowerCase()) !== -1;
	var theSubmit = uniqueID ? uniqueID : inputCl;
	var useReg = MakeRegex(inputCl);
	var tooltipString = tooltip ? formatMultiList("\"" + (uniqueID ? uniqueID.replace(/.*_#_(.*)_#_.*/, "$1") : inputCl) + "\" " + type + " proficiency was gained from:", tooltip) : "";
	for (var n = 1; n <= 3; n++) {
		for (var i = 1; i <= FieldNumbers.langstools; i++) {
			var next = tDoc.getField(fld + i);
			if (n === 1 && (!uniqueID || (uniqueID && next.submitName == uniqueID)) && (next.value == inputCl || next.submitName == theSubmit || ((useReg).test(next.value) && similarLen(next.value, inputCl)))) {
				if (!replaceThis) {
					next.userName = tooltipString;
					next.submitName = theSubmit;
				};
				return;
			} else if (n === 2 && replaceThis && (next.submitName == replaceThisString || next.value == replaceThisString || (replaceMatch && replaceThisString.toLowerCase().indexOf(next.value.toLowerCase()) !== -1))) {
				doReplace = i;
				break;
			} else if (n === 3 && (doReplace === i || (!doReplace && clean(next.value) === ""))) {
				next.value = inputCl;
				if (!replaceThis) {
					next.submitName = theSubmit;
					next.userName = tooltipString;
				};
				if (overflow) {
					RemoveString("MoreProficiencies", inputCl + " (" + type + ")");
					RemoveString("MoreProficiencies", inputCl);
				};
				return;
			};
		};
	};
	if (!overflow) AddString("MoreProficiencies", inputCl + " (" + type + ")", "; ");
};

// remove a tool or a language (typeLT = "tool" || "language") // choice = the input from the dialogue; uniqueID is for something that offers a choice, so which might have been changed but should still be removed if it matches
function RemoveLangTool(typeLT, input, uniqueID, choice) {
	switch (clean(typeLT, false, true).toLowerCase()) {
		case "language" :
			var fld = "Language ";
			var type = "language";
			break;
		case "tool" :
			var fld = "Tool ";
			var type = "tool";
			break;
		default :
			return;
	};
	var useStr = clean(input, false, true);
	var useReg = MakeRegex(useStr);
	var theSubmit = uniqueID ? uniqueID : useStr;
	for (var i = 1; i <= FieldNumbers.langstools; i++) {
		var next = tDoc.getField(fld + i);
		if ((uniqueID && next.submitName === theSubmit) || (!uniqueID && (next.value === useStr || ((useReg).test(next.value) && similarLen(next.value, useStr))))) {
			DeleteItemType(fld, i, FieldNumbers.langstools);
			return;
		} else if (next.submitName === theSubmit) {
			AddTooltip(fld + i, "", "");
			return;
		};
	};
	var choiceCl = choice ? clean(choice, false, true) : useStr;
	RemoveString("MoreProficiencies", choiceCl + " (" + type + ")");
	RemoveString("MoreProficiencies", choiceCl);

};

// redirect the old function names for legacy support
function AddLanguage(language, tooltip, replaceThis) { AddLangTool("language", language, tooltip, false, replaceThis) };
function RemoveLanguage(language, tooltip) { RemoveLangTool("language", language) };
function AddTool(tool, toolstooltip, replaceThis) { AddLangTool("tool", tool, toolstooltip, false, replaceThis) };
function RemoveTool(tool, toolstooltip) { RemoveLangTool("tool", tool) };

function AddWeapon(weapon, partialReplace) {
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var maxItems = QI ? FieldNumbers.attacks : 3;

	var makeWordBoundryRegex = function (inStr) {
		return RegExp(inStr.RegEscape().replace(/(^\W*)(.*?)(\W*$)/i, "$1\\b$2\\b$3"), "i");
	}
	var searchWea = clean(weapon.toLowerCase(), " "); //remove leading or trailing spaces
	var regexWea = makeWordBoundryRegex(searchWea);
	for (var n = 1; n <= 2; n++) {
		for (var i = 1; i <= maxItems; i++) {
			var next = tDoc.getField(prefix + Q + "Attack." + i + ".Weapon Selection");
			if (n === 1 && (regexWea).test(next.value)) {
				return;
			} else if (n === 2 && (next.value === "" || (partialReplace && (makeWordBoundryRegex(next.value)).test(searchWea)))) {
				next.value = weapon;
				return;
			}
		}
	}
};

function RemoveWeapon(weapon) {
	if (!IsNotImport) return;
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var maxItems = QI ? FieldNumbers.attacks : 3;

	var regexWea = RegExp(clean(weapon.toLowerCase(), " ").RegEscape().replace(/(^\W*)(.*?)(\W*$)/i, "$1\\b$2\\b$3"), "i");
	for (var i = 1; i <= maxItems; i++) {
		if ((regexWea).test(What(prefix + Q + "Attack." + i + ".Weapon Selection"))) {
			WeaponDelete(i);
		}
	}
};

function AddString(field, inputstring, newline) {
	var thefield = tDoc.getField(field);
	if (!thefield) return;
	var thestring = inputstring.replace(/\n/g, "\r");
	var regExString = thestring.RegEscape();
	var multithestring = "\r" + thestring;
	var multilines = thefield.type === "text" && thefield.multiline && newline === true && thefield.value !== "";
	var separator = (newline !== true && newline !== false && thefield.value !== "") ? (newline ? newline : " ") : "";
	if (!(RegExp(regExString, "i")).test(thefield.value) && thefield.value.toLowerCase().indexOf(thestring.toLowerCase()) === -1) {
		if (!multilines && thefield.value !== "") {
			var cleanSep = clean(separator, " ");
			var cleanFld = clean(thefield.value, " ");
			if (cleanFld.slice(cleanSep.length * -1) === cleanSep) separator = " ";
			thefield.value = cleanFld + separator + thestring;
		} else {
			thefield.value += multilines ? multithestring : thestring;
		}
	}
};

function RemoveString(field, toremove, newline) {
	var thestring = toremove.replace(/\n/g, "\r");
	var regExString = thestring.RegEscape();
	var thefield = tDoc.getField(field);
	if (!thefield) return;
	var stringsArray = [
		thestring + "\r",
		"\r" + thestring,
		", " + thestring,
		"; " + thestring,
		thestring + ", ",
		thestring + "; ",
		thestring + " ",
		" " + thestring,
		thestring
	];
	var regExStringsArray = [
		regExString + "\\r",
		"\\r" + regExString,
		", " + regExString,
		"; " + regExString,
		regExString + ", ",
		regExString + "; ",
		regExString + " ",
		" " + regExString,
		regExString
	];
	if (newline === false) {
		stringsArray = [thestring];
		regExStringsArray = [regExString];
	}
	for (var i = 0; i < stringsArray.length; i++) {
		if ((RegExp(regExStringsArray[i], "i")).test(thefield.value)) {
			thefield.value = thefield.value.replace(RegExp(regExStringsArray[i], "i"), "");
			i = stringsArray.length;
		} else if (thefield.value.indexOf(stringsArray[i]) !== -1) {
			thefield.value = thefield.value.replace(stringsArray[i], "");
			i = stringsArray.length;
		}
	}
};

function ReplaceString(field, inputstring, newline, theoldstring, alreadyRegExp) {
	var thefield = tDoc.getField(field);
	if (!thefield) return;
	var thestring = theoldstring.replace(/\n/g, "\r");
	var regExString = alreadyRegExp ? thestring : thestring.RegEscape();
	var multilines = newline !== undefined ? newline : thefield.multiline;
	if ((RegExp(regExString, "i")).test(thefield.value) && theoldstring) {
		thefield.value = thefield.value.replace(RegExp(regExString, "i"), inputstring);
	} else if (thefield.value.indexOf(thestring) !== -1 && theoldstring) {
		thefield.value = thefield.value.replace(thestring, inputstring);
	} else {
		AddString(field, inputstring, multilines);
		return;
	};
	if (field == "Extra.Notes") show3rdPageNotes();
};

// add (change === true) or remove (change === false) a skill proficiency with or without expertise; If expertise === "only", only add/remove the expertise, considering the skill already has proficiency; If expertise === "increment", only add/remove the expertise, considering the skill already has proficiency, otherwise add proficiency
function AddSkillProf(SkillName, change, expertise, returnSkillName, bonus, compPage) {
	var QI = compPage ? !compPage : !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var prefix = QI ? "" : compPage ? compPage : getTemplPre(event.target.name, "AScomp", true);
	var tempString = SkillName;
	if (SkillName.length > 4) {
		if (SkillsList.abbreviations.indexOf(SkillName.substring(0, 4)) !== -1) {
			tempString = SkillName.substring(0, 4);
		} else if (SkillsList.abbreviations.indexOf(SkillName.substring(0, 3)) !== -1) {
			tempString = SkillName.substring(0, 3);
		}
	};
	if (SkillsList.abbreviations.indexOf(tempString) == -1) return; // skill not found, so nothing to do
	var alphaB = Who("Text.SkillsNames") === "alphabeta";
	if ((QI || typePF) && !alphaB) tempString = SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(tempString)];
	if (!QI && !typePF) {
		var skFld = prefix + "Text.Comp.Use.Skills." + tempString + ".Prof";
		var curProf = What(skFld);
		if ((/only|increment/i).test(expertise)) {
			var newval = change && curProf == "proficient" ? "expertise" : !change && curProf == "expertise" ? "proficient" : expertise == "only" ? curProf : change && curProf == "nothing" ? "proficient" : "nothing";
		} else {
			var newval = !change ? "nothing" : expertise ? "expertise" : "proficient";
		}
		Value(skFld, newval);
		if (bonus !== undefined && bonus !== false) Value(prefix + ".BlueText.Comp.Use.Skills." + tempString + ".Bonus", bonus);
	} else {
		var profFld = QI ? tempString + " Prof" : prefix + ".Comp.Use.Skills." + tempString + ".Prof";
		var expFld = QI ? tempString + " Exp" : prefix + ".Comp.Use.Skills." + tempString + ".Exp";
		var bonusFld = QI ? tempString + " Bonus" : prefix + ".BlueText.Comp.Use.Skills." + tempString + ".Bonus";
		var curProf = tDoc.getField(profFld).isBoxChecked(0);
		var curExp = tDoc.getField(expFld).isBoxChecked(0);
		var exp, prof;
		if ((/only|increment/i).test(expertise)) {
			exp = change && curProf ? true : false;
			prof = expertise == "only" ? curProf : !change && curExp;
		} else {
			exp = change && expertise;
			prof = change;
		}
		Checkbox(expFld, exp);
		Checkbox(profFld, prof);
		if (bonus !== undefined && bonus !== false) Value(bonusFld, bonus);
	}
	// return the skill name if concerning a companion page
	if (returnSkillName) return SkillsList.names[SkillsList.abbreviations.indexOf(tempString)];
};

//make sure field is a number or the abbreviation of an ability score (field validation)
function ValidateBonus(goEmpty, allowDC) {
	var test = 0;
	var input = Number(event.value.replace(/,/g,"."));
	if (isNaN(input)) {
		var notComp = getTemplPre(event.target.name, "AScomp");
		test = event.value;
		if (!allowDC) test = test.replace(/dc/ig, "");
		["Str", "Dex", "Con", "Int", "Wis", "Cha", "HoS", "Prof"].forEach( function(AbiS) {
			test = test.replace(RegExp("(\\b|\\d)" + AbiS[0] + AbiS[1] + "?" + AbiS[2] + "?" + "(\\b|\\d)", "ig"), "$1" + AbiS + "$2");
		});
		event.value = EvalBonus(test, notComp, "test") !== undefined ? test : event.target.value;
	} else {
		event.value = event.value === "" && goEmpty ? "" : Math.round(input);
	};
};

// Calculate the skill modifier (field calculation)
function CalcSkill() {
	event.value = SkillsList.values[event.target.name] === undefined ? '' : SkillsList.values[event.target.name];
}
function CalcAllSkills(isCompPage) {
	if (isCompPage) {
		var pr = getTemplPre(event.target.name, "AScomp", true);
		if (!pr) return;
	} else {
		var pr = false;
		var remAth = tDoc.getField("Remarkable Athlete").isBoxChecked(0);
		var jackOf = tDoc.getField("Jack of All Trades").isBoxChecked(0);
	}
	var abiFlds = ["Str", "Dex", "Con", "Int", "Wis", "Cha", "HoS"];
	var alphaB = Who("Text.SkillsNames") == "alphabeta";
	var setVals = SkillsList.values;
	var mod = {};
	for (var i = 0; i < abiFlds.length; i++) {
		var abi = abiFlds[i];
		mod[abi] = What(!pr ? abi + " Mod" : pr + "Comp.Use.Ability." + abi + ".Mod");
	}
	var profB = Number(!pr ? How("Proficiency Bonus") : What(pr + "Comp.Use.Proficiency Bonus"));
	var profDie = tDoc.getField(!pr ? "Proficiency Bonus Dice" : pr + "BlueText.Comp.Use.Proficiency Bonus Dice").isBoxChecked(0);
	var isInit = false;
	var allBonus = EvalBonus(What(!pr ? "All Skills Bonus" : pr + "BlueText.Comp.Use.Skills.All.Bonus"), !pr ? true : pr);
	var passPercFld = !pr ? "Passive Perception" : pr + "Comp.Use.Skills.Perc.Pass.Mod";
	for (var i = 0; i < SkillsList.abbreviations.length; i++) {
		var sk = SkillsList.abbreviations[i];
		isInit = sk == "Init";
		if (sk == "Too" && pr) continue;
		var skFld = alphaB || (pr && !typePF) ? sk : SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(sk)];
		var setFld = !pr ? (isInit ? "Initiative bonus" : skFld) : pr + "Comp.Use." + (isInit ? "Combat.Init" : "Skills." + skFld) + ".Mod";
		var theAbi = SkillsList.abilityScores[i];
		var doPass = sk == "Perc";
		if (!theAbi || theAbi == "Too" || mod[theAbi] === undefined || mod[theAbi] === "") {
			setVals[setFld] = "";
			if (doPass) setVals[passPercFld] = "";
			continue;
		}
		// ability score modifier
		setVals[setFld] = mod[theAbi];
		var addProf = 0;
		// proficiency bonus
		if (isInit) {
			if (!pr) setVals[setFld] += remAth ? Math.ceil(profB / 2) : jackOf ? Math.floor(profB / 2) : 0;
		} else if ((doPass || !profDie) && !pr) {
			if (tDoc.getField(setFld + " Prof").isBoxChecked(0)) {
				addProf = profB;
				if (tDoc.getField(setFld + " Exp").isBoxChecked(0)) addProf += profB;
			} else if (remAth && (/^(Str|Dex|Con)$/).test(theAbi)) {
				addProf = Math.ceil(profB / 2);
			} else if (jackOf) {
				addProf = Math.floor(profB / 2);
			}
		} else if ((doPass || !profDie) && typePF) {
			if (tDoc.getField(pr + "Comp.Use.Skills." + skFld + ".Prof").isBoxChecked(0)) {
				addProf = profB;
				if (tDoc.getField(pr + "Comp.Use.Skills." + skFld + ".Exp").isBoxChecked(0)) addProf += profB;
			}
		} else if (doPass || !profDie) {
			var profType = What(pr + "Text.Comp.Use.Skills." + skFld + ".Prof");
			if (profType == "expertise") {
				addProf = profB * 2;
			} else if (profType == "proficient") {
				addProf = profB;
			}
		}
		if (!profDie) setVals[setFld] += addProf;
		// modifier field
		var modFld = isInit && !pr ? "Init Bonus" : isInit && pr ? pr + "Comp.Use.Combat.Init.Bonus" : !pr ? setFld + " Bonus" : pr + "BlueText.Comp.Use.Skills." + skFld + ".Bonus";
		setVals[setFld] += EvalBonus(What(modFld), !pr ? true : pr);
		// all skill bonus
		if (!isInit) setVals[setFld] += allBonus;
		// passive perception
		if (doPass) {
			setVals[passPercFld] = setVals[setFld] + 10;
			setVals[passPercFld] += EvalBonus(What(!pr ? "Passive Perception Bonus" : pr + "BlueText.Comp.Use.Skills.Perc.Pass.Bonus"), !pr ? true : pr);
			if (!pr) {
				// advantage/disadvantage on the 1st page
				if (!typePF) {
					setVals[passPercFld] += tDoc.getField(setFld + " Adv").isBoxChecked(0) ? 5 : tDoc.getField(setFld + " Dis").isBoxChecked(0) ? -5 : 0;
				} else {
					var pasPercSN = How("Passive Perception Bonus");
					setVals[passPercFld] += pasPercSN == "Adv" ? 5 : pasPercSN == "Dis" ? -5 : 0;
				}
				if (profDie) {
					// add the proficiency bonus if set to using proficiency die
					setVals[passPercFld] += addProf;
				}
			}
		}
	}
	CalcSkill();
};

//calculate the saving throw modifier (field calculation)
function CalcSave() {
	//get the ability modifier belonging to the save
	var Save = event.target.name;
	var QI = event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var Sabi = QI ? 4 : 21 + prefix.length;
	var Ability = Save.substring(0, Sabi - 1).slice(-3);
	var Mod = What(Save.substring(0, Sabi) + "Mod");

	//get the proficiency bonus if applicable
	var Sprof = tDoc.getField(Save.replace("Mod", "Prof")).isBoxChecked(0) === 1;
	var useDice = QI ? tDoc.getField("Proficiency Bonus Dice").isBoxChecked(0) === 1 : tDoc.getField(prefix + "BlueText.Comp.Use.Proficiency Bonus Dice").isBoxChecked(0) === 1;
	var ProfBonus = useDice || !Sprof ? 0 : What(prefix + Q + "Proficiency Bonus");

	//get the variable entered into the bonus field
	var ExtraBonus = EvalBonus(What(Save.replace("Comp.", "BlueText.Comp.").replace("Mod", "Bonus")), QI ? true : prefix);

	//get the variable entered into the bonus field for all
	var AllBonus = EvalBonus(What(Save.replace("Comp.", "BlueText.Comp.").replace("Mod", "Bonus").replace(Ability, "All")), QI ? true : prefix);

	//calculate the total
	var theResult = Mod === "" ? "" : Number(Mod) + Number(ProfBonus) + Number(ExtraBonus) + Number(AllBonus);

	//change the total to fail if some condition dictates it
	if (!typePF && QI && (Ability === "Str" || Ability === "Dex") && (tDoc.getField("Extra.Condition 8").isBoxChecked(0) === 1 || tDoc.getField("Extra.Condition 9").isBoxChecked(0) === 1 || tDoc.getField("Extra.Condition 13").isBoxChecked(0) === 1 || tDoc.getField("Extra.Condition 14").isBoxChecked(0) === 1)) {
		theResult = "fail";
	}

	event.value = theResult;
};

//calculate the ability modifier (field calculation)
function CalcMod() {
	var Base = event.target.name.indexOf("Comp.") !== -1 || event.target.name.indexOf("Wildshape.") !== -1;
	var AbiNm = Base ? event.target.name.replace(".Mod", ".Score") : event.target.name.replace(" Mod", "");
	var theScore = What(AbiNm);
	event.value = theScore ? (Math.round((theScore - 10.5) * 0.5)) : "";
}

// Add a limited feature: add (UpdateOrReplace = "replace"), or only update the text (UpdateOrReplace = "update"), or update both the text and the usages (UpdateOrReplace = number of previous usages), or just add the number of usages (UpdateOrReplace = "bonus")
function AddFeature(identifier, usages, additionaltxt, recovery, tooltip, UpdateOrReplace, Calc) {
	tooltip = tooltip ? tooltip : "";
	var additionaltxt = additionaltxt && What("Unit System") === "metric" ? ConvertToMetric(additionaltxt, 0.5) : additionaltxt;
	UpdateOrReplace = UpdateOrReplace ? UpdateOrReplace : "replace";
	var calculation = Calc ? Calc : "";
	var SslotsVisible = !typePF && eval(What("SpellSlotsRemember"))[0];
	var recovery = (/^(long rest|short rest|dawn)$/).test(recovery) ? recovery : recovery.capitalize();
	if ((/ ?\bper\b ?/).test(usages)) usages = usages.replace(/ ?\bper\b ?/, "");
	for (var n = 1; n <= 2; n++) {
		for (var i = 1; i <= FieldNumbers.limfea; i++) {
			var featureFld = tDoc.getField("Limited Feature " + i);
			var usageFld = tDoc.getField("Limited Feature Max Usages " + i);
			var recoveryFld = tDoc.getField("Limited Feature Recovery " + i);
			if (n === 1 && featureFld.value.toLowerCase().indexOf(identifier.toLowerCase()) !== -1) { //if the feature is found
				if (UpdateOrReplace === "replace" || (!isNaN(UpdateOrReplace) && !isNaN(usages))) {
					featureFld.value = identifier + additionaltxt;
					if (tooltip) featureFld.userName = "The feature \"" + identifier + "\" was gained from " + tooltip;
					usageFld.setAction("Calculate", calculation);
					usageFld.submitName = calculation; //so it can be referenced later
					recoveryFld.value = recovery;
					if (!isNaN(UpdateOrReplace) && !isNaN(usages)) {
						usageFld.value += usages - UpdateOrReplace;
					} else {
						usageFld.value = usages;
					}
				} else if ((featureFld.value.toLowerCase().indexOf(additionaltxt.toLowerCase()) !== -1 || UpdateOrReplace === "bonus") && !isNaN(usages)) {
					featureFld.userName += featureFld.userName.indexOf(tooltip) === -1 ? ", " + tooltip : "";
					usageFld.value += usages - (!isNaN(UpdateOrReplace) ? UpdateOrReplace : 0);
				} else { //UpdateOrReplace == "update" || isNaN(usages)
					featureFld.value = identifier + additionaltxt;
					usageFld.setAction("Calculate", calculation);
					usageFld.submitName = calculation; //so it can be referenced later
					usageFld.value = usages;
					recoveryFld.value = recovery;
				}
				i = FieldNumbers.limfea + 1;
				n = 3;
			} else if (n === 2 && featureFld.value === "") { //if the feature is not found
				if (SslotsVisible && i > 5 && i < 9) continue; //don't add something to the bottom three rows on the first page if the spell slots are visible
				featureFld.value = identifier + additionaltxt;
				if (tooltip) featureFld.userName = "The feature \"" + identifier + "\" was gained from " + tooltip;
				usageFld.setAction("Calculate", calculation);
				usageFld.submitName = calculation; //so it can be referenced later
				usageFld.value = usages;
				recoveryFld.value = recovery;
				i = FieldNumbers.limfea + 1;
			}
		}
	}
};

// Remove a limited feature
function RemoveFeature(identifier, usages, additionaltxt, recovery, tooltip, UpdateOrReplace, Calc) {
	var theFlds = [
		"Limited Feature ",
		"Limited Feature Max Usages ",
		"Limited Feature Recovery ",
		"Limited Feature Used "
	];
	var EndFldsArray = [];
	for (var F = 0; F < theFlds.length; F++) {
		EndFldsArray.push(theFlds[F] + FieldNumbers.limfea);
	}
	for (var i = 1; i <= FieldNumbers.limfea; i++) {
		var FldsArray = [];
		for (var l = 0; l < theFlds.length; l++) {
			FldsArray.push(theFlds[l] + i);
		}
		var featureFld = tDoc.getField(FldsArray[0]);
		var usageFld = tDoc.getField(FldsArray[1]);
		if (featureFld.value.toLowerCase().indexOf(identifier.toLowerCase()) !== -1) {
			if (!usages || usageFld.value === usages || Calc || isNaN(usages)) {
				LimFeaDelete(i); //delete the limited feature at this row and move all the ones up below it
			} else {
				usageFld.value -= usages;
			}
			i = FieldNumbers.limfea + 1;
		}
	}
}

// >>>> Feat functions <<<< \\

// Make an array of all feat fields of that field number
function ReturnFeatFieldsArray(FldNmbr) {
	fldsArray = [
		"Feat Name " + FldNmbr,			// 0
		"Feat Note " + FldNmbr,			// 1
		"Feat Description " + FldNmbr	// 2
	];
	return fldsArray;
}

// Lookup the name of a Feat and if it exists in the FeatsList
function ParseFeat(input) {
	var found = "";
	var subFound = "";
	if (!input) return [found, subFound, []];

	input = removeDiacritics(input).toLowerCase();
	var foundLen = 0;
	var foundDat = 0;
	var subFoundLen = 0;
	var subFoundDat = 0;
	var subOptionArr = [];
	var isMatch, isMatchSub, tempDate, tempDateSub, tempNameLen;
	var varArr;

	// Scan string for all magic items
	for (var key in FeatsList) {
		var kObj = FeatsList[key];

		// test if the magic item or its source isn't excluded
		if (testSource(key, kObj, "featsExcl")) continue;

		isMatch = input.indexOf(kObj.name.toLowerCase()) !== -1;
		tempDate = sourceDate(kObj.source);
		subFoundLen = 0;
		subFoundDat = 0;
		isMatchSub = "";
		varArr = [];

		if (kObj.choices) {
			for (var i = 0; i < kObj.choices.length; i++) {
				var keySub = kObj.choices[i].toLowerCase();
				var sObj = kObj[keySub];
				if (!sObj || (sObj.source && testSource(keySub, sObj, "featsExcl"))) continue;
				varArr.push(kObj.choices[i]);
				var isMatchSub = false;
				if (sObj.name) {
					isMatchSub = input.indexOf(sObj.name.toLowerCase()) !== -1;
				} else if (isMatch) {
					isMatchSub = input.indexOf(keySub) !== -1;
				}
				if (isMatchSub) {
					// the choice matched, but only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source than the other choices
					tempDateSub = sObj.source ? sourceDate(sObj.source) : tempDate;
					tempNameLen = (sObj.name ? sObj.name : keySub).length
					if (tempNameLen < subFoundLen || (tempNameLen == subFoundLen && tempDateSub < subFoundDat)) continue;
					// we have a match for a choice, so set the values
					subFoundLen = tempNameLen;
					subFoundDat = tempDateSub;
					foundLen = kObj.name.length;
					foundDat = tempDate;
					found = key;
					subFound = keySub;
					subOptionArr = varArr;
				}
			}
		}
		if (!isMatch || subFoundLen) continue; // no match or sub already matched

		// only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source. This differs from the regExpSearch objects
		if (kObj.name.length < foundLen || (kObj.name.length == foundLen && tempDate < foundDat)) continue;

		// we have a match, set the values
		found = key;
		subFound = "";
		subOptionArr = varArr;
		foundLen = kObj.name.length
		foundDat = tempDate;
	}
	return [found, subFound, subOptionArr];
};

// Check all Feat fields and parse the once known into the global variable
function FindFeats() {
	CurrentFeats.known = [];
	CurrentFeats.choices = [];
	for (var i = 1; i <= FieldNumbers.feats; i++) {
		var parsedFeat = ParseFeat( What("Feat Name " + i) );
		CurrentFeats.known.push(parsedFeat[0]);
		CurrentFeats.choices.push(parsedFeat[1]);
	}
}

// Add the text and features of a Feat
function ApplyFeat(input, FldNmbr) {
	if (IsSetDropDowns || CurrentVars.manual.feats || !IsNotFeatMenu) return; // When just changing the dropdowns or feats are set to manual or this is a menu action, don't do anything
	var Fflds = ReturnFeatFieldsArray(FldNmbr);
	// Not called from a field? Then just set the field and let this function be called anew
	if ((!event.target || event.target.name !== Fflds[0]) && What(Fflds[0]) !== input) {
		Value(Fflds[0], input);
		return;
	};

	var parseResult = ParseFeat(input);
	var newFeat = parseResult[0];
	var newFeatVar = parseResult[1];
	var aFeat = FeatsList[newFeat];
	var aFeatVar = aFeat && newFeatVar ? aFeat[newFeatVar] : false;
	var ArrayNmbr = FldNmbr - 1;
	var oldFeat = CurrentFeats.known[ArrayNmbr];
	var oldFeatVar = CurrentFeats.choices[ArrayNmbr];
	var setFieldValueTo;
	var failedChoice = false;

	var doNotCommit = function(toSetVal) {
		if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
		if (!IsNotImport) return;
		event.rc = false;
		if (isArray(event.target.page)) OpeningStatementVar = app.setTimeOut("tDoc.getField('" + event.target.name + ".1').setFocus();", 10);
	}

	// If no variant was found, but there is a choice, ask it now
	if (aFeat && aFeat.choices && !newFeatVar) {
		if (parseResult[2].length) {
			var selectFeatVar = false;
			if (parseResult[2].length == 1) {
				selectFeatVar = parseResult[2][0];
			} else if (aFeat.selfChoosing && typeof aFeat.selfChoosing == "function") {
				try {
					selectFeatVar = aFeat.selfChoosing();
				} catch (error) {
					var eText = "The function in the 'selfChoosing' attribute of '" + newFeat + "' produced an error! Please contact the author of the feat code to correct this issue:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
				}
				selectFeatVar = selectFeatVar && typeof selectFeatVar == "string" && aFeat[selectFeatVar.toLowerCase()] ? selectFeatVar : false;
			}
			if (!newFeatVar && !IsNotImport) {
				failedChoice = true;
			} else {
				if (!selectFeatVar) selectFeatVar = AskUserOptions("Select " + aFeat.name + " Type", "The '" + aFeat.name + "' feat has several forms. Select which form you want to add to the sheet at this time.\n\nYou can change the selected form with the little square button in the feat line that this feat is in.", parseResult[2], "radio", true);
				newFeatVar = selectFeatVar.toLowerCase();
				aFeatVar = aFeat[newFeatVar];
				setFieldValueTo = aFeatVar.name ? aFeatVar.name : aFeat.name + " [" + selectFeatVar + "]";
			}
		} else if (!IsNotImport) {
			failedChoice = true;
		} else {
			app.alert({
				cTitle : "Error processing options for " + aFeat.name,
				cMsg : "The feat that you have selected, '" + aFeat.name + "' offers a choice for the form it comes in. Unfortunately, the sheet has run into an issue where there are no forms to choose from because of resources being excluded. Use the \"Source Material\" bookmark to correct this.\n\nThis could also be an issue with the imported script containing the feat not being written correctly. If so, please contact the author of that import script."
			});
			doNotCommit();
			return;
		}
	}

	// if there was a choice but none was selected for whatever reason (importing), do not apply anything and warn the user
	if (failedChoice) {
		Value(Fflds[2], 'ERROR, please reapply "' + aFeat.name + '" above.');
		if (!IsNotImport) {
			console.println("The feat '" + aFeat.name + "' requires you to make a selection of a sub-choice. However, because this feat was added during importing from another MPMB's Character Record Sheet, no pop-up dialog could be displayed to allow you to make a selection. Please reapply this feat to show the pop-up dialog and make a selection for its sub-choice.");
			console.show();
		}
		if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
		event.target.setVal = "ERROR, please reapply: " + (aFeat.name.substr(0,2) + "\u200A" + aFeat.name.substr(2)).split(" ").join("\u200A ");
		return;
	}

	if (oldFeat === newFeat && oldFeatVar === newFeatVar) {
		if (setFieldValueTo) event.target.setVal = setFieldValueTo;
		return; // No changes were made
	}

	// Start progress bar
	var thermoTxt = thermoM("Applying feat...");
	thermoM(1/6); // Increment the progress bar

	// Create the object to use (merge parent and choice)
	if (!newFeatVar) {
		var theFeat = aFeat;
		aFeatVar = "";
	} else {
		var theFeat = {
			name : aFeatVar.name ? aFeatVar.name : setFieldValueTo ? setFieldValueTo : input
		}
		var FeatAttr = ["source", "description", "descriptionFull", "calculate", "prerequisite", "prereqeval"];
		for (var a = 0; a < FeatAttr.length; a++) {
			var aKey = FeatAttr[a];
			if (aFeatVar[aKey]) {
				theFeat[aKey] = aFeatVar[aKey];
			} else if (aFeat[aKey]) {
				theFeat[aKey] = aFeat[aKey];
			}
		}
	}

	// Check if the feat doesn't already exist (with the same choice, if any)
	if (IsNotImport && !ignoreDuplicates && aFeat) {
		// count occurrence of parent & choice
		var parentDupl = 0;
		var choiceDupl = 0;
		for (var i = 0; i < CurrentFeats.known.length; i++) {
			if (i == ArrayNmbr) continue;
			if (CurrentFeats.known[i] == newFeat) {
				parentDupl++;
				if (newFeatVar && CurrentFeats.choices[i] == newFeatVar) choiceDupl++;
			}
		}
		if ((parentDupl && !aFeat.allowDuplicates) || (choiceDupl && !aFeatVar.allowDuplicates)) {
			var stopFunct = app.alert({
				cTitle : "Can only have one instance of a feat",
				cMsg : "The feat that you have selected, '" + (choiceDupl ? theFeat.name : aFeat.name) + "' is already present on the sheet and you can't have duplicates of it." + (newFeatVar && !choiceDupl ? "\n\nHowever, as this is a composite feat that exists in different forms, and you don't have '" + theFeat.name + "' yet, the sheet can allow you to add it regardless of the rules. Do you want to continue adding this feat?" : ""),
				nIcon : !newFeatVar || choiceDupl ? 0 : 1,
				nType : !newFeatVar || choiceDupl ? 0 : 2
			});
			if (stopFunct === 1 || stopFunct === 3) {
				doNotCommit();
				return;
			}
		}
	}

	// Before stopping the calculations, first test if the feat has a prerequisite and if it meets that
	if (IsNotImport && IsNotReset && theFeat && theFeat.prereqeval && !ignorePrereqs && event.target && event.target.name == Fflds[0]) {
		try {
			if (typeof theFeat.prereqeval == 'string') {
				var meetsPrereq = eval(theFeat.prereqeval);
			} else if (typeof theFeat.prereqeval == 'function') {
				var gatherVars = gatherPrereqevalVars();
				gatherVars.choice = newFeatVar;
				var meetsPrereq = theFeat.prereqeval(gatherVars);
			}
		} catch (error) {
			var eText = "The 'prereqeval' attribute for the feat '" + theFeat.name + "' produces an error and is subsequently ignored. If this is one of the built-in feats, please contact morepurplemorebetter using one of the contact bookmarks to let him know about this bug. Please do not forget to list the version number of the sheet, name and version of the software you are using, and the name of the feat.\nThe sheet reports the error as\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
			var meetsPrereq = true;
		};
		if (!meetsPrereq) {
			thermoTxt = thermoM("The feat '" + theFeat.name + "' has prerequisites that have not been met...", false); //change the progress dialog text
			thermoM(1/5); //increment the progress dialog's progress

			var askUserFeat = app.alert({
				cTitle : "The prerequisites for '" + theFeat.name + "' have not been met",
				cMsg : "The feat that you have selected, '" + theFeat.name + "' has a prerequisite listed" + (theFeat.prerequisite ? ' as: \n\t"' + theFeat.prerequisite + '"' : ".") + "\n\nYour character does not meet this requirement. Are you sure you want to apply this feat?",
				nIcon : 1,
				nType : 2
			});

			if (askUserFeat !== 4) { // If "NO" was pressed
				doNotCommit();
				return;
			}
		};
	};

	// if a feat variant was chosen, make sure this field will show that selection, now that it can't be cancelled anymore due to not meeting a prerequisite
	if (setFieldValueTo) event.target.setVal = setFieldValueTo;

	calcStop(); // Now stop the calculations

	// Remove previous feat at the same field
	if (oldFeat !== newFeat || oldFeatVar !== newFeatVar) {
		// Remove everything from the description field, value, calculation, tooltip, submitname
		tDoc.getField(Fflds[2]).setAction("Calculate", "");
		Value(Fflds[2], "", "", "");
		if (oldFeat) {
			if (oldFeat !== newFeat) {
				// Remove its attributes
				var Fea = ApplyFeatureAttributes(
					"feat", // type
					oldFeat, // fObjName
					[CurrentFeats.level, 0, false], // lvlA [old-level, new-level, force-apply]
					[oldFeatVar, "", false], // choiceA [old-choice, new-choice, "only"|"change"]
					false // forceNonCurrent
				);
			}
			// remove the source from the notes field
			var oldSource = oldFeatVar && FeatsList[oldFeat][oldFeatVar].source ? FeatsList[oldFeat][oldFeatVar] : FeatsList[oldFeat];
			var sourceStringOld = stringSource(oldSource, "first", "[", "]");
			if (sourceStringOld) RemoveString(Fflds[1], sourceStringOld);
		}
	}

	// Update the CurrentFeats.known variable
	CurrentFeats.known[ArrayNmbr] = newFeat;
	CurrentFeats.choices[ArrayNmbr] = newFeatVar;

	// Do something if there is a new feat to apply
	if (aFeat) {
		thermoTxt = thermoM("Applying '" + theFeat.name + "' feat...", false); //change the progress dialog text
		thermoM(1/3); //increment the progress dialog's progress

		// Set the field description/calculation
		if (theFeat.calculate) {
			var theCalc = What("Unit System") === "imperial" ? theFeat.calculate : ConvertToMetric(theFeat.calculate, 0.5);
			if (typePF) theCalc = theCalc.replace("\n", " ");
			tDoc.getField(Fflds[2]).setAction("Calculate", theCalc);
		}

		// Create the tooltip
		var tooltipStr = toUni(theFeat.name);
		if (theFeat.prerequisite) tooltipStr += "\n \u2022 Prerequisite: " + theFeat.prerequisite;
		tooltipStr += stringSource(theFeat, "full,page", "\n \u2022 Source: ", ".");
		if (theFeat.descriptionFull) tooltipStr += isArray(theFeat.descriptionFull) ? desc(theFeat.descriptionFull).replace(/^\n   /i, "\n\n") : "\n\n" + theFeat.descriptionFull;

		// Get the description
		var theDesc = !theFeat.description ? "" : What("Unit System") === "imperial" ? theFeat.description : ConvertToMetric(theFeat.description, 0.5);
		if (typePF) theDesc = theDesc.replace("\n", " ");
		// Set it all to the appropriate field
		Value(Fflds[2], theDesc, tooltipStr, theFeat.calculate ? theCalc : "");

		// Set the notes field
		var sourceString = stringSource(theFeat, "first", "[", "]");
		if (sourceString) AddString(Fflds[1], sourceString, " ");

		// Apply the rest of its attributes
		var justChange = oldFeat == newFeat && oldFeatVar !== newFeatVar;
		var Fea = ApplyFeatureAttributes(
			"feat", // type
			newFeat, // fObjName
			[justChange ? CurrentFeats.level : 0, CurrentFeats.level, justChange], // lvlA [old-level, new-level, force-apply]
			justChange ? [oldFeatVar, newFeatVar, "change"] : ["", newFeatVar, false], // choiceA [old-choice, new-choice, "only"|"change"]
			false // forceNonCurrent
		);
	}

	thermoM(thermoTxt, true); // Stop progress bar
};

function SetFeatsdropdown(forceTooltips) {
	var ArrayDing = [""];
	var tempString = "Type in the name of the feat (or select it from the drop-down menu) and its text and features will be filled out automatically, provided it is a recognized feat.\n\nAbility scores will not be automatically altered other than their tool tips (mouseover texts) and in the Scores dialog.";
	for (var key in FeatsList) {
		if (testSource(key, FeatsList[key], "featsExcl")) continue;
		var feaNm = FeatsList[key].name;
		if (ArrayDing.indexOf(feaNm) === -1) ArrayDing.push(feaNm);
	}
	ArrayDing.sort();

	var ArrayDingSource = ArrayDing.toSource();
	var applyItems = tDoc.getField("Feat Name 1").submitName !== ArrayDingSource;
	if (applyItems) tDoc.getField("Feat Name 1").submitName = ArrayDingSource;

	for (var i = 1; i <= FieldNumbers.feats; i++) {
		var theFeatFld = "Feat Name " + i;
		var theFeati = What(theFeatFld);
		if (applyItems) {
			tDoc.getField(theFeatFld).setItems(ArrayDing);
			Value(theFeatFld, theFeati, tempString);
		} else if (forceTooltips) {
			AddTooltip(theFeatFld, tempString);
		}
	}
}

//Make menu for the button on each Feat line and parse it to Menus.feats
function MakeFeatMenu_FeatOptions(MenuSelection, itemNmbr) {
	var featMenu = [];
	if (!itemNmbr) itemNmbr = parseFloat(event.target.name.slice(-2));
	var ArrayNmbr = itemNmbr - 1;
	var Fflds = ReturnFeatFieldsArray(itemNmbr);
	var theField = What(Fflds[0]) != "";
	var noUp = itemNmbr === 1;
	var noDown = itemNmbr === FieldNumbers.feats;
	var upToOtherPage = itemNmbr !== (FieldNumbers.featsD + 1) ? "" : typePF ? " (to third page)" : " (to second page)";
	var downToOtherPage = itemNmbr === FieldNumbers.featsD ? " (to overflow page)" : "";
	var aFeat;

	if (!MenuSelection || MenuSelection === "justMenu") {
		// a function to add the other items
		var menuLVL1 = function (array) {
			for (i = 0; i < array.length; i++) {
				featMenu.push({
					cName : array[i][0],
					cReturn : "feat#" + array[i][1],
					bEnabled : array[i][2] !== undefined ? array[i][2] : true
				});
			}
		};
		// if this feat allows for a choice, add that option as the first thing in the menu
		if (CurrentFeats.known[ArrayNmbr]) {
			aFeat = FeatsList[CurrentFeats.known[ArrayNmbr]];
			if (FeatsList[CurrentFeats.known[ArrayNmbr]].choices) {
				var aFeatOpts = aFeat.choices;
				var choiceMenu = {
					cName : "Change type of " + aFeat.name,
					oSubMenu : []
				};
				for (var i = 0; i < aFeatOpts.length; i++) {
					var aCh = aFeatOpts[i];
					var aChL = aCh.toLowerCase();
					if (!aFeat[aChL] || (aFeat[aChL].source && testSource(aChL, aFeat[aChL], "featsExcl"))) continue;
					choiceMenu.oSubMenu.push({
						cName : aCh + stringSource(aFeat[aChL].source ? aFeat[aChL] : aFeat, "first,abbr", "\t   [", "]"),
						cReturn : "feat#choice#" + aChL,
						bMarked : CurrentFeats.choices[ArrayNmbr] == aChL
					});
				}
				if (choiceMenu.oSubMenu.length > 1) featMenu.push(choiceMenu);
			}
			// an option to read the whole description
			if (Who(Fflds[2])) menuLVL1([["Show full text of " + aFeat.name, "popup"]]);
			// add a separator if we have any items in the menu so far
			if (featMenu.length) featMenu.push({cName : "-"});
		}
		menuLVL1([
			["Move up" + upToOtherPage, "up", !noUp],
			["Move down" + downToOtherPage, "down", !noDown],
			["-", "-"],
			["Insert empty feat", "insert", noDown || !theField ? false : true],
			["Delete feat", "delete"],
			["Clear feat", "clear"],
		]);
		Menus.feats = featMenu;
		if (MenuSelection == "justMenu") return;
	}
	MenuSelection = getMenu("feats");
	if (!MenuSelection || MenuSelection[0] == "nothing" || MenuSelection[0] != "feat") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Apply feat menu option...");

	switch (MenuSelection[1]) {
		case "popup" :
			ShowDialog("Feat's full description", Who(Fflds[2]));
			break;
		case "choice" :
			aFeat = FeatsList[CurrentFeats.known[ArrayNmbr]];
			if (MenuSelection[2] && aFeat && aFeat[MenuSelection[2]] && CurrentFeats.choices[ArrayNmbr] !== MenuSelection[2]) {
				var aFeatVar = aFeat[MenuSelection[2]];
				if (aFeatVar.name) {
					Value(Fflds[0], aFeatVar.name);
				} else {
					for (var i = 0; i < aFeat.choices.length; i++) {
						if (aFeat.choices[i].toLowerCase() == MenuSelection[2]) {
							Value(Fflds[0], aFeat.name + " [" + aFeat.choices[i] + "]");
							break;
						}
					}
				}
			}
			break;
		case "up" :
			if (noUp) return;
		case "down" :
			if (MenuSelection[1] == "down" && noDown) return;
			calcStop();
			IsNotFeatMenu = false;
			thermoTxt = thermoM("Moving the feat " + MenuSelection[1] + "...", false);
			// Get the other fields
			var otherNmbr = MenuSelection[1] == "down" ? itemNmbr + 1 : itemNmbr - 1;
			var FfldsO = ReturnFeatFieldsArray(otherNmbr);
			// Now swap all the fields
			for (var i = 0; i < Fflds.length; i++) {
				var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
				copyField(Fflds[i], FfldsO[i], exclObj, true);
				thermoM(i/Fflds.length); //increment the progress dialog's progress
			}
			// Correct the entry in the CurrentMagicItems.known array
			if (!CurrentVars.manual.feats) {
				var thisKnown = CurrentFeats.known[itemNmbr - 1];
				var thisChoice = CurrentFeats.choices[itemNmbr - 1];
				CurrentFeats.known[itemNmbr - 1] = CurrentFeats.known[otherNmbr - 1];
				CurrentFeats.known[otherNmbr - 1] = thisKnown;
				CurrentFeats.choices[itemNmbr - 1] = CurrentFeats.choices[otherNmbr - 1];
				CurrentFeats.choices[otherNmbr - 1] = thisChoice;
			}
			IsNotFeatMenu = true;
			break;
		case "insert" :
			FeatInsert(itemNmbr);
			break;
		case "delete" :
			FeatDelete(itemNmbr);
			break;
		case "clear" :
			thermoTxt = thermoM("Clearing feat...", false);
			FeatClear(itemNmbr, true);
			break;
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

//insert a feat at the position wanted
function FeatInsert(itemNmbr) {
	// Stop the function if the selected slot is already empty
	if (!What("Feat Name " + itemNmbr)) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Inserting empty feat...");
	calcStop();
	IsNotFeatMenu = false;

	// Look for the first empty slot below the slot
	var endslot = false;
	for (var i = itemNmbr + 1; i <= FieldNumbers.feats; i++) {
		if (What("Feat Name " + i) === "") {
			endslot = i;
			break;
		}
	}

	//only continue if an empty slot was found in the fields
	if (endslot) {
		// Cycle through the slots starting with the found empty one and add the values of the one above
		for (var f = endslot; f > itemNmbr; f--) {
			// Copy all the fields
			var FfldsFrom = ReturnFeatFieldsArray(f - 1);
			var FfldsTo = ReturnFeatFieldsArray(f);
			for (var i = 0; i < FfldsFrom.length - 1; i++) {
				var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
				copyField(FfldsFrom[i], FfldsTo[i], exclObj);
			}
			// Correct the known array & choices arrays
			if (!CurrentVars.manual.feats) {
				CurrentFeats.known[f - 1] = CurrentFeats.known[f - 2];
				CurrentFeats.choices[f - 1] = CurrentFeats.choices[f - 2];
			}
		}

		// Empty the selected slot
		FeatClear(itemNmbr)
	}

	IsNotFeatMenu = true;
	thermoM(thermoTxt, true); // Stop progress bar
}

//delete a feat at the position wanted and move the rest up
function FeatDelete(itemNmbr) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Deleting feat...");
	calcStop();

	var maxNmbr = FieldNumbers.feats;
	// Stop at the end of the first page if last one on first page is empty
	if (itemNmbr <= FieldNumbers.featsD && !What("Feat Name " + FieldNumbers.featsD)) maxItem = FieldNumbers.featsD;

	// First clear the current feat so that it's automation is run
	FeatClear(itemNmbr, true);
	IsNotFeatMenu = false;

	// Make every line identical to the one below, starting with the selected line
	for (var f = itemNmbr; f < maxItem; f++) {
		// Copy all the fields
		var FfldsFrom = ReturnFeatFieldsArray(f + 1);
		var FfldsTo = ReturnFeatFieldsArray(f);
		for (var i = 0; i < FfldsFrom.length - 1; i++) {
			var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
			copyField(FfldsFrom[i], FfldsTo[i], exclObj);
		}
		// Correct the known array & choices arrays
		if (!CurrentVars.manual.feats) {
			CurrentFeats.known[f - 1] = CurrentFeats.known[f];
			CurrentFeats.choices[f - 1] = CurrentFeats.choices[f];
		}
	}

	// Clear the final line
	FeatClear(maxItem);

	IsNotFeatMenu = true;
	thermoM(thermoTxt, true); // Stop progress bar
}

// Clear a feat at the position given
function FeatClear(itemNmbr, doAutomation) {
	var Fflds = ReturnFeatFieldsArray(itemNmbr);
	if (doAutomation && !CurrentVars.manual.feats && CurrentFeats.known[itemNmbr - 1]) {
		IsNotFeatMenu = true;
		Value("Feat Name " + itemNmbr, "");
		tDoc.resetForm(Fflds[1]);
	} else {
		if (!CurrentVars.manual.feats) CurrentFeats.known[itemNmbr - 1] = "";
		AddTooltip(Fflds[2], "", "");
		tDoc.getField(Fflds[2]).setAction("Calculate", "");
		if (IsNotReset) tDoc.resetForm(Fflds);
	}
}

//this is now an empty function so that legacy code doesn't produce an error
function ChangeSpeed(input) {
	console.println("ChangeSpeed(" + input + ") was called, but this function is no longer supported since v12.998 of the sheet. Instead, a new, more comprehensive syntax for setting speed is available from v12.998 onwards.");
	console.show();
};

function ResetFeaSR() {
	for (var z = 1; z <= FieldNumbers.limfea; z++) {
		var recoveryFld = What("Limited Feature Recovery " + z).toLowerCase();
		if (recoveryFld.indexOf("short rest") !== -1 || recoveryFld.indexOf("sr") !== -1) {
			resetForm(["Limited Feature Used " + z]);
		}
	}
}

function ResetFeaLR() {
	calcStop();
	for (var z = 1; z <= FieldNumbers.limfea; z++) {
		var recoveryFld = What("Limited Feature Recovery " + z).toLowerCase();
		if (recoveryFld.indexOf("short rest") !== -1 || recoveryFld.indexOf("sr") !== -1 || recoveryFld.indexOf("long rest") !== -1 || recoveryFld.indexOf("lr") !== -1) {
			resetForm(["Limited Feature Used " + z]);
		}
	}
	var SpellSlotsReset = [];
	var SSfrontA = What("Template.extras.SSfront").split(",")[1];
	if (SSfrontA) SpellSlotsReset.push(SSfrontA + "SpellSlots.Checkboxes");
	if (!typePF) SpellSlotsReset.push("SpellSlots.Checkboxes");
	if (!typePF && SSfrontA) SpellSlotsReset.push(SSfrontA + "SpellSlots2.Checkboxes");
	if (SpellSlotsReset.length > 0) tDoc.resetForm(SpellSlotsReset);
}

function ResetFeaDawn() {
	for (var z = 1; z <= FieldNumbers.limfea; z++) {
		var recoveryFld = What("Limited Feature Recovery " + z).toLowerCase();
		if (recoveryFld.indexOf("dawn") !== -1 || recoveryFld.indexOf("day") !== -1) {
			resetForm(["Limited Feature Used " + z]);
		}
	}
}

function HealItNow() {
	calcStop();
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);

	var fields = [
		"HP Current",
		"HP Temp",
		"Death Save Fail1",
		"Death Save Fail2",
		"Death Save Fail3",
		"Death Save Success1",
		"Death Save Success2",
		"Death Save Success3"
	];
	var CompFields = [
		prefix + "Comp.Use.HP.Current",
		prefix + "Comp.Use.HP.Temp",
		prefix + "Comp.Use.DeathSave"
	];
	tDoc.resetForm(QI ? fields : CompFields);

	// now heal half the HD, starting with the highest (HD1), and using remaining leftovers
	if (QI) {
		var HD1 = Number(What("HD1 Used"));
		var HD2 = Number(What("HD2 Used"));
		var HD3 = Number(What("HD3 Used"));
		var toHeal = Math.max(1, Math.floor((Number(What("HD1 Level")) + Number(What("HD2 Level")) + Number(What("HD3 Level"))) / 2));

		//now go through the HD and recover theMenu
		if (toHeal > 0 && HD1) {
			Value("HD1 Used", HD1 - toHeal <= 0 ? "" : Math.max(1, HD1 - toHeal));
			toHeal -= HD1;
		};
		if (toHeal > 0 && HD2) {
			Value("HD2 Used", HD2 - toHeal <= 0 ? "" : Math.max(1, HD2 - toHeal));
			toHeal -= HD2;
		};
		if (toHeal > 0 && HD3) {
			Value("HD3 Used", HD3 - toHeal <= 0 ? "" : Math.max(1, HD3 - toHeal));
			toHeal -= HD3;
		};
	} else {
		var toHeal = Math.max(1, Math.floor(What(prefix + "Comp.Use.HD.Level") / 2));
		var HD1 = Number(What(prefix + "Comp.Use.HD.Used"));

		if (HD1 - toHeal <= 0) {
			Value(prefix + "Comp.Use.HD.Used", "");
		} else if (HD1 - toHeal > 0) {
			Value(prefix + "Comp.Use.HD.Used", HD1 - toHeal);
		}
	}
};

//calculate the encumbrance (field calculation)
function CalcEncumbrance() {
	var Str = What("Str"), result = "";
	var Size = What("Size Category");
	Size = Size ? Size : 1;
	var CarMult = Math.max(What("Carrying Capacity Multiplier"), 0);
	var decSep = What("Decimal Separator");
	var FldName = event.target.name;
	var Mult1 = FldName.indexOf("Push") !== -1 || FldName.indexOf("Carrying Capacity") !== -1 ? 15 : FldName.indexOf("Heavily") !== -1 ? 10 : 5;
	var Mult2 = FldName.indexOf("Push") !== -1 ? 30 : FldName.indexOf("Heavily") !== -1 ? 15 : 10;
	var UnitSystem = What("Unit System");
	if (UnitSystem === "imperial") {
		var Unit = " lb";
		var UnitMult = 1;
		var pushSep = " - ";
	} else if (UnitSystem === "metric") {
		var Unit = " kg";
		var UnitMult = UnitsList.metric.mass;
		var pushSep = "-";
	}

	var BasicMult = Number(Size) * Number(CarMult);
	var TotalMult = Number(Str) * Number(Size) * Number(CarMult);
	if (CarMult === 0 || (!Str && FldName.indexOf("Text") === -1)) {
		result = "";
	} else if (FldName.indexOf("Text") !== -1 && FldName.indexOf("Push") !== -1) {
		result = RoundTo((BasicMult * Mult1 * UnitMult), 0.1) + pushSep + RoundTo((BasicMult * Mult2 * UnitMult), 0.1);
	} else if (FldName.indexOf("Text") !== -1) {
		result = RoundTo((BasicMult * Mult1 * UnitMult), 0.1);
	} else if (FldName.indexOf("Carrying Capacity") !== -1) {
		result = Math.floor(TotalMult * Mult1 * UnitMult) + Unit;
	} else {
		result = Math.floor(1 + TotalMult * Mult1 * UnitMult) + " - " + (!typePF ? "\n" : "") + Math.floor(TotalMult * Mult2 * UnitMult) + Unit;
	}
	if (decSep === "comma" && result) {
		result = "." + result;
		result = result.replace(/\./g, ",");
		result = result.substring(1);
	}
	event.value = result;
}

function ParseClassFeature(theClass, theFeature, FeaLvl, ForceOld, SubChoice, Fea, ForceFeaOld) {
	var FeaKey = ForceOld && ClassList[theClass].features[theFeature] ? ClassList[theClass].features[theFeature] : CurrentClasses[theClass].features[theFeature];
	if (!FeaKey) return "";

	var old = (ForceOld || ForceFeaOld) && Fea ? "Old" : "";
	if (old) Fea.source = Fea.sourceOld;
	var FeaClass = !ForceOld && theFeature.indexOf("subclassfeature") !== -1 && CurrentClasses[theClass].subname ? CurrentClasses[theClass].subname : CurrentClasses[theClass].name;
	if (!Fea) Fea = GetLevelFeatures(FeaKey, FeaLvl, SubChoice, "", "");

	if (!Fea.UseName) return ["", ""]; // return empty strings if there is no name

	var FeaSource = stringSource(Fea, "first,abbr", ", ");
	var FeaRef = " (" + FeaClass + " " + FeaKey.minlevel + FeaSource + ")";
	var FeaUse = Fea["Use" + old] + (Fea["Use" + old] && !isNaN(Fea["Use" + old]) ? "\u00D7 per " : "") + Fea["Recov" + old];
	var FeaPost = "";
	if (Fea["Add" + old] && FeaUse) {
		FeaPost = " [" + Fea["Add" + old] + ", " + FeaUse + "]";
	} else if (Fea["Add" + old]) {
		FeaPost = " [" + Fea["Add" + old] + "]";
	} else if (FeaUse) {
		FeaPost = " [" + FeaUse + "]";
	}

	var FeaName = SubChoice && FeaKey[SubChoice] ? FeaKey[SubChoice].name : FeaKey.name;
	var FeaFirstLine = "\u25C6 " + FeaName + FeaRef;
	var FeaDescr = Fea["Descr" + old];
	if (isArray(FeaDescr)) FeaDescr = desc(FeaDescr);
	var FeaOtherLines = FeaPost + FeaDescr;
	if (What("Unit System") == "metric") FeaOtherLines = ConvertToMetric(FeaOtherLines, 0.5);

	return [FeaFirstLine + (Fea.extFirst ? FeaPost : ""), "\r" + FeaFirstLine + FeaOtherLines];
};

function ParseClassFeatureExtra(theClass, theFeature, extraChoice, Fea, ForceOld) {
	var FeaKey = CurrentClasses[theClass] ? CurrentClasses[theClass].features[theFeature][extraChoice.toLowerCase()] : false;
	if (!FeaKey || !FeaKey.name) return ["", ""];
	var old = ForceOld ? "Old" : "";
	if (old) Fea.source = Fea.sourceOld;

	var FeaRef = " (" + CurrentClasses[theClass].features[theFeature].extraname + stringSource(Fea, "first,abbr", ", ") + ")";
	var FeaUse = Fea["Use" + old] + (Fea["Use" + old] && !isNaN(Fea["Use" + old]) ? "\u00D7 per " : "") + Fea["Recov" + old];
	var FeaPost = "";
	if (Fea["Add" + old] && FeaUse) {
		FeaPost = " [" + Fea["Add" + old] + ", " + FeaUse + "]";
	} else if (Fea["Add" + old]) {
		FeaPost = " [" + Fea["Add" + old] + "]";
	} else if (FeaUse) {
		FeaPost = " [" + FeaUse + "]";
	};

	var FeaFirstLine = "\u25C6 " + FeaKey.name + FeaRef;
	var FeaDescr = Fea["Descr" + old];
	if (isArray(FeaDescr)) FeaDescr = desc(FeaDescr);
	var FeaOtherLines = FeaPost + FeaDescr;
	if (What("Unit System") == "metric") FeaOtherLines = ConvertToMetric(FeaOtherLines, 0.5);

	return [FeaFirstLine + (ForceOld ? "" : FeaPost), "\r" + FeaFirstLine + FeaOtherLines];
};

//change all the level-variables gained from classes and races
function UpdateLevelFeatures(Typeswitch, newLvlForce) {
	if (!IsNotReset) return; //stop this function on a reset

	// initialise some variables
	Typeswitch = Typeswitch === undefined ? "all" : Typeswitch;
	var thermoTxt, Fea, feaA;

	// Start progress bar and stop calculations
	thermoTxt = thermoM("Updating level-dependent features...");
	calcStop();
	thermoM(1/8); //increment the progress dialog's progress

	// apply race level changes
	var oldRaceLvl = CurrentRace.level;
	var newRaceLvl = newLvlForce !== undefined ? newLvlForce : What("Character Level") ? Number(What("Character Level")) : 1;
	if (CurrentRace.known && (/race|all|notclass/i).test(Typeswitch) && newRaceLvl != oldRaceLvl) {
		thermoTxt = thermoM("Updating " + CurrentRace.name + " features...", false);
		thermoM(3/8); //increment the progress dialog's progress
		// do the CurrentRace object itself
		Fea = ApplyFeatureAttributes(
			"race", // type
			[CurrentRace.known, CurrentRace.known], // fObjName [aParent, fObjName]
			[oldRaceLvl, newRaceLvl, false], // lvlA [old-level, new-level, force-apply]
			false, // choiceA [old-choice, new-choice, "only"|"change"]
			false // forceNonCurrent
		);
		thermoM(5/8); //increment the progress dialog's progress
		// iterate through the racial features and apply/update them
		if (CurrentRace.features) {
			feaA = [];
			for (var key in CurrentRace.features) feaA.push(key);
			if (oldRaceLvl > newRaceLvl) feaA.reverse(); // when removing, loop through them backwards
			for (var f = 0; f < feaA.length; f++) {
				var prop = feaA[f]
				// --- backwards compatibility --- //
				// set the name and limfeaname from the depreciated tooltip attribute
				var propFea = CurrentRace.features[prop];
				if (propFea.tooltip && !propFea.limfeaname) {
					propFea.limfeaname = propFea.name;
					propFea.name = propFea.tooltip.replace(/^ *\(|\)$/g, '');
				}

				Fea = ApplyFeatureAttributes(
					"race", // type
					[CurrentRace.known, prop], // fObjName [aParent, fObjName]
					[oldRaceLvl, newRaceLvl, false], // lvlA [old-level, new-level, force-apply]
					false, // choiceA [old-choice, new-choice, "only"|"change"]
					false // forceNonCurrent
				);
			}
		}
		// update the racial level
		CurrentRace.level = newRaceLvl;
		if (CurrentSpells[CurrentRace.known]) CurrentSpells[CurrentRace.known].level = newRaceLvl;
	}

	// apply feat level changes
	var oldFeatLvl = CurrentFeats.level;
	var newFeatLvl = newRaceLvl; // would otherwise be identical to how to determine the race level
	if ((/feat|all|notclass/i).test(Typeswitch) && oldFeatLvl != newFeatLvl) {
		for (var f = 0; f < CurrentFeats.known.length; f++) {
			var aFeat = CurrentFeats.known[f];
			var theFeat = FeatsList[aFeat];
			if (!theFeat) continue;

			thermoTxt = thermoM("Updating " + theFeat.name + " features...", false);
			thermoM((f+1)/CurrentFeats.known.length); //increment the progress dialog's progress

			Fea = ApplyFeatureAttributes(
				"feat", // type
				aFeat, // fObjName
				[oldFeatLvl, newFeatLvl, false], // lvlA [old-level, new-level, force-apply]
				[CurrentFeats.choices[f], CurrentFeats.choices[f], false], // choiceA [old-choice, new-choice, "only"|"change"]
				false // forceNonCurrent
			);
		}
		CurrentFeats.level = newFeatLvl;
	}

	// apply magic item level changes
	var oldItemLvl = CurrentMagicItems.level;
	var newItemLvl = newRaceLvl; // would otherwise be identical to how to determine the race level
	if ((/item|all|notclass/i).test(Typeswitch) && oldItemLvl != newItemLvl) {
		for (var f = 0; f < CurrentMagicItems.known.length; f++) {
			var anItem = CurrentMagicItems.known[f];
			var anItemVar = CurrentMagicItems.known[f];
			var theItem = MagicItemsList[anItem];

			// if the attunement field is visible, but the checkbox is not checked, skip it
			var attuneFld = tDoc.getField("Extra.Magic Item Attuned " + (f+1));
			if (!theItem || (attuneFld.display == display.visible && !attuneFld.isBoxChecked(0))) continue;

			thermoTxt = thermoM("Updating " + theItem.name + " features...", false);
			thermoM((f+1)/CurrentMagicItems.known.length); //increment the progress dialog's progress

			Fea = ApplyFeatureAttributes(
				"item", // type
				anItem, // fObjName
				[oldItemLvl, newItemLvl, false], // lvlA [old-level, new-level, force-apply]
				[CurrentMagicItems.choices[f], CurrentMagicItems.choices[f], false], // choiceA [old-choice, new-choice, "only"|"change"]
				false // forceNonCurrent
			);
		}
		CurrentMagicItems.level = newItemLvl;
	}

	// apply class level changes
	if ((/^(?!=notclass)(all|class).*$/i).test(Typeswitch)) {

		// first see if any wild shapes are in use
		var WSinUse = false;
		var prefixA = What("Template.extras.WSfront").split(",").slice(1);
		for (var p = 0; p < prefixA.length; p++) {
			for (var i = 1; i <= 4; i++) {
				var theFld = What(prefixA[p] + "Wildshape.Race." + i);
				if (!theFld || theFld.toLowerCase() === "make a selection") continue;
				if (!theFld && theFld.toLowerCase() !== "make a selection" && ParseCreature(theFld)) {
					WSinUse = true;
					p = prefixA.length;
					break;
				}
			}
		}

		// set some general variables
		var oldClassLvl = {}, newClassLvl = {}, ClassLevelUp = {}; // NODIG???

		// loop through all known classes and updates its features
		for (var aClass in classes.known) {
			var cl = CurrentClasses[aClass];
			var newSubClass = classes.known[aClass].subclass;
			var oldSubClass = classes.old[aClass] ? classes.old[aClass].subclass : "";

			// get the class level, new and old
			oldClassLvl[aClass] = classes.old[aClass] ? classes.old[aClass].classlevel : 0;
			newClassLvl[aClass] = classes.known[aClass].level;
			ClassLevelUp[aClass] = [
				newClassLvl[aClass] >= oldClassLvl[aClass], // true if going level up/same, false if going down
				Math.min(oldClassLvl[aClass], newClassLvl[aClass]), // lowest level
				Math.max(oldClassLvl[aClass], newClassLvl[aClass]) // highest level
			];

			// now skip this class if neither the level nor subclass changed
			if (newClassLvl[aClass] === oldClassLvl[aClass] && newSubClass === oldSubClass) continue;

			// update the progress dialog
			thermoTxt = thermoM("Updating " + cl.fullname + " features...", false);
			thermoM(1/5);

			// process the class header
			if (newClassLvl[aClass] == 0) { // remove the header
				var oldHeaderString = cl.fullname + ", level " + oldClassLvl[aClass] + ":";
				if (What("Class Features").indexOf("\r\r" + oldHeaderString) !== -1) oldHeaderString = "\r\r" + oldHeaderString;
				RemoveString("Class Features", oldHeaderString, false);
			} else if (oldClassLvl[aClass] == 0) { // add the header
				var newHeaderString = cl.fullname + ", level " + newClassLvl[aClass] + ":";
				if (What("Class Features")) newHeaderString = "\r\r" + newHeaderString;
				AddString("Class Features", newHeaderString, false);
			} else { // update the header
				var newHeaderString = cl.fullname + ", level " + newClassLvl[aClass] + ":";
				var oldHeaderString = !classes.old[aClass] ? "" : classes.old[aClass].fullname.RegEscape() + ".*, level \\d+:";
				ReplaceString("Class Features", newHeaderString, false, oldHeaderString, true);
			}

			// loop through the features
			var LastProp = [newHeaderString, ""], feaA = [];
			for (var key in cl.features) feaA.push(key);
			if (oldClassLvl[aClass] > newClassLvl[aClass]) feaA.reverse(); // when removing, loop through them backwards
			for (var f = 0; f < feaA.length; f++) {
				var prop = feaA[f];
				var propFea = cl.features[prop];
				var isSubClassProp = newSubClass && ClassSubList[newSubClass].features[prop] ? true : false;
				var isClassProp = ClassList[aClass].features[prop] ? true : false;

				// update the progress dialog
				thermoTxt = thermoM("Updating " + cl.fullname + ": " + propFea.name + "...", false);
				thermoM((f+1)/feaA.length);

				// if this is the first time applying the features after changing subclass, things might need to be forced if the class was previously at a level that a subclass was already warranted
				var forceProp = isSubClassProp && newSubClass != oldSubClass && propFea.minlevel <= oldClassLvl[aClass] && propFea.minlevel <= newClassLvl[aClass];

				// apply the common attributes of the feature
				Fea = ApplyFeatureAttributes(
					"class", // type
					[aClass, prop], // fObjName [aParent, fObjName]
					[oldClassLvl[aClass], newClassLvl[aClass], forceProp], // lvlA [old-level, new-level, force-apply]
					false, // choiceA [old-choice, new-choice, "only"|"change"]
					false // forceNonCurrent
				);

				// add/remove/update the feature text on the second page
				var FeaOldString = ParseClassFeature(aClass, prop, oldClassLvl[aClass], forceProp, Fea.ChoiceOld, forceProp ? false : Fea);
				Fea.extFirst = true; // signal that we need the full first line for FeaNewString
				var FeaNewString = ParseClassFeature(aClass, prop, newClassLvl[aClass], false, Fea.Choice, Fea);
				// see what type of change we have to do
				var textAction = Fea.CheckLVL && !Fea.AddFea ? "remove" : // level dropped below minlevel
					Fea.CheckLVL && Fea.AddFea && (!forceProp || (forceProp && !isClassProp)) ? "insert" : // level rose above minlevel and there is nothing to replace
					forceProp || (Fea.AddFea && Fea.changed && Fea.Descr !== Fea.DescrOld) ? "replace" : // forcing the new version or update the whole text after a description change
					Fea.AddFea && Fea.changed && Fea.Descr === Fea.DescrOld ? "first" : // update just header after a usages/recovery/additional change
					false;
				// do the text change, if any
				if (textAction) applyClassFeatureText(textAction, ["Class Features"], FeaOldString, FeaNewString, LastProp);

				// keep track of the last property's text
				LastProp = propFea.minlevel <= ClassLevelUp[aClass][2] ? FeaNewString : LastProp;

				// see if this is a wild shape feature
				if (prop.indexOf("wild shape") !== -1 && Fea.changed) WSinUse = [newClassLvl[aClass], Fea.Use, Fea.Recov, Fea.Add];

				/* loop through the feature's selected extra options, but only:
					- during import to set the feature for the first time (!IsNotImport && Fea.AddFea)
					- if removing the feature (Fea.CheckLVL && !Fea.AddFea)
					- if level-dependent things might have changed for existing extrachoices (!Fea.CheckLVL && Fea.AddFea)
				*/
				if ((!IsNotImport && propFea.extrachoices && Fea.AddFea) || (IsNotImport && Fea.CheckLVL !== Fea.AddFea)) {
					var xtrSel = GetFeatureChoice("classes", aClass, prop, true);
					for (var x = 0; x < xtrSel.length; x++) {
						var xtrProp = xtrSel[x];
						if (!propFea[xtrProp] || (!IsNotImport && propFea.extrachoices.join("##").toLowerCase().indexOf(xtrProp) == -1)) continue; // skip this feature if not found OR this is an import event and the feature is not in the extrachoices array
						// apply the common attributes of the feature extra choice
						var xtrFea = ApplyFeatureAttributes(
							"class", // type
							[aClass, prop], // fObjName [aParent, fObjName]
							[oldClassLvl[aClass], newClassLvl[aClass], false], // lvlA [old-level, new-level, force-apply]
							Fea.AddFea ? ["", xtrProp, "only"] : [xtrProp, "", "only"], // choiceA [old-choice, new-choice, "only"|"change"]
							false // forceNonCurrent
						);
						// add/remove/update the feature text on the third/second page
						var xtrFeaOldString = ParseClassFeatureExtra(aClass, prop, xtrProp, xtrFea, true);
						var xtrFeaNewString = ParseClassFeatureExtra(aClass, prop, xtrProp, xtrFea, false);
						// see what type of change we have to do
						var xtrTextAction = Fea.CheckLVL && !Fea.AddFea ? "remove" : // level dropped below minlevel
							xtrFea.AddFea && xtrFea.changed && xtrFea.Descr !== xtrFea.DescrOld ? "replace" : // update the whole text after a description change
							xtrFea.AddFea && xtrFea.changed && xtrFea.Descr === xtrFea.DescrOld ? "first" : // update just header after a usages/recovery/additional change
							false;
						// do the text change, if any
						if (IsNotImport && xtrTextAction) {
							applyClassFeatureText(xtrTextAction, ["Extra.Notes", "Class Features"], xtrFeaOldString, xtrFeaNewString, false);
						} else if (propFea.extrachoices && !IsNotImport) {
							AddString("Extra.Notes", xtrFeaNewString[1].replace(/^(\r|\n)*/, ''), true);
						}
					}
				}
			}
		}

		// (re-)apply and re-calculate all the wild shapes as something might have changed after going level up
		if (WSinUse) WildshapeUpdate(WSinUse != true ? WSinUse : false);
	}

	thermoM(thermoTxt, true); // Stop progress bar
};

//Make menu for 'choose class feature' button and parse it to Menus.classfeatures
function MakeClassMenu() {
	var gatherVars, hasEldritchBlast;
	var testPrereqs = function(toEval, objNm, feaNm) {
		if (!gatherVars) {
			gatherVars = gatherPrereqevalVars();
			hasEldritchBlast = gatherVars.hasEldritchBlast;
		}
		var theRe = true;
		try {
			if (typeof toEval == 'string') {
				theRe = eval(toEval);
			} else if (typeof toEval == 'function') {
				theRe = toEval(gatherVars);
			}
		} catch (error) {
			var eText = "The prerequisite check code (prereqeval) for '" + objNm + "' of the '" + feaNm + "' feature produced an error! Please contact the author of the feature to correct this issue:\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
		}
		return theRe;
	}

	var menuLVL3 = function (menu, name, array, classNm, featureNm, extrareturn, feaObj, curSel) {
		var temp = [];
		for (var i = 0; i < array.length; i++) {
			var feaObjNm = array[i].toLowerCase();
			var feaObjA = feaObj[feaObjNm];
			if (!feaObjA) { // object doesn't exist, so warn user
				console.println("The object corresponding to '" + array[i] + "' doesn't exist in the '" + featureNm + "' feature. This is a discrepancy between the '" + extrareturn + "choices' array and the names of the objects. Note that the object name needs to be exactly '" + array[i].toLowerCase() + "' (identical, but fully lower case).");
				console.show();
				continue;
			};
			if (testSource("", feaObjA)) continue; // object's source is excluded, so skip it

			// is this feature selected? Than mark it!
			var isActive = extrareturn ? curSel.indexOf(feaObjNm) !== -1 : curSel == feaObjNm;
			var removeStop = !isActive ? "add" : extrareturn ? "remove" : "stop";

			// now see if we should disable this because of prerequisites
			var isEnabled = feaObjA.prereqeval && !ignorePrereqs && !isActive ? testPrereqs(feaObjA.prereqeval, feaObjNm, featureNm) : true;

			// now make the menu entry
			temp.push({
				cName : array[i] + stringSource(feaObjA, "first,abbr", "\t   [", "]"),
				cReturn : classNm + "#" + featureNm + "#" + array[i] + "#" + extrareturn + "#" + removeStop,
				bMarked : isActive,
				bEnabled : isEnabled
			});
		};
		menu.oSubMenu.push({
			cName : name,
			oSubMenu : temp
		});
	};

	var ClassMenu = [], toTest, toChooseNr;

	for (var aClass in classes.known) {
		var clLvl = classes.known[aClass].level;
		var cl = CurrentClasses[aClass];
		var tempItem = {
			cName : cl.fullname,
			oSubMenu : []
		};
		for (var prop in cl.features) {
			var propFea = cl.features[prop];
			if (propFea.choices && !propFea.choicesNotInMenu && propFea.minlevel <= clLvl) {
				toTest = GetFeatureChoice("classes", aClass, prop, false);
				propFea.choices.sort();
				menuLVL3(tempItem, propFea.name, propFea.choices, aClass, prop, "", propFea, toTest);
			};
			if (propFea.extrachoices && !propFea.choicesNotInMenu && propFea.minlevel <= clLvl) {
				toTest = GetFeatureChoice("classes", aClass, prop, true);
				propFea.extrachoices.sort();
				toChooseNr = " (" + "selected " + toTest.length + (propFea.extraTimes ? " of " + propFea.extraTimes[Math.min(propFea.extraTimes.length, clLvl) - 1] : "") + ")";
				menuLVL3(tempItem, propFea.extraname + toChooseNr, propFea.extrachoices, aClass, prop, "extra", propFea, toTest);
			};
		};
		if (tempItem.oSubMenu.length > 0) {
			ClassMenu.push(tempItem);
		};
	};


	// if no options were found, set the menu to something else and make the return false
	if (ClassMenu.length === 0) {
		Menus.classfeatures = [{
			cName : "No class features detected that require a choice",
			cReturn : "nothing",
			bEnabled : false
		}]
		return false;
	} else {
		Menus.classfeatures = ClassMenu;
		return true;
	}
};

//call the Class Features menu and do something with the results
function ClassFeatureOptions(Input, AddRemove) {
	// first see if we have something to do
	var MenuSelection = Input ? Input : getMenu("classfeatures");
	if (!MenuSelection || MenuSelection[0] == "nothing" || MenuSelection[4] == "stop") return;

	// initialize some variables
	var triggerIsMenu = event.target && event.target.name && event.target.name == "Class Features Menu";
	var addIt = AddRemove ? AddRemove.toLowerCase() == "add" : MenuSelection[4] ? MenuSelection[4] == "add" : true;
	var aClass = MenuSelection[0];
	var prop = MenuSelection[1];
	var choice = MenuSelection[2];
	var extra = !!MenuSelection[3];
	var propFea = CurrentClasses[aClass] ? CurrentClasses[aClass].features[prop] : false;
	var propFeaCs = propFea ? propFea[choice] : false;
	if (!propFea || !propFeaCs) return; // no objects to process, so go back

	// Start progress bar and stop calculations
	var thermoTxt = thermoM((!extra ? "Applying " : addIt ? "Adding " : "Removing ") + propFeaCs.name + "...");
	thermoM(1/5); //increment the progress dialog's progress
	calcStop();

	var clLvl = classes.known[aClass].level;
	var clLvlOld = !triggerIsMenu && Input && classes.old[aClass] ? classes.old[aClass].classlevel : clLvl;

	if (extra) { // an extra choice for the third page

		// if removing, first check if it actually exists
		if (!addIt && GetFeatureChoice("classes", aClass, prop, true).indexOf(choice) == -1) {
			thermoM(thermoTxt, true); // Stop progress bar
			return;
		};

		// apply the common attributes of the feature
		var Fea = ApplyFeatureAttributes(
			"class", // type
			[aClass, prop], // fObjName [aParent, fObjName]
			addIt ? [0, clLvl, false] : [clLvlOld, 0, false], // lvlA [old-level, new-level, force-apply]
			addIt ? ["", choice, "only"] : [choice, "", "only"], // choiceA [old-choice, new-choice, "only"|"change"]
			false // forceNonCurrent
		);

		thermoM(3/5); //increment the progress dialog's progress

		// do something with the text of the feature
		var feaString = ParseClassFeatureExtra(aClass, prop, choice, Fea, !addIt);

		if (addIt) { // add the string to the third page
			AddString("Extra.Notes", feaString[1].replace(/^(\r|\n)*/, ''), true);
			show3rdPageNotes(); // for a Colourful sheet, show the notes section on the third page
			var changeMsg = "The " + propFea.extraname + ' "' + propFeaCs.name + '" has been added to the Notes section on the third page' + (!typePF ? ", while the Rules section on the third page has been hidden" : "") + ". They wouldn't fit in the Class Features section if the class is taken to level 20.";
			CurrentUpdates.types.push("notes");
			if (!CurrentUpdates.notesChanges) {
				CurrentUpdates.notesChanges = [changeMsg];
			} else {
				CurrentUpdates.notesChanges.push(changeMsg);
			}
		} else { // remove the string from the third (or second) page
			applyClassFeatureText("remove", ["Extra.Notes", "Class Features"], feaString, "", false);
		}
	} else if (addIt) { // a choice to replace the feature on the second page
		var choiceOld = GetFeatureChoice("classes", aClass, prop, false);
		// apply the common attributes of the feature
		var Fea = ApplyFeatureAttributes(
			"class", // type
			[aClass, prop], // fObjName [aParent, fObjName]
			[clLvlOld, clLvl, true], // lvlA [old-level, new-level, force-apply]
			[choiceOld, choice, "change"], // choiceA [old-choice, new-choice, "only"|"change"]
			false // forceNonCurrent
		);
		thermoM(3/5); //increment the progress dialog's progress
		// do something with the text of the feature
		var feaString = ParseClassFeature(aClass, prop, clLvl, false, choice, Fea);
		var feaStringOld = ParseClassFeature(aClass, prop, clLvlOld, false, choiceOld, Fea, true);
		applyClassFeatureText("replace", ["Class Features"], feaStringOld, feaString, false);
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

// Set the choice for other class features dependent on the choice of this class feature
/* choiceDependencies : [{
	feature : "subclassfeature6",
	choiceAttribute : true // OPTIONAL //
}] */
function processClassFeatureChoiceDependencies(lvlA, aClass, aFeature, fChoice) {
	var lvlOld = lvlA[0], lvlNew = lvlA[1];
	var pObj = CurrentClasses[aClass].features;
	var fObj = pObj[aFeature];
	var theDep = fObj.choiceDependencies;
	if (!isArray(theDep)) theDep = [theDep];
	for (var i = 0; i < theDep.length; i++) {
		var aDep = theDep[i];
		var tObj = pObj[aDep.feature];
		if (!tObj || lvlNew < tObj.minlevel) continue;
		var newChoice = aDep.choiceAttribute && fObj[fChoice].dependentChoices ? fObj[fChoice].dependentChoices : fChoice;
		var curChoice = GetFeatureChoice('class', aClass, aDep.feature);
		if (!tObj[newChoice] || newChoice == curChoice) continue;
		if (lvlOld >= tObj.minlevel) {
			// the feature is already present on the sheet, so parse it through ClassFeatureOptions
			ClassFeatureOptions([aClass, aDep.feature, newChoice]);
		} else {
			// the feature will be added during this same UpdateLevelFeatures call, so just set it to be remembered
			SetFeatureChoice("class", aClass, aDep.feature, newChoice);
		}
	}
}

// A way for a class feature to add an extra choice (from its own object) at a specific level
/* autoSelectExtrachoices : [{
	extrachoice : "flurry of blows",
	minlevel : 5 // OPTIONAL //
}] */
function processClassFeatureExtraChoiceDependencies(lvlA, aClass, aFeature, fObj) {
	var lvlH = Math.max(lvlA[0], lvlA[1]), lvlL = Math.min(lvlA[0], lvlA[1]);
	var theDep = fObj.autoSelectExtrachoices;
	if (!isArray(theDep)) theDep = [theDep];
	var saveExtraName = fObj.extraname;
	for (var i = 0; i < theDep.length; i++) {
		var aDep = theDep[i];
		var minLvl = aDep.minlevel ? aDep.minlevel : fObj.minlevel;
		// stop if nothing found or there was no level change that affected this feature
		if (!aDep.extrachoice || !fObj[aDep.extrachoice] || !(lvlH >= minLvl && lvlL < minLvl)) continue;
		fObj.extraname = aDep.extraname ? aDep.extraname : saveExtraName;
		// set or remove the class feature, depending on its level
		ClassFeatureOptions(
			[aClass, aFeature, aDep.extrachoice, 'extra'],
			lvlA[1] < minLvl ? 'remove' : false
		);
	}
	fObj.extraname = saveExtraName;
}

// The print feature button
function PrintButton() {
	var thePageOptions = [
		"CSfront",
		"CSback",
		"ASfront",
		"ASoverflow",
		"ASbackgr",
		"AScomp",
		"ASnotes",
		"WSfront",
		"SSfront",
		"ALlog"
	];
	if (typePF) {
		thePageOptions.push("PRsheet");
		SetPrintPages_Dialog.bshowPR = true;
	}

	var PrintFld = What("Print Remember").split("!#TheListSeparator#!");
	var PageArray = PrintFld[1] !== "0" ? PrintFld[1].split(",") : null;

	for (var x = 0; x < thePageOptions.length; x++) {
		//set the check marks in the dialog, depending on previous settings
		SetPrintPages_Dialog["b" + thePageOptions[x]] = PageArray.indexOf(thePageOptions[x]) !== -1;

		//set whether or not the fields are editable in the dialog (not editable if page is hidden)
		var isVisible = isTemplVis(thePageOptions[x]);
		SetPrintPages_Dialog["a" + thePageOptions[x]] = isVisible;
	}

	if (PrintFld[0] === "true") {
		SetPrintPages_Dialog["bDupl"] = true;
	} else {
		SetPrintPages_Dialog["bDupl"] = false;
	}

	var theDialog = app.execDialog(SetPrintPages_Dialog);

	var Proceed = false;
	switch (theDialog) {
	 case "ok":
		Proceed = true;
	 case "save":
		var ResultsArray = [0];
		for (var p = 0; p < thePageOptions.length; p++) {
			if (SetPrintPages_Dialog["b" + thePageOptions[p]]) {
				ResultsArray.push(thePageOptions[p]);
			}
		}
		Value("Print Remember", SetPrintPages_Dialog["bDupl"] + "!#TheListSeparator#!" + ResultsArray.toString());
		if (Proceed) {
			PrintTheSheet();
		};
	 case "cancel":
		if (SetPrintPages_Dialog.bHide) {
			HideShowEverything(false);
			SetPrintPages_Dialog.bHide = false;
		}
	}
};

//call the print dialog
function PrintTheSheet() {
	var PrintFld = What("Print Remember").split("!#TheListSeparator#!");
	var PageArray = PrintFld[1] !== "0" ? PrintFld[1].split(",") : null;
	if (PageArray) {
		var PagesToPrint = [];
		for (var P = 1; P < PageArray.length; P++) {
			//in the case of the three extendable types, also go add all the extra sheets
			if (PageArray[P] === "SSfront") {
				var prefixArray = What("Template.extras.SSmore").split(",");
				prefixArray[0] = What("Template.extras.SSfront").split(",")[1];
				if (!prefixArray[0]) prefixArray.shift();
			} else if (TemplatesWithExtras.indexOf(PageArray[P]) !== -1) {
				var prefixArray = What("Template.extras." + PageArray[P]).split(",");
			} else {
				var prefixArray = [""];
			}
			for (var A = 0; A < prefixArray.length; A++) {
				var testFld = tDoc.getField(prefixArray[A] + BookMarkList[PageArray[P]]).page;
				if (isArray(testFld)) {
					for (var tF = 0; tF < testFld.length; tF++) {
						if (testFld[tF] !== -1) {
							PagesToPrint.push([testFld[tF], testFld[tF]]);
						}
					}
				} else if (testFld !== -1) {
					PagesToPrint.push([testFld, testFld]);
				}
			}
		}
	}
	var GoPrint = tDoc.getPrintParams();
	GoPrint.interactive = GoPrint.constants.interactionLevel.full;

	if (PrintFld[0] === "true") {
		GoPrint.DuplexType = GoPrint.constants.duplexTypes.DuplexFlipLongEdge;
	} else {
		GoPrint.DuplexType = GoPrint.constants.duplexTypes.Simplex;
	}
	if (PageArray) {
		GoPrint.printRange = PagesToPrint;
	};
	tDoc.print(GoPrint);
};

//Hide (true) or show (false) all the different form fields in the entire sheet
function HideShowEverything(toggle) {
	if (toggle) {
		// Start progress bar and stop calculations
		var thermoTxt = thermoM("Hiding all the fields...");
		calcStop();

		//first undo the visibility of the blue-text fields, if visible
		ToggleBlueText(false);

		if (FieldsRemember.length) HideShowEverything(false);

		var exceptionRegex = /(Sheet|Copyright)Information|(Whiteout|Title|^(?!Too).* Text)$|(Whiteout|Image|Text|Line|Display)\.|Circle|Location\.Line|Medium Armor Max Mod|Comp\.Type|Ammo(Right|Left)\.Icon|spellshead\.Box/;
		for (var F = 0; F < tDoc.numFields; F++) {
			thermoM(F/tDoc.numFields); //increment the progress dialog's progress
			var Fname = tDoc.getNthFieldName(F);
			var Ffield = tDoc.getField(Fname);
			if ((exceptionRegex).test(Fname)) continue;
			if (Ffield.page.length) {
				for (var i = 0; i < Ffield.page.length; i++) {
					var Fnamei = Fname + "." + i;
					var Ffieldi = tDoc.getField(Fnamei);
					if (Ffieldi.display !== 1) {
						FieldsRemember.push([Fnamei, Ffieldi.display]);
						Ffieldi.display = 1
					};
				};
			} else if (Ffield.display !== 1) {
				FieldsRemember.push([Fname, Ffield.display]);
				Ffield.display = 1;
			};
		};
	} else if (!toggle) {
		// Start progress bar and stop calculations
		var thermoTxt = thermoM("Restoring the visibility of all the fields...");
		calcStop();
		for (var H = 0; H < FieldsRemember.length; H++) {
			thermoM(H/FieldsRemember.length); //increment the progress dialog's progress
			tDoc.getField(FieldsRemember[H][0]).display = FieldsRemember[H][1];
		};
		FieldsRemember = [];
	};
	// Stop the progress bar and force calculations to start again because this is function is called while a dialog is displayed
	thermoM(thermoTxt, true);
	calcCont(true);
};

// Calculate the AC (field calculation)
function CalcAC() {
	// Check if the armour's AC is filled, otherwise just return nothing
	var AC = Number(What("AC Armor Bonus"));
	if (!AC) {
		event.value = "";
		return;
	}

	// Add all the other elements
	AC += Number(What("AC Shield Bonus"));
	AC += Number(What("AC Dexterity Modifier"));
	AC += EvalBonus(What("AC Magic"), true);
	AC += EvalBonus(What("AC Misc Mod 1"), true);
	AC += EvalBonus(What("AC Misc Mod 2"), true);

	// It is possible that some of the modifiers (magic / misc) should not be added if some conditions aren't met
	var theArmor = CurrentArmour.known ? ArmourList[CurrentArmour.known] : false;
	// First gather some variables that the evals can test against
	var gatherVars = {
		theArmor : theArmor ? theArmor : {},
		usingShield : What("AC Shield Bonus Description") != "",
		// wearingArmor is only true for made armor, as natural/magic doesn't have a 'type'
		wearingArmor : !theArmor ? What("AC Armor Description") != "" : !!theArmor.type,
		mediumArmor : tDoc.getField('Medium Armor').isBoxChecked(0),
		heavyArmor : tDoc.getField('Heavy Armor').isBoxChecked(0),
		shieldProf : tDoc.getField("Proficiency Shields").isBoxChecked(0),
		lightProf : tDoc.getField("Proficiency Armor Light").isBoxChecked(0),
		mediumProf : tDoc.getField("Proficiency Armor Medium").isBoxChecked(0),
		heavyProf : tDoc.getField("Proficiency Armor Heavy").isBoxChecked(0)
	}
	// Now run through those conditions and remove the ones from the total that weren't met
	for (var entry in CurrentProfs.specialarmour) {
		var aMod = CurrentProfs.specialarmour[entry];
		if (aMod.stopeval) {
			try {
				var removeMod = false;
				if (typeof aMod.stopeval == 'string') {
					removeMod = eval(aMod.stopeval);
				} else if (typeof aMod.stopeval == 'function') {
					removeMod = aMod.stopeval(gatherVars);
				}
				if (removeMod) AC -= EvalBonus(aMod.mod, true);
			} catch (error) {
				var eText = "The check if the AC bonus from '" + aMod.name + "' should be added or not produced an error! This check will be removed from the sheet for now, but please contact the author of the feature to have this issue corrected:\n " + error + "\n ";
				for (var e in error) eText += e + ": " + error[e] + ";\n ";
				console.println(eText);
				console.show();
				delete aMod.stopeval;
			}
		}
	}

	event.value = AC;
};

// Make sure the magic/miscellaneous AC fields have a proper description (and don't overflow)
function formatACdescr() {
	var isMagic = event.target.name.indexOf("Magic") !== -1;
	var testLen = typePF ? 40 : 35;
	if (event.value.length > testLen) {
		event.value = "Various" + (isMagic ? " magic" : "") + " bonuses"
	}
}

function SetToManual_Button(noDialog) {
	var BackgroundFld = !!CurrentVars.manual.background;
	var ClassFld = !!CurrentVars.manual.classes;
	var FeatFld = !!CurrentVars.manual.feats;
	var ItemFld = !!CurrentVars.manual.items;
	var RaceFld = !!CurrentVars.manual.race;

	if (!noDialog) {
		//set the checkboxes in the dialog to starting position
		SetToManual_Dialog.mAtt = CurrentVars.manual.attacks;
		SetToManual_Dialog.mBac = BackgroundFld;
		SetToManual_Dialog.mCla = ClassFld;
		SetToManual_Dialog.mFea = FeatFld;
		SetToManual_Dialog.mMag = ItemFld;
		SetToManual_Dialog.mRac = RaceFld;

		//call the dialog and proceed if Apply is pressed
		if (app.execDialog(SetToManual_Dialog) != "ok") return;
	}

	//do something with the results of attacks checkbox
	if (SetToManual_Dialog.mAtt !== CurrentVars.manual.attacks) ToggleAttacks(SetToManual_Dialog.mAtt);

	//do something with the results of background checkbox
	if (SetToManual_Dialog.mBac !== BackgroundFld) {
		if (SetToManual_Dialog.mBac) {
			CurrentVars.manual.background = What("Background");
			Hide("Background Menu");
		} else {
			FindBackground(CurrentVars.manual.background);
			CurrentVars.manual.background = false;
			DontPrint("Background Menu");
			ApplyBackground(What("Background"));
		}
	}

	//do something with the results of class checkbox
	if (SetToManual_Dialog.mCla !== ClassFld) {
		if (SetToManual_Dialog.mCla) {
			var classString = What("Class and Levels");
			if (classes.parsed.length == 1 && classString.indexOf(classes.totallevel) == -1) classString += classes.totallevel;
			CurrentVars.manual.classes = What("Class and Levels");
			Hide("Class Features Menu");
		} else {
			var newClassValue = What("Class and Levels");
			// restore the old class value so that we have a working classes.old
			var oldClassValue = CurrentVars.manual.classes;
			tDoc.getField("Class and Levels").remVal = oldClassValue;
			Value("Class and Levels", oldClassValue);
			// now set class processing back to automatic and apply the new value
			CurrentVars.manual.classes = false;
			Value("Class and Levels", newClassValue);
		}
	}

	//do something with the results of feat checkbox
	if (SetToManual_Dialog.mFea !== FeatFld) {
		if (SetToManual_Dialog.mFea) {
			CurrentVars.manual.feats = [CurrentFeats.known.slice(0), CurrentFeats.level];
			// remove the auto-calculations from feat fields
			for (var i = 1; i <= FieldNumbers.feats; i++) tDoc.getField("Feat Description " + i).setAction("Calculate", "");
		} else if (CurrentVars.manual.feats) {
			// set the old known feats back and apply the current ones
			var oldKnowns = CurrentVars.manual.feats[0];
			CurrentFeats.level = CurrentVars.manual.feats[1];
			CurrentVars.manual.feats = false;
			var remIgnoreDuplicates = ignoreDuplicates;
			ignoreDuplicates = true;
			for (var i = 1; i <= FieldNumbers.feats; i++) {
				CurrentFeats.known[i - 1] = oldKnowns[i - 1];
				ApplyFeat(What("Feat Name " + i), i);
			}
			// loop through the known feats and if any are still the same as before, first delete it and then apply it again
			for (var i = 0; i < FieldNumbers.feats; i++) {
				if (oldKnowns[i] && CurrentFeats.known[i] == oldKnowns[i]) {
					Value("Feat Name " + (i+1), "");
					Value("Feat Name " + (i+1), FeatsList[oldKnowns[i]].name);
				}
			}
			ignoreDuplicates = remIgnoreDuplicates;
			// update the feat level to the current level
			UpdateLevelFeatures("feat");
		}
	}
	//do something with the results of magic item checkbox
	if (SetToManual_Dialog.mMag !== ItemFld) {
		if (SetToManual_Dialog.mMag) {
			// make an array of the attunement status of the magic items
			var attuneArray = [];
			for (var i = 0; i < CurrentMagicItems.known.length; i++) {
				var theMI = MagicItemsList[CurrentMagicItems.known[i]];
				if (!theMI || !theMI.attunement) {
					attuneArray.push(undefined);
				} else {
					attuneArray.push(tDoc.getField("Extra.Magic Item Attuned " + (i + 1)).isBoxChecked(0));
				}
			}
			CurrentVars.manual.items = [CurrentMagicItems.known.slice(0), attuneArray, CurrentMagicItems.level];
			// remove the auto-calculations from magic item fields
			for (var i = 1; i <= FieldNumbers.magicitems; i++) {
				var descFld = "Extra.Magic Item Description " + i;
				tDoc.getField(descFld).setAction("Calculate", "");
				AddTooltip(descFld, undefined, "");
			}
		} else if (CurrentVars.manual.items) {
			// set the old known magic items back and apply the current ones
			var oldKnowns = CurrentVars.manual.items[0];
			var oldAttuned = CurrentVars.manual.items[1];
			CurrentMagicItems.level = CurrentVars.manual.items[2];
			CurrentVars.manual.items = false;
			var remIgnoreDuplicates = ignoreDuplicates;
			ignoreDuplicates = true;
			for (var i = 1; i <= FieldNumbers.magicitems; i++) {
				CurrentMagicItems.known[i - 1] = oldKnowns[i - 1];
				ApplyMagicItem(What("Extra.Magic Item " + i), i);
			}
			// loop through the known magic items and if any are still the same as before, first delete it and then apply it again
			for (var i = 0; i < FieldNumbers.magicitems; i++) {
				if (oldKnowns[i] && CurrentMagicItems.known[i] == oldKnowns[i]) {
					Value("Extra.Magic Item " + (i+1), "");
					Value("Extra.Magic Item " + (i+1), MagicItemsList[oldKnowns[i]].name);
				}
			}
			ignoreDuplicates = remIgnoreDuplicates;
			// update the magic item level to the current level
			UpdateLevelFeatures("item");
		}
	}

	//do something with the results of race checkbox
	if (SetToManual_Dialog.mRac !== RaceFld) {
		if (SetToManual_Dialog.mRac) {
			CurrentVars.manual.race = [What("Race Remember"), CurrentRace.level];
			Hide("Race Features Menu");
		} else {
			FindRace(CurrentVars.manual.race[0], true);
			if (CurrentRace.known) CurrentRace.level = CurrentVars.manual.race[1];
			CurrentVars.manual.race = false;
			ApplyRace(What("Race Remember"));
			if (CurrentRace.known) UpdateLevelFeatures("race");
		}
	}

	SetStringifieds("vars");
}

//calculate how much experience points are needed for the next level (field calculation)
function CalcXPnextlvl() {
	var lvl = Number(What("Character Level"));
	event.value = lvl && !isNaN(lvl) && lvl < (ExperiencePointsList.length - 1) ? ExperiencePointsList[lvl] : "";
};

//calculate the Ability Save DC (field calculation)
function CalcAbilityDC() {
	var Nmbr = event.target.name.slice(-1);
	var SpellAbi = What("Spell DC " + Nmbr + " Mod");

	//damage added manually in the bluetext field
	var ExtraBonus = EvalBonus(What("Spell DC " + Nmbr + " Bonus"), true);

	if (SpellAbi !== "" && SpellAbi !== " " && What(SpellAbi) !== "") {
		event.value = 8 + Number(How("Proficiency Bonus")) + Number(What(SpellAbi)) + ExtraBonus;
	} else {
		event.value = "";
	}
}

//find the ability score the tool (or custom skill) is keyed off on
function UpdateTooSkill() {
	var TooSkillTxt = event.target && event.target.name == "Too Text" ? event.value.toLowerCase() : What("Too Text").toLowerCase();
	var Ability = "Too";
	for (var i = 0; i < AbilityScores.abbreviations.length; i++) {
		if (TooSkillTxt.indexOf("(" + AbilityScores.abbreviations[i].toLowerCase() + ")") !== -1) {
			Ability = AbilityScores.abbreviations[i];
			break;
		}
	}
	SkillsList.abilityScores[SkillsList.abbreviations.indexOf("Too")] = Ability;
	SkillsList.abilityScoresByAS[SkillsList.abbreviations.indexOf("Too")] = Ability;
}

// Create the span objects for emulating smallcaps
// non-letter characters preceded by a ^ are always made big
// non-letter characters preceded by a _ are always made small
function createSmallCaps(input, fontSize, extraObj) {
	if (typePF) return input;
	var fontSizeLookup = {
		6 : 4.2,
		7: 4.9,
		8: 5.6
	};
	var fontSizeSmall = fontSizeLookup[fontSize] ? fontSizeLookup[fontSize] : fontSize * 0.7;
	// Set some things to be allways big
	var txt = input.replace(/([^\^])(:)/, "$1^$2");
	var spans = [];
	var nBig = "";
	var nSmall = "";
	var sp = "";
	var updateTxts = function(toBig, tChar) {
		if (toBig && nSmall) {
			var spObj = {
				text : nSmall.toUpperCase(),
				textSize : fontSizeSmall
			};
			if (extraObj) MergeRecursive(spObj, extraObj);
			spans.push(spObj);
			nSmall = "";
		} else if (nBig) {
			var spObj = {
				text : nBig.toUpperCase(),
				textSize : fontSize
			};
			if (extraObj) MergeRecursive(spObj, extraObj);
			spans.push(spObj);
			nBig = "";
		}
		if (toBig) {
			nBig += tChar;
		} else {
			nSmall += tChar;
		}
		sp = "";
	}
	for (var t = 0; t < txt.length; t++) {
		var aTxt = txt[t];
		if (aTxt == " ") {
			sp += " ";
		} else if (aTxt == "^" || aTxt == "_") {
			updateTxts(aTxt == "^", sp+txt[t+1]);
			t++;
		} else {
			updateTxts(!isNaN(aTxt) || ((/\w/).test(aTxt) && aTxt == aTxt.toUpperCase()), sp+aTxt);
		};
	}
	if (nSmall) updateTxts(true, "");
	if (nBig) updateTxts(false, "");
	return spans;
}
function SetRichTextFields(onlyAttackTitles, onlySkills) {
	var AScompA = What("Template.extras.AScomp").split(",");

	//set the skills
	var alphaB = Who("Text.SkillsNames") === "alphabeta";
	var skillTXT = [];
	var PFcolor = ["RGB", 0.658, 0.658, 0.654];
	for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
		var sNm = alphaB ? SkillsList.names[s] : SkillsList.namesByAS[s];
		var sAS = alphaB ? SkillsList.abilityScores[s] : SkillsList.abilityScoresByAS[s];
		if (typePF) {
			skillTXT.push({text : sNm + " ", textSize: 7});
			skillTXT.push({text : "(" + sAS + ")\n", textSize: 7, textColor: PFcolor});
			skillTXT.push({text : "\n", textSize: 6});
		} else {
			skillTXT.push({text : sNm + " ", textSize: 9});
			skillTXT.push({text : "(" + sAS.toUpperCase() + ")\n", textSize: 7});
			skillTXT.push({text : "\n", textSize: 5});
		}
	}
	var sLoop = typePF ? AScompA : [""];
	for (var A = 0; A < sLoop.length; A++) {
		tDoc.getField(sLoop[A] + "Text.SkillsNames").richValue = skillTXT;
	}
	if (typePF || onlySkills) return; //don't do this function in the Printer-Friendly version

	rtSpans = createSmallCaps("Prof  Ability", 6);
	for (var A = 0; A < AScompA.length; A++) {
		tDoc.getField(AScompA[A] + "Attack.Titles").richValue = rtSpans;
	}
	if (onlyAttackTitles) return; // don't do the rest of the function

	tDoc.getField("Attuned Magic Items Title").richValue = createSmallCaps("Attuned Magical Items", 7).concat(createSmallCaps(" ^(max ^3^)", 6));

	rtSpans = createSmallCaps("Loc", 7, {alignment : "center"});
	tDoc.getField("Adventuring Gear Location.Title").richValue = rtSpans;
	tDoc.getField("Extra.Gear Location.Title").richValue = rtSpans;

	// the weapon and armor proficiency names
	var themeColor = ColorList[What("Color.Theme")].RGB;
	tDoc.getField("Text.Armor Proficiencies").richValue = createSmallCaps("Armor:", 8, {textColor : themeColor});
	tDoc.getField("Text.Weapon Proficiencies").richValue = createSmallCaps("Weapons:", 8, {textColor : themeColor});

	// the equipment table headers
	var LbKg = What("Unit System") === "imperial";
	rtSpans = createSmallCaps(What("Unit System") === "imperial" ? "LBs" : "Kg", 7, {alignment : "center"});
	tDoc.getField("Display.Weighttxt.LbKg").richValue = rtSpans;
	tDoc.getField("Display.Weighttxt.LbKgPage3").richValue = rtSpans;
	for (var A = 0; A < AScompA.length; A++) {
		tDoc.getField(AScompA[A] + "Comp.eqp.Display.Weighttxt").richValue = rtSpans;
	}
}

//make all the fields, with some exceptions, read-only (toggle = true) or editable (toggle = false)

// Make most fields read-only for use with Adobe Acrobat for Mobile Devices
// toggle = true for making it mobile ready or toggle = false for the other way around
// If no toggle is defined, do the opposite of the current state
function MakeMobileReady(toggle) {
	if (!CurrentVars.mobileset) { // if the variable is not defined yet, define it now
		CurrentVars.mobileset = {
			active : false,
			readonly : [],
			hidden : []
		}
	}
	if (toggle !== undefined && ((CurrentVars.mobileset.active && toggle) || (!CurrentVars.mobileset.active && !toggle))) return;

	var nowWhat = !CurrentVars.mobileset.active; // Toggle the current state

	// Start progress bar and stop calculations
	var thermoTxt = thermoM(nowWhat ? "Making the sheet ready for mobile use..." : "Making all form fields editable again...");
	calcStop();

	if (nowWhat) {
		//first undo the visibility of the blue-text fields, if visible
		ToggleBlueText(false);

		CurrentVars.mobileset.readonly = [];
		CurrentVars.mobileset.hidden = [];
		var exceptionArray = [
			"Link to downloadpage",
			"Link to donation",
			"Inspiration",
			"HD1 Used",
			"HD2 Used",
			"HD3 Used",
			"AC during Rest",
			"Add Experience",
			"Saving Throw advantages / disadvantages",
			"Vision",
			"Speed",
			"Speed encumbered",
			"Platinum Pieces",
			"Gold Pieces",
			"Electrum Pieces",
			"Silver Pieces",
			"Copper Pieces",
			"Extra.Other Holdings",
			"AmmoLeftDisplay.Name",
			"AmmoLeftDisplay.Amount",
			"AmmoRightDisplay.Name",
			"AmmoRightDisplay.Amount",
			"Reaction Used This Round"
		];
		var exceptionRegex = /Comp\.Use\.HD\.Used|Comp\.Use\.HP|Cnote\.Left|Cnote\.Right|Comp\.eqp\.Notes|Comp\.img\.Notes|Notes\.Left|Notes\.Right|HP Max|HP Max Current|HP Temp|HP Current|Limited Feature Used | Adv| Dis|AmmoLeft\.|AmmoRight\.|Death Save |\.DeathSave\.|Resistance Damage Type |Adventuring Gear Row |Adventuring Gear Location\.Row |Adventuring Gear Amount |Adventuring Gear Weight |Language |Tool |Valuables|Extra\.Exhaustion Level |Extra\.Condition |Extra\.Gear Row |Extra\.Gear Location\.Row |Extra\.Gear Amount |Extra\.Gear Weight |Extra\.Notes|Background_|SpellSlots\.Checkboxes\.|SpellSlots2\.Checkboxes\./;
		var tooMuchExceptionRegex = /AC Stealth Disadvantage|button|Attack\.\d+\.Weapon$/i;
		var totLen = tDoc.numFields;
		for (var F = 0; F < totLen; F++) {
			var Fname = tDoc.getNthFieldName(F);
			if (!Fname) continue;
			var Ffield = tDoc.getField(Fname);

			// Check if field is not in one of the exceptionlists, but continue if it is in the tooMuchExceptionRegex
			var isException = !tooMuchExceptionRegex.test(Fname) && (exceptionArray.indexOf(Fname) !== -1 || (/^(Bonus |Re)?action \d+/i).test(Fname) || exceptionRegex.test(Fname));
			if (CurrentVars.manual.attacks && !isException) isException = (/Attack\./).test(Fname);
			if (CurrentVars.manual.feats && !isException) isException = (/^(?!.*Button)Feat .+\d+$/).test(Fname);
			if (CurrentVars.manual.items && !isException) isException = (/^(?!.*Button)Extra\.Magic Item .*\d+$/).test(Fname);
			if (isException) continue;

			//add fields that are visible and not read-only to array and make them read-only
			if (Ffield.display === display.visible && Ffield.readonly === false) {
				CurrentVars.mobileset.readonly.push(Fname);
				Ffield.readonly = true;
			}
			//add fields that are visible but non-printable to an array and make them hidden
			if (Ffield.display === display.noPrint) {
				CurrentVars.mobileset.hidden.push(Fname);
				Hide(Fname);
			}

			thermoM(F/totLen); // Increment the progress bar
		};

		// We also have to set all the spell sheet checkboxes back to readable, if they are visible
		var SSfrontA = What("Template.extras.SSfront").split(",");
		var SSmoreA = What("Template.extras.SSmore").split(",");
		SSmoreA[0] = SSfrontA[1];
		if (!SSmoreA[0]) SSmoreA.shift();
		for (var SS = 0; SS < SSmoreA.length; SS++) {
			var maxLine = FieldNumbers.spells[SSfrontA[1] && SSmoreA[SS] === SSfrontA[1] ? 0 : 1];
			for (var S = 0; S < maxLine; S++) {
				var SSbox = tDoc.getField(SSmoreA[SS] + "spells.checkbox." + S);
				if (SSbox.display === display.visible) SSbox.readonly = false;
			}
		}



		// Hide the D20 warning in the corner so that it won't interfere with the bug in Acrobat Reader for iOS/Android
		tDoc.getField("d20warning").rect = [0,0,0,0];
	} else {
		var totLen = CurrentVars.mobileset.readonly.length + CurrentVars.mobileset.hidden.length + 1;
		for (var RO = 0; RO < CurrentVars.mobileset.readonly.length; RO++) {
			Editable(CurrentVars.mobileset.readonly[RO]);
			thermoM(RO/totLen); // Increment the progress bar
		}
		var strtLen = CurrentVars.mobileset.readonly.length;
		for (var DP = 0; DP < CurrentVars.mobileset.hidden.length; DP++) {
			DontPrint(CurrentVars.mobileset.hidden[DP]);
			thermoM((DP+strtLen)/totLen); // Increment the progress bar
		}
		CurrentVars.mobileset.readonly = [];
		CurrentVars.mobileset.hidden = [];
	}

	CurrentVars.mobileset.active = nowWhat;
	SetStringifieds("vars"); // Save the settings to a field
	thermoM(thermoTxt, true); // Stop progress bar
}

//Calculate the weight of a column of items in the equipment section [field calculation]
function CalcWeightSubtotal() {
	var type = (/extra.*/i).test(event.target.name) ? "Extra.Gear " : ((/Adventuring.*/i).test(event.target.name) ? "Adventuring Gear " : event.target.name.substring(0, event.target.name.indexOf("Comp.") + 14));
	var column = event.target.name.slice(-4) === "Left" ? "Left" : (event.target.name.slice(-5) === "Right" ? "Right" : "Middle");
	var allGear = type === "Extra.Gear " ? FieldNumbers.extragear : (type === "Adventuring Gear " ? FieldNumbers.gear : FieldNumbers.compgear);
	var division = typePF && type === "Adventuring Gear " ? 3 : 2;
	var divisionHalf = typePF && type === "Adventuring Gear " ? 1.5 : 2;
	var total = column === "Right" ? allGear : Math.round(column === "Left" ? allGear / division : allGear / divisionHalf);
	var start = column === "Left" ? 1 : Math.round(column === "Right" ? allGear / divisionHalf : allGear / division) + 1;

	if (column === "Middle" && event.target.name.indexOf("Middle") === -1) {
		column = "All";
		start = 1;
		total = allGear;
	}

	var totalweight = 0;
	for (var i = start; i <= total; i++) {
		var amount = What(type + "Amount " + i);
		var weight = What(type + "Weight " + i);
		if (amount && isNaN(amount) && amount.indexOf(",") !== -1) {
			amount = parseFloat(amount.replace(",", "."));
		}
		if (weight && isNaN(weight) && weight.indexOf(",") !== -1) {
			weight = parseFloat(weight.replace(",", "."));
		}

		if (weight) {
			if (amount === "" || isNaN(amount)) {
				totalweight += weight;
			} else {
				totalweight += amount * weight;
			}
		}
	}
	event.value = totalweight === 0 ? "" : totalweight;
}

//Calculate the total weight carried, based on the value of the remember fields (field calculation)
function CalcWeightCarried(manualTrigger) {
	if (!CurrentVars.weight) {
		CurrentVars.weight = ["cCoi", "cP2L", "cP2R"];
		if (typePF) CurrentVars.weight.push("cP2M");
		SetStringifieds("vars");
	}

	var coinMod = What("Unit System") === "imperial" ? 50 : 100;
	var weightTypes = {
		cArm : "AC Armor Weight",
		cShi : "AC Shield Weight",
		cWea : Array.apply(null, Array(FieldNumbers.attacks)).map(function (n, idx) {
			return "BlueText.Attack." + (idx+1) + ".Weight";
		}),
		cAmL : "AmmoLeftDisplay.Weight",
		cAmR : "AmmoRightDisplay.Weight",
		cCoi : ["Platinum Pieces", "Gold Pieces", "Electrum Pieces", "Silver Pieces", "Copper Pieces"],
		cP2L : "Adventuring Gear Weight Subtotal Left",
		cP2M : "Adventuring Gear Weight Subtotal Middle",
		cP2R : "Adventuring Gear Weight Subtotal Right",
		cP3L : "Extra.Gear Weight Subtotal Left",
		cP3R : "Extra.Gear Weight Subtotal Right",
		cMaI : Array.apply(null, Array(FieldNumbers.magicitems)).map(function (n, idx) {
			return "Extra.Magic Item Weight " + (idx+1);
		})
	}
	var totalWeight = 0;
	for (var i = 0; i < CurrentVars.weight.length; i++) {
		var useFld = weightTypes[CurrentVars.weight[i]];
		if (!useFld) continue;
		if (isArray(useFld)) {
			var aWeight = 0;
			for (var j = 0; j < useFld.length; j++) {
				aWeight += Number(What(useFld[j]).replace(/,/, "."));
			}
		} else {
			var aWeight = Number(What(useFld).replace(/,/, "."));
		}
		if (CurrentVars.weight[i] == "cCoi") {
			aWeight = Math.floor(aWeight / coinMod * 10) / 10;
		} else if (CurrentVars.weight[i] == "cAmL") {
			aWeight *= Number(What("AmmoLeftDisplay.Amount"));
		} else if (CurrentVars.weight[i] == "cAmR") {
			aWeight *= Number(What("AmmoRightDisplay.Amount"));
		}
		if (!isNaN(aWeight)) totalWeight += aWeight;
	}
	if (manualTrigger) {
		Value("Weight Carried", totalWeight === 0 ? "" : totalWeight);
	} else {
		event.value = totalWeight === 0 ? "" : totalWeight;
	}
}

//call this to choose which weights to add to the "Total Carried", and which weights not to add
function WeightToCalc_Button() {
	//The dialog for setting what things are added to the total weight carried on page 2
	var explTxt = 'Note that you can change the weight of the armor, shield, weapons, and ammunition on the 1st page and the magic items on the 3rd page by using the "Modifier" fields that appear when you press the "Mods" button or the "Modifiers" bookmark.\nFor the ammunition, only the listed "total" is counted as that already includes the unchecked ammo icons.';
	var weightOptions = ["cArm", "cShi", "cWea", "cAmL", "cAmR", "cCoi", "cP2L", "cP2R", "cP3L", "cP3R", "cMaI"];
	if (typePF) weightOptions.push("cP2M");
	var WeightToCalc_Dialog = {
		UseEnc : true,

		//when starting the dialog
		initialize : function (dialog) {
			var toLoad = {
				"rEnc" : this.UseEnc,
				"rCar" : !this.UseEnc
			};
			for (var i = 0; i < weightOptions.length; i++) {
				toLoad[weightOptions[i]] = CurrentVars.weight.indexOf(weightOptions[i]) !== -1
			}
			dialog.load(toLoad);
		},

		//when pressing the ok button
		commit : function (dialog) {
			var oResult = dialog.store();
			CurrentVars.weight = [];
			for (var i = 0; i < weightOptions.length; i++) {
				if (oResult[weightOptions[i]]) CurrentVars.weight.push(weightOptions[i]);
			}
			this.UseEnc = oResult["rEnc"];
			SetStringifieds("vars");
		},

		description : {
			name : "Choose the things you want to count to Carried Weight",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					elements : [{
						type : "view",
						align_children : "align_row",
						elements : [{
							type : "image",
							item_id : "img1",
							alignment : "align_bottom",
							width : 20,
							height : 20
						}, {
							type : "static_text",
							item_id : "head",
							alignment : "align_fill",
							font : "heading",
							bold : true,
							height : 21,
							name : "What to count towards the Carried Weight on the second page?"
						}]
					}, {
						type : "cluster",
						align_children : "align_distribute",
						elements : [{
							type : "view",
							align_children : "align_left",
							elements : [{
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cArm",
									name : "Armor",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tArm",
									name : (typePF ? '"Armor' : '"Defense') + '" section on the 1st page.'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cShi",
									name : "Shield",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tShi",
									name : (typePF ? '"Armor' : '"Defense') + '" section on the 1st page.'
								} ]
							}, {
								type : "view",
								align_children : "align_row",
								char_height : 2,
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cWea",
									name : "Weapons",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tWea",
									name : '"Attacks" section on the 1st page.'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cAmL",
									name : "Ammunition on the left",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tAmL",
									name : '"Attacks" section on the 1st page.'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cAmR",
									name : "Ammunition on the right",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tAmR",
									name : '"Attacks" section on the 1st page.'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cCoi",
									name : "Coins",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tCoi",
									name : '"Equipment" section on the 2nd page (1 lb per 50).'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cP2L",
									name : "Left column equipment",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tP2L",
									name : '"Equipment" section on the 2nd page.'
								} ]
							}].concat(typePF ? [{
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cP2M",
									name : "Middle column equipment",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tP2M",
									name : '"Equipment" section on the 2nd page.'
								} ]
							}] : []).concat([{
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cP2R",
									name : "Right column equipment",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tP2R",
									name : '"Equipment" section on the 2nd page.'
								} ]
							}, {
								type : "view",
								char_height : 2,
								align_children : "align_row",
								char_width : 40,
								elements : [{
									type : "check_box",
									item_id : "cP3L",
									name : "Left column extra equipment",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tP3L",
									name : '"Extra Equipment" section on the 3rd page.'
								} ]
							}, {
								type : "view",
								align_children : "align_row",
								char_width : 40,
								char_height : 2,
								elements : [{
									type : "check_box",
									item_id : "cP3R",
									name : "Right column extra equipment",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tP3R",
									name : '"Extra Equipment" section on the 3rd page.'
								} ]
							}, {
								type : "view",
								align_children : "align_row",
								char_width : 40,
								char_height : 2,
								elements : [{
									type : "check_box",
									item_id : "cMaI",
									name : "Magic items",
									char_width : 20
								}, {
									type : "static_text",
									item_id : "tMaI",
									name : '"Magic Items" section on the 3rd (and overflow) page.'
								} ]
							} ])
						} ]
					}, {
						type : "static_text",
						item_id : "text",
						alignment : "align_fill",
						font : "dialog",
						wrap_name : true,
						name : explTxt,
						char_width : 45
					}, {
						type : "cluster",
						align_children : "align_left",
						name : "What weight allowance to show (PHB, page 176)",
						bold : true,
						font : "heading",
						char_width : 44,
						elements : [{
							type : "radio",
							item_id : "rEnc",
							group_id : "encu",
							name : "Use the variant encumbrance rules"
						}, {
							type : "radio",
							item_id : "rCar",
							group_id : "encu",
							name : "Use the fixed carrying capacity rules"
						} ]
					}, {
						type : "gap",
						height : 8
					} ]
				}, {
					type : "ok_cancel",
					ok_name : "Apply"
				} ]
			} ]
		}
	};

	var isEnc = tDoc.getField("Weight Carrying Capacity.Field").display === display.hidden;
	WeightToCalc_Dialog.UseEnc = isEnc;

	app.execDialog(WeightToCalc_Dialog);

	if (WeightToCalc_Dialog.UseEnc !== isEnc) SetEncumbrance(WeightToCalc_Dialog.UseEnc);

	CalcWeightCarried(true); // manual trigger the field calculation for the total field
};

//set the type of encumbrance rules to use (if variant = true, use the variant rules)
function SetEncumbrance(variant) {
	var ShowHide = variant ? "Show" : "Hide";
	var HideShow = variant ? "Hide" : "Show";
	tDoc[HideShow]("Weight Carrying Capacity");
	tDoc[ShowHide]("Weight Heavily Encumbered");
};

//see if a known ammunition is in a string, and return the ammo name
function ParseAmmo(input, onlyInv) {
	var found = "";
	if (!input) return found;

	input = removeDiacritics(input).toLowerCase();
	var foundLen = 0;
	var foundDat = 0;
	var keyLen = 0;
	//scan string for all ammunition, including the alternative spellings
	for (var key in AmmoList) {
		if ((onlyInv && AmmoList[key].weight == undefined) // see if only doing equipable items
			|| testSource(key, AmmoList[key], "ammoExcl") // test if the ammo or its source isn't excluded
		) continue;

		var tempDate = sourceDate(AmmoList[key].source);

		// see if any of the alternatives match
		if (AmmoList[key].alternatives) {
			for (var z = 0; z < AmmoList[key].alternatives.length; z++) {
				var theAlt = AmmoList[key].alternatives[z];
				var doTest = typeof theAlt != "string";
				var altLen = theAlt.toString().length;

				if (altLen < foundLen || (altLen == foundLen && tempDate < foundDat) // only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source date. This differs from the regExpSearch objects
					|| (doTest ? !theAlt.test(input) : input.indexOf(theAlt) === -1) // see if string matches
				) continue;


				// we have a match, set the values
				found = key;
				foundLen = altLen;
				keyLen = doTest ? key.length : foundLen;
				foundDat = tempDate;
			}
		};

		// now see if the parent is a (better) match
		if (found == key // stop if one of the alternatives already matched
			|| key.length < foundLen || (key == foundLen && tempDate < foundDat) // only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source. This differs from the regExpSearch objects
			|| input.indexOf(key) === -1 // see if string matches
		) continue;

		// we have a match, set the values
		found = key;
		foundLen = key.length;
		keyLen = foundLen;
		foundDat = tempDate;
	}
	return onlyInv && found ? [found, keyLen] : found;
}

//Reset the visibility of all the ammo fields of a particular side (input = "Left" or "Right")
function ResetAmmo(AmmoLeftRight) {
	AmmoLeftRight = AmmoLeftRight.substring(0, 4) === "Ammo" ? AmmoLeftRight : "Ammo" + AmmoLeftRight;
	Hide(AmmoLeftRight);
	Show(AmmoLeftRight + ".Icon.Arrows");
	Show(AmmoLeftRight + ".Top");
	Show(AmmoLeftRight + ".Base");
	Value(AmmoLeftRight + "Display.MaxAmount", 20);
}

//Set the Ammo fields upon filling out the Ammo name
function ApplyAmmo(inputtxt, Fld) {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything

	calcStop();
	var LeftRight = !event.target || !event.target.name || event.target.name.substring(0, 8) === "AmmoLeft" ? "AmmoLeft" : event.target.name.substring(0, 9) === "AmmoRight" ? "AmmoRight" : "Ammo" + Fld;
	var theAmmo = ParseAmmo(inputtxt);
	var parseAsWeapon = theAmmo ? false : ParseWeapon(inputtxt);
	if (parseAsWeapon && AmmoList[parseAsWeapon]) theAmmo = parseAsWeapon;

	if (theAmmo) {
		var aList = AmmoList[theAmmo];
		Hide(LeftRight);
		var ammoIcon = AmmoIcons[aList.icon];
		if (!ammoIcon) ammoIcon = AmmoIcons.Arrows;
		Show(LeftRight + ".Icon." + aList.icon);
		for (var i = 0; i < ammoIcon.checks.length; i++) {
			Show(LeftRight + ammoIcon.checks[i]);
		}
		var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
		var theWeight = aList.weight ? RoundTo(aList.weight * massMod, 0.001, true) : 0;
		Value(LeftRight + "Display.Weight", theWeight);
		Value(LeftRight + "Display.MaxAmount", ammoIcon.display);
	} else {
		tDoc.resetForm([LeftRight + "Display.Weight"]);
		if (!inputtxt) {
			ResetAmmo(LeftRight);
			tDoc.resetForm([LeftRight + "Display.Amount"]);
		}
	}

	LoadAmmo();
}

//Add the ammunition to one of the ammo fields. Inputtxt must be a known AmmoList entry
function AddAmmo(inputtxt, amount) {
	var AmmoFlds = [ "AmmoLeftDisplay.Name", "AmmoRightDisplay.Name" ];
	var AmountFlds = [ "AmmoLeftDisplay.Amount", "AmmoRightDisplay.Amount" ];
	amount = amount && !isNaN(Number(amount)) ? Number(amount) : 0;
	for (var n = 1; n <= 2; n++) {
		for (var i = 0; i < AmmoFlds.length; i++) {
			var next = tDoc.getField(AmmoFlds[i]);
			if (n === 1 && ((RegExp(inputtxt.RegEscape(), "i")).test(next.value) || next.value.toLowerCase().indexOf(inputtxt.toLowerCase()) !== -1)) {
				if (amount) tDoc.getField(AmountFlds[i]).value += amount;
				return;
			} else if (n === 2 && next.value === "") {
				next.value = AmmoList[inputtxt] ? AmmoList[inputtxt].name : inputtxt;
				if (amount) Value(AmountFlds[i], amount);
				return;
			}
		}
	}
}

//Remove the ammunition if it exists in one of the ammo fields
function RemoveAmmo(inputtxt) {
	var AmmoFlds = [ "AmmoLeftDisplay.Name", "AmmoRightDisplay.Name" ];
	for (var i = 0; i < AmmoFlds.length; i++) {
		var next = tDoc.getField(AmmoFlds[i]);
		if (next.value.toLowerCase().indexOf(inputtxt.toLowerCase()) !== -1) {
			next.value = "";
			break;
		}
	}
}

//Set the 'quiver' to correspond with the amount of ammo
function LoadAmmo(Amount, Fld) {
	calcStop();

	var LeftRight = event.target.name.substring(0, 8) === "AmmoLeft" ? "AmmoLeft" : event.target.name.substring(0, 9) === "AmmoRight" ? "AmmoRight" : "Ammo" + Fld;
	var Units = Amount !== undefined ? Amount : Number(What(LeftRight + "Display.Amount"));
	var Counter = 0;
	var NextFld = "";
	var NextFldVis = 0;

	if (event.target.name.slice(-6) === "Amount" || event.target.name.slice(-5) === "Reset" || event.target.name.slice(-4) === "Name") {
		Value(LeftRight + "Display.SaveAmount", Units);
		Value(LeftRight + "Display.CurrentAmount", Math.min(Units, What(LeftRight + "Display.MaxAmount")));
	}

	//stop the function if Units are 0
	if (Number(Units) === 0) {
		if (event.target.name.indexOf("Display") !== -1) {
			tDoc.resetForm([LeftRight]);
		}
		return;
	}

	//go through evey ammo field and see if they are visible. If visible, update counter and check if the field should be checked (ammo unavailable), or uncheck (ammo available)
	if (tDoc.getField(LeftRight + ".Bullet.1").display === display.visible) { //only look at the bullet fields
		for (var i = 1; i <= 50; i++) {
			NextFld = LeftRight + ".Bullet." + i;
			NextFldVis = tDoc.getField(NextFld).display
			if (NextFldVis === display.visible) {
				Counter += 1;
				if (Counter <= Units) {
					Checkbox(NextFld, false);
				} else {
					Checkbox(NextFld, true);
				}
			}
		}
	} else { //look into the top/base fields
		for (var i = 1; i <= 20; i++) {
			var TopBase = i <= 10 ? ".Top." : ".Base.";
			try {
				NextFld = LeftRight + TopBase + i;
				NextFldVis = tDoc.getField(NextFld).display;
			} catch (err) {
				NextFld = LeftRight + TopBase + "Axe." + i;
				NextFldVis = tDoc.getField(NextFld).display;
			}
			if (NextFldVis === display.visible) {
				Counter += 1;
				if (Counter <= Units) {
					Checkbox(NextFld, false);
				} else {
					Checkbox(NextFld, true);
				}
			}
		}
	}
}

//set the dropdown menus for ammo
function SetAmmosdropdown(forceTooltips) {
	var tempString = "Select or type in the ammunition you want to use and all its attributes will be filled out automatically.";
	tempString += "\n\n" + toUni("Ammunition weight") + "\nThe weight of the ammo can be added to the total weight carried on the 2nd page. In order to do this you have to push the \"Weight\" button in the \"JavaScript Window\".";
	tempString += "\nYou can change the weight of the ammunition in the \"override section\" (a.k.a. the \"blue text fields\").";
	tempString += "\n\n" + toUni("Blue text fields") + "\nIn order to see these you first need to push the \"Mods\" button in the \"JavaScript Window\".";
	var theDropList = [""];

	for (ammo in AmmoList) {
		var theAmmo = AmmoList[ammo];
		if (testSource(ammo, theAmmo, "ammoExcl")) continue; // test if the weapon or its source is set to be included
		if (theDropList.indexOf(theAmmo.name) === -1) theDropList.push(theAmmo.name);
	}
	theDropList.sort();

	var listToSource = theDropList.toSource();
	if (tDoc.getField("AmmoLeftDisplay.Name").submitName === listToSource) {
		if (forceTooltips) {
			AddTooltip("AmmoLeftDisplay.Name", tempString);
			AddTooltip("AmmoRightDisplay.Name", tempString);
		}
		return; //no changes, so no reason to do this
	}
	tDoc.getField("AmmoLeftDisplay.Name").submitName = listToSource;

	var remAmmo = What("AmmoLeftDisplay.Name");
	tDoc.getField("AmmoLeftDisplay.Name").setItems(theDropList);
	Value("AmmoLeftDisplay.Name", remAmmo, tempString);

	remAmmo = What("AmmoRightDisplay.Name");
	tDoc.getField("AmmoRightDisplay.Name").setItems(theDropList);
	Value("AmmoRightDisplay.Name", remAmmo, tempString);
}

//Toggle the visibility of the secondary ability save DC. ShowHide = "show" or "hide".
function Toggle2ndAbilityDC(ShowHide) {
	var isVis2nd = isDisplay("Image.SaveDC" + (typePF ? "" : ".2")) === 0;

	if (ShowHide && (/show/i).test(ShowHide) == isVis2nd) {
		return; //stop the function, there is nothing to do
	}

	var theCaption = isVis2nd ? "Show 2nd DC" : "Hide 2nd DC";
	var HiddenVisible = isVis2nd ? "Hide" : "Show";
	var VisibleHidden = isVis2nd ? "Show" : "Hide";
	var HiddenNoPrint = !isVis2nd && CurrentVars.bluetxt ? "DontPrint" : "Hide";

	for (var L = 0; L <= 2; L++) {
		tDoc.getField("ShowHide 2nd DC").buttonSetCaption(theCaption, L);
	}

	if (typePF) {
		var DC2array = [
			"Image.SaveDC",
			"Spell DC 2 Mod",
			"Spell save DC 2",
			"Spell DC 1 Mod.1"
		];
		tDoc[VisibleHidden]("Spell DC 1 Mod.0");
	} else {
		var DC1array = [
			"Text.SaveDC.1",
			"Image.SaveDCarrow.1",
			"Image.SaveDC.1",
			"Spell DC 1 Mod",
			"Spell save DC 1",
			"Spell DC 1 Bonus"
		];
		var DC2array = [
			"Text.SaveDC.2",
			"Image.SaveDCarrow.2",
			"Image.SaveDC.2",
			"Spell DC 2 Mod",
			"Spell save DC 2"
		];

		var toMove = isVis2nd ? 27 : -27;
		for (var i = 0; i < DC1array.length; i++) {
			var theFld = tDoc.getField(DC1array[i]);
			var gRect = theFld.rect; // Get the location of the field on the sheet
			gRect[0] += toMove; // Add the widen amount to the upper left x-coordinate
			gRect[2] += toMove; // Add the widen amount to the lower right x-coordinate
			theFld.rect = gRect; // Update the value of b.rect
			theFld.value = theFld.value; // Re-input the value as to counteract the changing of font rendering
		}
	}

	for (var j = 0; j < DC2array.length; j++) {
		tDoc[HiddenVisible](DC2array[j]);
	}
	tDoc[HiddenNoPrint]("Spell DC 2 Bonus");
}

//change the colorscheme that is used for the entire sheet
function ApplyColorScheme(aColour) {
	if (typePF || (!aColour && What("Color.Theme") === tDoc.getField("Color.Theme").defaultValue)) return; //don't do this function in the Printer-Friendly version or if resetting with the default colour still active
	var colour = aColour ? aColour.toLowerCase() : What("Color.Theme");
	//stop the function if the input color is not recognized
	if (!ColorList[colour]) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying " + colour + " color theme...");
	calcStop();

	//set the chosen color to a place it can be found again
	Value("Color.Theme", colour);

	//set the highlighting color if it has been coupled to the headers
	if (Who("Highlighting") === "headers") {
		app.runtimeHighlightColor = LightColorList[colour];
		tDoc.getField("Highlighting").fillColor = LightColorList[colour];
	}

	if (tDoc.info.AdvLogOnly) {
		var ALlogA = What("Template.extras.ALlog").split(",");
		var theIconH = tDoc.getField("SaveIMG.Header.Left." + colour).buttonGetIcon();
		var theIconD = tDoc.getField("SaveIMG.Divider." + colour).buttonGetIcon();
		for (tA = 0; tA < ALlogA.length; tA++) {
			tDoc.getField(ALlogA[tA] + "Line").fillColor = ColorList[colour].CMYK;
			tDoc.getField(ALlogA[tA] + "Button").strokeColor = ColorList[colour].CMYK;
			tDoc.getField(ALlogA[tA] + "Image.Header.Left").buttonSetIcon(theIconH);
			tDoc.getField(ALlogA[tA] + "Image.Divider").buttonSetIcon(theIconD);
		}
		thermoM(thermoTxt, true); // Stop progress bar
		return; // do not continue any further with this function
	}

	//get any extra prefixes
	var makeTempArray = function (template) {
		var tempReturn = [];
		var temp = What("Template.extras." + template);
		if (temp) {
			temp = temp.split(",");
			temp.splice(temp.indexOf(""), 1);
			tempReturn = temp;
		}
		return tempReturn;
	}
	var AScompA = makeTempArray("AScomp");
	var ASnotesA = makeTempArray("ASnotes");
	var WSfrontA = makeTempArray("WSfront");
	var ALlogA = makeTempArray("ALlog");

	var SSmoreA = What("Template.extras.SSmore").split(","); //here we do include the first "" value
	var SSfrontA = What("Template.extras.SSfront") ? What("Template.extras.SSfront").split(",")[1] : false;
	if (SSfrontA) SSmoreA.push(SSfrontA);

	// set the fill colours of the spellsheet boxes
	var fillListIfDontPrint = [];
	for (var SS = 0; SS < SSmoreA.length; SS++) {
		var maxSpells = SSmoreA[SS] === SSfrontA ? FieldNumbers.spells[0] : FieldNumbers.spells[1];
		for (var L = 0; L <= maxSpells; L++) {
			fillListIfDontPrint.push(SSmoreA[SS] + "spells.checkbox." + L);
		}
	}
	for (fLdp = 0; fLdp < fillListIfDontPrint.length; fLdp++) {
		var thefLdp = tDoc.getField(fillListIfDontPrint[fLdp]);
		if (thefLdp.display === display.noPrint && thefLdp.fillColor[0] !== "T") {
			thefLdp.fillColor = ColorList[colour].CMYK;
		}
	}

	//first do the Spell Sheets, which have their very peculiar way of naming
	var SSimgFields = [
		"Title",
		"Header.Left",
		"Divider",
		"DividerFlip"
	];
	for (var i = 0; i < SSimgFields.length; i++) {
		theIcon = tDoc.getField("SaveIMG." + SSimgFields[i] + "." + colour).buttonGetIcon();
		if (SSfrontA && SSimgFields[i] === "Title") {
			tDoc.getField(SSfrontA + "Image." + SSimgFields[i]).buttonSetIcon(theIcon);
		} else if (SSimgFields[i] !== "Title") { for (var SS = 0; SS < SSmoreA.length; SS++) {
			var maxLoop = SSimgFields[i] === "Header.Left" ? 3 : 9;
			var extraTxt = SSimgFields[i] === "Header.Left" ? "spellshead." : "spellsdiv.";
			for (var L = 0; L <= maxLoop; L++) {
				tDoc.getField(SSmoreA[SS] + extraTxt + "Image." + SSimgFields[i] + "." + L).buttonSetIcon(theIcon);
			}
		}}
	}

	if (tDoc.info.SpellsOnly) { // if this pdf is only filled with spell sheets, we don't need to go on
		thermoM(thermoTxt, true); // Stop progress bar
		return; // do not continue any further with this function
	}

	//create the lists of the borders, fill, and text of the following fields
	var borderList = [
		"Circle",
		"Button",
		"Attack.Button",
		"Comp.Use.Attack.Button",
		"Comp.eqpB"
	];
	var fillList = [
		"Line"
	];
	var textList = [
		"Background Feature",
		"Background_Faction.Title",
		"Background_FactionRank.Title",
		"Background_Renown.Title",
		"Text.Armor Proficiencies",
		"Text.Weapon Proficiencies"
	];

	//add any possible other template prefixes to the list
	if (AScompA[0]) {
		for (tA = 0; tA < AScompA.length; tA++) {
			borderList.push(AScompA[tA] + "Circle");
			borderList.push(AScompA[tA] + "Comp.Use.Attack.Button");
			borderList.push(AScompA[tA] + "Comp.eqpB");
			fillList.push(AScompA[tA] + "Line");
		}
	}
	if (WSfrontA[0]) {
		for (tA = 0; tA < WSfrontA.length; tA++) {
			borderList.push(WSfrontA[tA] + "Circle");
			fillList.push(WSfrontA[tA] + "Line");
		}
	}
	if (ALlogA[0]) {
		for (tA = 0; tA < ALlogA.length; tA++) {
			fillList.push(ALlogA[tA] + "Line");
		}
	}

	//add more fields to the list; fields that are not part of the templates
	for (var i = 1; i <= FieldNumbers.gear; i++) {
		borderList.push("Adventuring Gear Button " + i);
	}
	for (var i = 1; i <= FieldNumbers.magicitems; i++) {
		borderList.push("Extra.Magic Item Button " + i);
		textList.push("Extra.Magic Item " + i);
	}
	for (var i = 1; i <= FieldNumbers.extragear; i++) {
		borderList.push("Extra.Gear Button " + i);
	}
	for (var i = 1; i <= FieldNumbers.feats; i++) {
		borderList.push("Feat Button " + i);
		textList.push("Feat Name " + i);
	}

	thermoM(2/7); //increment the progress dialog's progress

	//change the colors of the borders, fill, and text
	for (bL = 0; bL < borderList.length; bL++) {
		tDoc.getField(borderList[bL]).strokeColor = ColorList[colour].CMYK;
	}
	for (fL = 0; fL < fillList.length; fL++) {
		tDoc.getField(fillList[fL]).fillColor = ColorList[colour].CMYK;
	}
	for (tL = 0; tL < textList.length; tL++) {
		tDoc.getField(textList[tL]).textColor = ColorList[colour].RGB;
	}

	//change the color of the text "Weapons:" and "Armor:" on the second page
	var armorProfArray = tDoc.getField("Text.Armor Proficiencies").richValue;
	var weaponProfArray = tDoc.getField("Text.Weapon Proficiencies").richValue;

	for (var aP = 0; aP < armorProfArray.length; aP++) {
		armorProfArray[aP].textColor = ColorList[colour].RGB;
	}
	for (var wP = 0; wP < weaponProfArray.length; wP++) {
		weaponProfArray[wP].textColor = ColorList[colour].RGB;
	}

	tDoc.getField("Text.Armor Proficiencies").richValue = armorProfArray;
	tDoc.getField("Text.Weapon Proficiencies").richValue = weaponProfArray;

	thermoM(3/7); //increment the progress dialog's progress

	//get a list of the image fields
	var imgFields = [
		"Level",
		"Title",
		"Divider",
		"Stats",
		"Prof",
		"Header.Left",
		"Header.Right",
		"Arrow",
		"IntArrow"
	];

	//set the colored icons
	for (var i = 0; i < imgFields.length; i++) {
		var theIcon = tDoc.getField("SaveIMG." + imgFields[i] + "." + colour).buttonGetIcon();

		temp = [""];

		if (imgFields[i] === "Divider") {
			//also set it for the divider that can be hidden on the third page
			tDoc.getField("Image.DividerExtraGear").buttonSetIcon(theIcon);
			//if divider, also add the adventurers log template names
			temp = temp.concat(ALlogA);
		} else if (imgFields[i] === "Header.Right") {
			//also set it for the header that can be hidden on the third page
			tDoc.getField("Image.Header.RightRules").buttonSetIcon(theIcon);
		}

		//if anything but level or title, also do something with the extra template pages
		if (imgFields[i] !== "Level" && imgFields[i] !== "Title" && imgFields[i] !== "Header.Right") {
			//also set it for the companion and wild shape templates names
			temp = temp.concat(AScompA);
			//if not prof or arrow, also add the wild shape templates names
			if (imgFields[i] !== "Prof" && imgFields[i] !== "Arrow") {
				temp = temp.concat(WSfrontA);
			}
		}
		//if left header, also add the notes and adventurers log templates names
		if (imgFields[i] === "Header.Left") {
			temp = temp.concat(ASnotesA).concat(ALlogA);
		}

		for (var te = 0; te < temp.length; te++) {
			tDoc.getField(temp[te] + "Image." + imgFields[i]).buttonSetIcon(theIcon);
			if ((te === 0 || temp[te].indexOf("AScomp") !== -1) && imgFields[i] === "Divider") {
				tDoc.getField(temp[te] + "Comp.eqp.Image." + imgFields[i]).buttonSetIcon(theIcon);
			}
		}
	}

	thermoM(4/7); //increment the progress dialog's progress

	//make an array of the extra companion templates with an empty value at the start (so it is never empty)
	var prefixAScomp = [""].concat(AScompA);

	//set the attack field color for any of them that is set to change together with the headers
	theIcon = tDoc.getField("SaveIMG.Attack." + colour).buttonGetIcon();
	for (var a = 1; a <= FieldNumbers.attacks; a++) {
		if (What("BlueText.Attack." + a + ".Weight Title") === "same as headers") {
			tDoc.getField("Image.Attack." + a).buttonSetIcon(theIcon);
		}
		if (a <= 3) { for (var pA = 0; pA < prefixAScomp.length; pA++) {
			if (What(prefixAScomp[pA] + "BlueText.Comp.Use.Attack." + a + ".Weight Title") === "same as headers") {
				tDoc.getField(prefixAScomp[pA] + "Image.Comp.Use.Attack." + a).buttonSetIcon(theIcon);
			}
		}}
	}

	thermoM(5/7); //increment the progress dialog's progress

	//make an array of the extra wildshape templates with an empty value at the start (so it is never empty)
	var prefixWSfront = [""].concat(WSfrontA);

	//re-do all the skill proficiencies of the companion and wild shape pages
	for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
		var theSkill = SkillsList.abbreviations[s];
		for (pAS = 0; pAS < prefixAScomp.length; pAS++) {
			var compSkill = prefixAScomp[pAS] + "Text.Comp.Use.Skills." + theSkill + ".Prof";
			if (What(compSkill) !== "nothing") Value(compSkill, What(compSkill));
		}

		for (pWS = 0; pWS < prefixWSfront.length; pWS++) {
			for (var w = 1; w <= 4; w++) {
				var wildSkill = prefixWSfront[pWS] + "Text.Wildshape." + w + ".Skills." + theSkill + ".Prof";
				if (What(wildSkill) !== "nothing") Value(wildSkill, What(wildSkill));
			}
		}
	}

	thermoM(6/7); //increment the progress dialog's progress

	//see if any of the Ability Save DC's have the color connected to this
	ApplyDCColorScheme();

	thermoM(thermoTxt, true); // Stop progress bar
}

//change the colorscheme that is used for the dragon heads sheet
function ApplyDragonColorScheme(aColour) {
	if (typePF || (!aColour && What("Color.DragonHeads") === tDoc.getField("Color.DragonHeads").defaultValue)) return; //don't do this function in the Printer-Friendly version or if resetting with the default colour still active
	var colour = aColour ? aColour.toLowerCase() : What("Color.DragonHeads");
	var theColor = ColorList[colour].CMYK;
	var theColorDark = DarkColorList[colour];
	//stop the function if the input color is not recognized
	if (!ColorList[colour]) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying " + colour + " Dragon Heads...");
	calcStop();

	//set the chosen color to a place it can be found again
	Value("Color.DragonHeads", colour);

	//set the highlighting color if it has been coupled to the dragon heads color
	if (Who("Highlighting") === "same as dragon heads") {
		app.runtimeHighlightColor = LightColorList[colour];
		tDoc.getField("Highlighting").fillColor = LightColorList[colour];
	}

	//change the dragonheads
	var theIcon = tDoc.getField("SaveIMG.Dragonhead." + colour).buttonGetIcon();

	if (tDoc.info.AdvLogOnly) {
		var ALlogA = What("Template.extras.ALlog").split(",");
		var buttons = [];
		for (tA = 0; tA < ALlogA.length; tA++) {
			buttons.push(ALlogA[tA] + "AdvLog.Options");
			tDoc.getField(ALlogA[tA] + "Image.Dragonhead").buttonSetIcon(theIcon);
		}
		//set the fill and border colors of the buttons
		if (theColor && theColorDark) {
			for (var b = 0; b < buttons.length; b++) {
				tDoc.getField(buttons[b]).fillColor = theColor;
				tDoc.getField(buttons[b]).strokeColor = theColorDark;
			}
		}
		thermoM(thermoTxt, true); // Stop progress bar
		return; // do not continue any further with this function
	}

	//first do the Spell Sheets, which have their very peculiar way of naming
	var SSmoreA = What("Template.extras.SSmore").split(",");
	var SSfrontA = What("Template.extras.SSfront") ? What("Template.extras.SSfront").split(",")[1] : false;
	if (SSfrontA) SSmoreA.push(SSfrontA);
	var SSnameFields = [
		"spellshead.",
		"spellsdiv."
	];
	for (var SS = 0; SS < SSmoreA.length; SS++) {
		for (var i = 0; i < SSnameFields.length; i++) {
			var maxLoop = SSnameFields[i] === "spellshead." ? 3 : 9;
			for (var L = 0; L <= maxLoop; L++) {
				tDoc.getField(SSmoreA[SS] + SSnameFields[i] + "Image.Dragonhead." + L).buttonSetIcon(theIcon);
			}
		}
	}

	thermoM(1/6); //increment the progress dialog's progress

	if (tDoc.info.SpellsOnly) { // if this pdf is only filled with spell sheets, we don't need to go on
		thermoM(thermoTxt, true); // Stop progress bar
		return; // do not continue any further with this function
	}

	//get any extra prefixes
	var AScompA = What("Template.extras.AScomp").split(",");
	var ASnotesA = What("Template.extras.ASnotes").split(",");
	var WSfrontA = What("Template.extras.WSfront").split(",");
	var ALlogA = What("Template.extras.ALlog").split(",");
	var prefixFullA = [""].concat(AScompA).concat(ASnotesA).concat(WSfrontA).concat(ALlogA);

	thermoM(2/6); //increment the progress dialog's progress

	tDoc.getField("Image.DragonheadExtraGear").buttonSetIcon(theIcon);
	tDoc.getField("Image.DragonheadRightRules").buttonSetIcon(theIcon);
	for (var pA = 0; pA < prefixFullA.length; pA++) {
		if (pA > 0 && !prefixFullA[pA]) continue; //ignore anything but the first "" in the array
		tDoc.getField(prefixFullA[pA] + "Image.Dragonhead").buttonSetIcon(theIcon);
	}
	for (tA = 0; tA < AScompA.length; tA++) { //also do the dragonhead that can be hidden on the Companion page
		tDoc.getField(AScompA[tA] + "Comp.eqp.Image.Dragonhead").buttonSetIcon(theIcon);
	}

	//set the color of the D&D logo on the third page
	theIcon = tDoc.getField("SaveIMG.DnDLogo." + colour).buttonGetIcon();
	tDoc.getField("Image.DnDLogo.long").buttonSetIcon(theIcon);

	thermoM(3/6); //increment the progress dialog's progress

	var buttons = [
		"Show Buttons",
		"ShowHide 2nd DC",
		"Background Menu",
		"Race Features Menu",
		"Class Features Menu",
		"Equipment.menu",
		"Extra.Layers Button",
		"Buttons"
	];

	//add the buttons names of the extra templates to buttons array
	for (tA = 0; tA < AScompA.length; tA++) {
		buttons.push(AScompA[tA] + "Companion.Options");
		buttons.push(AScompA[tA] + "Cnote.Options");
		buttons.push(AScompA[tA] + "Buttons");
	}
	for (tA = 0; tA < ASnotesA.length; tA++) {
		buttons.push(ASnotesA[tA] + "Notes.Options");
	}
	for (tA = 0; tA < WSfrontA.length; tA++) {
		buttons.push(WSfrontA[tA] + "Wildshapes.Settings");
	}
	for (tA = 0; tA < ALlogA.length; tA++) {
		buttons.push(ALlogA[tA] + "AdvLog.Options");
	}
	//set the fill and border colors of the buttons
	if (theColor && theColorDark) {
		for (var b = 0; b < buttons.length; b++) {
			tDoc.getField(buttons[b]).fillColor = theColor;
			tDoc.getField(buttons[b]).strokeColor = theColorDark;
		}
	}

	//make an array of the extra companion templates with an empty value at the start (so it is never empty)
	var prefixA = [""].concat(AScompA);

	thermoM(4/6); //increment the progress dialog's progress

	//set the attack field color for any of them that is set to change together with the dragon heads
	theIcon = tDoc.getField("SaveIMG.Attack" + "." + colour).buttonGetIcon();
	for (var a = 1; a <= FieldNumbers.attacks; a++) {
		if (What("BlueText.Attack." + a + ".Weight Title") === "same as dragon heads") {
			tDoc.getField("Image.Attack." + a).buttonSetIcon(theIcon);
		}
		if (a <= 3) { for (pA = 0; pA < prefixA.length; pA++) {
			if (What(prefixA[pA] + "BlueText.Comp.Use.Attack." + a + ".Weight Title") === "same as dragon heads") {
				tDoc.getField(prefixA[pA] + "Image.Comp.Use.Attack." + a).buttonSetIcon(theIcon);
			}
		}}
	}

	thermoM(5/6); //increment the progress dialog's progress

	//see if any of the Ability Save DC's have the color connected to this
	ApplyDCColorScheme();

	thermoM(thermoTxt, true); // Stop progress bar
}

//change the colorscheme that is used for the dragon heads sheet
function ApplyHPDragonColorScheme(aColour) {
	if (typePF || (!aColour && What("Color.HPDragon") === tDoc.getField("Color.HPDragon").defaultValue)) return; //don't do this function in the Printer-Friendly version or if resetting with the default colour still active
	var colour = aColour ? aColour.toLowerCase() : What("Color.HPDragon");

	//stop the function if the input color is not recognized
	if (!ColorList[colour]) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying " + colour + " HP Dragons...");
	calcStop();

	//set the chosen color to a place where it can be found again
	Value("Color.HPDragon", colour);

	//get any extra prefixes
	var makeTempArray = function (template) {
		var tempReturn = [];
		var temp = What("Template.extras." + template);
		if (temp) {
			temp = temp.split(",");
			temp.splice(temp.indexOf(""), 1);
			tempReturn = temp;
		}
		return tempReturn;
	}
	var AScompA = makeTempArray("AScomp");
	var WSfrontA = makeTempArray("WSfront");
	var prefixFullA = [""].concat(AScompA).concat(WSfrontA);

	thermoM(1/2); //increment the progress dialog's progress

	var theIcon = tDoc.getField("SaveIMG.HPdragonhead" + "." + colour).buttonGetIcon();
	for (var pA = 0; pA < prefixFullA.length; pA++) {
		tDoc.getField(prefixFullA[pA] + "Image.HPdragonhead").buttonSetIcon(theIcon);
	}

	thermoM(thermoTxt, true); // Stop progress bar
}

//Make menu for choosing the color, the 'color' button, and parse it to Menus.color
function MakeColorMenu() {

	var ColorMenu = [];
	var tempArray = [];

	//add all the colours to the array, ommitting some if not using the full (bonus) version
	for (var key in ColorList) {
		tempArray.push([key.capitalize(), key]);
	};
	tempArray.sort();

	if (typePF) {
		var menuLVL1 = function (item, array, name) {
			var lookIt = Who("Highlighting");
			for (i = 0; i < array.length; i++) {
				item.push({
					cName : array[i][0],
					cReturn : "color#" + name + "#" + array[i][1],
					bMarked : lookIt === array[i][1]
				});
			}
		};
		tempArray.unshift(
			["Turn highlighting off", "turn highlighting off"],
			["-", "-"],
			["Sheet default", "sheet default"],
			["Adobe default", "adobe default"],
			["-", "-"]
		);
		menuLVL1(ColorMenu, tempArray, "highlights");
	} else {
		var DCMenu = {cName : "Ability Save DCs", oSubMenu : []};

		var menuLVL1 = function (item, array, name) {
			var lookIt = What("Color.Theme");
			for (i = 0; i < array.length; i++) {
				item.push({
					cName : array[i][0],
					cReturn : "color#" + name + "#" + array[i][1],
					bMarked : lookIt === array[i][1]
				});
			}
		};

		var menuLVL2 = function (name, array) {
			var menu = {
				cName : name[0],
				oSubMenu : []
			};
			var lookIt = name[1] === "highlights" ? Who("Highlighting") : name[1] === "hpdragons" ? What("Color.HPDragon") : name[1] === "dragonheads" ? What("Color.DragonHeads") : false;
			for (i = 0; i < array.length; i++) {
				menu.oSubMenu.push({
					cName : array[i][0],
					cReturn : "color#" + name[1] + "#" + array[i][1],
					bMarked : lookIt === array[i][1]
				})
			};
			return menu;
		};

		var menuLVL3 = function (menu, name, array, extraReturn) {
			var temp = [];
			var lookIt = What("Color.DC").split(",")[extraReturn - 1];
			for (i = 0; i < array.length; i++) {
				temp.push({
					cName : array[i][0],
					cReturn : "color#" + name[1] + "#" + array[i][1] + "#" + extraReturn,
					bMarked : lookIt === array[i][1]
				});
			}
			menu.oSubMenu.push({
				cName : name[0],
				oSubMenu : temp
			});
		};

		var tempArrayExt = tempArray.slice(0);
		tempArrayExt.unshift(
			["Same as Headers", "headers"],
			["Same as Dragon Heads", "dragons"],
			["-", "-"]
		);

		//make a submenu to set the form field highlight color, or turn highlighting off
		var HighlightArray = tempArrayExt.slice(0);
		HighlightArray.unshift(
			["Turn highlighting off", "turn highlighting off"],
			["-", "-"],
			["Sheet default", "sheet default"],
			["Adobe default", "adobe default"],
			["-", "-"]
		);
		ColorMenu.push(menuLVL2(["Form Highlights", "highlights"], HighlightArray));

		//make the Dragon Head submenu
		ColorMenu.push(menuLVL2(["Dragon Heads", "dragonheads"], tempArray));

		//make, if this is not a spell sheet, the Dragon HP and ability save DCs submenu
		if (!minVer) {
			ColorMenu.push(menuLVL2(["HP Dragons", "hpdragons"], tempArray));
			menuLVL3(DCMenu, ["Ability Save DC 1 (left)", "abilitydc"], tempArrayExt, 1);
			menuLVL3(DCMenu, ["Ability Save DC 2 (right)", "abilitydc"], tempArrayExt, 2);
			ColorMenu.push(DCMenu);
		}

		ColorMenu.push({cName : "-"}); //add a divider

		//make the color menu
		menuLVL1(ColorMenu, tempArray, "theme");

		ColorMenu.push({cName : "-"}); //add a divider

		// 'all' option
		ColorMenu.push(menuLVL2(["All of the above (expect highlighting)", "all"], tempArray));
	}

	Menus.colour = ColorMenu;
};

//call the color menu and do something with the results
function ColoryOptions(input) {
	var MenuSelection = input ? input : getMenu("colour");

	if (!MenuSelection || MenuSelection[0] == "nothing" || MenuSelection[0] !== "color") return;
	switch (MenuSelection[1]) {
		case "theme" :
			ApplyColorScheme(MenuSelection[2]);
			break;
		case "dragonheads" :
			ApplyDragonColorScheme(MenuSelection[2]);
			break;
		case "hpdragons" :
			ApplyHPDragonColorScheme(MenuSelection[2]);
			break;
		case "abilitydc" :
			ApplyDCColorScheme(MenuSelection[2], MenuSelection[3]);
			break;
		case "highlights" :
			var highlightsOn = true;
			switch (MenuSelection[2]) {
				case "turn highlighting off" :
					highlightsOn = false;
				case "adobe default" :
					var theColour = ["RGB", 0.8, 0.8431, 1]; //Adobe default form field highlighting colour
					break;
				case "sheet default" :
					var theColour = ["RGB", 0.9, 0.9, 1];
					break;
				case "headers" :
					var theColour = LightColorList[What("Color.Theme")];
					break;
				case "dragons" :
					var theColour = LightColorList[What("Color.DragonHeads")];
					break;
				default :
					if (!LightColorList[MenuSelection[2]]) return;
					var theColour = LightColorList[MenuSelection[2]];
					break;
			};
			app.runtimeHighlight = highlightsOn;
			Value("Highlighting", app.runtimeHighlight, MenuSelection[2]);
			app.runtimeHighlightColor = theColour;
			tDoc.getField("Highlighting").fillColor = theColour;
			break;
		case "all" :
			ApplyColorScheme(MenuSelection[2]);
			ApplyDragonColorScheme(MenuSelection[2]);
			ApplyHPDragonColorScheme(MenuSelection[2]);
			ApplyDCColorScheme(MenuSelection[2], 1);
			ApplyDCColorScheme(MenuSelection[2], 2);
			break;
	};
};

//Add the text of the feature selected
function ApplyBackgroundFeature(input) {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything
	if (event.target && event.target.name === "Background Feature" && input.toLowerCase() === event.target.value.toLowerCase()) return; //no changes were made

	var TheInput = input.toLowerCase();
	var TempFound = false;
	var tempString = stringSource(CurrentBackground, "full,page", "The \"" + CurrentBackground.name + "\" background is found in ", ".\n");

	if (input === "") {
		Value("Background Feature Description", "", "");
	} else {
		for (var feature in BackgroundFeatureList) {
			if (TheInput.indexOf(feature) !== -1) {
				if (testSource(feature, BackgroundFeatureList[feature], "backFeaExcl")) continue; // test if the background feature or its source isn't excluded
				var FeaName = feature.capitalize();
				var theBfea = BackgroundFeatureList[feature];
				tempString += stringSource(theBfea, "full,page", "The \"" + FeaName + "\" background is found in ", ".");

				var theDesc = What("Unit System") === "imperial" ? BackgroundFeatureList[feature].description : ConvertToMetric(BackgroundFeatureList[feature].description, 0.5);
				Value("Background Feature Description", theDesc, tempString);

				return;
			};
		};
	};
};

//set the dropdown box options for the background features
function SetBackgroundFeaturesdropdown(forceTooltips) {
	var tempArray = [""];
	var tempString = "Select or type in the background feature you want to use and its text will be filled out below automatically.\n\n" + toUni("Background selection") + "\nThe relevant background feature is automatically selected upon selecting a background on the first page. Doing that will always override whatever you wrote here. So, please first fill out a background before you select a alternative feature here.";

	for (var feature in BackgroundFeatureList) {
		if (testSource(feature, BackgroundFeatureList[feature], "backFeaExcl")) continue;
		var feaNm = feature.capitalize();
		if (tempArray.indexOf(feaNm) === -1) tempArray.push(feaNm);
	};
	tempArray.sort();

	if (tDoc.getField("Background Feature").submitName === tempArray.toSource()) {
		if (forceTooltips) AddTooltip("Background Feature", tempString);
		return; //no changes, so no reason to do this
	}
	tDoc.getField("Background Feature").submitName = tempArray.toSource();

	var theFldVal = What("Background Feature");
	tDoc.getField("Background Feature").setItems(tempArray);
	Value("Background Feature", theFldVal, tempString);
}

//Make menu for 'choose race feature' button and parse it to Menus.raceoptions
function MakeRaceMenu() {
	//make an array of the variants that are not excluded by the resource settings
	var racialVarArr = ["basic"];
	if (CurrentRace.known && CurrentRace.variants) {
		for (var r = 0; r < CurrentRace.variants.length; r++) {
			var theR = CurrentRace.known + "-" + CurrentRace.variants[r];
			if (testSource(theR, RaceSubList[theR], "racesExcl")) continue; // test if the racial variant or its source isn't excluded
			racialVarArr.push(CurrentRace.variants[r]);
		}
	};

	var menuLVL1R = function (item, array) {
		var isCurrent = CurrentRace.variant;
		var raceSrc = stringSource(RaceList[CurrentRace.known], "first,abbr", "\t   [", "]");
		for (var i = 0; i < array.length; i++) {
			var varR = RaceSubList[CurrentRace.known + "-" + array[i]];
			var varSrc = varR && varR.source ? stringSource(varR, "first,abbr", "\t   [", "]") : raceSrc;
			item.push({
				cName : array[i].capitalize() + " " + RaceList[CurrentRace.known].name + varSrc,
				cReturn : CurrentRace.known + "#" + array[i],
				bMarked : (isCurrent === "" && array[i] === "basic") || isCurrent === array[i]
			});
		}
	};

	var RaceMenu = [];

	if (racialVarArr.length === 1) {
		RaceMenu = [{
			cName : "No race options that require a choice",
			cReturn : "nothing",
			bEnabled : false
		}];
	} else {
		menuLVL1R(RaceMenu, racialVarArr);
	}

	Menus.raceoptions = RaceMenu;
}

//call the Race Features menu and do something with the results
function RaceFeatureOptions() {
	var MenuSelection = getMenu("raceoptions");

	if (MenuSelection && MenuSelection[0] !== "nothing") {
		ApplyRace(MenuSelection.toString(), true);
	}
}

function ConvertToMetric(inputString, rounded, exact) {
	if (typeof inputString != 'string' || inputString === "") {return "";};
	var rounding = rounded ? rounded : 1;
	var ratio = exact ? "metricExact" : "metric";
	var fraction;
	var INtoCM = function (unit) {
		return unit * UnitsList[ratio].lengthInch;
	}
	var FTtoM = function (unit) {
		return unit * UnitsList[ratio].length;
	}
	var MILEtoKM = function (unit) {
		return unit * UnitsList[ratio].distance;
	}
	var CUFTtoM = function (unit) {
		return unit * UnitsList[ratio].volume;
	}
	var SQFTtoM = function (unit) {
		return unit * UnitsList[ratio].surface;
	}
	var LBtoKG = function (unit) {
		return unit * UnitsList[ratio].mass;
	}
	var GALtoL = function (unit) {
		return unit * UnitsList[ratio].liquid;
	}
	var FtoC = function (unit) {
		return (unit - 32) * 5/9;
	}

	var theConvert = function (amount, units) {
		amount = Number(amount);
		var total, unit, isRounded;
		switch (units){
		 case "mile" : case "miles" :
			total = MILEtoKM(amount);
			unit = "km";
			break;
		 case "ft" : case "foot" : case "feet" : case "'" :
			total = FTtoM(amount);
			unit = "m";
			break;
		 case "in" : case "inch" : case "inches" : case '"' :
			total = INtoCM(amount);
			unit = "cm";
			break;
		 case "cu ft" : case "cubic foot" : case "cubic feet" :
			total = CUFTtoM(amount);
			unit = "m3";
			break;
		 case "sq ft" : case "square foot" : case "square feet" :
			total = SQFTtoM(amount);
			unit = "m2";
			break;
		 case "lb" : case "lbs" : case "pound" : case "pounds" :
			total = LBtoKG(amount);
			unit = "kg";
			break;
		 case "gal" : case "gallon" : case "gallons" :
			total = GALtoL(amount);
			unit = "L";
			break;
		 case "\u00B0 f" : case "\u00B0f" : case "degree fahrenheit" : case "degrees fahrenheit" : case "fahrenheit" :
			total = RoundTo(FtoC(amount), exact ? 0.01 : 1, false, true);
			unit = "\u00B0C";
			isRounded = true;
			break;
		}
		return [total, unit, isRounded];
	}

	// find all labeled measurements in string
	var measurements = inputString.match(/(\b|-)\d+(,|\.|\/)?\d*\/?(-?\d+?(,|\.|\/)?\d*)?\s?-?('\d+\w?"($|\W)|'($|\W)|"($|\W)|(in|inch|inches|miles?|ft|foot|feet|sq ft|square foot|square feet|cu ft|cubic foot|cubic feet|lbs?|pounds?|gal|gallons?|\u00B0 ?f|degrees? fahrenheit|fahrenheit)\b)/ig);

	if (measurements) {
		for (var i = 0; i < measurements.length; i++) {
			if ((/'.+"/).test(measurements[i])) {
				if ((/'.+"\W/).test(measurements[i])) {
					measurements[i] = measurements[i].substr(0, measurements[i].length - 1);
				}
				var orgFT = parseFloat(measurements[i].substring(0,measurements[i].indexOf("'")));
				var orgIN = parseFloat(measurements[i].substring(measurements[i].indexOf("'") + 1, measurements[i].indexOf('"')));
				var resulted = theConvert(parseFloat(orgIN/12) + parseFloat(orgFT), "ft");
			} else {
				if ((/\d+('|")\W/).test(measurements[i])) {
					measurements[i] = measurements[i].substr(0, measurements[i].length - 1);
				}
				var org = measurements[i].replace(/,/g, ".");
				var orgUnit = org.match(/[-\s]*([\u00B0 A-z'"]+)$/)[1].toLowerCase();
				var fraction;

				if (fraction = org.match(/(-?\d+\.?\d*)\/(-?\d+\.?\d*)/) ){
					var resulted = [theConvert(fraction[1], orgUnit), theConvert(fraction[2], orgUnit)];
				} else {
					var resulted = theConvert(parseFloat(org), orgUnit);
				}
			}

			var delimiter = (/-[^\d]/).test(measurements[i]) ? "-" : " ";

			if (isArray(resulted[0])) {
				var theResult = RoundTo(resulted[0][0], rounding, false, true) + "/" + RoundTo(resulted[1][0], rounding, false, true) + delimiter + resulted[1][1];
			} else {
				var theResult = (resulted[2] ? resulted[0] : RoundTo(resulted[0], rounding, false, true)) + delimiter + resulted[1];
			}
			inputString = inputString.replace(measurements[i], theResult);
		}
	}
	return inputString;
}

function ConvertToImperial(inputString, rounded, exact, toshorthand) {
	if (typeof inputString != 'string' || inputString === "") {return "";};
	var ratio = exact ? "metricExact" : "metric";
	var rounding = rounded ? rounded : 1;
	var fraction;
	var INofCM = function (unit) {
		return unit / UnitsList[ratio].lengthInch;
	}
	var FTofM = function (unit) {
		return unit / UnitsList[ratio].length;
	}
	var MILEofKM = function (unit) {
		return unit / UnitsList[ratio].distance;
	}
	var CUFTofM = function (unit) {
		return unit / UnitsList[ratio].volume;
	}
	var SQFTofM = function (unit) {
		return unit / UnitsList[ratio].surface;
	}
	var LBofKG = function (unit) {
		return unit / UnitsList[ratio].mass;
	}
	var LofGAL = function (unit) {
		return unit / UnitsList[ratio].liquid;
	}
	var CofF = function (unit) {
		return (unit * 9/5) + 32;
	}

	var theConvert = function (amount, units) {
		amount = Number(amount);
		var total, unit, isRounded;
		switch (units){
		 case "cm" :
			if (amount < 30) {
				total = INofCM(amount);
				unit = "in";
				break;
			}
			amount = amount / 100;
		 case "m" : case "meter" : case "meters" : case "metre" : case "metres" :
			total = FTofM(amount);
			unit = "ft";
			break;
		 case "km" :
			total = MILEofKM(amount);
			unit = total === 1 ? "mile" : "miles";
			break;
		 case "m3" : case "cubic meter" : case "cubic meters" : case "cubic metre" : case "cubic metres" :
			total = CUFTofM(amount);
			unit = "cu ft";
			break;
		 case "m2" : case "square metre" : case "square metres" : case "square meter" : case "square meters" :
			total = SQFTofM(amount);
			unit = "sq ft";
			break;
		 case "g" :
			amount = amount / 1000;
		 case "kg" : case "kilo" : case "kilos" :
			total = LBofKG(amount);
			unit = "lb";
			break;
		 case "l" : case "liter" : case "liters" : case "litre" : case "litres" :
			total = LofGAL(amount);
			unit = "gal";
			break;
		 case "\u00B0 c" : case "\u00B0c" : case "degree celcius" : case "degrees celcius" : case "celcius" :
			total = RoundTo(CofF(amount), exact ? 0.01 : 1, false, true);
			unit = "\u00B0F";
			isRounded = true;
			break;
		}
		return [total, unit, isRounded];
	}

	// find all labeled measurements in string
	var measurements = inputString.match(/(\b|-)\d+(,|\.|\/)?\d*\/?(-?\d+?(,|\.|\/)?\d*)?\s?-?(m2|square meters?|square metres?|m3|cubic meters?|cubic metres?|cm|km|m|meters?|metres?|l|liters?|litres?|kg|g|kilos?|\u00B0 ?c|degrees? celcius|celcius)\b/ig);

	if (measurements) {
		for (var i = 0; i < measurements.length; i++) {
			var org = measurements[i].replace(/,/g, ".");
			var orgUnit = org.match(/[-\s]*([\u00B0 A-z']+)$/)[1].toLowerCase();
			var fraction;

			if (fraction = org.match(/(-?\d+\.?\d*)\/(-?\d+\.?\d*)/)){
				var resulted = [theConvert(fraction[1], orgUnit), theConvert(fraction[2], orgUnit)];
			} else {
				var resulted = theConvert(parseFloat(org), orgUnit);
			}

			var delimiter = (/-[^\d]/).test(measurements[i]) ? "-" : " ";

			if (isArray(resulted[0])) {
				var theResult = RoundTo(resulted[0][0], rounding, false, true) + "/" + RoundTo(resulted[1][0], rounding, false, true) + delimiter + resulted[1][1];
			} else if (toshorthand && resulted[1] === "ft" && resulted[0] % 1 != 0) {
				var theFT = Math.floor(resulted[0]);
				var theINCH = Math.round(resulted[0] % 1 / (1/12));
				var theResult = theFT + "'" + theINCH + "\"";
			} else {
				var theResult = (resulted[2] ? resulted[0] : RoundTo(resulted[0], rounding, false, true)) + delimiter + resulted[1];
			}
			inputString = inputString.replace(measurements[i], theResult);
		}
	}
	return inputString;
}

//update all the decimals in a string or number to reflect the new decimal chosen.
function UpdateDecimals(inputString) {
	var theDec = What("Decimal Separator");
	var theInput = inputString.toString();

	if (theDec === "dot") {
		var measurements = theInput.match(/\b\d+,\d+/g);
		if (measurements) {
			for (var i = 0; i < measurements.length; i++) {
				var theResult = measurements[i].replace(",", ".");
				theInput = theInput.replace(measurements[i], theResult);
			}
		}
	} else if (theDec === "comma") {
		var measurements = theInput.match(/\b\d+\.\d+/g);
		if (measurements) {
			for (var i = 0; i < measurements.length; i++) {
				var theResult = measurements[i].replace(".", ",");
				theInput = theInput.replace(measurements[i], theResult);
			}
		}
	}
	theInput = isNaN(theInput) ? theInput : Number(theInput);
	return theInput;
}

function SetUnitDecimals_Button() {
	var unitSys = What("Unit System");
	var decSep = What("Decimal Separator");

	//set the dialog to represent current settings
	SetUnitDecimals_Dialog.bSys = unitSys;
	SetUnitDecimals_Dialog.bDec = decSep;

	//call the dialog and do something if ok is pressed
	if (app.execDialog(SetUnitDecimals_Dialog) != "ok") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Set units and decimals...");
	calcStop();

	if (!minVer) {
		//fields to update the string from
		var FldsGameMech = [
			"Vision",
			"Saving Throw advantages / disadvantages",
			"Racial Traits",
			"Class Features",
			"Speed",
			"Speed encumbered",
			"Background Feature Description",
			"Extra.Notes",
			"MoreProficiencies"
		];
		//Weight fields (that don't include a unit) to update with 4 decimals
		var FldsWeight = [
			"AC Armor Weight",
			"AC Shield Weight",
			"AmmoLeftDisplay.Weight",
			"AmmoRightDisplay.Weight"
		];
		//field calculations to update
		var FldsCalc = [], MIfldsCalc = [];
		var AScompA = What("Template.extras.AScomp").split(",").slice(1);
		var WSfrontA = What("Template.extras.WSfront").split(",").slice(1);
		for (var C = 0; C < AScompA.length; C++) {
			var prefix = AScompA[C];
			FldsGameMech.push(prefix + "Comp.Use.Speed");
			FldsGameMech.push(prefix + "Comp.Use.Features");
			FldsGameMech.push(prefix + "Comp.Use.Senses");
			FldsGameMech.push(prefix + "Comp.Use.Traits");
			FldsGameMech.push(prefix + "Cnote.Left");
			FldsGameMech.push(prefix + "Cnote.Right");
			for (var a = 1; a <= FieldNumbers.compgear; a++) {
				FldsWeight.push(prefix + "Comp.eqp.Gear Weight " + a);
			}
		}
		for (var i = 1; i <= 77; i++) {
			if (i <= FieldNumbers.magicitems) FldsGameMech.push("Extra.Magic Item Description " + i);
			if (i <= FieldNumbers.limfea) FldsGameMech.push("Limited Feature " + i);
			if (i <= FieldNumbers.feats) {
				FldsGameMech.push("Feat Description " + i);
				FldsCalc.push("Feat Description " + i);
			}
			if (i <= FieldNumbers.magicitems) {
				FldsGameMech.push("Extra.Magic Item Description " + i);
				MIfldsCalc.push("Extra.Magic Item Description " + i);
				FldsWeight.push("Extra.Magic Item Weight " + i);
			}
			if (i <= FieldNumbers.actions) {
				FldsGameMech.push("Bonus Action " + i);
				FldsGameMech.push("Reaction " + i);
			}
			if (i <= FieldNumbers.trueactions) {
				FldsGameMech.push("Action " + i);
			}
			if (i <= FieldNumbers.attacks) {
				FldsGameMech.push("Attack." + i + ".Range");
				FldsGameMech.push("Attack." + i + ".Description");
				FldsWeight.push("BlueText.Attack." + i + ".Weight");
			}
			if (i <= 4) {
				for (var W = 0; W < WSfrontA.length; W++) {
					prefix = WSfrontA[W];
					FldsGameMech.push(prefix + "Wildshape." + i + ".Attack.1.Range");
					FldsGameMech.push(prefix + "Wildshape." + i + ".Attack.1.Description");
					FldsGameMech.push(prefix + "Wildshape." + i + ".Attack.2.Range");
					FldsGameMech.push(prefix + "Wildshape." + i + ".Attack.2.Description");
					FldsGameMech.push(prefix + "Wildshape." + i + ".Speed");
					FldsGameMech.push(prefix + "Wildshape." + i + ".Traits");
				}
			}
			if (i <= 3) {
				for (var C = 0; C < AScompA.length; C++) {
					prefix = AScompA[C];
					FldsGameMech.push(prefix + "Comp.Use.Attack." + i + ".Range");
					FldsGameMech.push(prefix + "Comp.Use.Attack." + i + ".Description");
				}
			}
			if (i <= FieldNumbers.extragear) FldsWeight.push("Extra.Gear Weight " + i);
			if (i <= FieldNumbers.gear) FldsWeight.push("Adventuring Gear Weight " + i);
		}
	}
	if (!tDoc.info.AdvLogOnly) {
		var spellsArray = []; // an array of all the spell fields
		var SSmoreA = What("Template.extras.SSmore").split(",");
		SSmoreA[0] = What("Template.extras.SSfront").split(",")[1];
		if (!SSmoreA[0]) SSmoreA.shift();
		var SkipArray = ["hidethisline", "setcaptions", "setheader", "setdivider", "setglossary"];
		if (SSmoreA[0]) {
			for (var SS = 0; SS < SSmoreA.length; SS++) {
				var fldsNmbrs = SS === 0 ? FieldNumbers.spells[0] : FieldNumbers.spells[1];
				for (var q = 0; q < fldsNmbrs; q++) {
					var SSrem = SSmoreA[SS] + "spells.remember." + q;
					var SSremV = What(SSrem);
					if (SSremV && SkipArray.indexOf(SSremV.split("##")[0]) === -1) {
						spellsArray.push([SSremV, SSrem]);
					}
				}
			}
		}
	}
	if (!minVer && SetUnitDecimals_Dialog.bSys !== unitSys) { //do something if the unit system was changed
		thermoTxt = thermoM("Converting to " + SetUnitDecimals_Dialog.bSys + "...", false); //change the progress dialog text
		setListsUnitSystem(SetUnitDecimals_Dialog.bSys); //update some variables
		Value("Unit System", SetUnitDecimals_Dialog.bSys);
		Value("Decimal Separator", SetUnitDecimals_Dialog.bDec);
		if (typePF) {
			var LbKg = What("Unit System") === "imperial" ? "LB" : "KG";
			Value("Display.Weighttxt.LbKg", LbKg);
			var tpls = What("Template.extras.AScomp").split(",");
			for (var t = 0; t < tpls.length; t++) Value(tpls[t]+"Comp.eqp.Display.Weighttxt", LbKg);
		} else {
			SetRichTextFields();
		}

		if (SetUnitDecimals_Dialog.bSys === "imperial") {
			var conStr = "ConvertToImperial";
			var weightConv = function (amount) {
				return RoundTo(amount / UnitsList.metric.mass, 0.001);
			}
			var raceHeight = "height";
			var raceWeight = "weight";
		} else {
			var conStr = "ConvertToMetric";
			var weightConv = function (amount) {
				return RoundTo(amount * UnitsList.metric.mass, 0.001);
			}
			var raceHeight = "heightMetric";
			var raceWeight = "weightMetric";
		}

		var totalInc = FldsGameMech.length + FldsWeight.length + FldsCalc.length + MIfldsCalc.length + 2;

		for (var C = 0; C < FldsGameMech.length; C++) {
			var theValue = What(FldsGameMech[C]);
			if (theValue) {
				Value(FldsGameMech[C], tDoc[conStr](theValue, 0.5));
			}
			thermoM(C/totalInc); //increment the progress dialog's progress
		}
		for (C = 0; C < FldsWeight.length; C++) {
			var theValue = What(FldsWeight[C]);
			if (theValue) {
				Value(FldsWeight[C], weightConv(theValue));
			}
			thermoM((FldsGameMech.length + C)/totalInc); //increment the progress dialog's progress
		}
		for (C = 0; C < FldsCalc.length; C++) {
			if (CurrentFeats.known[C] && FeatsList[CurrentFeats.known[C]].calculate) {
				var theCalc = FeatsList[CurrentFeats.known[C]].calculate;
				tDoc.getField(FldsCalc[C]).setAction("Calculate", tDoc[conStr](theCalc, 0.5));
				thermoM((FldsGameMech.length + FldsWeight.length + C)/totalInc); //increment the progress dialog's progress
			}
		}
		for (C = 0; C < MIfldsCalc.length; C++) {
			if (CurrentMagicItems.known[C] && MagicItemsList[CurrentMagicItems.known[C]].calculate) {
				var theCalc = MagicItemsList[CurrentMagicItems.known[C]].calculate;
				tDoc.getField(MIfldsCalc[C]).setAction("Calculate", tDoc[conStr](theCalc, 0.5));
				thermoM((FldsGameMech.length + FldsWeight.length + FldsCalc.length + C)/totalInc); //increment the progress dialog's progress
			}
		}
		if (What("Height")) {
			Value("Height", tDoc[conStr](What("Height"), 0.01, true, true));
		}
		if (What("Weight")) {
			Value("Weight", tDoc[conStr](What("Weight"), 0.01, true));
		}
		if (CurrentRace.known) {
			if (CurrentRace[raceHeight]) {
				AddTooltip("Height", CurrentRace.plural + CurrentRace[raceHeight]);
			}
			if (CurrentRace[raceWeight]) {
				AddTooltip("Weight", CurrentRace.plural + CurrentRace[raceWeight]);
			}
			if (CurrentRace.speed[0]) {
				var tempString = tDoc[conStr](tDoc.getField("Speed").userName, 0.5);
				AddTooltip("Speed", tempString);
				AddTooltip("Speed encumbered", tempString);
			}
		}
		thermoM((totalInc - 1)/totalInc); //increment the progress dialog's progress

		for (var p = 0; p < AScompA.length; p++) {
			prefix = AScompA[p];
			if (What(prefix + "Comp.Desc.Height")) {
				Value(prefix + "Comp.Desc.Height", tDoc[conStr](What(prefix + "Comp.Desc.Height"), 0.01, true, true));
			}
			if (What(prefix + "Comp.Desc.Weight")) {
				Value(prefix + "Comp.Desc.Weight", tDoc[conStr](What(prefix + "Comp.Desc.Height"), 0.01, true));
			}
			if (CurrentCompRace[prefix] && CurrentCompRace[prefix].known && CurrentCompRace[prefix].typeFound === "race") {
				if (CurrentCompRace[prefix][raceHeight]) {
					AddTooltip("Height", CurrentCompRace[prefix].plural + CurrentCompRace[prefix][raceHeight]);
				}
				if (CurrentCompRace[prefix][raceWeight]) {
					AddTooltip("Weight", CurrentCompRace[prefix].plural + CurrentCompRace[prefix][raceWeight]);
				}
			}
		}

		//run through all the spells fields with a description and re-do the description
		for (var Sa = 0; Sa < spellsArray.length; Sa++) {
			ApplySpell(spellsArray[Sa][0], spellsArray[Sa][1]);
		}

	} else if (!minVer && SetUnitDecimals_Dialog.bDec !== decSep) { //or if only the decimal separator has been changed
		thermoTxt = thermoM("Converting to " + SetUnitDecimals_Dialog.bDec + " decimal separator...", false); //change the progress dialog text
		setListsUnitSystem(unitSys); //update some variables
		Value("Decimal Separator", SetUnitDecimals_Dialog.bDec);

		FldsWeight.push("Total Experience");
		FldsWeight.push("Add Experience");
		FldsWeight.push("Platinum Pieces");
		FldsWeight.push("Gold Pieces");
		FldsWeight.push("Electrum Pieces");
		FldsWeight.push("Silver Pieces");
		FldsWeight.push("Copper Pieces");
		FldsGameMech.push("Height");
		FldsGameMech.push("Weight");

		for (var p = 0; p < AScompA.length; p++) {
			prefix = AScompA[p];
			FldsGameMech.push(prefix + "Comp.Desc.Height");
			FldsGameMech.push(prefix + "Comp.Desc.Weight");
		}

		var totalInc = FldsGameMech.length + FldsWeight.length;

		for (var D = 0; D < FldsGameMech.length; D++) {
			var theValue = What(FldsGameMech[D]);
			if (theValue) {
				Value(FldsGameMech[D], UpdateDecimals(theValue));
			}
			thermoM(D/totalInc); //increment the progress dialog's progress
		}

		for (D = 0; D < FldsWeight.length; D++) {
			Value(FldsWeight[D], What(FldsWeight[D]));
			thermoM((FldsGameMech.length + D)/totalInc); //increment the progress dialog's progress
		}
	} else if (tDoc.info.SpellsOnly && SetUnitDecimals_Dialog.bSys !== unitSys) { //do something if the unit system was changed
		thermoTxt = thermoM("Converting to " + SetUnitDecimals_Dialog.bSys + "...", false); //change the progress dialog text
		Value("Unit System", SetUnitDecimals_Dialog.bSys);
		Value("Decimal Separator", SetUnitDecimals_Dialog.bDec);
		//run through all the spells fields with a description and re-do the
		for (var Sa = 0; Sa < spellsArray.length; Sa++) {
			ApplySpell(spellsArray[Sa][0], spellsArray[Sa][1]);
		}
	} else if (tDoc.info.AdvLogOnly) {
		Value("Unit System", SetUnitDecimals_Dialog.bSys);
		Value("Decimal Separator", SetUnitDecimals_Dialog.bDec);
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

function SetTextOptions_Button() {
	var FontSize = CurrentVars.fontsize !== undefined ? CurrentVars.fontsize : typePF ? 7 : 5.74;
	var nowFont = tDoc.getField((tDoc.info.AdvLogOnly ? "AdvLog." : "") + "Player Name").textFont;
	var FontDef = typePF ? "SegoeUI" : "SegoePrint";
	var FontDefSize = typePF ? 7 : 5.74;
	if (FontList[nowFont]) FontDefSize = FontList[nowFont];

	var fontArray = {};
	for (var fo in FontList) {
		if (fo !== nowFont) {
			fontArray[fo] = -1;
		} else {
			fontArray[fo] = 1;
		}
	};
	SetTextOptions_Dialog.bSize = FontSize.toString();
	SetTextOptions_Dialog.bDefSize = FontDefSize;
	SetTextOptions_Dialog.bDefFont = FontDef;
	SetTextOptions_Dialog.bDefSizeSheet = FontList[FontDef];
	SetTextOptions_Dialog.bFont = nowFont;
	SetTextOptions_Dialog.bFontsArray = fontArray;

	// Call the dialog and do something if ok is pressed
	if (app.execDialog(SetTextOptions_Dialog) === "ok") {
		if (SetTextOptions_Dialog.bSize !== FontSize) {
			ToggleTextSize(SetTextOptions_Dialog.bSize);
		}
		if (SetTextOptions_Dialog.bFont !== nowFont) {
			ChangeFont(SetTextOptions_Dialog.bFont);
		}
	}
};

//Make menu for the button on each Attack line and parse it to Menus.attacks
function MakeWeaponMenu() {
	var QI = event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);

	var menuLVL1 = function (item, array, setDisabled) {
		for (var i = 0; i < array.length; i++) {
			var disable = setDisabled;
			if ((array[i] === "Move up" && itemNmbr === 1) || (array[i] === "Move down" && itemNmbr === maxItems) || (array[i] === "Insert empty attack" && (!theField || itemNmbr === maxItems))) {
				disable = true;
			} else if (!theField && !isEquipment && array[i] === "Copy to Adventuring Gear (page 2)") {
				disable = true;
			}
			item.push({
				cName : array[i],
				cReturn : array[i],
				bEnabled : !disable
			});
		}
	};

	var menuLVL2 = function (menu, name, array) {
		menu.cName = name;
		menu.oSubMenu = [];
		var lookIt = What(prefix + "BlueText." + Q + "Attack." + itemNmbr + ".Weight Title");
		for (var i = 0; i < array.length; i++) {
			menu.oSubMenu.push({
				cName : array[i].capitalize(),
				cReturn : name + "#" + array[i],
				bMarked : lookIt === array[i]
			})
		}
	};

	//make the attack menu
	var attackMenu = [];
	var itemNmbr = Number(event.target.name.slice(-1));
	var maxItems = QI ? FieldNumbers.attacks : 3;
	var theField = !CurrentVars.manual.attacks ? What(prefix + Q + "Attack." + itemNmbr + ".Weapon Selection") : What(prefix + Q + "Attack." + itemNmbr + ".Weapon");
	var theWea = CurrentWeapons.known[itemNmbr - 1];
	var isWeapon = QI && ((!theWea[0] && CurrentWeapons.field[itemNmbr - 1]) || (theWea[0] && WeaponsList[theWea[0]].weight));
	var isEquipment = QI && What("BlueText.Attack." + itemNmbr + ".Weight") && (CurrentVars.manual.attacks || isWeapon) ? true : false;

	//decide what items to put on there
	var menuItems = [["Move up", "Move down"], ["-", "Copy to Adventuring Gear (page 2)"], ["-", "Insert empty attack", "Delete attack", "Clear attack"]];
	var attackMenuItems = QI ? menuItems[0].concat(menuItems[1]).concat(menuItems[2]) : menuItems[0].concat(menuItems[2]);
	menuLVL1(attackMenu, attackMenuItems);

	if (!typePF) {
		//make the color menu
		var ColorMenu = {};
		var ColorArray = ["black"]; //add a black option

		//add all the colours to the tempArray, ommitting some if not using the full (bonus) version
		for (var key in ColorList) {
			ColorArray.push(key);
		};
		ColorArray.sort();
		ColorArray.unshift("same as headers", "same as dragon heads", "-");
		menuLVL2(ColorMenu, "Outline Color", ColorArray);

		//add the colormenu to the attack menu
		attackMenu.push({cName : "-"});
		attackMenu.push(ColorMenu);
	}

	if (QI) menuLVL1(attackMenu, ["-", "Show what things are affecting the attack calculations"], CurrentEvals.atkAdd || CurrentEvals.atkCalc ? false : true);

	//set the complete menu as the global variable
	Menus.attacks = attackMenu;
};

//call the weapon menu and do something with the results
function WeaponOptions() {
	var MenuSelection = getMenu("attacks");

	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying attack menu option...");
	calcStop();

	var QI = event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var maxItems = QI ? FieldNumbers.attacks : 3;

	var itemNmbr = Number(event.target.name.slice(-1));
	var FieldNames = [
		["", ".Weapon"], //0
		["", ".To Hit"], //1
		["", ".Damage"], //2
		["", ".Weapon Selection"], //3
		["", ".Proficiency"], //4
		["", ".Mod"], //5
		["", ".Range"], //6
		["BlueText.", ".Weight"], //7
		["", ".Damage Type"], //8
		["BlueText.", ".To Hit Bonus"], //9
		["BlueText.", ".Damage Bonus"], //10
		["BlueText.", ".Damage Die"], //11
		["", ".Description"], //12
		["BlueText.", ".Weight Title"], //13
	];
	var Fields = [], FieldsValue = [], FieldsUp = [], FieldsUpValue = [], FieldsDown = [], FieldsDownValue = [];

	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(prefix + FieldNames[F][0] + Q + "Attack." + itemNmbr + FieldNames[F][1]);
		FieldsValue.push(What(Fields[F]));
		if (itemNmbr !== 1) {
			FieldsUp.push(prefix + FieldNames[F][0] + Q + "Attack." + (itemNmbr - 1) + FieldNames[F][1]);
			FieldsUpValue.push(What(FieldsUp[F]));
		}
		if (itemNmbr !== maxItems) {
			FieldsDown.push(prefix + FieldNames[F][0] + Q + "Attack." + (itemNmbr + 1) + FieldNames[F][1]);
			FieldsDownValue.push(What(FieldsDown[F]));
		}
	}
	var IconFld = !typePF ? tDoc.getField(prefix + "Image." + Q + "Attack." + itemNmbr).buttonGetIcon() : "";
	var findWeaps = false;
	switch (MenuSelection[0]) {
	 case "move up":
		thermoTxt = thermoM("Moving the attack up...", false); //change the progress dialog text
		IsNotWeaponMenu = false;
		for (var H = 0; H < FieldNames.length; H++) {
			Value(FieldsUp[H], FieldsValue[H]);
			Value(Fields[H], FieldsUpValue[H]);
			if (!QI && (/description/i).test(Fields[H])) SwapTooltip(FieldsUp[H], Fields[H])
			thermoM(H/FieldNames.length); //increment the progress dialog's progress
		};
		if (!typePF) {
			var IconUp = tDoc.getField(prefix + "Image." + Q + "Attack." + (itemNmbr - 1)).buttonGetIcon();
			tDoc.getField(prefix + "Image." + Q + "Attack." + (itemNmbr - 1)).buttonSetIcon(IconFld);
			tDoc.getField(prefix + "Image." + Q + "Attack." + itemNmbr).buttonSetIcon(IconUp);
		}
		IsNotWeaponMenu = true;
		findWeaps = true;
		break;
	 case "move down":
		thermoTxt = thermoM("Moving the attack down...", false); //change the progress dialog text
		IsNotWeaponMenu = false;
		for (var H = 0; H < FieldNames.length; H++) {
			Value(FieldsDown[H], FieldsValue[H]);
			Value(Fields[H], FieldsDownValue[H]);
			if (!QI && (/description/i).test(Fields[H])) SwapTooltip(FieldsDown[H], Fields[H])
			thermoM(H/FieldNames.length); //increment the progress dialog's progress
		};
		if (!typePF) {
			var IconDown = tDoc.getField(prefix + "Image." + Q + "Attack." + (itemNmbr + 1)).buttonGetIcon();
			tDoc.getField(prefix + "Image." + Q + "Attack." + (itemNmbr + 1)).buttonSetIcon(IconFld);
			tDoc.getField(prefix + "Image." + Q + "Attack." + itemNmbr).buttonSetIcon(IconDown);
		}
		IsNotWeaponMenu = true;
		findWeaps = true;
		break;
	 case "copy to adventuring gear (page 2)":
		thermoTxt = thermoM("Copying the attack to the equipment on page 2...", false); //change the progress dialog text
		AddToInv("gear", "r", FieldsValue[3], "", FieldsValue[7], "", false, false, false, true);
		break;
	 case "insert empty attack":
		thermoTxt = thermoM("Inserting empty attack...", false); //change the progress dialog text
		WeaponInsert(itemNmbr);
		break;
	 case "delete attack":
		thermoTxt = thermoM("Deleting attack...", false); //change the progress dialog text
		WeaponDelete(itemNmbr);
		break;
	 case "clear attack":
		thermoTxt = thermoM("Clearing attack...", false); //change the progress dialog text
		tDoc.resetForm(Fields);
		if (!QI) AddTooltip(Fields[12], "Description and notes");
		//reset the color outline
		ApplyAttackColor(itemNmbr);
		findWeaps = true;
		break;
	 case "outline color":
		thermoTxt = thermoM("Changing the attack outline color...", false); //change the progress dialog text
		ApplyAttackColor(itemNmbr, MenuSelection[1]);
		break;
	 case "show what things are affecting the attack calculations":
		var atkCalcStr = StringEvals("atkStr");
		if (atkCalcStr) ShowDialog("Things Affecting the Attack Calculations", atkCalcStr);
		break;
	}

	//re-populate the CurrentWeapons variable because of the thing that just changed
	if (findWeaps && QI) {
		FindWeapons();
	} else if (findWeaps) {
		FindCompWeapons(undefined, prefix);
	}

	thermoM(thermoTxt, true); // Stop progress bar
};

//insert a weapon at the position wanted
function WeaponInsert(itemNmbr) {
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var maxItems = QI ? FieldNumbers.attacks : 3;
	var theField = !CurrentVars.manual.attacks ? ".Weapon Selection" : ".Weapon";

	//stop the function if the selected slot is already empty
	if (What(prefix + Q + "Attack." + itemNmbr + theField) === "") {
		return;
	}

	//look for the first empty slot below the slot
	var endslot = "";
	for (var i = itemNmbr + 1; i <= maxItems; i++) {
		if (What(prefix + Q + "Attack." + i + theField) === "") {
			endslot = i;
			i = (maxItems + 1);
		}
	}

	var FieldNames = [
		["", ".Weapon"], //0
		["", ".To Hit"], //1
		["", ".Damage"], //2
		["", ".Weapon Selection"], //3
		["", ".Proficiency"], //4
		["", ".Mod"], //5
		["", ".Range"], //6
		["BlueText.", ".Weight"], //7
		["", ".Damage Type"], //8
		["BlueText.", ".To Hit Bonus"], //9
		["BlueText.", ".Damage Bonus"], //10
		["BlueText.", ".Damage Die"], //11
		["", ".Description"], //12
		["BlueText.", ".Weight Title"], //13
	];
	var Fields = [];
	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(prefix + FieldNames[F][0] + Q + "Attack." + itemNmbr + FieldNames[F][1]);
	}

	//only continue if an empty slot was found in the fields
	if (endslot) {
		//cycle to the slots starting with the empty one and add the values of the one above
		IsNotWeaponMenu = false;
		for (var i = endslot; i > itemNmbr; i--) {
			//move the values
			for (var H = 0; H < FieldNames.length; H++) {
				var fromFld = prefix + FieldNames[H][0] + Q + "Attack." + (i - 1) + FieldNames[H][1];
				Value(prefix + FieldNames[H][0] + Q + "Attack." + i + FieldNames[H][1], What(fromFld), !QI && (/description/i).test(FieldNames[H][1]) ? Who(fromFld) : undefined);
			}
			if (!typePF) {
				var theIcon = tDoc.getField(prefix + "Image." + Q + "Attack." + (i - 1)).buttonGetIcon();
				tDoc.getField(prefix + "Image." + Q + "Attack." + i).buttonSetIcon(theIcon);
			}
		}

		//empty the selected slot
		tDoc.resetForm(Fields);
		if (!QI) AddTooltip(Fields[12], "Description and notes");
		IsNotWeaponMenu = true;

		//re-populate the CurrentWeapons variable because of the thing that just changed
		if (QI) {
			FindWeapons();
		} else {
			FindCompWeapons(undefined, prefix);
		}
	}
}

//delete a weapon at the position wanted and move the rest up
function WeaponDelete(itemNmbr) {
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var maxItems = QI ? FieldNumbers.attacks : 3;

	var FieldNames = [
		["", ".Weapon"], //0
		["", ".To Hit"], //1
		["", ".Damage"], //2
		["", ".Weapon Selection"], //3
		["", ".Proficiency"], //4
		["", ".Mod"], //5
		["", ".Range"], //6
		["BlueText.", ".Weight"], //7
		["", ".Damage Type"], //8
		["BlueText.", ".To Hit Bonus"], //9
		["BlueText.", ".Damage Bonus"], //10
		["BlueText.", ".Damage Die"], //11
		["", ".Description"], //12
		["BlueText.", ".Weight Title"], //13
	];
	var Fields = [];
	var EndFields = [];
	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(prefix + FieldNames[F][0] + Q + "Attack." + itemNmbr + FieldNames[F][1]);
		EndFields.push(prefix + FieldNames[F][0] + Q + "Attack." + maxItems + FieldNames[F][1]);
	}

	//delete the currently selected line so that the weapons code is removed as well
	tDoc.resetForm(Fields);

	//move every line up one space, starting with the selected line
	IsNotWeaponMenu = false;
	for (var i = itemNmbr; i < maxItems; i++) {
		if (!typePF) {
			//move the images, for every line that contains a weapon
			var theColorField = prefix + "BlueText." + Q + "Attack." + (i + 1) + ".Weight Title";
			if (!QI || (i !== (maxItems - 1) && What(theColorField) !== tDoc.getField(theColorField).defaultValue)) {
				var theIcon = tDoc.getField(prefix + "Image." + Q + "Attack." + (i + 1)).buttonGetIcon();
				tDoc.getField(prefix + "Image." + Q + "Attack." + i).buttonSetIcon(theIcon);
			}
		}

		//move the values
		for (var H = 0; H < FieldNames.length; H++) {
			var fromFld = prefix + FieldNames[H][0] + Q + "Attack." + (i + 1) + FieldNames[H][1];
			Value(prefix + FieldNames[H][0] + Q + "Attack." + i + FieldNames[H][1], What(fromFld), !QI && (/description/i).test(FieldNames[H][1]) ? Who(fromFld) : undefined);
		};
	}

	//delete the contents of the final line
	tDoc.resetForm(EndFields);
	if (!QI) AddTooltip(EndFields[12], "Description and notes");

	//reset the final line's image to the default
	ApplyAttackColor(maxItems, "");
	IsNotWeaponMenu = true;

	//re-populate the CurrentWeapons variable because of the thing that just changed
	if (QI) {
		FindWeapons();
	} else {
		FindCompWeapons(undefined, prefix);
	}
}

//show (true) or hide (false) the subsection of "attuned magical items" in the adventure gear table
function ShowAttunedMagicalItems(currentstate) {
	if (currentstate === undefined) currentstate = !eval(What("Adventuring Gear Remember"));
	var ExtraLine = [
		"Adventuring Gear Row " + FieldNumbers.gearMIrow,
		"Adventuring Gear Amount " + FieldNumbers.gearMIrow,
		"Adventuring Gear Weight " + FieldNumbers.gearMIrow
	]
	var MagicItems = [
		"Attuned Magic Items Whiteout",
		"Attuned Magic Items Title"
	]
	if (!typePF) MagicItems.push("Line.adventuringGear");
	if (!currentstate) {
		var HideShow = "Hide";
		var ShowHide = "Show";
		var NoPrintHide = "DontPrint";
	} else {
		var HideShow = "Show";
		var ShowHide = "Hide";
		var NoPrintHide = "Hide";
	}
	if (currentstate || What("Gear Location Remember").split(",")[0] === "true") {
		ExtraLine.push("Adventuring Gear Location.Row " + FieldNumbers.gearMIrow);
	}
	for (var E = 0; E < ExtraLine.length; E++) {
		tDoc[ShowHide](ExtraLine[E]);
	}
	tDoc[NoPrintHide]("Adventuring Gear Button " + FieldNumbers.gearMIrow)
	for (var M = 0; M < MagicItems.length; M++) {
		tDoc[HideShow](MagicItems[M]);
	}
	Value("Adventuring Gear Remember", !currentstate);
}

//hide (true) or show (false) the location column in the adventure gear or extra equipment table
function HideInvLocationColumn(type, currentstate) {
	var total = type === "Extra.Gear " ? FieldNumbers.extragear : FieldNumbers.gear;
	var suffix = type === "Extra.Gear " ? ".1" : "";
	//change the size of the gear input rows
	if (currentstate) {
		var HideShow = "Hide";
		var widen = !typePF ? 12 : 16;
	} else {
		var HideShow = "Show";
		var widen = !typePF ? -12 : -16;
	}
	for (var i = 1; i <= total; i++) {
		var RowName = tDoc.getField(type + "Row " + i + suffix);
		var gRect = RowName.rect; // get the location of the field on the sheet
		gRect[2] += widen; // add the widen amount to the lower right x-coordinate
		RowName.rect = gRect; // Update the value of b.rect
		RowName.value = RowName.value; //re-input the value as to counteract the changing of font
	}
	if (typePF || (type === "Extra.Gear " && What("Extra.Layers Remember").split(",")[1] === "equipment") || type === "Adventuring Gear ") { //only show things on the third page, if the extra equipment section is visible
		tDoc[HideShow](type + "Location");
		if (!currentstate && type === "Adventuring Gear " && What("Adventuring Gear Remember") === false) {
			Hide("Adventuring Gear Location.Row " + FieldNumbers.gearMIrow);
		}
	}
	var theState = What("Gear Location Remember").split(",");
	theState = type === "Extra.Gear " ? [theState[0], !currentstate] : [!currentstate, theState[1]];
	Value("Gear Location Remember", theState);
};

//put the ability save DC right, and show both if more than one race/class with ability save DC
function SetTheAbilitySaveDCs() {
	var AbilitySaveArray = [];

	//check all the classes
	for (var aClass in classes.known) {
		var CurrentAbilitySave = CurrentClasses[aClass].abilitySave;
		if (CurrentAbilitySave && AbilitySaveArray.indexOf(CurrentAbilitySave) === -1) {
			AbilitySaveArray.push(CurrentAbilitySave);
		}
	}

	//check the race
	var CurrentAbilitySave = CurrentRace.abilitySave;
	if (CurrentAbilitySave && AbilitySaveArray.indexOf(CurrentAbilitySave) === -1) {
		AbilitySaveArray.push(CurrentAbilitySave);
	}

	//put the ability save DC right, and show both if more than one class with ability save DC
	if (AbilitySaveArray[0]) {
		PickDropdown("Spell DC 1 Mod", AbilitySaveArray[0]);
	} else {
		PickDropdown("Spell DC 1 Mod", 0);
	}

	if (AbilitySaveArray[1]) {
		Toggle2ndAbilityDC("show");
		PickDropdown("Spell DC 2 Mod", AbilitySaveArray[1]);
	} else {
		Toggle2ndAbilityDC("hide");
	}
}

//remove the item at the line number, and move all things below it up so that no empty line is left
//Type is the name of the field without the number; Line is the number of the line; Total is the total amount of fields there are
function DeleteItemType(Type, Line, Total) {
	//move every line up one space, starting with the selected line
	for (var D = Line; D < Total; D++) {
		Value(Type + D, What(Type + (D + 1)), Who(Type + (D + 1)), How(Type + (D + 1)));
	};

	//delete the contents of the final line
	tDoc.resetForm([Type + Total]);
	//set the tooltip of the final line to nothing
	AddTooltip(Type + Total, "", "");
}

//set the global variable for the form field highlighting; and reset it if applicable
function SetHighlighting() {
	if (!IsNotReset) { //if called during a reset
		//set the remember highlight colour to the sheet's default
		tDoc.getField("Highlighting").fillColor = ["RGB", 0.9, 0.9, 1];
		AddTooltip("Highlighting", "sheet default");
		Highlighting.rememberState = eval(What("Highlighting"));
		Highlighting.rememberColor = tDoc.getField("Highlighting").fillColor;
	}
	app.runtimeHighlight = Highlighting.rememberState;
	app.runtimeHighlightColor = Highlighting.rememberColor;
}

//set spell slots checkboxes, use the value of the field to set the picture and right checkbox form fields [through field validation]
var ignoreSetSpellSlotsCheckboxes = false;
function SetSpellSlotsCheckboxes(SpellLVL, theSlots, onlyDisplay) {
	if (ignoreSetSpellSlotsCheckboxes) return;
	calcStop();
	var tempNr = What("Template.extras.SSfront").split(",").length;

	//now set the fields of the prefix type, or non-prefix type, depending on which one was just set
	if (!onlyDisplay && tempNr > 1) {
		var otherPrefix = event.target && event.target.name.indexOf("SpellSlots") !== 0 ? "" : What("Template.extras.SSfront").split(",")[1];
		ignoreSetSpellSlotsCheckboxes = true;
		Value(otherPrefix + "SpellSlots.CheckboxesSet.lvl" + SpellLVL, theSlots);
		ignoreSetSpellSlotsCheckboxes = false;
	}

	if (!onlyDisplay && What("SpellSlotsRemember") === "[false,false]") return;

	var startTry = minVer && !typePF ? 2 : 1;
	var maxTries = tempNr + (typePF || minVer ? 0 : 1);
	for (var s = startTry; s <= maxTries; s++) {
		var suffix = s === 1 || typePF ? "" : "2";
		var prefix = s === maxTries && tempNr > 1 ? What("Template.extras.SSfront").split(",")[1] : "";
		var isDisplayed = typePF || tDoc.getField(prefix + "Image.SpellSlots" + suffix + ".List").display === display.visible;
		var ExtraFld = prefix + "SpellSlots" + suffix + ".Extra.lvl" + SpellLVL;
		if (parseFloat(theSlots) > 4) {
			Value(ExtraFld, "OF " + parseFloat(theSlots));
			Slots = 4;
		} else {
			Value(ExtraFld, "");
			Slots = parseFloat(theSlots);
		}

		var BoxesFld = [
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".mid", //0
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".top1", //1
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".top2.1", //2
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".top2.2", //3
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".bottom1", //4
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".bottom2.1", //5
			prefix + "SpellSlots" + suffix + ".Checkboxes.lvl" + SpellLVL + ".bottom2.2", //6
		];

		//reset the checkboxes form fields so all are empty and hidden
		tDoc.resetForm(BoxesFld);
		for (var i = 0; i < BoxesFld.length; i++) {
			Hide(BoxesFld[i]);
		}
		ClearIcons(prefix + "Image.SpellSlots" + suffix + ".Checkboxes." + SpellLVL);

		//set the right image and show form fields depending on the number entered and whether or not the field is even visible
		if (isDisplayed && Slots > 0) { //only go ahead if there are more than 0 slots to be done
			var theIcon = tDoc.getField("SaveIMG.SpellSlots." + Slots).buttonGetIcon();
			tDoc.getField(prefix + "Image.SpellSlots" + suffix + ".Checkboxes." + SpellLVL).buttonSetIcon(theIcon);
			switch (Slots) {
			 case 1:
				 Show(BoxesFld[0]);
				 break;
			 case 2:
				 Show(BoxesFld[1]);
				 Show(BoxesFld[4]);
				 break;
			 case 3:
				 Show(BoxesFld[2]);
				 Show(BoxesFld[3]);
				 Show(BoxesFld[4]);
				 break;
			 case 4:
				 Show(BoxesFld[2]);
				 Show(BoxesFld[3]);
				 Show(BoxesFld[5]);
				 Show(BoxesFld[6]);
				 break;
			}
		}
	}
}

//show the spell slot section (Toggle = "Off") or hide it (Toggle = "On")
function SetSpellSlotsVisibility() {
	if (!IsNotReset) {
		Hide("Image.SpellPoints");
		Hide("SpellSlots.Checkboxes.SpellPoints");
	}
	if (typePF) return; //don't do this function in the Printer-Friendly version
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	var toShow = eval(What("SpellSlotsRemember"));

	//define a function to show (showOrHide = true) or hide (showOrHide = false) all the spellslots; suffix is "" or "2"
	var doSpellSlots = function(showOrHide, suffix, prefix) {
		var HiddenVisible = showOrHide ? "Hide" : "Show";
		var VisibleHidden = showOrHide ? "Show" : "Hide";
		var NoPrintHidden = showOrHide && CurrentVars.bluetxt ? "DontPrint" : "Hide";
		var HiddenNoPrint = showOrHide ? "Hide" : "DontPrint";

		//the ones that only apply to the first page
		if (suffix !== 2) {
			var SpellSlotsFields0 = [
				"Text.Header.SpellSlots",
				"Line.SpellSlots"
			]
			var LimitedFeatureFields = [
				"Image.LimitedFeatures.Full"
			];
			var LimitedFeatureButtons = [];
			//append the LimitedFeatureFields array with the fillable form fields
			for (var i = 6; i <= 8; i++) {
				LimitedFeatureFields.push("Limited Feature " + i);
				LimitedFeatureFields.push("Limited Feature Max Usages " + i);
				LimitedFeatureFields.push("Limited Feature Recovery " + i);
				LimitedFeatureFields.push("Limited Feature Used " + i);
				LimitedFeatureButtons.push("Button.Limited Feature " + i);
			};

			//show or hide the fields of the bottom 3 limited features
			for (var i = 0; i < LimitedFeatureFields.length; i++) {
				tDoc[HiddenVisible](LimitedFeatureFields[i]);
			};
			//show or hide the buttons of the bottom 3 limited features
			for (var i = 0; i < LimitedFeatureButtons.length; i++) {
				tDoc[HiddenNoPrint](LimitedFeatureButtons[i]);
			};
			//show or hide the fields of the spell slots that are ony on the first page
			for (var i = 0; i < SpellSlotsFields0.length; i++) {
				tDoc[VisibleHidden](SpellSlotsFields0[i]);
			};
		}

		var SpellSlotFields = [
			prefix + "Image.SpellSlots" + suffix,
			prefix + "SpellSlots" + suffix + ".Extra"
		];

		//show or hide the fields of the spell slots
		for (var i = 0; i < SpellSlotFields.length; i++) {
			tDoc[VisibleHidden](SpellSlotFields[i]);
		};

		var extrasuffix = minVer ? "" : (suffix !== 2 ? ".0" : (prefix ? "" : ".1"));

		//show the bluetext fields, if appropriate
		for (var i = 1; i <= 9; i++) {
			tDoc[NoPrintHidden](prefix + "SpellSlots.CheckboxesSet.lvl" + i + extrasuffix);
		}
	}

	//see if we need to hide or show the Spell Slots on the first page
	if (!minVer) {
		var display1 = tDoc.getField("Image.SpellSlots.List").display === display.visible;
		if (display1 !== toShow[0]) doSpellSlots(toShow[0], "", "");
	} else {
		var display1 = toShow[0];
	}

	//see if we need to hide or show the Spell Slots on the spell sheet page
	var prefix = What("Template.extras.SSfront").split(",")[1];
	var display2 = tDoc.getField("Image.SpellSlots2.List").display === display.visible;
	if (display2 !== toShow[1]) {
		doSpellSlots(toShow[1], 2, "");
		if (prefix) doSpellSlots(toShow[1], 2, prefix);
	}

	//update the checkbox fields of the spell slots if any changes have been made
	if (display1 !== toShow[0] || display2 !== toShow[1]) {
		for (var i = 1; i <= 9; i++) {
			SetSpellSlotsCheckboxes(i, What("SpellSlots.CheckboxesSet.lvl" + i), true);
		}
	}
}

//determine the types of locations there are, and add them to the corresponding fields to calculate their subtotals in weight carried [through field format]
function SetCarriedLocations() {
	var type = event.target.name.substring(0,10) === "Extra.Gear" ? "Extra.Gear " : "Adventuring Gear ";
	var row = parseFloat(event.target.name.slice(-2));
	var total = type === "Extra.Gear " ? FieldNumbers.extragear : FieldNumbers.gear;
	var theEvent = clean(event.target.value, " ");
	var locationList = [];
	var locationTestList = [];
	//loop through all the fields and add any found locations to the array
	for (var i = 1; i <= total; i++) {
		var theLoc = clean(What(type + "Location.Row " + i), " ");
		if (i !== row && theLoc !== "" && locationTestList.indexOf(theLoc.toLowerCase()) === -1) {
			locationList.push(theLoc);
			locationTestList.push(theLoc.toLowerCase());
		} else if (i === row && theEvent !== "" && locationTestList.indexOf(theEvent.toLowerCase()) === -1) {
			locationList.push(theEvent);
			locationTestList.push(theEvent.toLowerCase());
		}
	}
	locationList.sort();
	//loop through the list of locations and add the first 6 found to the subtotal fields
	var locationFields = type === "Extra.Gear " || !typePF ? 6 : 9;
	for (var i = 0; i < locationFields; i++) {
		var aLoc = locationList[i] ? locationList[i] : "";
		Value(type + "Location.SubtotalName " + (i + 1), aLoc);
	}
}

//calculate the subtotal for a given gear location [field calculation]
function CalcCarriedLocation() {
	var type = event.target.name.substring(0,10) === "Extra.Gear" ? "Extra.Gear " : "Adventuring Gear ";
	var number = parseFloat(event.target.name.slice(-1));
	var total = type === "Extra.Gear " ? FieldNumbers.extragear : FieldNumbers.gear;
	var toSearch = clean(What(type + "Location.SubtotalName " + number));
	if (toSearch !== "") {
		var totalweight = 0;
		for (var i = 1; i <= total; i++) {
			var theLoc = clean(What(type + "Location.Row " + i), " ").RegEscape();
			if ((RegExp("\\b" + toSearch + "\\b", "i")).test(theLoc)) {
				var amount = What(type + "Amount " + i);
				var weight = What(type + "Weight " + i);
				if (amount && isNaN(amount) && amount.indexOf(",") !== -1) {
					amount = parseFloat(amount.replace(",", "."));
				}
				if (weight && isNaN(weight) && weight.indexOf(",") !== -1) {
					weight = parseFloat(weight.replace(",", "."));
				}

				if (weight) {
					if (amount === "" || isNaN(amount)) {
						totalweight += weight;
					} else {
						totalweight += amount * weight;
					}
				}
			}
		}
		event.value = totalweight;
	} else {
		event.value = "";
	}
}

//make the appropriate attack field a different color, depending on the menu entry
function ApplyAttackColor(attackNmbr, aColour, type, prefix) {
	if (typePF) return; //don't do this function in the Printer-Friendly version
	var QI = type ? type !== "Comp." : !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var prefixA = [""];
	if (!QI && event.target && event.target.name && !prefix) {
		prefixA = [getTemplPre(event.target.name, "AScomp", true)];
	} else if (!QI && prefix) {
		prefixA = [prefix];
	} else if (!QI && !prefix) {
		prefixA = What("Template.extras.AScomp").split(",");
	}
	var Q = QI ? "" : "Comp.Use.";
	var maxItems = QI ? FieldNumbers.attacks : 3;

	startNmbr = attackNmbr ? attackNmbr : 1;
	endNmbr = attackNmbr ? attackNmbr : maxItems;
	for (var pA = 0; pA < prefixA.length; pA++) {
		for (var a = startNmbr; a <= endNmbr; a++) {
			var colour = aColour ? aColour.toLowerCase() : What(prefixA[pA] + "BlueText." + Q + "Attack." + a + ".Weight Title");
			switch (colour) {
				case "same as headers" :
					colour = What("Color.Theme");
					break;
				case "same as dragon heads" :
					colour = What("Color.DragonHeads");
					break;
			}
			if (colour !== "black" && !ColorList[colour]) break;
			var theIcon = tDoc.getField("SaveIMG.Attack." + colour).buttonGetIcon();

			tDoc.getField(prefixA[pA] + "Image." + Q + "Attack." + a).buttonSetIcon(theIcon);
			if (aColour) Value(prefixA[pA] + "BlueText." + Q + "Attack." + a + ".Weight Title", aColour.toLowerCase());
		}
	}
}

//toggle the appearance of the button when it is pushed, cycling between nothing (black), proficiency (colour), and expertise (*) [field action]
function ToggleSkillProf() {
	var isProf = tDoc.getField(event.target.name.replace("Name", "Prof"));
	isProf.currentValueIndices = isProf.currentValueIndices < 2 ? isProf.currentValueIndices + 1 : 0;
}

//apply the change of the field to the colorscheme of the sheet [field format]
function ApplySkillProf() {
	var toChange = event.target.name.substring(0, event.target.name.length - 5);
	switch(event.target.value) {
		case "nothing":
			tDoc.getField(toChange).textColor = color.black;
			break;
		case "proficient":
		case "expertise":
			var theColor = ColorList[What("Color.Theme")];
			if (theColor) tDoc.getField(toChange).textColor = theColor.RGB;
	}
}

//set all the color schemes as the fields dictate
function setColorThemes(reset) {
	if (typePF) return; //don't do this function in the Printer-Friendly version
	ApplyColorScheme(reset ? tDoc.getField("Color.Theme").defaultValue : false);
	ApplyDragonColorScheme(reset ? tDoc.getField("Color.DragonHeads").defaultValue : false);
	ApplyHPDragonColorScheme(reset ? tDoc.getField("Color.HPDragon").defaultValue : false);
	var DCdefaultClrs = tDoc.getField("Color.DC").defaultValue.split(",");
	ApplyDCColorScheme(reset ? DCdefaultClrs[0] : false, 1);
	ApplyDCColorScheme(reset ? DCdefaultClrs[1] : false, 2);
	ApplyAttackColor("", "", "Default");
	ApplyAttackColor("", "", "Comp.");
}

//calculate the proficiency bonus (field calculation)
function ProfBonus() {
	var QI = getTemplPre(event.target.name, "AScomp");
	var lvl = What(QI === true ? "Character Level" : QI + "Comp.Use.HD.Level");
	var ProfMod = QI === true ? What("Proficiency Bonus Modifier") : 0;
	var useDice = tDoc.getField(QI === true ? "Proficiency Bonus Dice" : QI + "BlueText.Comp.Use.Proficiency Bonus Dice").isBoxChecked(0) === 1;
	var ProfB = lvl ? ProficiencyBonusList[Math.min(lvl, ProficiencyBonusList.length) - 1] : 0;
	event.target.submitName = ProfB + ProfMod;
	event.value = useDice || !lvl ? "" : event.target.submitName;
}

//show the proficiency die (field format)
function ProfBonusDisplay(input) {
	var QI = getTemplPre(event.target.name, "AScomp");
	var ProfB = QI === true ? event.target.submitName : input;
	var useDice = tDoc.getField(QI === true ? "Proficiency Bonus Dice" : QI + "BlueText.Comp.Use.Proficiency Bonus Dice").isBoxChecked(0) === 1;
	event.value = useDice ? GetProfDice(ProfB) : !isNaN(event.value) && event.value > 0 ? "+" + event.value : event.value;
}

function GetProfDice(ProfB) {
	var theReturn = "";
	if (ProfB >= 6) {
		theReturn = "d12";
	} else if (ProfB >= 5) {
		theReturn = "d10";
	} else if (ProfB >= 4) {
		theReturn = "d8";
	} else if (ProfB >= 3) {
		theReturn = "d6";
	} else if (ProfB !== "") {
		theReturn = "d4";
	}
	return theReturn;
}
//find the creature on the companion page
function ParseCreature(input) {
	var found = "";
	if (!input) return found;

	input = removeDiacritics(input).toLowerCase();
	var foundLen = 0;
	var foundDat = 0;
	var testLen = 0;

	for (var key in CreatureList) { //scan string for all creatures
		var kObj = CreatureList[key];

		if (testSource(key, kObj, "creaExcl")) continue; // test if the creature or its source isn't excluded

		if (input.indexOf(key) != -1) { // see if the text matches the key
			testLen = key.length;
		} else if (input.indexOf(kObj.name.toLowerCase()) != -1) { // see if the text matches the name
			testLen = kObj.name.length;
		} else {
			continue; // no match, so skip this one
		}

		// only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source. This differs from the regExpSearch objects
		var tempDate = sourceDate(kObj.source);
		if (testLen < foundLen || (testLen == foundLen && tempDate < foundDat)) continue;

		// we have a match, set the values
		found = key;
		foundLen = testLen;
		foundDat = tempDate;
	}
	return found;
};

//detects race entered and put information to global CurrentCompRace variable
function FindCompRace(inputcreatxt, aPrefix) {
	if (aPrefix) {
		var prefixA = [aPrefix];
	} else {
		var prefixA = What("Template.extras.AScomp").split(",");
	}
	for (var p = 0; p < prefixA.length; p++) {
		var prefix = prefixA[p];
		var tempString = inputcreatxt === undefined ? tDoc.getField(prefix + "Comp.Race").submitName : inputcreatxt;
		var oldKnown = CurrentCompRace[prefix] ? CurrentCompRace[prefix].known : undefined;
		var newCreaFound = ParseCreature(tempString);
		if (newCreaFound) {
			CurrentCompRace[prefix] = {};
			CurrentCompRace[prefix] = CreatureList[newCreaFound];
			CurrentCompRace[prefix].known = newCreaFound;
			CurrentCompRace[prefix].typeFound = "creature";
		} else {
			var newRaceFound = ParseRace(tempString);
			if (newRaceFound[0]) {
				CurrentCompRace[prefix] = {};
				CurrentCompRace[prefix].known = newRaceFound[0],
				CurrentCompRace[prefix].variant = newRaceFound[1],
				CurrentCompRace[prefix].typeFound = "race";

				// set the properties of the CurrentCompRace[prefix] object
				for (var prop in RaceList[newRaceFound[0]]) { // the properties of the main race
					if ((/^(known|variant|level)$/i).test(prop)) continue;
					CurrentCompRace[prefix][prop] = RaceList[newRaceFound[0]][prop];
				}
				if (newRaceFound[1]) { // the properties of the variant (overriding anything from the main)
					var subrace = newRaceFound[0] + "-" + newRaceFound[1];
					for (var prop in RaceSubList[subrace]) {
						if ((/^(known|variants?|level)$/i).test(prop)) continue;
						CurrentCompRace[prefix][prop] = RaceSubList[subrace][prop];
					}
				}
			}
		}
		if (inputcreatxt) { //if there was an input, return if it was different from the previously known or not
			if (CurrentCompRace[prefix] && CurrentCompRace[prefix].known && oldKnown !== CurrentCompRace[prefix].known) tDoc.getField(prefix + "Comp.Race").submitName = inputcreatxt;
			return !CurrentCompRace[prefix] || oldKnown === CurrentCompRace[prefix].known || !CurrentCompRace[prefix].known;
		}
	}
}

//a function to remove the strings added to Cnote.Left when making a familiar or mount
function resetCompTypes(prefix) {
	var theType = What(prefix + "Companion.Remember");
	if (!theType) return;
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Resetting the companion back to its default...");
	calcStop();
	RemoveString(prefix + "Cnote.Left", compString[theType].string);
	RemoveString(prefix + "Comp.Use.Features", compString[theType].featurestring);
	for (var i = 0; i < compString[theType].actions.length; i++) {
		RemoveAction(compString[theType].actions[i][0], compString[theType].actions[i][1], compString[theType].actionTooltip);
	}

	if (theType === "mount" || theType === "mechanicalserv") {
		//reset the languages
		var removeLangs = What(prefix + "Comp.Use.Features").match(/\u25C6 languages:.*/i);
		if (CurrentCompRace[prefix] && CurrentCompRace[prefix].known && removeLangs && CurrentCompRace[prefix].languages) {
			removeLangs = removeLangs[0];
			if (CurrentCompRace[prefix].typeFound === "race") {
				//make a string of the languages known to the features
				var languageString = "\u25C6 " + "Languages: ";
				var theEnd = CurrentCompRace[prefix].languages.length - 1;
				for (var l = 0; l <= theEnd; l++) {
					var divider = l === 0 ? "" : l === theEnd ? " and " : ", ";
					languageString += divider + CurrentCompRace[prefix].languages[l];
					languageString += l === theEnd ? "." : "";
				}
			} else if (CurrentCompRace[prefix].typeFound === "creature") {
				var languageString = "\u25C6 Languages: " + CurrentCompRace[prefix].languages + ".";
			}
			ReplaceString(prefix + "Comp.Use.Features", languageString, true, removeLangs, true);
		} else if (removeLangs) {
			RemoveString(prefix + "Comp.Use.Features", removeLangs[0]);
		}
	}

	if (CurrentCompRace[prefix] && CurrentCompRace[prefix].known && theType === "mount") {
		//reset the intelligence if the original creature had less than 6
		if (CurrentCompRace[prefix].typeFound === "creature" && CurrentCompRace[prefix].scores[3] < 6) {
			Value(prefix + "Comp.Use.Ability.Int.Score", CurrentCompRace[prefix].scores[3])
		}
	} else if (theType === "familiar" && CurrentCompRace[prefix] && CurrentCompRace[prefix].typeFound === "creature" && CurrentCompRace[prefix].attacks) {
		Value(prefix + "Comp.Use.Attack.perAction", CurrentCompRace[prefix].attacksAction); //set attacks per action
		//add any weapons the creature possesses
		for (var a = 0; a < CurrentCompRace[prefix].attacks.length; a++) {
			AddWeapon(CurrentCompRace[prefix].attacks[a].name);
		}
	} else if (theType === "companion") {
		UpdateRangerCompanions(0);
	} else if (theType === "companionrr") {
		UpdateRevisedRangerCompanions(0);
	} else if (theType === "mechanicalserv") {
		if (CurrentCompRace[prefix] && CurrentCompRace[prefix].known) {
			Value(prefix + "Comp.Desc.MonsterType", CurrentCompRace[prefix].type);
		};

		var removeDamI = What(prefix + "Comp.Use.Features").match(/\u25C6 damage immunities:.*/i);
		if (removeDamI && CurrentCompRace[prefix] && CurrentCompRace[prefix].known && CurrentCompRace[prefix].damage_immunities) {
			ReplaceString(prefix + "Comp.Use.Features", "\u25C6 Damage Immunities: " + CurrentCompRace[prefix].damage_immunities + ".", true, removeDamI[0], true);
		} else if (removeDamI) {
			RemoveString(prefix + "Comp.Use.Features", removeDamI[0]);
		};

		var removeConI = What(prefix + "Comp.Use.Features").match(/\u25C6 condition immunities:.*/i);
		if (removeConI && CurrentCompRace[prefix] && CurrentCompRace[prefix].known && CurrentCompRace[prefix].condition_immunities) {
			ReplaceString(prefix + "Comp.Use.Features", "\u25C6 Damage Immunities: " + CurrentCompRace[prefix].condition_immunities + ".", true, removeConI[0], true);
		} else if (removeConI) {
			RemoveString(prefix + "Comp.Use.Features", removeConI[0]);
		};

		var removeDarkv = What(prefix + "Comp.Use.Senses").match(/darkvision \d+.?\d*.?(ft|m)/i);
		if (removeDarkv && CurrentCompRace[prefix] && CurrentCompRace[prefix].known && (/darkvision \d+.?\d*.?ft/i).test(CurrentCompRace[prefix].vision + CurrentCompRace[prefix].senses)) {
			var creaDarkv = (CurrentCompRace[prefix].vision + CurrentCompRace[prefix].senses).match(/darkvision \d+.?\d*.?ft/i)[0];
			if (What("Unit System") === "metric") creaDarkv = ConvertToMetric(creaDarkv, 0.5);
			ReplaceString(prefix + "Comp.Use.Senses", creaDarkv, ";", removeDarkv[0], true);
		} else if (removeDarkv) {
			RemoveString(prefix + "Comp.Use.Senses", removeDarkv[0], ";");
		};
	}
	Value(prefix + "Companion.Remember", "", "");
	thermoM(thermoTxt, true); // Stop progress bar
}

//add a creature to the companion page
function ApplyCompRace(newRace) {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything
	if (event.target && event.target.name.indexOf("Comp.Race") !== -1 && newRace.toLowerCase() === event.target.value.toLowerCase()) return; //no changes were made

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying companion race...");
	calcStop();

	var prefix = getTemplPre(event.target.name, "AScomp", true);

	var resetDescTooltips = function() {
		AddTooltip(prefix + "Comp.Desc.Height", "");
		AddTooltip(prefix + "Comp.Desc.Weight", "");
		AddTooltip(prefix + "Comp.Desc.Age", "");
		// remove submitName from modifier fields
		var clearSubmitNames = [prefix + "Comp.Use.Combat.Init.Bonus"].concat(tDoc.getField(prefix + "BlueText.Comp.Use.Ability").getArray()).concat(tDoc.getField(prefix + "BlueText.Comp.Use.Skills").getArray());
		for (var c = 0; c < clearSubmitNames.length; c++) AddTooltip(clearSubmitNames[c], undefined, "");
	}

	var doCreatureEval = function(type) {
		var theEval = CurrentCompRace[prefix][type];
		if (CurrentCompRace[prefix].typeFound !== "creature" || !theEval || typeof theEval != 'function') return;
		try {
			theEval(prefix);
		} catch (error) {
			var eText = "The " + type + " from '" + CurrentCompRace[prefix].name + "' produced an error! Please contact the author of the feature to correct this issue:\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
		}
	}

	var compFields = [
		prefix + "Comp.Use",
		prefix + "Text.Comp.Use",
		prefix + "BlueText.Comp.Use"
	];

	//reset all the fields if the input is nothing
	if (newRace === "") {
		thermoTxt = thermoM("Resetting the companion page...", false); //change the progress dialog text
		doCreatureEval("removeeval");
		CurrentCompRace[prefix] = {}; //reset the global variable to nothing
		tDoc.resetForm(compFields); //rest all the fields
		thermoM(1/3); //increment the progress dialog's progress
		resetDescTooltips(); //remove descriptive tooltips
		resetCompTypes(prefix); //remove strings
		thermoM(2/3); //increment the progress dialog's progress
		tDoc.getField(prefix + "Comp.Race").submitName = "";
		thermoM(thermoTxt, true); // Stop progress bar
		return; //don't do the rest of the function
	}
	if (FindCompRace(newRace, prefix)) { //fill the global variable. If the return is true, it means that no (new) race was found, so the function can be stopped
		thermoM(thermoTxt, true); // Stop progress bar
		return; //don't do the rest of the function
	}
	resetCompTypes(prefix); //remove stuff from the companion type (actions, strings, etc.)
	doCreatureEval("removeeval"); // execute the removeeval from the previously known creature, if any
	if (CurrentCompRace[prefix].typeFound === "race") {// do the following if a race was found
		tDoc.resetForm(compFields); //reset all the fields
		thermoTxt = thermoM("Adding the companion's player race...", false); //change the progress dialog text

		//set descriptive tooltips
		var theHeight = What("Unit System") === "imperial" ? CurrentCompRace[prefix].height : CurrentCompRace[prefix].heightMetric ? CurrentCompRace[prefix].heightMetric : CurrentCompRace[prefix].height;
		var theWeight = What("Unit System") === "imperial" ? CurrentCompRace[prefix].weight : CurrentCompRace[prefix].weightMetric ? CurrentCompRace[prefix].weightMetric : CurrentCompRace[prefix].weight;
		AddTooltip(prefix + "Comp.Desc.Height", CurrentCompRace[prefix].plural + theHeight);
		AddTooltip(prefix + "Comp.Desc.Weight", CurrentCompRace[prefix].plural + theWeight);
		AddTooltip(prefix + "Comp.Desc.Age", CurrentCompRace[prefix].plural + CurrentCompRace[prefix].age);

		thermoM(1/11); //increment the progress dialog's progress

		//set race's size
		PickDropdown(prefix + "Comp.Desc.Size", CurrentCompRace[prefix].size);

		//set race's type
		Value(prefix + "Comp.Desc.MonsterType", "Humanoid");

		//set racial traits
		var theTraits = What("Unit System") === "imperial" ? CurrentCompRace[prefix].trait : ConvertToMetric(CurrentCompRace[prefix].trait, 0.5);
		Value(prefix + "Comp.Use.Traits", theTraits);

		thermoM(2/11); //increment the progress dialog's progress

		//set speed
		var raceSpeed = CurrentCompRace[prefix].speed;
		if (isArray(raceSpeed)) { //legacy
			var theSpeed = isNaN(raceSpeed[0]) ? raceSpeed[0] : raceSpeed[0] + " ft";
		} else {
			var theSpeed = raceSpeed.walk && raceSpeed.walk.spd ? raceSpeed.walk.spd + " ft" : "";
			for (aSpeed in raceSpeed) {
				var Spd = raceSpeed[aSpeed].spd;
				if (!Spd || aSpeed === "walk") continue;
				theSpeed += (aSpeed ? ",\n" : "") + aSpeed + " " + Spd + " ft";
			};
		};
		theSpeed = What("Unit System") === "imperial" ? theSpeed : ConvertToMetric(theSpeed, 0.5);
		Value(prefix + "Comp.Use.Speed", theSpeed);

		thermoM(3/11); //increment the progress dialog's progress

		//set senses
		if (CurrentCompRace[prefix].vision) {
			var theSenseStr = "";
			var theSenses = CurrentCompRace[prefix].vision;
			if (!isArray(theSenses) || (theSenses.length === 2 && !isArray(theSenses[0]) && !isArray(theSenses[1]) && (!isNaN(theSenses[1]) || !isNaN(theSenses[1].substr(1))))) {
				theSenses = [theSenses];
			};
			for (var s = 0; s < theSenses.length; s++) {
				var aSense = theSenses[s];
				if (isArray(aSense)) {
					theSenseStr += (theSenseStr ? "; " : "") + aSense[0] + (aSense[1] ? " " + aSense[1] + " ft": "");
				} else {
					theSenseStr += (theSenseStr ? "; " : "") + aSense;
				};
			};
			if (What("Unit System") !== "imperial") theSenseStr = ConvertToMetric(theSenseStr, 0.5);
			Value(prefix + "Comp.Use.Senses", theSenseStr);
		};

		thermoM(4/11); //increment the progress dialog's progress

		//add a string of the languages known to the features
		if (CurrentCompRace[prefix].languageProfs) {
			var theLangs = [];
			for (var l = 0; l < CurrentCompRace[prefix].languageProfs.length; l++) {
				var aLang = CurrentCompRace[prefix].languageProfs[l];
				if (isNaN(aLang)) {
					theLangs.push(aLang);
				} else {
					theLangs.push("+" + aLang);
				};
			};
			var languageString = formatLineList("\u25C6 Languages:", theLangs);
			if (languageString) AddString(prefix + "Comp.Use.Features", languageString + ".", true);
		};

		thermoM(5/11); //increment the progress dialog's progress

		//add a string of the saveText to the features
		if (CurrentCompRace[prefix].savetxt) {
			if (typeof CurrentCompRace[prefix].savetxt === "string") {
				var svString = "\u25C6 Saving Throws: " + CurrentCompRace[prefix].savetxt + ".";
			} else {
				var svObj = CurrentCompRace[prefix].savetxt;
				var svString = "";
				if (svObj.text) {
					svString += svString ? "; " : "\u25C6 Saving Throws: ";
					svString += svObj.text.join("; ");
				};
				if (svObj.adv_vs) {
					svString += formatLineList((svString ? "; " : "\u25C6 Saving Throws: ") + "Adv. on saves vs.", svObj.adv_vs);
				};
				if (svObj.immune) {
					svString += formatLineList((svString ? "; " : "\u25C6 Saving Throws: ") + "Immune to", svObj.immune);
				};
				svString += ".";
			};
			AddString(prefix + "Comp.Use.Features", svString, true);
		};

		thermoM(6/11); //increment the progress dialog's progress

		//add saving throw proficiencies
		if (CurrentCompRace[prefix].saves) {
			for (var s = 0; s < CurrentCompRace[prefix].saves.length; s++) {
				var Abi = AbilityScores.fields[CurrentCompRace[prefix].saves[s].substr(0,3)];
				if (Abi) Checkbox(prefix + "Comp.Use.Ability." + Abi + ".ST.Prof");
			}
		}

		//add modifiers
		if (CurrentCompRace[prefix].addMod) {
			processMods(true, CurrentCompRace[prefix].name, CurrentCompRace[prefix].addMod);
		}

		//add a string of any resistances to the features
		if (CurrentCompRace[prefix].dmgres) {
			var dmgresString = formatLineList("\u25C6 Damage Resistances:", CurrentCompRace[prefix].dmgres);
			if (dmgresString) AddString(prefix + "Comp.Use.Features", dmgresString + ".", true);
		};

		thermoM(7/11); //increment the progress dialog's progress

		//add a string of any weapon proficiencies to the features
		var weaponProf = CurrentCompRace[prefix].weaponProfs ? CurrentCompRace[prefix].weaponProfs : CurrentCompRace[prefix].weaponprofs ? CurrentCompRace[prefix].weaponprofs : false;
		if (weaponProf) {
			var theWeaponArray = [];
			if (weaponProf[0]) theWeaponArray.push("simple weapons");
			if (weaponProf[1]) theWeaponArray.push("martial weapons");
			if (weaponProf[2]) theWeaponArray = theWeaponArray.concat(weaponProf[2]);
			var weaponString = formatLineList("\u25C6 Weapon Proficiencies:", theWeaponArray);
			if (weaponString) AddString(prefix + "Comp.Use.Features", weaponString + ".", true);
		};

		//add a string of any armour proficiencies to the features
		var armorProf = CurrentCompRace[prefix].armorProfs ? CurrentCompRace[prefix].armorProfs : CurrentCompRace[prefix].armor ? CurrentCompRace[prefix].armor : false;
		if (armorProf) {
			var theArmourArray = [];
			if (armorProf[0]) theArmourArray.push("light armor");
			if (armorProf[1]) theArmourArray.push("medium armor");
			if (armorProf[2]) theArmourArray.push("heavy armor");
			if (armorProf[3]) theArmourArray.push("shields");
			var armourString = formatLineList("\u25C6 Armor Proficiencies:", theArmourArray);
			if (armourString) AddString(prefix + "Comp.Use.Features", armourString + ".", true);
		};

		thermoM(8/11); //increment the progress dialog's progress

		//add a string of any tool proficiencies to the features
		if (CurrentCompRace[prefix].toolProfs) {
			var theTools = [];
			for (var l = 0; l < CurrentCompRace[prefix].toolProfs.length; l++) {
				var aTool = CurrentCompRace[prefix].toolProfs[l];
				if (isArray(aTool)) {
					if (!isNaN(aTool[1]) && Number(aTool[1]) > 1) {
						theTools.push(aTool[1] + " \u00d7 " + aTool[0]);
					} else {
						theTools.push(aTool[0]);
					};
				} else {
					theTools.push(aTool);
				};
			};
			var toolString = formatLineList("\u25C6 Tool Proficiencies:", theTools);
			if (toolString) AddString(prefix + "Comp.Use.Features", toolString + ".", true);
		};

		thermoM(9/11); //increment the progress dialog's progress

		//add skill proficiencies and feature text
		var skillsTxt;
		if (CurrentCompRace[prefix].skills) {
			var skillsNameArr = [];
			for (var i = 0; i < CurrentCompRace[prefix].skills.length; i++) {
				var aSk = CurrentCompRace[prefix].skills[i];
				if (isArray(aSk)) {
					var doSkill = aSk[0];
					var doExp = aSk[1];
				} else {
					var doSkill = aSk;
					var doExp = false;
				}
				var skillName = AddSkillProf(doSkill, true, doExp, true);
				if (skillName) skillsNameArr.push(skillName);
			}
			skillsTxt = formatLineList("\u25C6 Skill Proficiencies:", skillsNameArr);
		};
		if (CurrentCompRace[prefix].skillstxt) {
			skillsTxt = "\u25C6 Skill Proficiencies: " + CurrentCompRace[prefix].skillstxt.replace(/^( |\n)*.*: |\;$|\.$/g, '');
		}
		if (skillsTxt) AddString(prefix + "Comp.Use.Features", skillsTxt + ".", true);

		thermoM(10/11); //increment the progress dialog's progress

		//add weapons
		var weaponAdd = CurrentCompRace[prefix].weaponsAdd ? CurrentCompRace[prefix].weaponsAdd : CurrentCompRace[prefix].weapons ? CurrentCompRace[prefix].weapons : [];
		if (!isArray(weaponAdd)) weaponAdd = [weaponAdd];
		for (i = 0; i < weaponAdd.length; i++) {
			AddWeapon(weaponAdd[i]);
		}

		//add armour
		var anArmorAdd = CurrentCompRace[prefix].armorAdd ? CurrentCompRace[prefix].armorAdd : CurrentCompRace[prefix].addarmor ? CurrentCompRace[prefix].addarmor : false;
		if (anArmorAdd) AddArmor(anArmorAdd, true, prefix);

		// If the race has any other features that aren't applied here
		if (CurrentCompRace[prefix].eval || CurrentCompRace[prefix].features || CurrentCompRace[prefix].scores || CurrentCompRace[prefix].action) {
			app.alert({
				cTitle : "Player race not fully compatible with companion page",
				nIcon : 3,
				cMsg : "The companion page is not fully compatible with all the possible features of races that are designed to be used as a player race (i.e. normally used to create a character with levels).\n\nThe sheet has tried its best to add the '" + CurrentCompRace[prefix].name + "' race to the companion page, but some aspects will be missing:\n\u2022 Anything gained from level-dependent features;\n\u2022 Limited features;\n\u2022 Racial spellcasting;\n\u2022 Additional actions, bonus actions, and reactions;\n\u2022 Automated attack calculation changes;\n\u2022 Anything added using the 'eval' or 'changeeval' attributes."
			})
		}

	} else if (CurrentCompRace[prefix].typeFound === "creature") {// do the following if a creature was found
		thermoTxt = thermoM("Adding the companion creature...", false); //change the progress dialog text
		resetDescTooltips(); //remove descriptive tooltips
		tDoc.resetForm(compFields); //reset all the fields

		//add the size
		PickDropdown(prefix + "Comp.Desc.Size", CurrentCompRace[prefix].size);

		//set race's type
		var typeString = CurrentCompRace[prefix].subtype ? CurrentCompRace[prefix].type + " (" + CurrentCompRace[prefix].subtype + ")" : CurrentCompRace[prefix].type;
		Value(prefix + "Comp.Desc.MonsterType", typeString);

		//set senses
		var theSenses = What("Unit System") === "imperial" ? CurrentCompRace[prefix].senses : ConvertToMetric(CurrentCompRace[prefix].senses, 0.5);
		Value(prefix + "Comp.Use.Senses", theSenses);

		Value(prefix + "Comp.Desc.Alignment", CurrentCompRace[prefix].alignment); //set alignment
		Value(prefix + "Comp.Use.Proficiency Bonus", CurrentCompRace[prefix].proficiencyBonus); //set proficiency bonus
		Value(prefix + "Comp.Use.Attack.perAction", CurrentCompRace[prefix].attacksAction); //set attacks per action
		Value(prefix + "Comp.Use.AC", CurrentCompRace[prefix].ac); //set AC
		Value(prefix + "Comp.Use.HP.Max", CurrentCompRace[prefix].hp); //set HP
		Value(prefix + "Comp.Use.HD.Level", CurrentCompRace[prefix].hd[0]); //set HD #
		Value(prefix + "Comp.Use.HD.Die", CurrentCompRace[prefix].hd[1]); //set HD die

		//add ability scores
		for (var a = 0; a < AbilityScores.abbreviations.length; a++) {
			Value(prefix + "Comp.Use.Ability." + AbilityScores.abbreviations[a] + ".Score", CurrentCompRace[prefix].scores[a]);
			Value(prefix + "Comp.Use.Ability." + AbilityScores.abbreviations[a] + ".Mod", Math.round((CurrentCompRace[prefix].scores[a] - 10.5) * 0.5));
		}

		thermoM(1/10); //increment the progress dialog's progress

		//add speed
		var theSpeed = What("Unit System") === "imperial" ? CurrentCompRace[prefix].speed : ConvertToMetric(CurrentCompRace[prefix].speed, 0.5);
		Value(prefix + "Comp.Use.Speed", theSpeed);

		thermoM(2/10); //increment the progress dialog's progress

		//add any weapons the creature possesses
		for (var a = 0; a < CurrentCompRace[prefix].attacks.length; a++) {
			AddWeapon(CurrentCompRace[prefix].attacks[a].name);
		}

		thermoM(3/10); //increment the progress dialog's progress

		//calculate the ability score modifiers
		var mods = [];
		for (var i = 0; i < CurrentCompRace[prefix].scores.length; i++) {
			mods[i] = Math.round((CurrentCompRace[prefix].scores[i] - 10.5) * 0.5);
		}

		thermoM(4/10); //increment the progress dialog's progress

		//add skill proficiencies
		if (CurrentCompRace[prefix].skills) {
			for (var aSkill in CurrentCompRace[prefix].skills) {
				var profSkill = CompSkillRefer(aSkill, CurrentCompRace[prefix].skills[aSkill], CurrentCompRace[prefix].scores, CurrentCompRace[prefix].proficiencyBonus);
				AddSkillProf(profSkill[0], profSkill[1] !== "nothing", profSkill[1] === "expertise", false, profSkill[2]); //set the proficiency
			}
		}

		thermoM(5/10); //increment the progress dialog's progress

		//add saving throw proficiencies
		for (var s = 0; s < CurrentCompRace[prefix].saves.length; s++) {
			if (CurrentCompRace[prefix].saves[s] !== "") {//only do something if a value is detected
				var saveFld = "Comp.Use.Ability." + AbilityScores.abbreviations[s] + ".ST";
				Checkbox(prefix + saveFld + ".Prof"); //set the save as proficient
				Value(prefix + "BlueText." + saveFld + ".Bonus", CurrentCompRace[prefix].saves[s] - mods[s] - CurrentCompRace[prefix].proficiencyBonus);
			}
		}

		//add features
		if (CurrentCompRace[prefix].damage_vulnerabilities) {
			var tempString = "\u25C6 Damage Vulnerabilities: " + CurrentCompRace[prefix].damage_vulnerabilities + ".";
			AddString(prefix + "Comp.Use.Features", tempString, true);
		}
		if (CurrentCompRace[prefix].damage_resistances) {
			var tempString = "\u25C6 Damage Resistances: " + CurrentCompRace[prefix].damage_resistances + ".";
			AddString(prefix + "Comp.Use.Features", tempString, true);
		}
		if (CurrentCompRace[prefix].damage_immunities) {
			var tempString = "\u25C6 Damage Immunities: " + CurrentCompRace[prefix].damage_immunities + ".";
			AddString(prefix + "Comp.Use.Features", tempString, true);
		}
		if (CurrentCompRace[prefix].condition_immunities) {
			var tempString = "\u25C6 Condition Immunities: " + CurrentCompRace[prefix].condition_immunities + ".";
			AddString(prefix + "Comp.Use.Features", tempString, true);
		}
		if (CurrentCompRace[prefix].languages) {
			var tempString = "\u25C6 Languages: " + CurrentCompRace[prefix].languages + ".";
			AddString(prefix + "Comp.Use.Features", tempString, true);
		}

		thermoM(6/10); //increment the progress dialog's progress

		//add features
		if (CurrentCompRace[prefix].features) {
			for (var t = 0; t < CurrentCompRace[prefix].features.length; t++) {
				var featureString = "\u25C6 " + CurrentCompRace[prefix].features[t].name + ": ";
				featureString += CurrentCompRace[prefix].features[t].description;
				AddString(prefix + "Comp.Use.Features", featureString, true);
			}
		}

		thermoM(7/10); //increment the progress dialog's progress

		//add actions
		if (CurrentCompRace[prefix].actions) {
			for (var t = 0; t < CurrentCompRace[prefix].actions.length; t++) {
				var actionString = "\u25C6 " + CurrentCompRace[prefix].actions[t].name + ": ";
				actionString += CurrentCompRace[prefix].actions[t].description;
				AddString(prefix + "Comp.Use.Traits", actionString, true);
			}
		}

		thermoM(8/10); //increment the progress dialog's progress

		//add traits
		if (CurrentCompRace[prefix].traits) {
			for (var t = 0; t < CurrentCompRace[prefix].traits.length; t++) {
				var traitString = "\u25C6 " + CurrentCompRace[prefix].traits[t].name + ": ";
				traitString += CurrentCompRace[prefix].traits[t].description;
				AddString(prefix + "Comp.Use.Traits", traitString, true);
			}
		}

		thermoM(9/10); //increment the progress dialog's progress

		//convert to metric, if applicable
		if (What("Unit System") === "metric") {
			if (What(prefix + "Comp.Use.Traits")) Value(prefix + "Comp.Use.Traits", ConvertToMetric(What(prefix + "Comp.Use.Traits"), 0.5));
			if (What(prefix + "Comp.Use.Features")) Value(prefix + "Comp.Use.Features", ConvertToMetric(What(prefix + "Comp.Use.Features"), 0.5));
		}

		// execute eval
		doCreatureEval("eval");
	}

	SetHPTooltip(false, true);
	thermoM(thermoTxt, true); // Stop progress bar
}

//calculate whether the skill bonus equals proficiency, expertise, or something else
function CompSkillRefer(Skill, SkillBonus, scores, profB) {
	var SkillName = Skill.capitalize();
	if (Skill.length > 4) {
		if (SkillsList.abbreviations.indexOf(SkillName.substring(0, 4)) !== -1) {
			SkillName = SkillName.substring(0, 4);
		} else if (SkillsList.abbreviations.indexOf(SkillName.substring(0, 3)) !== -1) {
			SkillName = SkillName.substring(0, 3);
		}
	};

	var SkillAbility = SkillsList.abilityScores[SkillsList.abbreviations.indexOf(SkillName)];
	var SkillMod = Math.round((scores[AbilityScores.abbreviations.indexOf(SkillAbility)] - 10.5) * 0.5);

	if (SkillBonus === SkillMod) {
		var theReturn = [SkillName, "nothing", 0];
	} else if (SkillBonus === (SkillMod + profB)) {
		var theReturn = [SkillName, "proficient", 0];
	} else if (SkillBonus === (SkillMod + (2 * profB))) {
		var theReturn = [SkillName, "expertise", 0];
	} else if (SkillBonus > (SkillMod + (2 * profB))) {
		var theReturn = [SkillName, "expertise", SkillBonus - (SkillMod + (2 * profB))];
	} else if (SkillBonus > (SkillMod + profB)) {
		var theReturn = [SkillName, "proficient", SkillBonus - (SkillMod + profB)];
	} else {
		var theReturn = [SkillName, "nothing", SkillBonus - SkillMod];
	}

	return theReturn;
}

// manual trigger for clicking the skill proficiency/expertise (MouseUp) on the companion page
function applyCompSkillClick() {
	var isExp = (/Exp$/).test(event.target.name);
	var isCheck = event.target.isBoxChecked(0) ? true : false;
	if (isCheck != isExp) return; // nothing to do
	var otherFld = event.target.name.replace(/(Exp|Prof)$/, isExp ? "Prof" : "Exp");
	Checkbox(otherFld, isCheck);
}

// call this to update the companion page's proficiency bonus field so it displays the die
function setCompProfDie() {
	var prefix = event.target.name.substring(0, event.target.name.indexOf("BlueText."));
	var profFld = prefix + "Comp.Use.Proficiency Bonus";
	Value(profFld, What(profFld));
}

//see if the weapon matches one of the companion as a creature
function parseCompWeapon(input, prefix) {
	if (!input || !CurrentCompRace[prefix] || !CurrentCompRace[prefix].attacks) return "";

	var input = removeDiacritics(input).toLowerCase();
	var tempFound = false;

	//scan string for all attacks
	for (var n = 0; n < CurrentCompRace[prefix].attacks.length; n++) {
		var nAtk = CurrentCompRace[prefix].attacks[n].name.toLowerCase();
		if (input.indexOf(nAtk) !== -1) return n;
	}

	return ""; // nothing was found, so return nothing
}

//detects weapons entered on the companion sheet and put information to global CurrentWeapons variable
function FindCompWeapons(ArrayNmbr, aPrefix) {
	if (aPrefix) {
		var prefixA = [aPrefix];
	} else {
		var prefixA = What("Template.extras.AScomp").split(",");
	}
	for (var p = 0; p < prefixA.length; p++) {
		var prefix = prefixA[p];
		var tempString = "";
		var tempFound = false;
		var tempArray = [];
		var startArray = ArrayNmbr;
		var endArray = ArrayNmbr + 1;
		var isCompRace = CurrentCompRace[prefix] && CurrentCompRace[prefix].typeFound === "creature" && CurrentCompRace[prefix].known;

		//do all the weapons, if no ArrayNmbr has been entered
		if (ArrayNmbr === undefined) {
			CurrentWeapons.compField[prefix] = [];
			CurrentWeapons.compKnown[prefix] = [];
			for (var i = 0; i < 3; i++) {
				CurrentWeapons.compField[prefix][i] = What(prefix + "Comp.Use.Attack." + (i + 1) + ".Weapon Selection").toLowerCase();
			}
			var startArray = 0;
			var endArray = CurrentWeapons.compField[prefix].length;
		}

		//parse the weapons into tempArray
		for (var j = startArray; j < endArray; j++) {
			tempString = CurrentWeapons.compField[prefix][j];
			tempArray[j] = [];
			var compAttackFound = false;
			if (isCompRace) { //if a creature is found, check to see if attack entered matches one of the creature's attacks
				tempArray[j][0] = parseCompWeapon(tempString, prefix);
				compAttackFound = tempArray[j][0] !== "";
			}

			if (!compAttackFound) { //if not a comprace or nothing was found above
				//see if the field contains a known weapon
				tempArray[j][0] = ParseWeapon(tempString);
			}

			//add magical bonus, denoted by a "+" or "-"
			tempArray[j][1] = 0;
			var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
			if (magicRegex.test(tempString)) {
				tempArray[j][1] = parseFloat(tempString.match(magicRegex)[1]);
			}

			//add the true/false switch for adding ability score to damage or not
			if (!compAttackFound && tempArray[j][0]) {
				tempArray[j][2] = WeaponsList[tempArray[j][0]].abilitytodamage;
			} else if (compAttackFound) {
				var compMod = CurrentCompRace[prefix].attacks[tempArray[j][0]].modifiers;
				tempArray[j][2] = compMod && compMod[2] !== "" ? compMod[2] : true;
			}
			//put tempArray in known
			CurrentWeapons.compKnown[prefix][j] = tempArray[j];
		}
	}
};

//add a wildshape based on the selection and calculation settings
function ApplyWildshape() {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything
	if (event.target && event.value.toLowerCase() === event.target.value.toLowerCase()) return; //no changes were made

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying wild shape...");
	calcStop();

	var prefix = getTemplPre(event.target.name, "WSfront", true);
	var Fld = event.target.name.slice(-1);
	var newForm = event.value.toLowerCase();
	var resetFlds = [
		prefix + "Wildshape." + Fld,
		prefix + "Text.Wildshape." + Fld
	];
	var resetTooltipsFlds = function() {
		AddTooltip(prefix + "Wildshape." + Fld + ".Attack." + 1 + ".Description", "");
		AddTooltip(prefix + "Wildshape." + Fld + ".Attack." + 2 + ".Description", "");
		AddTooltip(prefix + "Wildshape." + Fld + ".AC", "");
	}

	if (newForm === "" || newForm === "make a selection") {
		thermoTxt = thermoM("Resetting the wild shape...", false); //change the progress dialog text
		tDoc.resetForm(resetFlds);
		thermoM(1/2); //increment the progress dialog's progress
		resetTooltipsFlds();
		thermoM(thermoTxt, true); // Stop progress bar
		return; //don't do the rest of the function
	}

	var newCrea = ParseCreature(newForm);

	var oldCrea = ParseCreature(event.target.value);
	if (newCrea === oldCrea || !newCrea || !What("Character Level") || !What("Int")|| !What("Wis")|| !What("Cha")) { //If this returns true, it means that no (new) race was found; or that the character has not been defined enough yet so the function can be stopped
		thermoM(thermoTxt, true); // Stop progress bar
		return; //don't do the rest of the function
	}

	thermoTxt = thermoM("Resetting the wild shape...", false); //change the progress dialog text
	tDoc.resetForm(resetFlds);
	resetTooltipsFlds();
	thermoM(1/10); //increment the progress dialog's progress

	thermoTxt = thermoM("Applying the new wild shape...", false); //change the progress dialog text
	var theCrea = CreatureList[newCrea];
	//calculate the new array of ability scores
	var scores = [
		theCrea.scores[0],
		theCrea.scores[1],
		theCrea.scores[2],
		What("Int"),
		What("Wis"),
		What("Cha")
	];

	//calculate the ability score modifiers
	var mods = [];
	for (var i = 0; i < scores.length; i++) {
		mods[i] = Math.round((scores[i] - 10.5) * 0.5);
	}

	//get the proficiency bonuses
	var creaProfBcalc = theCrea.proficiencyBonus;
	var charProfBcalc = Number(What("Proficiency Bonus"));
	var creaProfBfix = theCrea.proficiencyBonus;
	var charProfBfix = Number(What("Proficiency Bonus"));

	//get the setting field
	var setting = What("Wildshapes.Remember").split("!#TheListSeparator#!");

	if (setting[0] === "all_creature") {
		charProfBcalc = creaProfBcalc;
	} else if (setting[0] === "all_druid") {
		creaProfBcalc = charProfBcalc;
	}

	//define a function that calculates the proficiency bonus to use
	var getProfB = function(ProfB, isProf, halfProf) {
		if (isProf === "expertise") {
			return ProfB * 2;
		} else if (isProf === "proficient") {
			return ProfB;
		} else if (halfProf) {
			return Math.floor(ProfB / 2);
		} else {
			return 0;
		}
	}

	//add ability scores
	for (var a = 0; a < AbilityScores.abbreviations.length; a++) {
		Value(prefix + "Wildshape." + Fld + ".Ability." + AbilityScores.abbreviations[a] + ".Score", scores[a]);
	}

	thermoM(2/10); //increment the progress dialog's progress

	//add the size
	PickDropdown(prefix + "Wildshape." + Fld + ".Size", theCrea.size);

	//set race's type
	var typeString = theCrea.subtype ? theCrea.type + " (" + theCrea.subtype + ")" : theCrea.type;
	Value(prefix + "Wildshape." + Fld + ".MonsterType", typeString);

	//set speed
	var theSpeed = What("Unit System") === "imperial" ? theCrea.speed : ConvertToMetric(theCrea.speed, 0.5);
	Value(prefix + "Wildshape." + Fld + ".Speed", theSpeed);

	//if the character is using proficiency dice instead of a bonus, change the values for calculations to zero and change the Proficiency Bonus field to display a dice
	if (tDoc.getField("Proficiency Bonus Dice").isBoxChecked(0) === 1) {
		var profToDisplay = GetProfDice(creaProfBcalc);
		creaProfBcalc = 0;
		charProfBcalc = 0;
	} else {
		var profToDisplay = creaProfBcalc;
	}

	Value(prefix + "Wildshape." + Fld + ".Proficiency Bonus", profToDisplay); //set proficiency bonus
	Value(prefix + "Wildshape." + Fld + ".HP Max", theCrea.hp); //set HP
	Value(prefix + "Wildshape." + Fld + ".HD", theCrea.hd[0] + "d" + theCrea.hd[1]); //set HD
	Value(prefix + "Wildshape." + Fld + ".CR", theCrea.challengeRating); //set CR

	//set AC
	var theAC = [theCrea.ac];
	var theACtt = [""];
	for (var aClass in CurrentClasses) {
		for (var pop in CurrentClasses[aClass].features) {
			var fea = CurrentClasses[aClass].features[pop];
			if ((/armor of peace|unarmored defense|draconic resilience|durability/i).test(fea.name) && (/ AC /).test(fea.description) && fea.minlevel <= classes.known[aClass].level) {
				var newAC = fea.description.match(/\d+ ?\+/);
				newAC = Number(newAC ? newAC[0].replace(/ ?\+/, "") : 10);
				var addAbi = fea.description.match(/\+ ?(Str|Dex|Con|Int|Wis|Cha)/ig);
				if (addAbi) { for (var aA = 0; aA < addAbi.length; aA++) {
					newAC += mods[AbilityScores.abbreviations.indexOf(addAbi[aA].replace(/\+ ?/, ""))];
				}; };
				if (newAC) {
					theAC.push(newAC);
					theACtt.push("\n\nThe AC used here is calculated using " + fea.name + " (" + CurrentClasses[aClass].fullname + ")");
				}
			}
		}
	}
	if (CurrentArmour.known && CurrentArmour.mod) {
		var newAC = ArmourList[CurrentArmour.known].ac;
		if (CurrentArmour.mod) newAC += mods[AbilityScores.abbreviations.indexOf(CurrentArmour.mod.replace(/ Mod/i, ""))];
		theAC.push(newAC);
		theACtt.push("\n\nThe AC used here is calculated using " + What("AC Armor Description"));
	}
	var theACtoUse = Math.max.apply(null, theAC);
	var theTTtoUse = "The " + theCrea.name + " default AC is " + theCrea.ac + theACtt[theAC.indexOf(theACtoUse)];
	Value(prefix + "Wildshape." + Fld + ".AC", theACtoUse, theTTtoUse);

	thermoM(3/10); //increment the progress dialog's progress

	//set the initiative value
	var initBonus = EvalBonus(What("Init Bonus"), prefix, Fld);
	if (tDoc.getField("Jack of All Trades").isBoxChecked(0) === 1 || tDoc.getField("Remarkable Athlete").isBoxChecked(0) === 1) initBonus += Math.floor(charProfBcalc / 2); //add half the proficiency bonus if either Jack of All Trades or Remarkable Athlete is checked off
	Value(prefix + "Wildshape." + Fld + ".Initiative Bonus", mods[1] + Number(initBonus));

	thermoM(4/10); //increment the progress dialog's progress

	//set the skill proficiencies
	for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
		//get the particulars of the skill
		var skill = SkillsList.abbreviations[s];
		var skillFull = SkillsList.names[s];
		var skillDruid = Who("Text.SkillsNames") === "alphabeta" ? skill : SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(skill)];
		var skillAbi = SkillsList.abilityScores[s];
		var skillMod = mods[AbilityScores.abbreviations.indexOf(skillAbi)];
		if (!typePF) {
			var skillFlds = [
				prefix + "Wildshape." + Fld + ".Skills." + skill, //for the numerical value
				prefix + "Text.Wildshape." + Fld + ".Skills." + skill + ".Prof", //pick proficiency/expertise/nothing
			];
		} else {
			var skillFlds = [
				prefix + "Wildshape." + Fld + ".Skills." + skill + ".Mod", //for the numerical value
				prefix + "Wildshape." + Fld + ".Skills." + skill + ".Prof", //for the proficiency
				prefix + "Wildshape." + Fld + ".Skills." + skill + ".Exp", //for the expertise
			];
		}

		//see if the creature has proficiency/expertise in it
		if (theCrea.skills && theCrea.skills[skillFull.toLowerCase()] !== undefined) {
			var skillCrea = CompSkillRefer(skill, theCrea.skills[skillFull.toLowerCase()], theCrea.scores, creaProfBfix);
		} else {
			var skillCrea = [skill, "nothing", 0];
		}

		//see if the druid has proficiency/expertise in it
		var charProfFlds = [
			tDoc.getField(skillDruid + " Prof").isBoxChecked(0) === 1,
			tDoc.getField(skillDruid + " Exp").isBoxChecked(0) === 1,
			What(skillDruid + " Bonus"),
			What("All Skills Bonus"),
			tDoc.getField("Jack of All Trades").isBoxChecked(0) === 1 || (tDoc.getField("Remarkable Athlete").isBoxChecked(0) === 1 && (skillAbi === "Str" || skillAbi === "Dex" || skillAbi === "Con"))
		];
		var skillChar = [
			skill,
			charProfFlds[0] && charProfFlds[1] ? "expertise" : charProfFlds[0] ? "proficient" : "nothing",
			EvalBonus(charProfFlds[2], prefix, Fld),
			EvalBonus(charProfFlds[3], prefix, Fld)
		];

		//set the right colouring of the skill name (i.e. the proficiency level)
		var skillProf = "nothing";
		if (skillCrea[1] === "expertise" || skillChar[1] === "expertise") {
			skillProf = "expertise";
		} else if (skillCrea[1] === "proficient" || skillChar[1] === "proficient") {
			skillProf = "proficient";
		}
		if (!typePF) {
			Value(skillFlds[1], skillProf);
		} else {
			Checkbox(skillFlds[1], skillProf === "expertise" || skillProf === "proficient");
			Checkbox(skillFlds[2], skillProf === "expertise");
		}

		//set the bonus for the skill
		if (setting[0] === "by_the_numbers") { //if set to only compare by the numbers, regardless of actual stats/prof bonus
			var skillBonus = theCrea.skills && theCrea.skills[skillFull.toLowerCase()] !== undefined ? Math.max(theCrea.skills[skillFull.toLowerCase()], What(skill)) : Math.max(skillMod, What(skill));
		} else {
			//if set to use char's prof bonus for everything, but not double it on creature expertise, add it to the
			if (setting[1].indexOf("expertise") === -1 && skillCrea[1] === "expertise") {
				skillCrea[2] += creaProfBfix; //add the prof bonus from the creature stat block, because we are not now doubling any prof bonus
				skillCrea[1] = "proficient"; //just set it to proficient, so that it will be only added once
			}

			var creaSkillProfB = getProfB(creaProfBcalc, skillCrea[1], false);
			var charSkillProfB = getProfB(charProfBcalc, skillChar[1], charProfFlds[4]);

			//calculate the skill bonus with the highest proficiency bonus
			var skillBonus = skillMod + Math.max(creaSkillProfB + skillCrea[2], charSkillProfB) + skillChar[2] + skillChar[3];
		}
		Value(skillFlds[0], skillBonus);

		//set the passive perception if calculating the perception score
		if (skillFull === "Perception") {
			var passPercBonus = EvalBonus(What("Passive Perception Bonus"), prefix, Fld);
			Value(prefix + "Wildshape." + Fld + ".Skills.PassPerc", 10 + skillBonus + Number(passPercBonus));
		}
	}

	thermoM(5/10); //increment the progress dialog's progress

	//set the saving throw proficiencies
	for (var s = 0; s < AbilityScores.abbreviations.length; s++) {
		//get the particulars of the save
		var saveAbi = AbilityScores.abbreviations[s];
		var saveMod = mods[s];
		var saveFlds = [
			prefix + "Wildshape." + Fld + ".Ability." + saveAbi + ".ST.Prof", //check if proficient
			prefix + "Wildshape." + Fld + ".Ability." + saveAbi + ".ST.Mod" //for the numerical value
		];

		//see if the creature has proficiency/expertise in it, and any possible bonuses
		var saveCrea = [
			theCrea.saves[s] !== "" ? "proficient" : "nothing",
			theCrea.saves[s] !== "" ? creaProfBcalc : 0,
			theCrea.saves[s] !== "" ? theCrea.saves[s] - Math.round((theCrea.scores[s] - 10.5) * 0.5) - creaProfBfix : 0
		];

		//see if the druid has proficiency/expertise in it, and any possible bonuses
		var saveCharFlds = [
			tDoc.getField(saveAbi + " ST Prof").isBoxChecked(0) === 1,
			What(saveAbi + " ST Bonus"),
			What("All ST Bonus")
		];
		var saveChar = [
			saveCharFlds[0] ? "proficient" : "nothing",
			saveCharFlds[0] ? charProfBcalc : 0,
			EvalBonus(saveCharFlds[1], prefix, Fld),
			EvalBonus(saveCharFlds[2], prefix, Fld)
		];

		//check the box for proficiency, if applicable
		if (saveCrea[0] === "proficient" || saveChar[0] === "proficient") {
			Checkbox(saveFlds[0]);
		}

		//set the bonus for the save
		if (setting[0] === "by_the_numbers") { //if set to only compare by the numbers, regardless of actual stats/prof bonus
			var saveBonus = theCrea.saves[s] !== "" ? Math.max(theCrea.saves[s], What(saveAbi + " ST Mod")) : Math.max(saveMod, What(saveAbi + " ST Mod"));
		} else {
			//calculate the skill bonus with the highest proficiency bonus
			var saveBonus = saveMod + Math.max(saveCrea[1] + saveCrea[2], saveChar[1]) + saveChar[2] + saveChar[3];
		}
		Value(saveFlds[1], saveBonus);
	}

	thermoM(6/10); //increment the progress dialog's progress

	//add attacks
	var attacksArray = theCrea.wildshapeAttacks ? theCrea.attacks.concat(theCrea.wildshapeAttacks) : theCrea.attacks;
	for (var a = 0; a < (Math.min(2, attacksArray.length)); a++) {
		var atk = attacksArray[a];
		var atkStr = prefix + "Wildshape." + Fld + ".Attack." + (a + 1);
		var atkMod = mods[atk.ability - 1];
		var atkAlt = atk.modifiers ? atk.modifiers : [];
		var atkRange = What("Unit System") === "imperial" ? atk.range : ConvertToMetric(atk.range, 0.5);
		Value(atkStr + ".Weapon", atk.name); //set attack name
		Value(atkStr + ".Range", atkRange); //set attack range
		Value(atkStr + ".Description", atk.description, atk.tooltip ? atk.tooltip : ""); //set attack description

		//set to hit
		var tohitProfB = setting[1].indexOf("attacks") !== -1 ? charProfBfix : creaProfBfix;
		tohitProfB = tDoc.getField("Proficiency Bonus Dice").isBoxChecked(0) === 1 ? 0 : tohitProfB;
		var tohitString = atk.dc ? 8 + tohitProfB + atkMod : tohitProfB + atkMod;
		if (atkAlt[0]) tohitString += !isNaN(atkAlt[0]) ? atkAlt[0] : AbilityScores.abbreviations.indexOf(atkAlt[0]) !== -1 ? mods[AbilityScores.abbreviations.indexOf(atkAlt[0])] : 0; //add a modifier, if defined
		if (atk.dc) tohitString = "DC " + tohitString;
		if (!isNaN(tohitString) && tohitString > 0) tohitString = "+" + tohitString;
		Value(atkStr + ".To Hit", tohitString); //set to hit string

		//set damage
		var damageString = atk.damage[1] === "" ? atk.damage[0] : atk.damage[0] + "d" + atk.damage[1];
		var damageBonus = (!atkAlt[1] ? 0 : !isNaN(atkAlt[1]) ? atkAlt[1] : mods[AbilityScores.abbreviations.indexOf(atkAlt[1])]) + (atkAlt[2] !== undefined && atkAlt[2] !== "" && atkAlt[2] === false ? 0 : atkMod);
		damageString += damageBonus === 0 ? "" : damageBonus > 0 ? "+" + damageBonus : damageBonus;
		Value(atkStr + ".Damage", damageString); //set damage string
		AddDmgType(atkStr + ".Damage Type", atk.damage[2]); //set damage type
	}

	thermoM(7/10); //increment the progress dialog's progress

	//add traits & features
	var traitsFld = prefix + "Wildshape." + Fld + ".Traits";
	if (theCrea.wildshapeString) {
		Value(traitsFld, theCrea.wildshapeString)
	} else {
/* 		if (theCrea.languages) {
			var tempString = "\u25C6 Languages: " + theCrea.languages + ".";
			AddString(traitsFld, tempString, true);
		} */
		var sensesToAdd = theCrea.senses.replace(/(\; )?Adv\..+(hearing|sight|smell)/i, ""); //avoid duplicating the information with regards to the keen hearing/sight/smell traits
		if (sensesToAdd) {
			AddString(traitsFld, "\u25C6 Senses: " + sensesToAdd, true); //set senses
		}
		//add resistances & immunities
		if (theCrea.damage_vulnerabilities) {
			var tempString = "\u25C6 Damage Vulnerabilities: " + theCrea.damage_vulnerabilities + ".";
			AddString(traitsFld, tempString, true);
		}
		if (theCrea.damage_resistances) {
			var tempString = "\u25C6 Damage Resistances: " + theCrea.damage_resistances + ".";
			AddString(traitsFld, tempString, true);
		}
		if (theCrea.damage_immunities) {
			var tempString = "\u25C6 Damage Immunities: " + theCrea.damage_immunities + ".";
			AddString(traitsFld, tempString, true);
		}
		if (theCrea.condition_immunities) {
			var tempString = "\u25C6 Condition Immunities: " + theCrea.condition_immunities + ".";
			AddString(traitsFld, tempString, true);
		}
		//add actions
		if (theCrea.actions) {
			for (var t = 0; t < theCrea.actions.length; t++) {
				var actionString = "\u25C6 " + theCrea.actions[t].name + ": ";
				actionString += theCrea.actions[t].description;
				AddString(traitsFld, actionString, true);
			}
		}
		//add traits
		if (theCrea.traits) {
			for (var t = 0; t < theCrea.traits.length; t++) {
				var traitString = "\u25C6 " + theCrea.traits[t].name + ": ";
				traitString += theCrea.traits[t].description;
				AddString(traitsFld, traitString, true);
			}
		}
	}

	thermoM(8/10); //increment the progress dialog's progress

	//convert to metric, if applicable
	if (What("Unit System") === "metric") {
		if (What(traitsFld)) Value(traitsFld, ConvertToMetric(What(traitsFld), 0.5));
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

//add a wild shape to the top most empty place
function AddWildshape(input, inCrea) {
	var prefixA = What("Template.extras.WSfront").split(",").splice(1);
	var inputLC = input.toLowerCase();
	inCrea = inCrea && CreatureList[inCrea] ? inCrea : ParseCreature(inputLC);
	if (!inCrea) return;
	for (var n = 1; n <= 2; n++) {
		for (var p = 0; p < prefixA.length; p++) {
			var prefix = prefixA[p];
			for (var i = 1; i <= 4; i++) {
				var aShp = What(prefix + "Wildshape.Race." + i).toLowerCase();
				var aCrea = n === 1 ? ParseCreature(aShp) : "";
				if (n === 1 && (aShp == inputLC || inCrea == aCrea)) {
					return; //the value was found to already exist
				} else if (n === 2 && (!aShp || aShp.indexOf("make a selection") !== -1)) {
					Value(prefix + "Wildshape.Race." + i, input);
					return;
				}
			}
		}
	};
	//if the wildshape to add was not found and there was no room to add it, add another wild shapes page and add the entry to the top of the new page
	var newPrefix = DoTemplate("WSfront", "Add");
	Value(newPrefix + "Wildshape.Race.1", input);
}

//remove the first instance of the wild shape found
function RemoveWildshape(input) {
	var prefixA = What("Template.extras.WSfront").split(",").splice(1);
	for (var p = 0; p < prefixA.length; p++) {
		var prefix = prefixA[p];
		for (var i = 1; i <= 4; i++) {
			next = tDoc.getField(prefix + "Wildshape.Race." + i);
			if (next.value.toLowerCase().indexOf(input.toLowerCase()) !== -1) {
				next.value = next.defaultValue;
				i = 5;
				p = prefixA.length;
				WildshapeRecalc();
			}
		}
	}
}

//make a menu for wild shape options
function MakeWildshapeMenu() {
	var prefix = getTemplPre(event.target.name, "WSfront", true);

	if (!What("Character Level") || !What("Int")|| !What("Wis")|| !What("Cha")) { //If the character has not been defined enough, the function can be stopped after making a warning-menu
		Menus.wildshape = [{cName : "Please create a character on the 1st page before trying a Wild Shape", cReturn : "nothing#toreport", bEnabled : false}];
		return; //don't do the rest of the function
	}

	//make a list of the current wild shapes entered
	var usedShapes = [];
	var prefixA = What("Template.extras.WSfront").split(",").splice(1);
	for (var p = 0; p < prefixA.length; p++) {
		for (var i = 1; i <= 4; i++) {
			var theFld = What(prefixA[p] + "Wildshape.Race." + i);
			if (!theFld || theFld.toLowerCase() === "make a selection") continue;
			var theShape = ParseCreature(theFld);
			if (theShape) usedShapes.push(theShape);
		}
	}

	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			item.push({
				cName : array[i][0],
				cReturn : array[i][1] + "#" + "nothing"
			});
		}
	};

	var menuLVL2 = function (menu, name, array) {
		var temp = {};
		temp.cName = name[0];
		temp.oSubMenu = [];
		for (var i = 0; i < array.length; i++) {
			temp.oSubMenu.push({
				cName : array[i],
				cReturn : name[1] + "#" + array[i]
			})
		}
		menu.push(temp);
	};

	var menuLVL3 = function (menu, name, array) {
		var temp = [];
		for (var i = 0; i < array.length; i++) {
			temp.push({
				cName : array[i][0],
				cReturn : "add" + "#" + array[i][1],
				bMarked : usedShapes.indexOf(array[i][1]) !== -1
			});
		};
		menu.oSubMenu.push({
			cName : name,
			oSubMenu : temp
		});
	};

	var menuLVL2Ext = function (menu, array, thereturn) {
		var toTest = What("Wildshapes.Remember").split("!#TheListSeparator#!");
		for (var i = 0; i < array.length; i++) {
			menu.oSubMenu.push({
				cName : array[i][0],
				cReturn : thereturn + "#" + array[i][1],
				bMarked : toTest[0] === array[i][1]
			})
		}
	};

	var menuLVL3Ext = function (menu, name, array, thereturn) {
		var toTest = What("Wildshapes.Remember").split("!#TheListSeparator#!");
		var temp = [];
		for (var i = 0; i < array.length; i++) {
			temp.push({
				cName : array[i][0],
				cReturn : thereturn + "#" + name[1] + "#" + array[i][1],
				bMarked : toTest[1] === array[i][1]
			})
		}
		menu.oSubMenu.push({
			cName : name[0],
			oSubMenu : temp,
			bMarked : toTest[0] === name[1]
		});
	};

	var WildshapeMenu = [];

	var allCrea = {
		names : [],
		keys : {}
	};

	for (var crea in CreatureList) {
		var thisCrea = CreatureList[crea];
		if ((!(/^(air|earth|fire|water) elemental$/i).test(crea) && thisCrea.type !== "Beast") || allCrea.keys[thisCrea.name] || testSource(crea, thisCrea, "creaExcl")) {
			continue; //go on to the next creature if the creature is not a beast or its source isn't excluded
		};
		allCrea.keys[thisCrea.name] = crea;
		allCrea.names.push(thisCrea.name);
	};
	allCrea.names.sort();

	var elementals = [];
	var shapesBeast = {
		all : [],
		CR1_4 : [],
		CR1_2 : [],
		CR1 : [],
		CR2 : [],
		CR3 : [],
		CR4 : [],
		CR5 : [],
		CR6 : []
	};

	for (var C = 0; C < allCrea.names.length; C++) {
		var aCrea = allCrea.keys[allCrea.names[C]];
		var theCrea = CreatureList[aCrea];

		if ((/^(air|earth|fire|water) elemental$/i).test(aCrea))  {
			elementals.push([theCrea.name, aCrea]);
			continue; //it is not one of the other things, so just stop here
		};

		//see if the creature has a fly and/or swim speed
		var Spd = theCrea.speed.match(/fly|swim/ig);
		if (Spd) {
			switch (Spd.toLowerCase()) {
				case "fly,swim" :
				case "swim,fly" :
				 Spd = "Fly and Swim speeds";
				 break;
				case "fly" :
				 Spd = "Fly speed";
				 break;
				case "swim" :
				 Spd = "Swim speed";
				 break;
			}
		}

		//select based on challenge Rating
		var CR = theCrea.challengeRating;
		var CRname = false;
		var creaName = theCrea.name;
		switch (CR) {
			case "0" :
			case "1/8" :
			case "1/4" :
			 CRname = "1_4";
			 creaName += " (CR " + CR + (Spd ? ", " + Spd : "") + ")";
			 break;
			case "1/2" :
			 CRname = "1_2";
			 creaName += (Spd ? " (" + Spd + ")" : "");
			 break;
			case "1" :
			case "2" :
			case "3" :
			case "4" :
			case "5" :
			case "6" :
			 CRname = CR;
			 creaName += (Spd ? " (" + Spd + ")" : "");
		};

		//add it to the array of all
		shapesBeast.all.push([theCrea.name + " (CR " + CR + (Spd ? ", " + Spd : "") + ")", aCrea]);

		//add it to the CR specific array
		if (CRname) shapesBeast["CR" + CRname].push([creaName, aCrea]);
	};

	//add all the options for "Add Wild Shape"
	var BeastMenu = {
		cName : "Add Wild Shape",
		oSubMenu : []
	};
	if (CurrentSources.globalExcl.indexOf("M") !== -1) { // the monster manual has been excluded from the sources
		BeastMenu.oSubMenu.push({
			cName : "Be aware: the Monster Manual is excluded from the sources!",
			cReturn : "-",
			bEnabled : false
		});
	};
	menuLVL3(BeastMenu, "All Beasts", shapesBeast.all);
	menuLVL3(BeastMenu, "Elementals", elementals);
	menuLVL3(BeastMenu, "Beasts up to CR 1/4", shapesBeast.CR1_4);
	menuLVL3(BeastMenu, "Beasts of CR 1/2", shapesBeast.CR1_2);
	menuLVL3(BeastMenu, "Beasts of CR 1", shapesBeast.CR1);
	menuLVL3(BeastMenu, "Beasts of CR 2", shapesBeast.CR2);
	menuLVL3(BeastMenu, "Beasts of CR 3", shapesBeast.CR3);
	menuLVL3(BeastMenu, "Beasts of CR 4", shapesBeast.CR4);
	menuLVL3(BeastMenu, "Beasts of CR 5", shapesBeast.CR5);
	menuLVL3(BeastMenu, "Beasts of CR 6", shapesBeast.CR6);
	WildshapeMenu.push(BeastMenu);

	WildshapeMenu.push({cName : "-"}); //add a divider

	//add all the options for "Remove Wild Shape"
	if (usedShapes.length > 0) { //if any shapes are currently present
		menuLVL2(WildshapeMenu, ["Remove Wild Shape", "remove"], usedShapes)
	} else { //if no shapes are present to be removed, add the item, but grey it out
		WildshapeMenu.push({cName : "Remove Wild Shape", cReturn : "nothing", bEnabled : false});
	}

	WildshapeMenu.push({cName : "-"}); //add a divider

	//add the options for wildshape calculation
	var calcMenu = {
		cName : "Calculation options",
		oSubMenu : []
	};
	menuLVL2Ext(calcMenu, [["Use druid's prof. bonus if druid is prof.", "default"]], "wildshapeSelect");
	//add a submenu for the next options
	menuLVL3Ext(calcMenu, ["Use druid's prof. bonus for all prof.", "all_druid"], [["Excluding attacks and expertise", "excluding"], ["Including attacks", "attacks"], ["Including expertise", "expertise"], ["Including attacks and expertise", "attacks_expertise"]], "wildshapeSelect");
	//add two more options
	menuLVL2Ext(calcMenu, [["Use creature's prof. bonus for all prof.", "all_creature"], ["Only compare based on total number", "by_the_numbers"]], "wildshapeSelect");

	WildshapeMenu.push(calcMenu);

	//add options to re-calculate and to reset
	menuLVL1(WildshapeMenu, [["-", "-"], ["Re-calculate the Wild Shapes", "recalculate"], ["Order the Wild Shapes alphabetically (re-calculates)", "order"], ["Reset all the Wild Shapes on this page", "reset"], ["-", "-"], ["Add extra 'Wild Shapes' page", "add page"], [(prefix ? "Remove" : "Hide") + " this 'Wild Shapes' page", "remove page"]]);

	Menus.wildshape = WildshapeMenu;
};

//call the wildshape menu and do something with the results
function WildshapeOptions() {
	var MenuSelection = getMenu("wildshape");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;
	var prefix = getTemplPre(event.target.name, "WSfront", true);
	switch (MenuSelection[0]) {
	 case "recalculate" :
		WildshapeRecalc();
		break;
	 case "order" :
		WildshapeRecalc("order");
		break;
	 case "reset" :
		calcStop();
		tDoc.resetForm([prefix + "Wildshape.Race"]);
		break;
	 case "add" :
		AddWildshape(CreatureList[MenuSelection[1]].name, MenuSelection[1]);
		break;
	 case "remove" :
		RemoveWildshape(MenuSelection[1]);
		break;
	 case "wildshapeselect" :
		if (MenuSelection[1] === "all_druid") {
			var theValue = MenuSelection[1] + "!#TheListSeparator#!" + MenuSelection[2];
		} else {
			var theValue = MenuSelection[1] + "!#TheListSeparator#!" + "nothing";
		}
		if (What("Wildshapes.Remember") !== theValue) {
			Value("Wildshapes.Remember", theValue);
			WildshapeRecalc();
		}
		break;
	 case "add page" :
		DoTemplate("WSfront", "Add");
		break;
	 case "remove page" :
		DoTemplate("WSfront", "Remove", prefix);
		break;
	}
}

//re-calculate all the wild shapes
function WildshapeRecalc(order) {
	// first make sure we have the right calculated values (if function is invoked when changes are made after a calcStop)
	tDoc.calculateNow();

	// Start progress bar
	var thermoTxt = thermoM("Re-calculating the wild shapes...");

	var prefixA = What("Template.extras.WSfront").split(",").splice(1);
	var theFields = [];
	var theFieldsNames = [];
	//first add all the wildshapes to an array and reset all the fields
	for (var p = 0; p < prefixA.length; p++) {
		var prefix = prefixA[p];
		for (var i = 1; i <= 4; i++) {
			var theFld = prefix + "Wildshape.Race." + i;
			theFieldsNames.push(theFld); //add all the fields to the array, so we have an exhaustive list of all the options
			var theValue = What(theFld);
			if (theValue && theValue.toLowerCase() !== "make a selection") {
				theFields.push(theValue);
			}
		}
		tDoc.resetForm([prefix + "Wildshape.Race"]);
		thermoM(p/(prefixA.length * 4 + prefixA.length)); //increment the progress dialog's progress
	}
	//order the array, if so selected
	if (order) theFields.sort();

	//now add all the wildshapes in the array to the empty fields
	for (var F = 0; F < theFields.length; F++) {
		Value(theFieldsNames[F], theFields[F]);
		thermoM((F + prefixA.length)/(theFields.length + prefixA.length)); //increment the progress dialog's progress
	}
	// Stop progress bar
	thermoM(thermoTxt, true);
}

//set the drop-down menus for wildshape selection fields
function SetWildshapeDropdown(forceTooltips) {
	var tempString = "Type (or select) the name of the creature you want to calculate a Wild Shape for.";
	tempString += "\n\n" + toUni("Not auto-updated") + "\nThe generated stats will not auto-update once you change something on the first page! They will only update when your druid level changes. You can have them re-calculated using the \"Wild Shape Options\" button at the top of this page.";
	tempString += "\n\n" + toUni("First create the character") + "\nNote that nothing will happen if no character is defined on the 1st page.";
	tempString += "\n\n" + toUni("Calculation is wrong") + "\nThe Wild Shape rules are open for interpertation and your DM might not approve with the way it is done here. You can change the calculation of proficiencies using the \"Wild Shape Options\" button at the top of this page.\nYou can always change the outcome yourself, because all of the fields are editable.";

	var theList = [];

	for (var key in CreatureList) {
		if ((CreatureList[key].type === "Beast" && eval(CreatureList[key].challengeRating) <= 6) || (/^(air|earth|fire|water) elemental$/i).test(key)) {
			if (testSource(key, CreatureList[key], "creaExcl") || theList.indexOf(CreatureList[key].name) !== -1) continue;
			theList.push(CreatureList[key].name);
		}
	}
	theList.sort();

	theList.unshift("");
	if (!typePF) theList.unshift("Make a Selection");

	var applyItems = tDoc.getField("Wildshapes.Settings").submitName !== theList.toSource();
	if (applyItems) tDoc.getField("Wildshapes.Settings").submitName = theList.toSource();

	var WSfrontA = What("Template.extras.WSfront").split(",");
	for (var A = 0; A < WSfrontA.length; A++) {
		for (var i = 1; i <= 4; i++) {
			var theFld = WSfrontA[A] + "Wildshape.Race." + i;
			var theFldVal = What(theFld);
			if (applyItems) {
				tDoc.getField(theFld).setItems(theList);
				Value(theFld, theFldVal, tempString);
			} else if (forceTooltips) {
				AddTooltip(theFld, tempString);
			}
		}
	}
}

//set the drop-down menus for companion race
function SetCompDropdown(forceTooltips) {
	var tempString = "Type (or select) the name of the race you want to have on this page. Note that first a list of player races is given, followed by an alphabetical list of creatures. You are not limited by the names in the list. Just typing \"Drow\" will also be recognized, for example.";
	tempString += "\n\n" + toUni("Selecting a creature") + "\nAll information of the creature will automatically be added. This includes ability scores, proficiencies, senses, weapons, etc. You can change the things afterwards.\nBecause not all creatures need the same amount of space for all their feature text,some fields may overflow. You can manually edit these fields so that everything is visible when printed (e.g. move things to the \"Noted\" below).";
	tempString += "\n\n" + toUni("Selecting a player race") + "\nAll the same things as selecting a player race on the first page will happen, with the exception that no limited feature or ability DC is added as there is no room for that."
	tempString += "\n\n" + toUni("Changing the race") + "\nIf you entered a race that was recognized and then change the entry to something that is not recognized, all the features and abilities of the recognized race will remain in place. This way, you can change the name of the race to something, while keeping the stats of something else. For example, you can choose \"Frog\" and then change it to \"Toad\", creating a toad with the stats of a frog.";

	var theList = [""];

	for (var key in RaceList) {
		if (testSource(key, RaceList[key], "racesExcl")) continue;
		var raceNm = RaceList[key].sortname ? RaceList[key].sortname : RaceList[key].name.capitalize();
		if (theList.indexOf(raceNm) === -1) theList.push(raceNm);
	}
	theList.sort();

	var theListC = [""];
	for (var key in CreatureList) {
		if (testSource(key, CreatureList[key], "creaExcl")) continue;
		if (theListC.indexOf(CreatureList[key].name) === -1) theListC.push(CreatureList[key].name);
	}
	theListC.sort();

	theList = theList.concat(theListC);

	var applyItems = tDoc.getField("Companion.Remember").submitName !== theList.toSource();
	if (applyItems) tDoc.getField("Companion.Remember").submitName = theList.toSource();

	var AScompA = What("Template.extras.AScomp").split(",");
	for (var A = 0; A < AScompA.length; A++) {
		var theFld = AScompA[A] + "Comp.Race";
		var theFldVal = What(theFld);
		if (applyItems) {
			tDoc.getField(theFld).setItems(theList);
			Value(theFld, theFldVal, tempString);
		} else if (forceTooltips) {
			AddTooltip(theFld, tempString);
		}
	}
};

//Make menu for the button on the companion page and parse it to Menus.companion
function MakeCompMenu() {
	var prefix = getTemplPre(event.target.name, "AScomp", true);
	var usingRevisedRanger = ClassList.rangerua && !testSource("rangerua", ClassList.rangerua, "classExcl");
	var usingArtificer = SourceList["UA:A"] && CurrentSources.globalExcl.indexOf("UA:A") === -1;
	var menuLVL2 = function (menu, name, array) {
		var temp = {};
		var enabled = name[1] === "change" ? What(prefix + "Comp.Race") : true;
		temp.cName = name[0];
		if (!enabled) {
			temp.bEnabled = enabled;
		} else {
			temp.oSubMenu = [];
			for (var i = 0; i < array.length; i++) {
				if (name[1] === "visible") {
					var toShow = eval(What(prefix + "Companion.Layers.Remember"));
					var subMarked = array[i][1] === "comp.img" ? toShow[0] : toShow[1];
				} else if (name[1] === "change") {
					var subMarked = What(prefix + "Companion.Remember") === array[i][1];
				} else {
					var subMarked = What(prefix + "Companion.Remember") === name[1] && CurrentCompRace[prefix].known === array[i][1];
				}
				temp.oSubMenu.push({
					cName : array[i][0],
					cReturn : name[1] + "#" + array[i][1],
					bMarked : subMarked,
					bEnabled : array[i][1] === "no-mm" ? false : name[1] === "change" && (array[i][1] === "companion" || array[i][1] === "companionrr") && CurrentCompRace[prefix] && CurrentCompRace[prefix].typeFound !== "creature" ? false : true
				})
			}
		}
		menu.push(temp);
	};
	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			item.push({
				cName : array[i][0],
				cReturn : array[i][1] + "#" + "nothing"
			});
		}
	};

	var CompMenu = [], familiars = [], chainPact = [], mounts = [], steeds = [], companions = [], companionRR = [], mechanicalServs = [];
	var change = [
		["Into a familiar (Find Familiar spell)", "familiar"],
		["Into a Pact of the Chain familiar (Warlock feature)", "pact_of_the_chain"],
		["Into a mount (Find Steed spell)", "mount"]
	].concat(!SpellsList["find greater steed"] ? [] : [
		["Into a greater mount (Find Greater Steed spell)", "steed"]
	]).concat(!usingArtificer ? [] : [
		["Into a Mechanical Servant (Artificer feature)", "mechanicalserv"]
	]).concat([
		["Into a Ranger's Companion", usingRevisedRanger ? "companionrr" : "companion"],
		["-", "-"],
		["Reset to normal", "reset"]
	]);

	var visOptions = [
		["Show box for Companion's Appearance", "comp.img"],
		["Show Equipment section", "comp.eqp"]
	];

	//make a list of all the creatures
	for (var aCrea in CreatureList) {
		var theCrea = CreatureList[aCrea];
		if (testSource(aCrea, theCrea, "creaExcl")) continue; // test if the creature or its source isn't excluded
		if (theCrea.type === "Beast" && theCrea.size >= 3 && eval(theCrea.challengeRating) <= 1/4) {
			companions.push([theCrea.name, aCrea]);
		} else if (theCrea.type === "Beast" && theCrea.size === 2 && eval(theCrea.challengeRating) <= 2) {
			mechanicalServs.push([theCrea.name, aCrea]);
		};
		switch (theCrea.companion) {
			case "familiar_not_al" :
			if (isDisplay("DCI.Text")) break;
			case "familiar" :
				familiars.push([theCrea.name, aCrea]);
			case "pact_of_the_chain" :
				chainPact.push([theCrea.name, aCrea]);
				break;
			case "mount" :
				mounts.push([theCrea.name, aCrea]);
				break;
			case "steed" :
				steeds.push([theCrea.name, aCrea]);
				break;
			case "companion" :
				companionRR.push([theCrea.name, aCrea]);
				break;
		};
	};
	familiars.sort();
	chainPact.sort();
	mounts.sort();
	steeds.sort();
	companions.sort();
	companionRR.sort();
	mechanicalServs.sort();

	var noSrd = CurrentSources.globalExcl.indexOf("SRD") !== -1;
	var existMm = SourceList.M;
	if ((existMm && CurrentSources.globalExcl.indexOf("M") && noSrd) || (!existMm && noSrd)) { // the monster manual & SRD have been excluded from the sources
		var reminder = ["Be aware: the SRD " + (existMm ? "and Monster Manual are" : "is") + " excluded from the sources!", "no-mm"];
		familiars.unshift(reminder);
		chainPact.unshift(reminder);
		mounts.unshift(reminder);
		steeds.unshift(reminder);
		companions.unshift(reminder);
		companionRR.unshift(reminder);
		mechanicalServs.unshift(reminder);
	};

	menuLVL2(CompMenu, ["Create familiar (Find Familiar spell)", "familiar"], familiars);
	menuLVL2(CompMenu, ["Create familiar (Warlock Pact of the Chain)", "pact_of_the_chain"], chainPact);
	menuLVL2(CompMenu, ["Create mount (Find Steed spell)", "mount"], mounts);
	if (SpellsList["find greater steed"]) menuLVL2(CompMenu, ["Create greater mount (Find Greater Steed spell)", "steed"], steeds);
	if (usingArtificer) menuLVL2(CompMenu, ["Create Mechanical Servant (Artificer feature)", "mechanicalserv"], mechanicalServs);
	if (usingRevisedRanger) {
		menuLVL2(CompMenu, ["Create Revised Ranger's Companion", "companionrr"], companionRR);
	} else {
		menuLVL2(CompMenu, ["Create Ranger's Companion", "companion"], companions);
	};

	CompMenu.push({cName : "-"}); //add a divider
	menuLVL2(CompMenu, ["Change current creature", "change"], change);
	CompMenu.push({cName : "-"}); //add a divider
	menuLVL2(CompMenu, ["Change visible sections", "visible"], visOptions);
	menuLVL1(CompMenu, [["-", "-"], ["Reset this Companion page", "reset"], ["-", "-"], ["Add extra 'Companion' page", "add page"], [(prefix ? "Remove" : "Hide") + " this 'Companion' page", "remove page"]]);

	Menus.companion = CompMenu;
};

//call the companion menu and do something with the results
function CompOptions() {
	var MenuSelection = getMenu("companion");
	if (!MenuSelection || MenuSelection[0] == "nothing") return
	var prefix = getTemplPre(event.target.name, "AScomp", true);

	if (MenuSelection[0] === "reset") {
		// Start progress bar and stop calculations
		var thermoTxt = thermoM("Resetting the companion page...");
		calcStop();

		tDoc.resetForm([prefix + "Comp", prefix + "Text.Comp", prefix + "BlueText.Comp", prefix + "Cnote", prefix + "Companion"]); //reset all the fields

		thermoM(0.5); // Increment the progress bar

		ApplyAttackColor("", "", "Comp.", prefix); //reset the colour of the attack boxes
		SetHPTooltip("reset", true);
		ShowCompanionLayer(prefix);
		ClearIcons(prefix + "Comp.img.Portrait", true); //reset the appearance image

		thermoTxt = thermoM("Applying...", false); // Change the progress bar text
	} else if (MenuSelection[0] === "add page") {
		DoTemplate("AScomp", "Add");
	} else if (MenuSelection[0] === "remove page") {
		//remove the prefix, if found, from the array in the remember field
		DoTemplate("AScomp", "Remove", prefix);
	} else if (MenuSelection[0] === "visible") {
		var toShow = eval(What(prefix + "Companion.Layers.Remember"));
		if (MenuSelection[1] === "comp.img") {
			toShow[0] = !toShow[0];
		} else if (MenuSelection[1] === "comp.eqp") {
			toShow[1] = !toShow[1];
		}
		Value(prefix + "Companion.Layers.Remember", toShow.toSource());
		ShowCompanionLayer(prefix);
	} else {
		if (MenuSelection[0] === "change" && MenuSelection[1] === "reset") {
			resetCompTypes(prefix);
		} else {
			if (MenuSelection[0] !== "change") {
				Value(prefix + "Comp.Race", CreatureList[MenuSelection[1]].name);
			}
			var type = MenuSelection[0] !== "change" ? MenuSelection[0] : MenuSelection[1];
			changeCompType(type, prefix);
		}
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

//change the creature on the companion page into the chosen form (familiar, mount, or pact of the chain familiar)
function changeCompType(inputType, prefix) {
	var oldType = What(prefix + "Companion.Remember");
	if (oldType) resetCompTypes(prefix);
	Value(prefix + "Companion.Remember", inputType); //set this so it can be called upon later
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the companion to a predefined type...");
	calcStop();

	// a function to add the languages
	var addCharLangArr = function() {
		var creaLangs = What(prefix + "Comp.Use.Features").match(/\u25C6 languages:.*/i);
		if (creaLangs) creaLangs = creaLangs[0].replace(/\.$/, "");
		var charLanguages = [];
		for (var i = 1; i <= FieldNumbers.langstools; i++) {
			var charFld = What("Language " + i);
			if (charFld && (!creaLangs || creaLangs.toLowerCase().indexOf(charFld.toLowerCase()) === -1)) {
				charLanguages.push(charFld);
			};
		};
		if ((/mount|steed/i).test(inputType) && charLanguages.length > 1) {
			charLanguages = [AskUserOptions("Character's language the steed knows", "Find Greater Steed companion", charLanguages, "radio")];
		};
		var charLangs = charLanguages.length === 0 ? "" : (creaLangs ? "; and understands, but doesn't speak," : "\u25C6 Languages: Understands, but doesn't speak,");
		for (var i = 0; i < charLanguages.length; i++) {
			charLangs += i !== 0 && charLanguages.length > 2 ? ", " : " ";
			charLangs += i !== 0 && i === charLanguages.length - 1 ? "and " : "";
			charLangs += charLanguages[i];
		};
		if (creaLangs && charLangs) {
			ReplaceString(prefix + "Comp.Use.Features", creaLangs + charLangs, true, creaLangs, true);
		} else if (charLangs) {
			AddString(prefix + "Comp.Use.Features", charLangs + ".", true);
		};
	};

	switch (inputType) {
	 case "familiar" :
		tDoc.resetForm([prefix + "Comp.Use.Attack"]); // familiars can't make attacks
	 case "pact_of_the_chain" :
		Value(prefix + "Comp.Type", "Familiar");
		if (CurrentCompRace[prefix].type === "Beast") changeCompDialog(prefix); //change the type, but only if just a beast
		break;
	 case "companionrr" :
	 case "companion" :
		Value(prefix + "Comp.Type", "Companion");
		break;
	 case "mount" :
	 case "steed" :
		Value(prefix + "Comp.Type", "Mount");
		changeCompDialog(prefix); // change the type

		//add the new language options to the mount's features
		addCharLangArr();

		//set the Intelligence to 6 if less than 6
		var IntFld = prefix + "Comp.Use.Ability.Int.Score";
		if (What(IntFld) < 6) Value(IntFld, 6);
		break;
	 case "mechanicalserv" :
		Value(prefix + "Comp.Type", "Servant");
		Value(prefix + "Comp.Desc.MonsterType", "Construct");

		//add the new language options
		addCharLangArr();

		//add the new poison damage immunity
		var creaDamI = What(prefix + "Comp.Use.Features").match(/\u25C6 damage immunities:.*/i);
		if (!creaDamI || !(/poison/i).test(creaDamI)) {
			var newDamI = (creaDamI ? creaDamI[0].replace(/\.$/, ", ") : "\u25C6 Damage Immunities: ") + "poison.";
			if (creaDamI) {
				ReplaceString(prefix + "Comp.Use.Features", newDamI, true, creaDamI[0], true);
			} else {
				AddString(prefix + "Comp.Use.Features", newDamI, true);
			};
		};

		//add the new poisoned and charmed condition immunity
		var creaConI = What(prefix + "Comp.Use.Features").match(/\u25C6 condition immunities:.*/i);
		if (!creaConI) {
			var newConI = "\u25C6 Condition Immunities: charmed, poisoned.";
			AddString(prefix + "Comp.Use.Features", newConI, true);
		} else if (!(/poisoned/i).test(creaConI) || !(/charmed/i).test(creaConI)) {
			newConI = creaConI[0].replace(/\.$/, ", ");
			if (!(/charmed/i).test(creaConI)) {
				newConI += "charmed";
				var goCo = true;
			}
			if (!(/poisoned/i).test(creaConI)) newConI += (goCo ? ", " : "") + "poisoned";
			newConI += ".";
			ReplaceString(prefix + "Comp.Use.Features", newConI, true, creaConI[0], true);
		};

		//add the 60 ft darkvision, if not already there, or upgrade it to 60 ft
		var creaSens = What(prefix + "Comp.Use.Senses");
		var newDarkv = What("Unit System") === "metric" ? "Darkvision 18 m" : "Darkvision 60 ft";
		if (!(/darkvision \d+.?\d*.?(ft|m)/i).test(creaSens)) {
			AddString(prefix + "Comp.Use.Senses", newDarkv, "; ");
		} else if (!(/darkvision (60.?ft|18.?m)/i).test(creaSens)) {
			var darkvis = creaSens.match(/darkvision \d+.?\d*.?(ft|m)/i)[0];
			if (parseFloat(darkvis.match(/\d+/)[0]) < (What("Unit System") === "metric" ? 18 : 60)) {
				ReplaceString(prefix + "Comp.Use.Senses", newDarkv, true, darkvis, true);
			}
		};
		break;
	 default :
		return; //don't do the rest of this function if inputType doesn't match one of the above
	};

	//add a string in the creature's feature section
	AddString(prefix + "Comp.Use.Features", compString[inputType].featurestring, true);

	//make the string for the spell/ability explanation
	AddString(prefix + "Cnote.Left", compString[inputType].string, true);

	//add any actions this spell/companion gives the character
	for (var i = 0; i < compString[inputType].actions.length; i++) {
		AddAction(compString[inputType].actions[i][0], compString[inputType].actions[i][1], compString[inputType].actionTooltip);
	};
	thermoM(0.7);
	//add level-dependent things if this is a ranger's companion
	if (inputType === "companion") {
		UpdateRangerCompanions();
	} else if (inputType === "companionrr") {
		UpdateRevisedRangerCompanions();
		if (IsNotImport) {
			app.alert({
				cMsg : toUni("Pick Two Skills") + "\nThe Ranger's Animal Companion that you have just added, gains proficiency with two additional skills as those already selected. Because there is no automation for selecting these proficiencies, please do so manually.\n\n" + toUni("Ability Score Improvements") + "\nThe Ranger's Animal Companion gains Ability Score Improvements whenever your character gains them. There is no automation for adding these either, so please don't forget to increase the ability scores for the animal companion when you get the reminder pop-up. Also, remember that any DCs for abilities that the beast possesses are based on ability scores and that they might need to be manually changed when changing the ability scores.\nThe 'Notes' section on the companion page automatically keeps track of how many points you can increase the ability scores and what the base value of those scores are according to the Monster Manual.",
				nIcon : 3,
				cTitle : "Don't forget the Skills and Ability Score Improvements!"
			});
		}
	}
	thermoM(thermoTxt, true); // Stop progress bar
};

//change the type of the creature on the companion page to one of either Celestial, Fey, or Fiend
function changeCompDialog(prefix) {
	if (!IsNotImport) return;
	//The dialog for setting the pages to print
	var theTxt = "A familiar or mount's type changes from beast to either celestial, fey, or fiend. Please select one.";
	var theDialog = {
		//variables to be set by the calling function
		bType : "Celestial",

		//when starting the dialog
		initialize : function (dialog) {
		},

		//when pressing the ok button
		commit : function (dialog) {
			var oResult = dialog.store();
			if (oResult["rCel"]) {
				this.bType = "Celestial";
			} else if (oResult["rFey"]) {
				this.bType = "Fey";
			} else if (oResult["rFie"]) {
				this.bType = "Fiend";
			}
		},

		description : {
			name : "Choose the type of your familiar/mount",
			elements : [{
				type : "view",
				elements : [{
					type : "static_text",
					item_id : "head",
					alignment : "align_fill",
					font : "heading",
					bold : true,
					height : 21,
					char_width : 30,
					name : "Choose the type of your familiar/mount"
				}, {
					type : "static_text",
					item_id : "txt0",
					wrap_name : true,
					alignment : "align_fill",
					font : "dialog",
					char_width : 30,
					name : theTxt
				}, {
					type : "cluster",
					align_children : "align_distribute",
					elements : [{
						type : "radio",
						item_id : "rCel",
						group_id : "Type",
						name : "Celestial"
					}, {
						type : "radio",
						item_id : "rFey",
						group_id : "Type",
						name : "Fey"
					}, {
						type : "radio",
						item_id : "rFie",
						group_id : "Type",
						name : "Fiend"
					}, ]
				}, {
					type : "gap",
					height : 8
				}, {
					type : "ok"
				}, ]
			}, ]
		}
	};

	app.execDialog(theDialog);

	Value(prefix + "Comp.Desc.MonsterType", theDialog.bType);
}

//update the wild shape header and all the different shapes on the all the wildshape pages
function WildshapeUpdate(inputArray) {
	var prefixA = What("Template.extras.WSfront").split(",");
	if (inputArray && inputArray[1]) {
		var wlvl = inputArray[0];
		var wUses = inputArray[1];
		var wRec = inputArray[2];
		var useString = isNaN(wUses) && (wUses.indexOf("\u221E") !== -1 || wUses.toLowerCase().indexOf("unlimited") !== -1) ? "Unlimited" : wUses + (!isNaN(wUses) ? "\u00D7" : "") + " per " + wRec;
		var wLimit = inputArray[3].match(/CR.+;/i);
		wLimit = wLimit ? "max " + wLimit[0].replace(";", "") : "";
		var wDur = inputArray[3].match(/\d+ hours?/i);
		wDur = wDur ? wDur[0] : "";
	} else {
		var useString = What("Wildshapes.Info.Uses");
		var wLimit = What("Wildshapes.Info.Limitations");
		var wDur = What("Wildshapes.Info.Duration");
		prefixA.splice(prefixA.indexOf(""), 1);
	}
	for (var p = 0; p < prefixA.length; p++) {
		var prefix = prefixA[p];
		if (useString) {
			Value(prefix + "Wildshapes.Info.Uses", useString);
			Value(prefix + "Wildshapes.Info.Limitations", wLimit);
			Value(prefix + "Wildshapes.Info.Duration", wDur);
		} else {
			tDoc.resetForm([prefix + "Wildshapes.Info"]);
		};
	};
	//now recalculate all the wild shapes if not just adding a new sheet (i.e. inputArray === undefined)
	if (inputArray !== undefined) WildshapeRecalc();
}

//change the font of all fields to this
function ChangeFont(newFont, oldFont) {
	newFont = newFont ? newFont : (!typePF ? "SegoePrint" : "SegoeUI");
	oldFont = oldFont ? oldFont : tDoc.getField((tDoc.info.AdvLogOnly ? "AdvLog." : "") + "Player Name").textFont;
	var aTest = newFont === (!typePF ? "SegoePrint" : "SegoeUI") ? true : testFont(newFont);
	if (!aTest || newFont == oldFont) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying the " + newFont + " font...");
	calcStop();

	var FldNums = tDoc.numFields;
	for (var F = 0; F < FldNums; F++) {
		var Fname = tDoc.getNthFieldName(F);
		var Fld = tDoc.getField(Fname);
		if (!(/spells\.|Template\.extras/).test(Fname) && Fld.textFont === oldFont && (Fld.type !== "text" || Fld.richText === false)) {
			Fld.textFont = newFont;
		}
		thermoM((F+1)/FldNums); //increment the progress dialog's progress
	}

	thermoM(thermoTxt, true); // Stop progress bar
}

//change the colorscheme that is used for the Ability Save DC. Choose from: "red", "green", ""; The "DC" can be either 1 or 2.
function ApplyDCColorScheme(colour, DC) {
	if (typePF || (!colour && What("Color.DC") === tDoc.getField("Color.DC").defaultValue)) return; //don't do this function in the Printer-Friendly version or if resetting with the default colour
	//stop the function if the input color is not recognized
	colour = colour && isNaN(colour) ? colour.toLowerCase() : What("Color.DC").split(",")[DC - 1];
	if (colour && colour !== "same as headers" && colour !== "same as dragon heads" && !ColorList[colour]) {
		return;
	}

	var colorGo = What("Color.DC").split(",");
	var DCstart = DC ? DC : 1;
	var DCstop = DC ? DC : 2;

	if (DC && colour) {
		//set the color of the DC that was given in the input
		colorGo[DC - 1] = colour;
	} else if (colour) { //if no DC is given, assume both need to be set to the same
		colorGo = [colour, colour];
	}

	//set the chosen colors to a place it can be found again
	Value("Color.DC", colorGo);

	for (var dc = DCstart; dc <= DCstop; dc++) {
		var DCcolor = colorGo[dc - 1];
		switch (DCcolor) {
			case "same as headers" :
				DCcolor = What("Color.Theme");
				break;
			case "same as dragon heads" :
				DCcolor = What("Color.DragonHeads");
				break;
		}
		if (!ColorList[DCcolor]) {
			continue; //if not a recognized colour, continue with the next
		}
		var DCimg = tDoc.getField("SaveIMG.SaveDC." + DCcolor).buttonGetIcon();
		tDoc.getField("Image.SaveDC." + dc).buttonSetIcon(DCimg);
		var DCarrow = tDoc.getField("SaveIMG.Arrow." + DCcolor).buttonGetIcon();
		tDoc.getField("Image.SaveDCarrow." + dc).buttonSetIcon(DCarrow);
		tDoc.getField("Spell DC " + dc + " Mod").textColor = ColorList[DCcolor].RGB;
	}
}

// Make menu for the button on each Action line and parse it to Menus.actions
function MakeActionMenu_ActionOptions(MenuSelection, FldNm, itemNmbr) {
	var actionMenu = [];
	if (!itemNmbr) itemNmbr = parseFloat(event.target.name.slice(-2));
	if (!FldNm) FldNm = event.target.name.match(/bonus action|reaction|action/i)[0];
	var type = FldNm.toLowerCase();
	FldNm = FldNm + " ";
	var maxNmbr = type === "action" ? FieldNumbers.trueactions : FieldNumbers.actions;
	var theField = What(FldNm + itemNmbr);
	var noUp = itemNmbr === 1;
	var noDown = itemNmbr === maxNmbr;

	if (!MenuSelection || MenuSelection === "justMenu") {
		// a function to add the other items
		var menuLVL1 = function (array) {
			for (i = 0; i < array.length; i++) {
				actionMenu.push({
					cName : array[i][0],
					cReturn : "action#" + array[i][1],
					bEnabled : array[i][2] !== undefined ? array[i][2] : true
				});
			}
		};

		var menuArray = [
			["Move up" + (itemNmbr === (maxNmbr - 5) ? " (to first page)" : ""), "up", !noUp],
			["Move down" + (itemNmbr === (maxNmbr - 6) ? " (to overflow page)" : ""), "down", !noDown],
			["-", "-"],
			["Insert empty " + type, "insert", noDown || !theField ? false : true],
			["Delete item", "delete"],
			["Clear item", "clear"]
		];
		if (type === "action" && (!typePF || itemNmbr > (maxNmbr - 6))) {
			menuArray = menuArray.concat([
				["-", "-"],
				["Swap with opposing field", "opposite"]
			]);
		}
		menuLVL1(menuArray);
		Menus.actions = actionMenu;
		if (MenuSelection == "justMenu") return;
	}
	var MenuSelection = MenuSelection ? MenuSelection : getMenu("actions");
	if (!MenuSelection || MenuSelection[0] == "nothing" || MenuSelection[0] != "action") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying action menu option...");
	calcStop();

	switch (MenuSelection[1]) {
		case "up" :
			if (noUp) return;
		case "down" :
			if (MenuSelection[1] == "down" && noDown) return;
		case "opposite":
			thermoTxt = thermoM("Moving the " + type + " " + MenuSelection[1] + "...", false);
			// Get the other fields
			var otherNmbr = MenuSelection[1] == "down" ? itemNmbr + 1 : MenuSelection[1] == "up" ? itemNmbr - 1 :
				// swap with opposite, first see if on overflow page and which side
				itemNmbr > maxNmbr - 3 ? itemNmbr - 3 : itemNmbr > maxNmbr - 6 && itemNmbr < maxNmbr - 3 ? itemNmbr + 3 :
				// swap with opposite on 1st page, see which side
				itemNmbr > (maxNmbr - 6) / 2 ? itemNmbr - ((maxNmbr - 6) / 2) : itemNmbr - ((maxNmbr + 6) / 2);
			// Now swap the fields
			copyField(FldNm + itemNmbr, FldNm + otherNmbr, { noCalc : true }, true);
			break;
		case "insert" :
			ActionInsert(type, itemNmbr);
			break;
		case "delete" :
			ActionDelete(type, itemNmbr);
			break;
		case "clear" :
			Value(FldNm + itemNmbr, "", "", "");
			break;
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

function AddAction(actiontype, action, actiontooltip, replaceThis, replaceMatch) {
	var field = (/bonus/i).test(actiontype) ? "Bonus Action " : (/reaction/i).test(actiontype) ? "Reaction " : "Action ";
	var numberOfFields = field === "Action " ? FieldNumbers.trueactions : FieldNumbers.actions;
	// first loop through all to see if it isn't already known
	// also check if there is a match if we are trying to replace something
	var doReplace = false;
	for (var i = 1; i <= numberOfFields; i++) {
		var setVal = How(field + i).split("#!#");
		if (replaceThis && (setVal[0] == replaceThis || (replaceMatch && What(field + i).toLowerCase().indexOf(replaceThis.toLowerCase()) !== -1))) doReplace = i;
		if (setVal[0] == action) {
			if (actiontooltip) { // add the extra source
				var tooltips = setVal.slice(1);
				if (tooltips.indexOf(actiontooltip) == -1) {
					tooltips = tooltips.concat([actiontooltip]);
					AddTooltip(
						field + i,
						formatMultiList('The "' + action + '" ' + field.toLowerCase() + "was gained from:", tooltips),
						setVal.concat([actiontooltip]).join("#!#")
					);
				}
			}
			return;
		}
	}
	// set the new action to its field
	for (var i = 1; i <= numberOfFields; i++) {
		var actFld = tDoc.getField(field + i);
		if ((doReplace && doReplace === i) || (!doReplace && actFld.value === "")) {
			actFld.value = action;
			actFld.userName = actiontooltip ? formatMultiList('The "' + action + '" ' + field.toLowerCase() + "was gained from:", actiontooltip) : "";
			actFld.submitName = actiontooltip ? [action, actiontooltip].join("#!#") : action;
			return;
		}
	}
};

function RemoveAction(actiontype, action, actiontooltip) {
	var field = (/bonus/i).test(actiontype) ? "Bonus Action " : (/reaction/i).test(actiontype) ? "Reaction " : "Action ";
	var numberOfFields = field === "Action " ? FieldNumbers.trueactions : FieldNumbers.actions;
	for (var i = 1; i <= numberOfFields; i++) {
		var actFldVal = What(field + i);
		var setVal = How(field + i).split("#!#");
		if ((typeof action == "object" && (action).test(actFldVal)) || (typeof action == "string" && setVal[0] == action)) {
			if (setVal.length < 3 || !actiontooltip) {
				ActionDelete(clean(field).toLowerCase(), i);
			} else if (actiontooltip) {
				var tooltips = setVal.slice(1);
				tooltips.splice(tooltips.indexOf(actiontooltip), 1);
				AddTooltip(
					field + i,
					formatMultiList('The "' + setVal[0] + '" ' + field.toLowerCase() + "was gained from:", tooltips),
					[setVal[0]].concat(tooltips).join("#!#")
				);
			}
			return;
		};
	};
};

//insert a Action at the position wanted
function ActionInsert(type, itemNmbr) {
	var maxNmbr = type === "action" ? FieldNumbers.trueactions : FieldNumbers.actions;
	var FldNm = type.capitalize() + " ";
	var Field = FldNm + itemNmbr;

	//stop the function if the selected slot is already empty
	if (What(Field) === "" || itemNmbr === maxNmbr) return;

	//look for the first empty slot below the slot
	var endslot = false;
	for (var i = itemNmbr + 1; i <= maxNmbr; i++) {
		if (What(FldNm + i) === "") {
			endslot = i;
			break;
		};
	};

	//only continue if an empty slot was found in the fields
	if (!endslot) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Inserting empty " + type + "...");
	calcStop();

	//cycle to the slots starting with the empty one and add the values of the one above
	for (var i = endslot; i > itemNmbr; i--) {
		copyField(FldNm + (i - 1), FldNm + i, { noCalc : true });
	};

	//empty the selected slot
	Value(Field, "", "", "");

	thermoM(thermoTxt, true); // Stop progress bar
};

//delete a Action at the position wanted and move the rest up
function ActionDelete(type, itemNmbr) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Deleting " + type + "...");
	calcStop();

	var FldNm = type.capitalize() + " ";
	// var Field = FldNm + itemNmbr;
	var maxNmbr = type === "action" ? FieldNumbers.trueactions : FieldNumbers.actions;
	if (!typePF && type === "action" && itemNmbr < (maxNmbr- 6) / 2) {
		var maxNmbr = (maxNmbr - 6) / 2;
	} else {
		maxNmbr = itemNmbr > (maxNmbr - 6) || What(FldNm + (maxNmbr - 6)) ? maxNmbr : maxNmbr - 6; //stop at the end of the first page if last one on first page is empty
	};

	//move every line up one space, starting with the line below the selected line
	for (var i = itemNmbr; i < maxNmbr; i++) {
		copyField(FldNm + (i + 1), FldNm + i, { noCalc : true });
	};

	//delete the contents of the final line
	Value(FldNm + maxNmbr, "", "", "");

	thermoM(thermoTxt, true); // Stop progress bar
};

//Make menu for the button on each Limited Feature line and parse it to Menus.limfea
function MakeLimFeaMenu() {
	var limfeaMenu = [];
	var itemNmbr = parseFloat(event.target.name.slice(-2));
	var maxNmbr = FieldNumbers.limfea;
	var theField = What("Limited Feature " + itemNmbr);
	var SslotsVisible = !typePF && eval(What("SpellSlotsRemember"))[0];
	var frstPend = SslotsVisible ? 5 : 8;

	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			var enabled = true
			if ((array[i] === "Move up" && itemNmbr === 1) || (array[i] === "Move down" && itemNmbr === maxNmbr) || (array[i] === "Insert empty limited feature" && (!theField || itemNmbr === maxNmbr))) {
				enabled = false;
			}
			var extraName = "";
			if (array[i] === "Move down" && itemNmbr === frstPend) {
				extraName = " (to overflow page)";
			} else if (array[i] === "Move up" && itemNmbr === 9) {
				extraName = " (to first page)";
			}
			item.push({
				cName : array[i] + extraName,
				cReturn : array[i],
				bEnabled : enabled
			});
		}
	};

	menuLVL1(limfeaMenu, ["Move up", "Move down", "-", "Insert empty limited feature", "Delete limited feature", "Clear limited feature"]);

	Menus.limfea = limfeaMenu;
};

//call the Limited Feature menu and do something with the results
function LimFeaOptions() {
	var MenuSelection = getMenu("limfea");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	var itemNmbr = parseFloat(event.target.name.slice(-2));
	var maxNmbr = FieldNumbers.limfea;
	var FieldNames = [
		"Limited Feature ",
		"Limited Feature Max Usages ",
		"Limited Feature Recovery ",
		"Limited Feature Used "
	];
	var Fields = [], FieldsValue = [], FieldsTool = [], FieldsCalc = [], FieldsUp = [], FieldsUpValue = [], FieldsUpTool = [], FieldsUpCalc = [], FieldsDown = [], FieldsDownValue = [], FieldsDownTool = [], FieldsDownCalc = [];

	var SslotsVisible = !typePF && eval(What("SpellSlotsRemember"))[0];
	var upDownOffset = SslotsVisible && (itemNmbr === 5 || itemNmbr === 9) ? 4 : 1;

	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(FieldNames[F] + itemNmbr);
		FieldsValue.push(What(Fields[F]));
		FieldsTool.push(Who(Fields[F]));
		FieldsCalc.push(tDoc.getField(Fields[F]).submitName);
		if (itemNmbr !== 1) {
			FieldsUp.push(FieldNames[F] + (itemNmbr - upDownOffset));
			FieldsUpValue.push(What(FieldsUp[F]));
			FieldsUpTool.push(Who(FieldsUp[F]));
			FieldsUpCalc.push(tDoc.getField(FieldsUp[F]).submitName);
		}
		if (itemNmbr !== maxNmbr) {
			FieldsDown.push(FieldNames[F] + (itemNmbr + upDownOffset));
			FieldsDownValue.push(What(FieldsDown[F]));
			FieldsDownTool.push(Who(FieldsDown[F]));
			FieldsDownCalc.push(tDoc.getField(FieldsDown[F]).submitName);
		}
	}

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying limited feature menu option...");
	calcStop();
	switch (MenuSelection[0]) {
	 case "move up":
		thermoTxt = thermoM("Moving the limited feature line up...", false); //change the progress dialog text
		for (var H = 0; H < FieldNames.length; H++) {
			tDoc.getField(FieldsUp[H]).setAction("Calculate", FieldsCalc[H]);
			tDoc.getField(FieldsUp[H]).submitName = FieldsCalc[H];
			tDoc.getField(Fields[H]).setAction("Calculate", FieldsUpCalc[H]);
			tDoc.getField(Fields[H]).submitName = FieldsUpCalc[H];
			Value(FieldsUp[H], FieldsValue[H], FieldsTool[H]);
			Value(Fields[H], FieldsUpValue[H], FieldsUpTool[H]);
			thermoM(H/FieldNames.length); //increment the progress dialog's progress
		};
		break;
	 case "move down":
		thermoTxt = thermoM("Moving the limited feature line down...", false); //change the progress dialog text
		for (var H = 0; H < FieldNames.length; H++) {
			tDoc.getField(FieldsDown[H]).setAction("Calculate", FieldsCalc[H]);
			tDoc.getField(FieldsDown[H]).submitName = FieldsCalc[H];
			tDoc.getField(Fields[H]).setAction("Calculate", FieldsDownCalc[H]);
			tDoc.getField(Fields[H]).submitName = FieldsDownCalc[H];
			Value(FieldsDown[H], FieldsValue[H], FieldsTool[H]);
			Value(Fields[H], FieldsDownValue[H], FieldsDownTool[H]);
			thermoM(H/FieldNames.length); //increment the progress dialog's progress
		};
		break;
	 case "insert empty limited feature":
		thermoTxt = thermoM("Inserting empty limited feature line...", false); //change the progress dialog text
		LimFeaInsert(itemNmbr);
		break;
	 case "delete limited feature":
		thermoTxt = thermoM("Deleting limited feature line...", false); //change the progress dialog text
		LimFeaDelete(itemNmbr);
		break;
	 case "clear limited feature":
		thermoTxt = thermoM("Clearing limited feature line...", false); //change the progress dialog text
		for (var T = 0; T < Fields.length; T++) {
			Value(Fields[T], "", "");
			tDoc.getField(Fields[T]).setAction("Calculate", "");
			tDoc.getField(Fields[T]).submitName = "";
			thermoM(T/Fields.length); //increment the progress dialog's progress
		}
		break;
	}
	thermoM(thermoTxt, true); // Stop progress bar
};

//insert a Limited Feature at the position wanted
function LimFeaInsert(itemNmbr) {
	var SslotsVisible = !typePF && eval(What("SpellSlotsRemember"))[0];
	var maxNmbr = FieldNumbers.limfea;
	var FieldNames = [
		"Limited Feature ",
		"Limited Feature Max Usages ",
		"Limited Feature Recovery ",
		"Limited Feature Used "
	];
	var Fields = [];
	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(FieldNames[F] + itemNmbr);
	}

	//stop the function if the selected slot is already empty
	if (What(Fields[0]) === "" || itemNmbr === maxNmbr) {
		return;
	}

	//look for the first empty slot below the slot
	var endslot = "";
	for (var i = itemNmbr + 1; i <= maxNmbr; i++) {
		if (SslotsVisible && i > 5 && i < 9) continue;
		if (What(FieldNames[0] + i) === "") {
			endslot = i;
			i = (maxNmbr + 1);
		}
	}

	//only continu if an empty slot was found in the fields
	if (endslot) {
		//cycle to the slots starting with the empty one and add the values of the one above
		for (var i = endslot; i > itemNmbr; i--) {
			if (SslotsVisible && i > 5 && i < 9) continue;
			var downOffset = SslotsVisible && i === 9 ? 4 : 1;
			for (var H = 0; H < FieldNames.length; H++) {
				//set the calculations of the usages field
				var theCalc = tDoc.getField(FieldNames[H] + (i - downOffset)).submitName;
				tDoc.getField(FieldNames[H] + i).setAction("Calculate", theCalc);
				tDoc.getField(FieldNames[H] + i).submitName = theCalc;
				//set the value of the field
				Value(FieldNames[H] + i, What(FieldNames[H] + (i - downOffset)), Who(FieldNames[H] + (i - downOffset)));
			}
		}

		//empty the selected slot
		for (var T = 0; T < Fields.length; T++) {
			Value(Fields[T], "", "");
			tDoc.getField(Fields[T]).setAction("Calculate", "");
			tDoc.getField(Fields[T]).submitName = "";
		}
	}
}

//delete a Limited Feature at the position wanted and move the rest up
function LimFeaDelete(itemNmbr) {
	var SslotsVisible = !typePF && eval(What("SpellSlotsRemember"))[0];
	var frstPend = SslotsVisible ? 5 : 8;
	var maxNmbr = FieldNumbers.limfea;
	maxNmbr = itemNmbr > frstPend || What("Limited Feature 8") ? maxNmbr : frstPend; //stop at the end of the first page if last one on first page is empty
	var FieldNames = [
		"Limited Feature ",
		"Limited Feature Max Usages ",
		"Limited Feature Recovery ",
		"Limited Feature Used "
	];
	var Fields = [];
	var EndFields = [];
	for (var F = 0; F < FieldNames.length; F++) {
		Fields.push(FieldNames[F] + itemNmbr);
		EndFields.push(FieldNames[F] + maxNmbr);
	}

	//move every line up one space, starting with the line below the selected line
	for (var i = itemNmbr; i < maxNmbr; i++) {
		for (var H = 0; H < FieldNames.length; H++) {
			if (SslotsVisible && i > 5 && i < 9) continue;
			var upOffset = SslotsVisible && i === 5 ? 4 : 1;
			//set the calculations of the usages field
			var theCalc = tDoc.getField(FieldNames[H] + (i + upOffset)).submitName;
			tDoc.getField(FieldNames[H] + i).setAction("Calculate", theCalc);
			tDoc.getField(FieldNames[H] + i).submitName = theCalc;
			//set the value of the field
			Value(FieldNames[H] + i, What(FieldNames[H] + (i + upOffset)), Who(FieldNames[H] + (i + upOffset)));
		};
	}

	//delete the contents of the final line
	for (var T = 0; T < EndFields.length; T++) {
		Value(EndFields[T], "", "");
		tDoc.getField(EndFields[T]).setAction("Calculate", "");
		tDoc.getField(EndFields[T]).submitName = "";
	}
}

//a way of going to a specified field (for making bookmarks independent of templates)
function Bookmark_Goto(BookNm) {
	// Find the field corresponding to the bookmark name
	var theTemplate = event.type === "Bookmark" ? getBookmarkTemplate(event.target) : false;
	var isVisible = theTemplate ? isTemplVis(theTemplate[0], true) : true;
	var prefix = "";
	if (isArray(isVisible)) {
		prefix = isVisible[1];
		isVisible = isVisible[0];
	}
	var theFld = prefix + BookMarkList[BookNm];

	// Determine if the selected section is on a visible page, and if so go to it.
	if (isVisible && theFld && tDoc.getField(theFld)) {
		tDoc.getField(theFld).setFocus();
		return;
	};

	// If the selected section is on a hidden page, alert the user.
	if (theTemplate) {
		var theMessage = {
			cMsg : "The bookmark \"" + BookNm + "\" you have selected is on a page which is currently hidden.\n\You can change your page visibility settings using the \"Layout\" button in the \"JavaScript Window\" or in the bookmarks.\n\nDo you want to make the page \"" + theTemplate[1] + "\" visible now?" + (theTemplate[0] !== "SSfront" ? "" : "\n\nClicking \"Yes\" will start the Spell Sheets Generation process."),
			nIcon : 2, //question mark
			cTitle : "Bookmark is currently unavailable",
			nType : 2, //Yes-No
		};
		if (app.alert(theMessage) === 4) {
			if (theTemplate[0] !== "SSfront") {
				var newPrefix = DoTemplate(theTemplate[0], "Add");
				tDoc.getField(newPrefix + BookMarkList[BookNm]).setFocus();
			} else {
				GenerateSpellSheet();
			};
		};
	};
};

// show/hide a template (AddRemove == undefined) or add/remove template with multiple instances (AddRemove == "Add" | "Remove" | "RemoveAll")
function DoTemplate(tempNm, AddRemove, removePrefix, GoOn) {
	MakeMobileReady(false); // Undo flatten, if needed

	//make a function for determining the next page to add the template
	var whatPage = function(templN) {
		var DepL = TemplateDep[templN];
		for (var T = 0; T < DepL.length; T++) {
			var theDep = DepL[T];
			var multiDep = TemplatesWithExtras.indexOf(theDep) !== -1;
			if (!multiDep) {
				var DepTypeFld = tDoc.getField(BookMarkList[theDep]);
				if (isArray(DepTypeFld.page)) {
					return Math.max.apply(Math, DepTypeFld.page) + 1;
				};
			} else {
				var DepTypeFlds = What("Template.extras." + theDep);
				if (DepTypeFlds) {
					return tDoc.getField(DepTypeFlds.split(",").slice(-1)[0] + BookMarkList[theDep]).page + 1;
				};
			};
		};
		return 2;
	};

	//are we dealing with a template that can have multiple instances or not?
	var multiTemp = TemplatesWithExtras.indexOf(tempNm) !== -1;

	if (!multiTemp) { // spawn or hide the template page for templates that can't have multiple instances
		var isTempVisible = isTemplVis(tempNm);
		if (isTempVisible) {
			//find the current page of the template
			var tempPage = Math.max.apply(Math, tDoc.getField(BookMarkList[tempNm]).page);

			// Start progress bar
			var thermoTxt = thermoM("Hiding " + TemplateNames[tempNm] + ", from page " + (tempPage + 1) + "...");
			thermoM(0.9);

			tDoc.deletePages(tempPage);

			//grey out the appropriate bookmarks
			amendBookmarks(BookMarkList[tempNm + "_Bookmarks"], false);

			// Stop progress bar
			thermoM(thermoTxt, true);
		} else {
			//the template is invisible, so we have to add it at the right page
			var tempPage = whatPage(tempNm);

			// Start progress bar and stop calculations
			var thermoTxt = thermoM("Revealing " + TemplateNames[tempNm] + ", at page " + (tempPage + 1) + "...");
			thermoM(0.5);
			calcStop();

			//now spawn a new instance of the template with the same fields as the template at the desired page
			tDoc.getTemplate(tempNm).spawn(tempPage, false, false);

			//black out the appropriate bookmarks
			amendBookmarks(BookMarkList[tempNm + "_Bookmarks"], true);

			//now do some extra actions, depending on the page added
			switch (tempNm) {
			 case "ASfront" :
				// if the location column on the second page was set to visible, re-do this again
				if (What("Gear Location Remember").split(",")[1] === "true") {
					HideInvLocationColumn("Extra.Gear ", false);
				};
			 case "ASoverflow" :
				// Correct the visibility of attuned checkboxes of the magic items
				correctMIattunedVisibility(tempNm);
				break;
			};

			//move focus to this new page
			if (IsNotImport) tDoc.getField(BookMarkList[tempNm] + ".1").setFocus();

			// Stop progress bar and start calculations
			thermoM(thermoTxt, true);
		};
	} else { // add or remove a template that can have multiple instances
		var isTempVisible = isTemplVis(tempNm);
		var tempExtras = What("Template.extras." + tempNm).split(",");
		//removing one or all pages
		var isSS = tempNm.substring(0, 2) === "SS";

		if ((/remove/i).test(AddRemove) && isTempVisible) { // If told to remove a page and a page exists
			var newTemplList = What("Template.extras." + tempNm).split(",");
			var removeWhich = (/removeall/i).test(AddRemove) ? "all" : removePrefix ? tempExtras.indexOf(removePrefix) : "last";
			tempExtras = isNaN(removeWhich) ? tempExtras.splice(removeWhich === "all" ? 1 : -1) : tempExtras.splice(removeWhich, 1);
			var pageNr = tempExtras.length > 1 ? false : tDoc.getField(tempExtras[0] + BookMarkList[tempNm]).page + 1;
			var removeTxt = (removeWhich === "all" ? "all " : "") + TemplateNames[tempNm] + (removeWhich === "all" ? "s that are currently in this document" : " (page "+pageNr+")");

			var doGoOn = {
				cTitle: "Continue with deleting page(s)?",
				cMsg: "You are about to remove " + removeTxt + ". All this data will be permanently lost.\n\nThis can't be undone!\nAre you sure you want to continue?",
				nIcon: 2,
				nType: 2
			};

			// Start progress bar
			var thermoTxt = thermoM("Deleting " + removeTxt + "...");

			if (GoOn || app.alert(doGoOn) === 4) {
				for (var i = tempExtras.length - 1; i >= 0; i--) {
					var tempPage = tDoc.getField(tempExtras[i] + BookMarkList[tempNm]).page;
					thermoM((i + 1) / tempExtras.length); // Increment the progress bar
					tDoc.deletePages(tempPage);
					//remove the deleted entry from the newTemplList
					newTemplList.splice(newTemplList.indexOf(tempExtras[i]), 1);
				};

				// Put the updated array in the field
				Value("Template.extras." + tempNm, newTemplList);

				// Amend the bookmarks
				if (newTemplList.toString() === "") amendBookmarks(BookMarkList[tempNm + "_Bookmarks"], false);

				// Do some extra actions, depending on the page(s) removed
				switch (tempNm) {
				 case "ALlog" :
					if (newTemplList.length) UpdateLogsheetNumbering(newTemplList[1]); // Update the header texts for the still remaining logsheets
					break;
				};
			};

			// Stop progress bar
			thermoM(thermoTxt, true);

		} else if ((/add/i).test(AddRemove)) {
			// find the page where we want to add the new page at
			var tempPage = !isTempVisible ? whatPage(tempNm) : tDoc.getField(tempExtras.slice(-1)[0] + BookMarkList[tempNm]).page + 1;

			// Start progress bar and stop calculations
			var thermoTxt = thermoM(isSS ? "Generating the Spell Sheet(s), Acrobat will be unresponsive for a long time..." : "Adding " + TemplateNames[tempNm] + ", at page " + (tempPage + 1) + "...");
			thermoM(0.35);
			calcStop();

			var theNewPrefix = "P" + tempPage + "." + tempNm + ".";

			//if this template is already in use, it might already have the exact prefix that we would make. Thus, we will have to add blank pages to increase the number until it is no longer already defined
			var toDeleteArray = [];
			if (isTempVisible && tempExtras.indexOf(theNewPrefix) !== -1) {
				while (tempExtras.indexOf(theNewPrefix) !== -1) {
					tDoc.getTemplate("blank").spawn(tempPage, false, false);
					toDeleteArray.push(tempPage);
					tempPage++;
					theNewPrefix = "P" + tempPage + "." + tempNm + ".";
				};
			};

			// Add another instance of the template, but with changing the field names
			tDoc.getTemplate(tempNm).spawn(tempPage, true, false);

			// Put the updated array in the field
			tempExtras.push(theNewPrefix);
			Value("Template.extras." + tempNm, tempExtras.toString());

			// Delete all the blank pages we added earlier
			if (toDeleteArray.length) tDoc.deletePages({nStart: toDeleteArray[0], nEnd: toDeleteArray[0] + toDeleteArray.length - 1});

			// Amend the bookmarks
			if (!isTempVisible && BookMarkList[tempNm + "_Bookmarks"]) amendBookmarks(BookMarkList[tempNm + "_Bookmarks"], true);

			// Do some extra actions, depending on the page added
			switch (tempNm) {
			 case "AScomp" : // Re-find the companion pages races and weapons
				FindCompRace(undefined, theNewPrefix);
				FindCompWeapons(undefined, theNewPrefix);
				break;
			 case "ALlog" : // Update header text and reset calculation order
				if (isTempVisible) UpdateLogsheetNumbering(theNewPrefix);
				SetAdvLogCalcOrder(theNewPrefix);
				break;
			 case "SSfront" : // change the tooltips of the top header and divider, as those can't be moved or hidden
				AddTooltip(theNewPrefix + "spellshead.Text.header.0", "Clear the content of this field to make its prepared section visible again, if you had hidden it.");
				AddTooltip(theNewPrefix + "spellsdiv.Text.0", "");
				break;
			 case "SSmore" :
				Uneditable(theNewPrefix + "spellshead." + (!typePF? "Text" : "Image") + ".prepare.0");
				break;
			};

			//set focus to the new page
			tDoc.getField(theNewPrefix + BookMarkList[tempNm]).setFocus();

			// Stop progress bar and start calculations
			thermoM(thermoTxt, true);
		};
	};
	// If a new template was created with a prefix, return that prefix
	return theNewPrefix ? theNewPrefix : "";
};

//Make menu for the options for hiding, adding, and removing templates (i.e. pages)
function MakePagesMenu() {
	//the functions for adding the base menu elements
	var menuLvl1 = function (menu, array) {
		for (var i = 0; i < array.length; i++) {
			var isMarked = isTemplVis(array[i]);
			menu.push({
				cName : TemplateNames[array[i]],
				cReturn : "template#" + array[i] + "#toggle",
				bMarked : isMarked
			});
		};
	};

	//the start menu entry
	var pagesMenu = [{
		cName : "[Mark the pages you want visible]",
		cReturn : "nothing#toreport",
		bEnabled : false
	}];
	//the menu items for the pages that can only be hidden/shown
	menuLvl1(pagesMenu, ["ASfront", "ASoverflow", "ASbackgr"]);

	//the menu items for the templates of which multiple instances can exist
	var menuLvl2templ = function (menu, array) {
		for (var i = 0; i < array.length; i++) {
			var isVisible = isTemplVis(array[i]);
			var templName = TemplateNames[array[i]];
			var temp = {
				cName : templName,
				bMarked : isVisible
			};
			if (isVisible) {
				var visNr = What("Template.extras." + array[i]).split(",").length - 1;
				temp.oSubMenu = (visNr <= 1 ? [] : [{
					cName : "[" + visNr + " " + templName + "s active]",
					bEnabled : false
				}]).concat([{
					cName : "Add extra " + templName,
					cReturn : "template#" + array[i] + "#add"
				}, {
					cName : "Remove " + (visNr > 1 ? "last " : "") + templName,
					cReturn : "template#" + array[i] +
					"#remove"
				}]).concat(visNr <= 1 ? [] : [{
					cName : "Remove all " + templName + "s",
					cReturn : "template#" + array[i] + "#removeall"
				}]);
			} else {
				temp.cReturn = "template#" + array[i] + "#add";
			};
			menu.push(temp);
		};
	};
	menuLvl2templ(pagesMenu, ["AScomp", "ASnotes", "WSfront", "ALlog"]);

	//the menu item for the refence sheet, if applicable
	if (typePF) menuLvl1(pagesMenu, ["PRsheet"]);

	//a function for adding menu items with a submenu
	var menuLVL2 = function (menu, name, array) {
		var temp = {
			cName : name[0],
			oSubMenu : []
		};
		for (var i = 0; i < array.length; i++) {
			var splitA = array[i][1].split("#");
			var isMarked = name[1] === "dndlogos" ? splitA[1] == cLogoDisplay :
				name[1] === "scores" ? array[i][1] == HoSvis || (array[i][1] == "disable" && !HoSvis) :
				name[1] === "dc" ? splitA[1] == isVis2nd :
				name[1] === "equip" ? (
					splitA[0] == "attuned" ? (splitA[1] == "hide" ? attunedHid : !attunedHid) :
					splitA[0] == "location2" ? (splitA[1] == "show" ? locColVis[0] == "true" : locColVis[0] == "false") :
					splitA[0] == "location3" ? (splitA[1] == "show" ? locColVis[1] == "true" : locColVis[1] == "false") :
					false) :
				false;
			temp.oSubMenu.push({
				cName : array[i][0],
				cReturn : name[1] + "#" + array[i][1] + "#" + isMarked,
				bMarked : isMarked
			});
		};
		menu.push(temp);
	};

	pagesMenu.push({cName : "-", cReturn : "-"}); // add a divider

	//add a menu item for the color them options
	if (!typePF) {
		MakeColorMenu();
		pagesMenu.push({
			cName : "Color Theme options",
			oSubMenu : Menus.colour
		});
	};

	//add the menu for setting the visibility of the D&D logos
	var cLogoDisplay = tDoc.getField("Image.DnDLogo.long").display;
	menuLVL2(pagesMenu, ["Visible D&&D logos", "dndlogos"], [
		["Show the D&&D logos", "show#0"],
		["Show, but don't print the D&&D logos", "noprint#2"],
		["Hide and don't print the D&&D logos", "hide#1"],
		["Hide, but print the D&&D logos", "onlyprint#3"]
	]);

	//add a menu item for the text fields
	MakeTextMenu_TextOptions("justMenu");
	pagesMenu.push({
		cName : "Text field options",
		oSubMenu : Menus.texts
	});

	pagesMenu.push({cName : "-", cReturn : "-"}); // add a divider

	//add the menu for setting adventurers league stuff
	MakeAdventureLeagueMenu();
	pagesMenu.push({
		cName : "Adventurers League options",
		oSubMenu : Menus.adventureLeague
	});

	pagesMenu.push({cName : "-", cReturn : "-"}); // add a divider

	//add a menu item for the first page
	var pageone = {
		cName : "1st page options",
		oSubMenu : []
	};
	//1st page: add the menu for the visibility of the 7h ability score
	var HoSvis = What("HoSRememberState").toLowerCase();
	menuLVL2(pageone.oSubMenu, ["Ability Scores", "scores"], [
		["Open the Ability Scores dialogue", "dialog"],
		["-", "-"],
		["Disable the 7th ability score", "disable"],
		["Make the 7th ability score 'Honor'", "honor"],
		["Make the 7th ability score 'Sanity'", "sanity"]
	]);
	//1st page: add the menu for setting hp on the first page
	MakeHPMenu_HPOptions("justMenu");
	pageone.oSubMenu.push({
		cName : "Hit Points",
		oSubMenu : Menus.hp
	});
	//1st page: add the menu for setting skill order
	MakeSkillsMenu_SkillsOptions("justMenu");
	pageone.oSubMenu.push({
		cName : "Skills",
		oSubMenu : Menus.skills
	});
	//1st page: add the menu for setting 2nd Abilty Save DC visibility
	var isVis2nd = isDisplay("Image.SaveDC" + (typePF ? "" : ".2"));
	menuLVL2(pageone.oSubMenu, ["Ability Save DC", "dc"], [
		["Show only 1 ability save DC", "hide#1"],
		["Show both ability save DCs", "show#0"]
	]);
	//1st page: add the first page menu to the whole menu
	pagesMenu.push(pageone);

	//add a menu item for the second page equipment section
	var locColVis = What("Gear Location Remember").split(",");
	var attunedHid = What("Adventuring Gear Remember");
	menuLVL2(pagesMenu, ["2nd page options (equipment section)", "equip"], [
		["Show 'Attuned Magical Items' subsection", "attuned#show"],
		["Hide 'Attuned Magical Items' subsection", "attuned#hide"],
		["-", "-"],
		["Show location column", "location2#show"],
		["Hide location column", "location2#hide"],
		["-", "-"],
		["Carried Weight options (encumbrance rules)", "weight"]
	]);

	//add a menu item for the third page
	var page3txt = "3rd page options";
	if (!isTemplVis("ASfront")) {
		pagesMenu.push({
			cName : page3txt + " [page not visible]",
			cReturn : "-",
			bEnabled : false
		});
	} else if (typePF) {
		//3rd page: add the menu items for the equipment section
		menuLVL2(pagesMenu, [page3txt + " (equipment section)", "equip"], [
			["Show location column", "location3#show"],
			["Hide location column", "location3#hide"]
		]);
	} else {
		var pagethree = {
			cName : page3txt,
			oSubMenu : []
		};
		//3rd page: add the menu items for the equipment section
		menuLVL2(pagethree.oSubMenu, ["Equipment section", "equip"], [
			["Show location column", "location3#show"],
			["Hide location column", "location3#hide"]
		]);
		//3rd page: add the menu items for the visibility of the notes/rules section (CF only)
		LayerVisibilityOptions(false, "justMenu");
		pagethree.oSubMenu.push({
			cName : "Visible sections",
			oSubMenu : Menus.chooselayers
		});
		//3rd page: add the third page menu to the whole menu
		pagesMenu.push(pagethree);
	};

	//add the menu for setting Spell Sheet things
	MakeSpellMenu();
	pagesMenu.push({
		cName : "Spell Sheet options",
		oSubMenu : Menus.spells
	});

	//add the option to enable or disable use of the unicode functions
	pagesMenu.push({cName : "-", cReturn : "-"}); // add a divider
	makeUnicodeMenu();
	pagesMenu.push(Menus.unicode);

	Menus.pages = pagesMenu;
};

//call the pages menu and do something with the results
function PagesOptions() {
	var MenuSelection = getMenu("pages");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;
	switch (MenuSelection[0]) {
		case "dndlogos" :
			DnDlogo(MenuSelection[2]);
			break;
		case "template" :
			MenuSelection[1] = MenuSelection[1].substr(0, 2).toUpperCase() + MenuSelection[1].substr(2);
			DoTemplate(MenuSelection[1], MenuSelection[2]);
			break;
		case "advleague" :
			AdventureLeagueOptions(MenuSelection);
			break;
		case "ssheet" :
			MakeSpellMenu_SpellOptions(MenuSelection);
			break;
		case "hp" :
			MakeHPMenu_HPOptions(MenuSelection);
			break;
		case "skills" :
			MakeSkillsMenu_SkillsOptions(MenuSelection);
			break;
		case "scores" :
			if (MenuSelection[1] === "dialog") {
				AbilityScores_Button();
				break;
			};
			ShowHonorSanity(MenuSelection[1].capitalize());
			break;
		case "dc" :
			Toggle2ndAbilityDC(MenuSelection[1]);
			break;
		case "equip" :
			if (MenuSelection[3] == "false") InventoryOptions([MenuSelection[1]]);
			if (MenuSelection[1] == "weight") WeightToCalc_Button();
			break;
		case "3rdpage" :
			LayerVisibilityOptions(false, MenuSelection);
			break;
		case "text" :
			MakeTextMenu_TextOptions(MenuSelection);
			break;
		case "color" :
			ColoryOptions(MenuSelection);
			break;
		case "unicode" :
			setUnicodeUse(MenuSelection[2]);
			break;
	};
};

//show or hide the DnD logos. Input is the number for the field display setting (0-3)
function DnDlogo(input) {
	var defaultDisplay = tDoc.info.SheetType === "Printer Friendly" ? 0 : 3;
	input = !isNaN(input) ? input : defaultDisplay;
	tDoc.getField("Image.DnDLogo").display = input;
	var prefixArray = What("Template.extras.SSfront").split(",");

	if (typePF && !tDoc.info.SpellsOnly) {
		prefixArray = prefixArray.concat(What("Template.extras.ALlog").split(","));
		if (!minVer) prefixArray = prefixArray.concat(What("Template.extras.AScomp").split(","));
	}

	for (var i = 0; i < prefixArray.length; i++) {
		if (prefixArray[i]) {
			tDoc.getField(prefixArray[i] + "Image.DnDLogo").display = input;
		}
	}
}

//change the color of a section of bookmarks, including all children
function amendBookmarks(theParent, show) {
	if (minVer) return;
	var doTheChildren = function (aParent, colour) {
		for (var i = 0; i < aParent.length; i++) {
			aParent[i].color = colour;
			if (aParent[i].children) {
				doTheChildren(aParent[i].children, colour);
			}
		}
	}

	if (app.viewerType !== "Reader") {
		if (show) {
			var Color = color.black;
			var Style = 2;
		} else {
			var Color = color.ltGray;
			var Style = 0;
		}
		theParent.color = Color;
		theParent.style = Style;
		if (theParent.children) doTheChildren(theParent.children, Color);
	};
}

//change the function of a section of bookmarks, including all children
function functionBookmarks(theParent) {

	var doTheChildren = function (aParent, colour) {
		for (var i = 0; i < aParent.length; i++) {
			aParent[i].setAction("Bookmark_Goto(event.target.name);");
			if (aParent[i].children) {
				doTheChildren(aParent[i].children, colour);
			}
		}
	}

	theParent.setAction("Bookmark_Goto(event.target.name);");
	doTheChildren(theParent.children);
}

//make a menu to hide/show the lines of the notes on the page
//after that, do something with the menu and its results
function MakeNotesMenu_NotesOptions() {
	//define some variables
	var toSearch = event.target.name.indexOf("Notes") !== -1 ? "Notes." : "Cnote.";
	var prefix = event.target.name.substring(0, event.target.name.indexOf(toSearch));
	var NoteMenu = [];
	var WhiteFld = prefix + "Whiteout." + toSearch;
	var WhiteL = WhiteFld + "Left";
	var WhiteR = WhiteFld + "Right";

	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			if (array[i][1] === "comp.img") {
				var isMarked = toShow[0];
			} else if (array[i][1] === "comp.eqp") {
				var isMarked = toShow[1];
			} else {
				var isField = tDoc.getField(array[i][1]);
				var isMarked = isField ? tDoc.getField(array[i][1]).display !== display.visible : false;
			}
			item.push({
				cName : array[i][0],
				cReturn : array[i][1],
				bMarked : isMarked
			});
		}
	};

	var menuArray = [["Left column lines visible", WhiteL], ["Right column lines visible", WhiteR], ["-", "-"]];
	if (toSearch === "Notes.") {
		menuArray.push(["Add extra 'Notes' page", "add page"]);
		menuArray.push([(prefix ? "Remove" : "Hide") + " this 'Notes' page", "remove page"]);
	} else if (toSearch === "Cnote.") {
		var toShow = eval(What(prefix + "Companion.Layers.Remember"));
		menuArray.push(["Show box for Companion's Appearance", "comp.img"]);
		menuArray.push(["Show Equipment section", "comp.eqp"]);
	}
	menuLVL1(NoteMenu, menuArray);

	//parse it into a global variable
	Menus.notes = NoteMenu;

	//now call the menu
	var MenuSelection = getMenu("notes");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	var toDo = false;
	switch (MenuSelection[0]) {
	 case WhiteL.toLowerCase() :
		toDo = WhiteL;
		break;
	 case WhiteR.toLowerCase() :
		toDo = WhiteR;
		break;
	 case "add page" :
		DoTemplate("ASnotes", "Add");
		break;
	 case "remove page" :
		DoTemplate("ASnotes", "Remove", prefix);
		break;
	 case "comp.img" :
		toShow[0] = !toShow[0];
	 case "comp.eqp" :
		if (MenuSelection[0] === "comp.eqp") toShow[1] = !toShow[1];
		Value(prefix + "Companion.Layers.Remember", toShow.toSource());
		ShowCompanionLayer(prefix);
		break;
	}

	if (toDo) {
		if (tDoc.getField(toDo).display === display.visible) {
			Hide(toDo);
		} else {
			Show(toDo);
		}
	}
}

//make a string of all the classes and levels (field calculation)
function CalcFullClassLvlName() {
	var prefix = event.target && event.target.name ? getTemplPre(event.target.name, "ALlog", true) : "";
	if (!prefix) {
		var ClLvls = What("Class and Levels");
		var LVL = What("Character Level");
		if (!classes.parsed.length || ClLvls === "" || LVL === "") {
			var theValue = "";
		} else {
			var isOnlyClass = ClLvls.indexOf(LVL) !== -1;
			if (classes.parsed.length === 1) {
				var theValue = isOnlyClass ? ClLvls : ClLvls + " " + LVL;
			} else {
				var lastMultiLvl = classes.parsed[classes.parsed.length - 1][1];
				var lastStringLvl = Number(clean(ClLvls).slice(-1 * lastMultiLvl.toString().length));
				var theValue = lastMultiLvl === lastStringLvl ? ClLvls : ClLvls + " " + lastMultiLvl;
			}
		}
	} else {
		var theValue = What("AdvLog.Class and Levels");
	}
	return theValue;
}

//return the value of a logsheet's number (field calculation)
function CalcLogsheetNumber() {
	var prefix = getTemplPre(event.target.name, "ALlog", true);
	var ALlogA = What("Template.extras.ALlog").split(",");
	event.value = (ALlogA.indexOf(prefix)) + " of " + (ALlogA.length - 1);
}

//return the previous logsheet's prefix (field calculation)
function CalcLogsheetPrevious(prefix) {
	var ALlogA = What("Template.extras.ALlog").split(",");
	return prefix && ALlogA.indexOf(prefix) - 1 ? ALlogA[ALlogA.indexOf(prefix) - 1] : "";
}

//calculate the total or starting value of an entry in the advanturers log sheet (field calculation)
function CalcLogsheetValue() {
	var fNm = event.target.name;
	var prefix = fNm.substring(0, fNm.indexOf("AdvLog."));
	if (!prefix) return;
	var StrTot = fNm.indexOf("start") !== -1 ? "start" : "total";
	if (StrTot === "total") {
		var theStart = fNm.replace("total", "start");
		var theGain = What(fNm.replace("total", "gain")).replace(/,/g, ".");
		event.target.display = theGain === "" ? display.hidden : tDoc.getField(theStart).display;
		var theStartNmr = Number(What(theStart).replace(/,/g, "."));
		event.value = theGain === "" ? theStartNmr : theStartNmr + eval(theGain);
	} else {
		var FldNmbr = Number(fNm.replace(/.*AdvLog\.(\d+?)\..+/, "$1"));
		if (prefix === What("Template.extras.ALlog").split(",")[1] && FldNmbr === 1) {
			event.target.readonly = false;
			event.target.display = display.visible;
			return;
		} else {
			event.target.readonly = true;
		};
		if (FldNmbr !== 1) {
			var preFld = fNm.replace("AdvLog." + FldNmbr, "AdvLog." + (FldNmbr - 1));
		} else {
			var prePrefix = What(prefix + "AdvLog.previous");
			var preFld = fNm.replace(prefix, prePrefix).replace("AdvLog." + FldNmbr, "AdvLog." + FieldNumbers.logs);
		};
		event.target.display = What(fNm.replace("start", "gain")) !== "" || What(preFld.replace("start", "gain")) !== "" ? display.visible : display.hidden;
		event.value = What(preFld.replace("start", "total"));
	}
}

//add the correct numbers to the logsheet title sections
function UpdateLogsheetNumbering(prefix, prePrefix) {
	prePrefix = prePrefix ? prePrefix : CalcLogsheetPrevious(prefix);
	var preValue = prePrefix ? Number(What(prePrefix + "Text.AdvLog." + FieldNumbers.logs).replace(/Logsheet Entry /i, "")) : 0;
	var logTxt = !typePF ? "Logsheet Entry " : "LOGSHEET ENTRY ";
	for (var i = 1; i <= FieldNumbers.logs; i++) {
		Value(prefix + "Text.AdvLog." + i, logTxt + (preValue + i));
	};
	var ALlogA = What("Template.extras.ALlog").split(",");
	if (prefix !== ALlogA.slice(-1)[0]) UpdateLogsheetNumbering(ALlogA[ALlogA.indexOf(prefix) + 1], prefix);
};

//Make menu for the button on the adventurers log page and parse it to Menus.advlog
//after that, do something with the menu and its results
function MakeAdvLogMenu_AdvLogOptions(Button) {
	var prefix = Button ? "P0.AdvLog." : getTemplPre(event.target.name, "ALlog", true);
	var isFirstPrefix = prefix === What("Template.extras.ALlog").split(",")[1];
	var cLogoDisplay = minVer && typePF ? tDoc.getField("Image.DnDLogo.AL").display : false;

	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			item.push({
				cName : array[i][0],
				cReturn : array[i][1]
			});
		}
	};

	var menuLVL2 = function (menu, name, array) {
		menu.cName = name[0];
		menu.oSubMenu = [];
		for (i = 0; i < array.length; i++) {
			var isMarked = false;
			if (name[1] === "dateformat") {
				isMarked = What("DateFormat_Remember") === array[i][1];
			} else if (name[1] === "dndlogo") {
				isMarked = array[i][1].split("#")[1] == cLogoDisplay;
			};
			menu.oSubMenu.push({
				cName : array[i][0],
				cReturn : name[1] + "#" + array[i][1],
				bMarked : isMarked
			});
		};
	};

	var AdvLogMenu = [];

	var alMenuItems = [
		["Add extra " + (Button ? "page" : "'Adventurers Log' page"), "add page"]
	].concat(
		(Button || (tDoc.info.AdvLogOnly && isFirstPrefix)) ?
		[["Remove all pages and reset the 1st", "remove all"]] :
		[["Remove this 'Adventurers Log' page", "remove page"]]
	).concat(
		(Button) ? [["-", "-"], ["Reset all pages", "reset all"], ["-", "-"]] :
		[["-", "-"], ["Reset this page", "reset"], ["-", "-"]]
	);

	menuLVL1(AdvLogMenu, alMenuItems);

	if (!minVer) {
		menuLVL1(AdvLogMenu, [["Generate next Logsheet Entry", "generate"]]);
	} else if (typePF) {
		var dndLogoMenu = [];
		menuLVL2(dndLogoMenu, ["Visible D&&D logos", "dndlogo"], [
			["Show the D&&D logos", "show#0"],
			["Show, but don't print the D&&D logos", "noprint#2"],
			["Hide and don't print the D&&D logos", "hide#1"],
			["Hide, but print the D&&D logos", "onlyprint#3"]
		]);
		AdvLogMenu.push(dndLogoMenu);
	}

	var dateTypesMenu = [];

	menuLVL2(dateTypesMenu, ["Date format", "dateformat"], [
		["24 Dec 2014", "d mmm yyyy"],
		["24-12-2014", "d-m-yyyy"],
		["24/12/2014", "d/m/yyyy"],
		["Dec 24, 2014", "mmm d, yyyy"],
		["12-24-2014", "m-d-yyyy"],
		["12/24/2014", "m/d/yyyy"],
		["2014 Dec 24", "yyyy mmm d"],
		["2014-12-24", "yyyy-m-d"],
		["2014/12/24", "yyyy/m/d"]
	]);

	AdvLogMenu.push(dateTypesMenu);

	menuLVL1(AdvLogMenu, [["-", "-"], ["Tutorial for Adventurers League logsheet", "tutorial"], ["Advanced tutorial for Adventurers League logsheet", "advanced tutorial"]]);

	Menus.advlog = AdvLogMenu;

	//now call the menu
	var MenuSelection = getMenu("advlog");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;
	var thermoTxt;
	switch (MenuSelection[0]) {
	 case "add page" :
		DoTemplate("ALlog", "Add");
		break;
	 case "remove page" :
		DoTemplate("ALlog", "Remove", prefix);
		break;
	 case "remove all" :
		thermoTxt = thermoM("Removing all Adventure Logsheets...");
		calcStop();
		tDoc.getTemplate("blank").spawn(0, false, false);
		tDoc.deletePages({nStart: 1, nEnd: tDoc.numPages - 1});
		tDoc.getTemplate("ALlog").spawn(0, true, false);
		Value("Template.extras.ALlog", ",P0.ALlog");
		tDoc.deletePages(1);
		break;
	 case "tutorial" :
		app.launchURL("http://dndadventurersleague.org/tutorial-for-dd-adventure-league-logsheets/", true);
		break;
	 case "advanced tutorial" :
		app.launchURL("http://dndadventurersleague.org/advanced-logsheet-tutorial/", true);
		break;
	 case "reset" :
		thermoTxt = thermoM("Resetting this Adventure Logsheet...");
		calcStop();
		var resetLogs = [];
		for (var l = 0; l <= FieldNumbers.logs; l++) resetLogs.push(prefix + "AdvLog." + l)
		tDoc.resetForm(resetLogs);
		break;
	 case "reset all" :
		thermoTxt = thermoM("Resetting all Adventure Logsheets...");
		calcStop();
		var ALlogF = What("Template.extras.ALlog").split(",").splice(1);
		var resetLogs = [];
		for (var i = 0; i < ALlogF.length; i++) {
			for (var l = 0; l <= FieldNumbers.logs; l++) resetLogs.push(ALlogF[i] + "AdvLog." + l);
		};
		tDoc.resetForm(resetLogs);
		break;
	 case "dateformat" :
		UpdateALdateFormat(MenuSelection[1]);
		break;
	 case "generate" :
		addALlogEntry();
		break;
	 case "dndlogo" :
		DnDlogo(MenuSelection[2]);
		break;
	}
	if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
};

//get the parent of the bookmark so we can know which template it is on
function getBookmarkTemplate(bookmark) {
	while (bookmark.name !== "Root") {
		if (BookMarkList[bookmark.name + "_template"]) {
			return [BookMarkList[bookmark.name + "_template"], bookmark.name];
		};
		bookmark = bookmark.parent;
	};
	return "";
}

//make menu for the button to (re)set the portrait/organization symbol
//after that, do something with the menu and its results
function MakeIconMenu_IconOptions() {
	var SymbPort = event.target.name;
	var DoAdvLog = SymbPort.indexOf("AdvLog") !== -1;
	var DisplayName = SymbPort.indexOf("Comp.") !== -1 ? "Companion's Icon" : (SymbPort.indexOf("HeaderIcon") !== -1 ? "Header Icon" : SymbPort);
	if (DoAdvLog) DisplayName = "Adventure Logsheet " + DisplayName;

	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			item.push({
				cName : array[i][0],
				cReturn : array[i][1]
			});
		}
	};
	var menuLVL2 = function (menu, name, array) {
		var temp = {};
		temp.cName = name[0];
		temp.oSubMenu = [];
		for (var i = 0; i < array.length; i++) {
			temp.oSubMenu.push({
				cName : array[i][0],
				cReturn : name[1] + "#" + array[i][1]
			})
		}
		menu.push(temp);
	};

	//make default menu items
	var restrictedViewer = app.viewerType === "Reader" && app.viewerVersion < 17;
	var IconMenu = [];
	var OptionMenu = [
		[(restrictedViewer ? "Set a pdf file as " : "Set any image/pdf file as ") + DisplayName, "set"],
		["Reset the " + DisplayName, "reset"],
		["Empty the " + DisplayName, "empty"]
	];
	menuLVL1(IconMenu, OptionMenu);

	//add options for faction icons, symbols, banners, if so desired
	//add options for class and AL season icons, if so desired
	if (SymbPort === "Symbol" || SymbPort.indexOf("HeaderIcon") !== -1) {
		//first the factions
		var faction = [
			["Emerald Enclave", "emeraldenclave"],
			["Harpers", "harpers"],
			["Lords' Alliance", "lordsalliance"],
			["Order of the Gauntlet", "ordergauntlet"],
			["Zhentarim", "zhentarim"]
		];
		var factionSymbols = [];
		var factionIcons = [];
		var factionBanners = [];
		for (var f = 0; f < faction.length; f++) {
			var aFact = faction[f];
			factionSymbols.push([aFact[0], aFact[1] + "#symbol"]);
			factionIcons.push([aFact[0], aFact[1] + "#icon"]);
			factionBanners.push([aFact[0], aFact[1] + "#banner"]);
		}
		IconMenu.push({cName : "-", cReturn : "-"}); // add a divider
		menuLVL2(IconMenu, ["Set faction symbol", "organizationicon"], factionSymbols);
		menuLVL2(IconMenu, ["Set faction banner", "organizationicon"], factionBanners);
		menuLVL2(IconMenu, ["Set faction icon", "organizationicon"], factionIcons);

		//second the class
		var classes = [
			["Barbarian", "barbarian"],
			["Bard", "bard"],
			["Cleric", "cleric"],
			["Druid", "druid"],
			["Fighter", "fighter"],
			["Monk", "monk"],
			["Paladin", "paladin"],
			["Ranger", "ranger"],
			["Rogue", "rogue"],
			["Sorcerer", "sorcerer"],
			["Warlock", "warlock"],
			["Wizard", "wizard"]
		];
		IconMenu.push({cName : "-", cReturn : "-"}); // add a divider
		menuLVL2(IconMenu, ["Set class icon", "classicon"], classes);

		//third the AL seasons
		var ALseasons = [
			["1 Tyranny of Dragons", "tod"],
			["2 Elemental Evil", "ee"],
			["3 Rage of Demons", "rod"],
			["4 Curse of Strahd", "cos"],
			["5 Storm King's Thunder", "skt"],
			["6 Tales from the Yawning Portal", "totyp"],
			["7 Tomb of Annihilation", "toa"]
		];
		IconMenu.push({cName : "-", cReturn : "-"}); // add a divider
		menuLVL2(IconMenu, ["Set Adventure League season icon", "seasonicon"], ALseasons);
	}

	//add a link to an online pdf converter, if not using Acrobat Pro/Standard
	if (restrictedViewer) {
		var Conversions = [
			["-", "-"],
			["Go to an online image-to-pdf converter", "convertor"]
		];
		menuLVL1(IconMenu, Conversions);
	}

	Menus.icon = IconMenu;

	//now call the menu
	var MenuSelection = getMenu("icon");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	switch (MenuSelection[0]) {
	 case "set" :
		tDoc.getField(SymbPort).buttonImportIcon();
		break;
	 case "reset" :
		ClearIcons(SymbPort, true);
		break;
	 case "empty" :
		ClearIcons(SymbPort);
		break;
	 case "organizationicon" :
		var oIcon = tDoc.getField("SaveIMG.Faction." + MenuSelection[1] + "." + MenuSelection[2]).buttonGetIcon();
		tDoc.getField(SymbPort).buttonSetIcon(oIcon);
		break;
	 case "classicon" :
		var oIcon = tDoc.getField("SaveIMG.ClassIcon." + MenuSelection[1]).buttonGetIcon();
		tDoc.getField(SymbPort).buttonSetIcon(oIcon);
		break;
	 case "seasonicon" :
		var oIcon = tDoc.getField("SaveIMG.ALicon." + MenuSelection[1]).buttonGetIcon();
		tDoc.getField(SymbPort).buttonSetIcon(oIcon);
		DoAdvLog = true;
		break;
	 case "convertor" :
		app.launchURL("http://imagetopdf.com/", true);
		break;
	};
	if (MenuSelection[0] !== "convertor" && MenuSelection[0] !== "reset") {
		Show(SymbPort);
	}
	//now loop through all the adventure logsheet pages, if this was to set the adv.logs
	if (typePF && DoAdvLog && MenuSelection[0] !== "convertor") {
		var ALlogA = What("Template.extras.ALlog").split(",");
		var aIcon = event.target.buttonGetIcon();
		for (var tA = 0; tA < ALlogA.length; tA++) {
			var fldNm = ALlogA[tA] + "AdvLog.HeaderIcon";
			if (fldNm !== event.target.name) {
				tDoc.getField(fldNm).buttonSetIcon(aIcon);
				tDoc.getField(fldNm).display = event.target.display;
			}
		}
	}
};

//return the value of the field that this adventurers log header field refers to
function CalcAdvLogInfo() {
	if (tDoc.info.SpellsOnly) return;
	var theField = event.target.name.replace(/.*?AdvLog\./, tDoc.info.AdvLogOnly ? "AdvLog." : "");
	event.value = What(theField);
}

//see if the value of the field has been changed and differs from the original. If so, push the value to the original
function ValidateAdvLogInfo() {
	if (tDoc.info.SpellsOnly || (SetFactionSymbolIgnore && event.target.name.indexOf("Background_Faction.Text") !== -1)) return;
	var prefix = getTemplPre(event.target.name, "ALlog", true);
	if (tDoc.info.AdvLogOnly && !prefix) {
		return;
	} else {
		var theField = event.target.name.replace(/.*?AdvLog\./, tDoc.info.AdvLogOnly ? "AdvLog." : "");
		var theValue = What(theField);
		if (event.value !== "" && event.value !== theValue) Value(theField, event.value);
	}
}

//set the calculation order of the AdvLog page so that it comes after the previous one
function SetAdvLogCalcOrder(prefix) {
	var whatCalcOrder = function (field) {
		return tDoc.getField(field).calcOrderIndex;
	}
	var resetCalcOrder = function (field, input) {
		tDoc.getField(field).calcOrderIndex = input;
	}
	if (prefix) {
		var prePrefix = CalcLogsheetPrevious(prefix);
		resetCalcOrder(prefix + "AdvLog.Class and Levels", whatCalcOrder(prePrefix + "AdvLog.Class and Levels") + 1);
		var theLastCalc = whatCalcOrder(prePrefix + "AdvLog." + FieldNumbers.logs + ".magicItems.total");
	} else {
		var theLastCalc = whatCalcOrder("AdvLog.sheetNumber");
	}

	var theTypesA = [
		".xp",
		".gold",
		".downtime",
		".renown",
		".magicItems"
	];


	for (var i = 1; i <= FieldNumbers.logs; i++) {
		for (var A = 0; A < theTypesA.length; A++) {
			var toSet = prefix + "AdvLog." + i + theTypesA[A];
			//add one to the calculation order to put it at
			theLastCalc += 1;
			resetCalcOrder(toSet + ".start", theLastCalc);
			//add one to the calculation order to put it at
			theLastCalc += 1;
			resetCalcOrder(toSet + ".total", theLastCalc);
		}
	}
}

//get all stringified variable and put them into their document level variable
function GetStringifieds(notSources) {
	var forSpells = What("CurrentSpells.Stringified").split("##########");
	if (forSpells[0][0] !== "(") forSpells[0] = "(" + forSpells[0] + ")";
	if (forSpells[1][0] !== "(") forSpells[1] = "(" + forSpells[1] + ")";
	CurrentSpells = eval(forSpells[0]);
	CurrentCasters = eval(forSpells[1]);
	if (!notSources) {
		CurrentSources = eval(What("CurrentSources.Stringified"));
		CurrentScriptFiles = eval(What("User_Imported_Files.Stringified"));
	};
	CurrentEvals = eval(What("CurrentEvals.Stringified"));
	CurrentProfs = eval(What("CurrentProfs.Stringified"));
	CurrentVars = eval(What("CurrentVars.Stringified"));
	CurrentFeatureChoices = eval(What("CurrentFeatureChoices.Stringified"));
	CurrentStats = eval(What("CurrentStats.Stringified"));
}

//set all stringified variables into their fields
function SetStringifieds(type) {
	if (!type || type === "spells") {
		var cSpells = CurrentSpells.toSource();
		var cCasters = CurrentCasters.toSource();
		Value("CurrentSpells.Stringified", cSpells + "##########" + cCasters);

		//any time the CurrentSpells variable is changed, we need to update the CurrentWeapons variable as well
		FindWeapons();
	};
	if (!type || type === "sources") Value("CurrentSources.Stringified", CurrentSources.toSource());
	if (!type || type === "evals") Value("CurrentEvals.Stringified", CurrentEvals.toSource());
	if (!type || type === "profs") Value("CurrentProfs.Stringified", CurrentProfs.toSource());
	if (!type || type === "vars") Value("CurrentVars.Stringified", CurrentVars.toSource());
	if (!type || type === "choices") Value("CurrentFeatureChoices.Stringified", CurrentFeatureChoices.toSource());
	if (!type || type === "stats") Value("CurrentStats.Stringified", CurrentStats.toSource());
	if (type === "scriptfiles") Value("User_Imported_Files.Stringified", CurrentScriptFiles.toSource());
};

//set the sheet version
function Publish(version, extra) {
	if (app.viewerType !== "Reader") {
		tDoc.info.SheetVersion = version;
		sheetVersion = parseFloat(tDoc.info.SheetVersion);
		if (extra) {
			tDoc.info.SheetVersionType = extra;
		} else {
			tDoc.info.SheetVersionType = "";
		}
	}
	semVers = nmbrToSemanticVersion(sheetVersion) + (tDoc.info.SheetVersionType ? tDoc.info.SheetVersionType : "");
	if (app.viewerType !== "Reader") tDoc.info.Title = MakeDocName();
	tDoc.getField("SheetInformation").defaultValue = MakeDocName();
	tDoc.resetForm(["Opening Remember", "CurrentSources.Stringified", "User_Imported_Files.Stringified","SheetInformation"]);
	tDoc.getField("Opening Remember").submitName = 1;
	tDoc.getField("SaveIMG.Patreon").submitName = "(new Date(0))";
	if (!minVer) DontPrint("d20warning");
	DnDlogo();
	tDoc.calculateNow();
};

//show Honor or Sanity score, based on the field value
function ShowHonorSanity(input) {
	calcStop();
	if (input !== undefined) Value("HoSRememberState", input);
	var toShow = What("HoSRememberState");
	toShow = toShow === "Sanity" || toShow === "Honor" ? toShow : "";
	var ShowHide = toShow ? "Show" : "Hide";
	var HideShow = toShow ? "Hide" : "Show";
	if (typePF) {
		var fieldsArray = [
			"Text.HoS.Ability",
			"Text.HoS.Save",
			"Image.HoS",
			"Vision.1",
			"Passive Perception.1",
			"HoS",
			"HoS Mod",
			"HoS ST Mod",
			"HoS ST Prof"
		];
		var fieldsArrayHide = [
			"Vision.0",
			"Passive Perception.0"
		];
		Value("Text.HoS.Ability", toShow.toUpperCase());
		Value("Text.HoS.Save", toShow.toUpperCase());

		if (ShowHide === "Show") {
			Show("Image." + What("BoxesLinesRemember") + ".HoS")
		} else {
			Hide("Image.calc_lines.HoS");
			Hide("Image.calc_boxes.HoS");
		}
	} else {
		var fieldsArray = [
			"Text.HoS",
			"Image.Stats.6",
			"Saving Throw advantages / disadvantages.1",
			"Text.Header.Saving Throw advantages / disadvantages",
			"HoS",
			"HoS Mod",
			"HoS ST Mod",
			"HoS ST Adv",
			"HoS ST Dis",
			"HoS ST Prof"
		];
		var fieldsArrayHide = [
			"Saving Throw advantages / disadvantages.0"
		];
		if (toShow) {
			var theIcon = tDoc.getField("SaveIMG." + toShow).buttonGetIcon();
			tDoc.getField(fieldsArray[0]).buttonSetIcon(theIcon);
		}
	}

	for (var i = 0; i < fieldsArray.length; i++) {
		tDoc[ShowHide](fieldsArray[i]);
	}

	for (var i = 0; i < fieldsArrayHide.length; i++) {
		tDoc[HideShow](fieldsArrayHide[i]);
	}

	if (ShowHide === "Show" && CurrentVars.bluetxt) {
		DontPrint("HoS ST Bonus");
	} else {
		Hide("HoS ST Bonus");
	}
};

//set the lifestyle
function setLifeStyle(input) {
	var isSelection = Lifestyles.names.indexOf(input);
	if (isSelection == -1) isSelection = Lifestyles.types.indexOf(clean(input.toLowerCase()));
	if (isSelection !== -1) Value("Lifestyle daily cost", Lifestyles.expenses[isSelection]);
}

// update all the level-dependent features for the ranger companions on the companion pages
function UpdateRangerCompanions(newLvl) {
	if (ClassList.rangerua && !testSource("rangerua", ClassList.rangerua, "classExcl")) {
		UpdateRevisedRangerCompanions(newLvl);
		return;
	}
	var thermoTxt;

	var textArray = [
		"\u2022 " + "If the beast takes the Attack action, I can use my Extra Attack feature to attack once myself", //add at level 5
		"\u2022 " + "The beast's attacks count as magical for the purpose of overcoming resistances and immunities" + "\n\u2022 " + "As a bonus action, I can command the beast to take the Dash/Disengage/Help action on its turn", //add at level 7
		"\u2022 " + "The beast can make two attacks (or multiattack) when I command it to take an Attack action", //add at level 11
		"\u2022 " + "When I cast a spell on myself, I can have it also affect the beast if it is within 30 ft of me", //add at level 15
	]

	var theText = function (input) {
		var toReturn = "If I don't command it to take an action, it takes the Dodge action instead";
		if (input >= 5) {
			toReturn += "\n" + textArray[0];
		}
		if (input >= 7) {
			toReturn += "\n" + textArray[1];
		}
		if (input >= 11) {
			toReturn += "\n" + textArray[2];
		}
		if (input >= 15) {
			toReturn += "\n" + textArray[3];
		}
		return toReturn;
	}

	newLvl = newLvl !== undefined ? newLvl : Number(What("Character Level"));
	var deleteIt = newLvl === 0;

	var newLvlProfB = newLvl ? ProficiencyBonusList[Math.min(newLvl, ProficiencyBonusList.length) - 1] : 0;
	var RangerLvl = deleteIt || (!classes.known.ranger && !classes.known["spell-less ranger"]) ? newLvl : (classes.known.ranger ? classes.known.ranger.level : 0) + (classes.known["spell-less ranger"] ? classes.known["spell-less ranger"].level : 0);
	var newLvlText = theText(RangerLvl);
	var AScompA = What("Template.extras.AScomp").split(",").splice(1);

	for (var i = 0; i < AScompA.length; i++) {
		var prefix = AScompA[i];
		if (What(prefix + "Companion.Remember") === "companion") { //only do something if the creature is set to "companion"

			if (!thermoTxt) { // Start progress bar and stop calculations
				thermoTxt = thermoM("Updating Ranger's Companion(s)...");
				calcStop();
			}

			thermoM((i+2)/(AScompA.length+2)); //increment the progress dialog's progress

			var thisCrea = CurrentCompRace[prefix] && CurrentCompRace[prefix].typeFound === "creature" ? CurrentCompRace[prefix] : false;
			//first look into adding the proficiency bonus to AC, attacks, proficiencies
			var remLvl = Who(prefix + "Companion.Remember").split(",");
			var oldLvl = Number(remLvl[0]);
			var RangerLvlOld = remLvl[1] !== undefined ? Number(remLvl[1]) : 0;
			var oldLvlProfB = oldLvl ? ProficiencyBonusList[Math.min(oldLvl, ProficiencyBonusList.length) - 1] : 0;
			var diff = newLvlProfB - oldLvlProfB;
			var BlueTextArrayAdd = [];
			var BlueTextArrayRemove = [];

			//add saving throw proficiencies
			for (var a = 0; a < AbilityScores.abbreviations.length; a++) {
				var theSave = prefix + "Comp.Use.Ability." + AbilityScores.abbreviations[a] + ".ST.Prof";
				var theSaveBT = prefix + "BlueText.Comp.Use.Ability." + AbilityScores.abbreviations[a] + ".ST.Bonus";
				var hasProfAdded = What(theSaveBT).indexOf("oProf") !== -1;
				if (!deleteIt && !hasProfAdded && tDoc.getField(theSave).isBoxChecked(0) === 1) {
					BlueTextArrayAdd.push(theSaveBT);
				} else if (hasProfAdded) {
					BlueTextArrayRemove.push(theSaveBT);
				};
			};

			//add skill proficiencies
			for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
				var theSkill = prefix + (typePF ? "" : "Text.") + "Comp.Use.Skills." + SkillsList.abbreviations[s] + ".Prof";
				var isProf = typePF ? tDoc.getField(theSkill).isBoxChecked(0) : What(theSkill) !== "nothing";
				var theSkillBT = prefix + "BlueText.Comp.Use.Skills." + SkillsList.abbreviations[s] + ".Bonus";
				hasProfAdded = What(theSkillBT).indexOf("oProf") !== -1;
				if (!deleteIt && !hasProfAdded && isProf) {
					BlueTextArrayAdd.push(theSkillBT);
				} else if (hasProfAdded) {
					BlueTextArrayRemove.push(theSkillBT);
				};
			};

			//add attacks damage and to hit bonus fields, as well as count as magical to description
			for (var A = 1; A <= 3; A++) {
				if (What(prefix + "Comp.Use.Attack." + A + ".Weapon Selection")) {
					var weaHit = prefix + "BlueText.Comp.Use.Attack." + A + ".To Hit Bonus";
					hasProfAdded = What(weaHit).indexOf("oProf") !== -1;
					if (!deleteIt && !hasProfAdded) {
						BlueTextArrayAdd.push(weaHit);
					} else if (hasProfAdded) {
						BlueTextArrayRemove.push(weaHit);
					};
					var weaDmg = prefix + "BlueText.Comp.Use.Attack." + A + ".Damage Bonus";
					hasProfAdded = What(weaDmg).indexOf("oProf") !== -1;
					if (!deleteIt && !hasProfAdded) {
						BlueTextArrayAdd.push(weaDmg);
					} else if (hasProfAdded) {
						BlueTextArrayRemove.push(weaDmg);
					};
					var weaDescr = prefix + "Comp.Use.Attack." + A + ".Description";
					var countMagic = (/(,|;)? ?counts as magical/i).test(What(weaDescr));
					if (newLvl >= 7 && oldLvl < 7 && !countMagic) {
						AddString(weaDescr, "Counts as magical", "; ");
					} else if (newLvl < 7 && oldLvl >= 7 && countMagic) {
						Value(weaDescr, What(weaDescr).replace(/(,|;)? ?counts as magical/i, ''));
					}
				};
			};

			var NameEntity = "Ranger's Companion";
			var Explanation = "The Ranger's Companion adds the ranger's proficiency bonus (oProf) to all skills and saving throws it is proficient with, as well as to the to hit and damage of its attacks.";
			for (var f = 0; f < BlueTextArrayAdd.length; f++) {
				AddToModFld(BlueTextArrayAdd[f], "oProf", false, NameEntity, Explanation);
			};
			for (var f = 0; f < BlueTextArrayRemove.length; f++) {
				AddToModFld(BlueTextArrayRemove[f], "oProf", true, NameEntity, Explanation);
			};

			//then look into the hit points
			// first reset it to not assume a value automatically, if so set
			var theCompSetting = How(prefix + "Comp.Use.HP.Max").split(",");
			if (!deleteIt && theCompSetting[3] !== "nothing") {
				theCompSetting[3] = "nothing";
				tDoc.getField(prefix + "Comp.Use.HP.Max").submitName = theCompSetting.join();
			};
			// then add the new hp value
			if (thisCrea) {
				Value(prefix + "Comp.Use.HP.Max", Math.max(thisCrea.hp, RangerLvl * 4));
			} else {
				var newHP = Number(What(prefix + "Comp.Use.HP.Max")) + ((RangerLvl - RangerLvlOld) * 4);
				if (!isNaN(newHP)) Value(prefix + "Comp.Use.HP.Max", newHP);
			};

			//then look into the AC
			if (thisCrea) {
				Value(prefix + "Comp.Use.AC", thisCrea.ac + (deleteIt ? 0 : newLvlProfB));
			} else if (diff) {
				Value(prefix + "Comp.Use.AC", What(prefix + "Comp.Use.AC") + diff);
			};

			//then look into the attacks per action
			if (thisCrea && deleteIt) {
				Value(prefix + "Comp.Use.Attack.perAction", thisCrea.attacksAction);
			} else {
				Value(prefix + "Comp.Use.Attack.perAction", newLvl >= 11 ? 2 : 1);
			}

			//then look into the string in the notes field
			if (deleteIt) {
				for (var t = 0; t < textArray.length; t++) {
					RemoveString(prefix + "Cnote.Left", textArray[t]);
				};
			} else {
				var oldLvlText = theText(RangerLvlOld);
				ReplaceString(prefix + "Cnote.Left", newLvlText, false, oldLvlText);
			};

			//set the new level to the tooltip text of the remember field for later use
			if (!deleteIt) AddTooltip(prefix + "Companion.Remember", newLvl + "," + RangerLvl);
		}
	}
	if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
}

//update the tooltip for the Max HP field
function SetHPTooltip(resetHP, onlyComp) {
	// do the main character HP, if not set to only do the companion page(s)
	if (onlyComp == undefined || onlyComp === false) {
		var HDLVL = [
			Math.floor(What("HD1 Level")),
			Math.floor(What("HD2 Level")),
			Math.floor(What("HD3 Level"))
		];
		var HD = [
			Math.floor(What("HD1 Die")),
			Math.floor(What("HD2 Die")),
			Math.floor(What("HD3 Die"))
		];
		var ConMod = Number(What("Con Mod"));
		var hdstring = "The total hit points (with averages and max for 1st level)\n = ";
		var hdaverage = 0;
		var conhp = 0;
		var totalhd = 0;
		var extrastring = "";
		var hdadvleague = 0;
		var hdmax = 0;
		var extrahp = 0;

		for (var j = 0; j < HDLVL.length; j++) {
			HDLVL[j] = HDLVL[j] < 1 ? 1 : HDLVL[j];
		};

		for (var i = 0; i < HD.length; i++) {
			if (HD[i] !== 0) {
				if ((i === 0 && classes.hp === 0) || classes.hp === HD[i]) {
					hdcalc = HD[i] + (HDLVL[i] - 1) * ((HD[i] + 1) / 2);
					hdcalc2 = HD[i] + (HDLVL[i] - 1) * Math.ceil((HD[i] + 1) / 2);
					hdcalc3 = HDLVL[i] * HD[i];
				} else {
					hdcalc = HDLVL[i] * ((HD[i] + 1) / 2);
					hdcalc2 = HDLVL[i] * Math.ceil((HD[i] + 1) / 2);
					hdcalc3 = HDLVL[i] * HD[i];
				}
				hdstring += HDLVL[i] + "d" + HD[i] + " (" + hdcalc + ")";
				hdstring += (i === 2 || HD[i + 1] === 0) ? "" : " + ";
				hdaverage += hdcalc;
				hdadvleague += hdcalc2;
				hdmax += hdcalc3;
				totalhd += HDLVL[i];
				conhp += HDLVL[i] * ConMod;
			};
		};

		if (CurrentEvals.hp) {
			for (var hpEval in CurrentEvals.hp) {
				var evalThing = CurrentEvals.hp[hpEval];
				try {
					if (typeof evalThing == 'string') {
						eval(evalThing);
					} else if (typeof evalThing == 'function') {
						var addHP = evalThing(totalhd);
						if (!isArray(addHP)) addHP = [addHP];
						if ((addHP[0] || addHP[0] === 0) && !isNaN(addHP[0])) {
							if (!addHP[1]) addHP[1] = hpEval;
							extrahp += addHP[0];
							extrastring += addHP[2] ? addHP[1] : '\n ' + (addHP[0] > -1 ? "+ " : "") + addHP[0] + ' from ' + addHP[1];
						}
					}
				} catch (error) {
					var eText = "The custom hit point calculation addition '" + hpEval + "' produced an error! It will be removed from the sheet for now, but please contact the author of the feature to have this issue corrected:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
					delete CurrentEvals.hp[hpEval];
				}
			}
		}

		hdplaceholder = totalhd === 0 ? "level \u00D7 hit dice (0)" : "";
		totalhd = totalhd === 0 ? "level" : totalhd;
		conhp = conhp === 0 ? ConMod : conhp;
		hdstring += hdplaceholder + "\n + " + totalhd + " \u00D7 " + ConMod + " from Constitution (" + conhp + ")";
		hdstring += extrastring;
		hdstring += "\n\n \u2022 " + toUni(hdaverage + conhp + extrahp) + " is the total average HP";
		hdstring += "\n \u2022 " + toUni(hdadvleague + conhp + extrahp) + " is the total HP when using fixed values";
		hdstring += "\n \u2022 " + toUni(hdmax + conhp + extrahp) + " is the total maximum HP";

		//now add this tooltip
		AddTooltip("HP Max", hdstring);

		//now see if the menu setting tells us that we need to change
		var theSetting = How("HP Max").split(",");
		theSetting[0] = Number(Math.round(hdaverage + conhp + extrahp));
		theSetting[1] = Number(hdadvleague + conhp + extrahp);
		theSetting[2] = Number(hdmax + conhp + extrahp);
		var setHP = false;
		switch (theSetting[3]) {
			case "average" :
				setHP = theSetting[0];
				break;
			case "fixed" :
				setHP = theSetting[1];
				break;
			case "max" :
				setHP = theSetting[2];
				break;
		}
		if (setHP !== false) Value("HP Max", setHP);

		tDoc.getField("HP Max").submitName = theSetting.join();

		Value("HD1 Die", What("HD1 Die"));
		Value("HD2 Die", What("HD2 Die"));
		Value("HD3 Die", What("HD3 Die"));
	}

	// if it was set to only do the main character, stop now
	if (onlyComp !== undefined && onlyComp === false) return;

	// now do the same for every companion page
	var tempExtras = What("Template.extras.AScomp").split(",").splice(1);
	for (var tE = 0; tE < tempExtras.length; tE++) {
		var prefix = tempExtras[tE];
		var CompHDLVL = Math.floor(What(prefix + "Comp.Use.HD.Level"));
		var CompHD = Math.floor(What(prefix + "Comp.Use.HD.Die"));
		var CompConMod = Number(What(prefix + "Comp.Use.Ability.Con.Mod"));
		var Compconhp = 0;
		var CompAverageHD = 0;
		var CompFixedHD = 0;
		var CompMaxHD = 0;
		var Comphdplaceholder = "level \u00D7 hit dice (0)";

		//check if the fields are filled out at all
		if (CompHDLVL && CompHD) {
			Compconhp = CompHDLVL * CompConMod;
			CompAverageHD = CompHDLVL * ((CompHD + 1) / 2);
			CompFixedHD = CompHDLVL * Math.ceil((CompHD + 1) / 2) + Compconhp;
			CompMaxHD = CompHDLVL * CompHD + Compconhp;
			Comphdplaceholder = CompHDLVL + "d" + CompHD + " (" + CompAverageHD + ")";
		}

		var compHPsting = "The total hit points (with averages)\n = ";
		compHPsting += Comphdplaceholder;
		compHPsting += "\n + " + CompHDLVL + " \u00D7 " + CompConMod + " from Constitution (" + Compconhp + ")";
		compHPsting += "\n + Special modifiers from other sources";
		compHPsting += "\n\n \u2022 " + (CompAverageHD + Compconhp) + " is the total average HP";
		compHPsting += "\n \u2022 " + CompFixedHD + " is the total HP when using fixed values";
		compHPsting += "\n \u2022 " + CompMaxHD + " is the total maximum HP";
		AddTooltip(prefix + "Comp.Use.HP.Max", compHPsting);

		//now see if the menu setting tells us that we need to change
		var theCompSetting = How(prefix + "Comp.Use.HP.Max").split(",");
		theCompSetting[0] = Number(Math.round(CompAverageHD + Compconhp));
		theCompSetting[1] = Number(CompFixedHD);
		theCompSetting[2] = Number(CompMaxHD);
		if (resetHP) theCompSetting[3] = "nothing";
		var setCompHP = false;
		switch (theCompSetting[3]) {
			case "average" :
				setCompHP = theCompSetting[0];
				break;
			case "fixed" :
				setCompHP = theCompSetting[1];
				break;
			case "max" :
				setCompHP = theCompSetting[2];
				break;
		}
		if (setCompHP !== false) Value(prefix + "Comp.Use.HP.Max", setCompHP);

		tDoc.getField(prefix + "Comp.Use.HP.Max").submitName = theCompSetting.join();

		Value(prefix + "Comp.Use.HD.Die", What(prefix + "Comp.Use.HD.Die"));
	}
};

function MakeHPMenu_HPOptions(preSelect) {

	//define some variables
	var theFld = preSelect ? "HP Max" : event.target.name.replace("Buttons.", "");
	var theInputs = tDoc.getField(theFld).submitName.split(",");
	if (!preSelect || preSelect == "justMenu") {
		var optionsArray = [
			["The total average HP (" + theInputs[0] + ")", "average"],
			["The total HP when using fixed values (" + theInputs[1] + ")", "fixed"],
			["The total maximum HP (" + theInputs[2] + ")", "max"]
		]
		var hpMenu = [];

		var menuLVL2 = function (menu, name, array) {
			var temp = {};
			temp.cName = name[0];
			temp.oSubMenu = [];
			for (var i = 0; i < array.length; i++) {
				var isMarked = name[1] === "auto" && array[i][1] === theInputs[3];
				temp.oSubMenu.push({
					cName : array[i][0],
					cReturn : "hp#" + name[1] + "#" + theInputs[i] + "#" + array[i][1],
					bMarked : isMarked
				})
			}
			menu.push(temp);
		};

		menuLVL2(hpMenu, ["Change the Max HP to", "change"], optionsArray);
		optionsArray.push(["Don't change the maximum HP automatically", "nothing"])
		menuLVL2(hpMenu, ["Set the Max HP to automatically assume", "auto"], optionsArray);

		//parse it into a global variable
		Menus.hp = hpMenu;
		if (preSelect == "justMenu") return;
	};

	//now call the menu
	var MenuSelection = preSelect ? preSelect : getMenu("hp");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	switch (MenuSelection[1]) {
	 case "auto" :
		theInputs[3] = MenuSelection[3];
		tDoc.getField(theFld).submitName = theInputs.join();
	 case "change" :
		if (MenuSelection[3] !== "nothing") {
			//set the value of the field
			Value(theFld, MenuSelection[2]);
		}
	}
};

// add the action "Attack (X attacks per action)" to the top of the "actions" fields, if there is room to do so
function AddAttacksPerAction() {
	if (typePF) {
		var theString = ["Attack (", " attacks per action)"];
		var regExStr = /\d+.{0,3}attacks/i;
		if (Number(classes.attacks) < 2) {
			RemoveAction("action", regExStr, "Extra attack class feature");
		} else {
			// first see if it isn't anywhere already
			var actFld = false;
			for (var i = 1; i <= FieldNumbers.trueactions; i++) {
				var actVal = What("Action " + i);
				if ((regExStr).test(actVal)) {
					actFld = actVal.indexOf(classes.attacks) === -1 ? "Action " + i : false;
					break;
				} else if (actVal === "") {
					actFld = true;
				};
			};
			//then if a matching field is found, put it there, or otherwise put it at the top
			if (actFld !== false && actFld !== true) {
				Value(actFld, theString[0] + classes.attacks + theString[1]);
			} else if (actFld) {
				if (What("Action 1") !== "") ActionInsert("action", 1);
				AddAction("action", theString[0] + classes.attacks + theString[1], "Extra attack class feature");
			}
		}
	} else {
		Value("Attacks per Action", classes.attacks);
	}
}

// set the symbol of a faction (keystroke)
var SetFactionSymbolIgnore = false;
function SetFactionSymbol(theFld, newValue, commitIt) {
	if (minVer) return;
	if (!SetFactionSymbolIgnore) {
		theFld = theFld ? tDoc.getField(theFld) : event.target;
		SetFactionSymbolIgnore = true;
		if (newValue !== undefined || (event.changeEx && event.changeEx !== event.target.value)) {
			if (newValue === undefined) newValue = event.changeEx;
			var theSymbolFld = tDoc.getField("SaveIMG.Faction." + newValue + ".symbol");
			if (theSymbolFld) {
				var theIcon = theSymbolFld.buttonGetIcon();
				tDoc.getField("Symbol").buttonSetIcon(theIcon);
				Show("Symbol");
			}
			if (factions[newValue]) tDoc.getField("Background_FactionRank.Text").setItems([""].concat(factions[newValue].ranks));
			theFld.temp = newValue;
		} else if (newValue === "" || (event && event.value !== undefined && event.value === "")) {
			Clear("Background_FactionRank.Text");
		}
		// when committing, set all the faction symbol fields to match this one
		if (commitIt || event.willCommit) {
			var logTemps = What("Template.extras.ALlog").split(",");
			for (var T = 0; T <= logTemps.length; T++) {
				var BckgrFld = T === logTemps.length ? "Background_Faction.Text" : logTemps[T] + "AdvLogS.Background_Faction.Text";
				if (theFld.name !== BckgrFld) Value(BckgrFld, theFld.temp ? theFld.temp : (newValue !== undefined ? newValue : event.value));
			}
		}
		SetFactionSymbolIgnore = false;
	}
}

//update the other faction symbol fields (only on AdvLogOnly) (field blur)
function UpdateFactionSymbols() {
	var prefix = getTemplPre(event.target.name, "ALlog", true);
	var ALlogA = What("Template.extras.ALlog").split(",");
	for (var Al = 0; Al < ALlogA.length; Al++) {
		if (ALlogA[Al] === prefix) continue;
		tDoc.getField(ALlogA[Al] + "AdvLogS.Background_Faction.Text").value = event.value;
	}
}

//make a menu for the text fields and text line options
//after that, do something with the menu and its results
function MakeTextMenu_TextOptions(input) {
	var isBoxesLines = What("BoxesLinesRemember");

	if (!input || input === "justMenu") {
		Menus.texts = [{
				cName : "Change the font size and/or font",
				cReturn : "text#dodialog"
			}, {
				cName : "-",
				cReturn : "-"
			}
		];

		if (typePF) {
			Menus.texts.push({
				cName : "Single-line fields",
				oSubMenu : [{
					cName : "Show boxes for single-line fields",
					cReturn : "text#calc_boxes",
					bMarked : isBoxesLines === "calc_boxes"
				}, {
					cName : "Show lines for single-line fields",
					cReturn : "text#calc_lines",
					bMarked : isBoxesLines === "calc_lines"
				}]
			});
			Menus.texts.push({cName : "-", cReturn : "-"});
		};

		Menus.texts.push({
			cName : "Multi-line fields",
			oSubMenu : [{
				cName : "Show lines for multi-line fields",
				cReturn : "text#show lines",
				bMarked : !CurrentVars.whiteout
			}, {
				cName : "Hide lines for multi-line fields",
				cReturn : "text#hide lines",
				bMarked : CurrentVars.whiteout
			}]
		});
		if (input !== "justMenu") {
			makeUnicodeMenu();
			Menus.texts.push({cName : "-", cReturn : "-"}); // add a divider
			Menus.texts.push(Menus.unicode);
		}
		if (input === "justMenu") return;
	};

	//now call the menu
	var MenuSelection = input ? input : getMenu("texts");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	if (MenuSelection !== undefined && MenuSelection[0] !== "nothing") {
		switch (MenuSelection[1]) {
		 case "dodialog" :
			SetTextOptions_Button();
			break;
		 case "calc_boxes" :
		 case "calc_lines" :
			ShowCalcBoxesLines(MenuSelection[1]);
			break;
		 case "show lines" :
			ToggleWhiteout(false);
			break;
		 case "hide lines" :
			ToggleWhiteout(true);
			break;
		 case "unicode" :
			setUnicodeUse(MenuSelection[2]);
			break;
		};
	};
};

//make the calculation lines or boxes visible
function ShowCalcBoxesLines(input) {
	input = input ? input.toLowerCase() : "calc_boxes";
	if (!typePF || (input !== "calc_boxes" && input !== "calc_lines")) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the single-line fields to have " + (input === "calc_boxes" ? "boxes" : "lines") + "...");
	calcStop();

	Value("BoxesLinesRemember", input);
	var ShowBHideL = input === "calc_boxes" ? "Show" : "Hide";
	var HideBShowL = input === "calc_boxes" ? "Hide" : "Show";
	tDoc[ShowBHideL]("Image.calc_boxes");
	tDoc[HideBShowL]("Image.calc_lines");

	//now get all the template prefixes
	var prefixA = What("Template.extras.AScomp").split(",");
	prefixA = prefixA.concat(What("Template.extras.WSfront").split(","));
	prefixA = prefixA.concat(What("Template.extras.ALlog").split(","));

	for (var i = 0; i < prefixA.length; i++) {
		var prefix = prefixA[i];
		if (prefix !== "") {
			tDoc[ShowBHideL](prefix + "Image.calc_boxes");
			tDoc[HideBShowL](prefix + "Image.calc_lines");
		}
	}

	if (!minVer && What("HoSRememberState") !== "Honor" && What("HoSRememberState") !== "Honor") {
		Hide("Image.calc_lines.HoS");
		Hide("Image.calc_boxes.HoS");
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

//chane the format of all the date fields of the AL log pages
function UpdateALdateFormat(dateForm) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the date format...");
	calcStop();

	dateForm = dateForm ? dateForm : What("DateFormat_Remember");
	Value("DateFormat_Remember", dateForm);
	var ALlogA = What("Template.extras.ALlog").split(",").splice(1);
	for (var tA = 0; tA < ALlogA.length; tA++) {
		var prefix = ALlogA[tA];
		for (var i = 1; i < FieldNumbers.logs; i++) {
			var dateFld = prefix + "AdvLog." + i + ".date";
			Value(dateFld, What(dateFld));
		};
	};
	thermoM(thermoTxt, true); // Stop progress bar
};

//return the value of the field that this notes field (field calculation)
function CalcCompNotes() {
	var prefix = getTemplPre(event.target.name, "AScomp", true);
	var notesFld = prefix + (typePF ? "Cnote.Left" : "Cnote.Right");
	event.value = What(notesFld);
}

// add the content to all the other fields that should share the content (field validation)
function ValidateCompNotes() {
	var prefix = getTemplPre(event.target.name, "AScomp", true);
	var notesFld = prefix + (typePF ? "Cnote.Left" : "Cnote.Right");
	var theValue = What(notesFld);
	if (event.value !== theValue) {
		Value(notesFld, event.value);
	}
}

// show the selected layers on the companion page
function ShowCompanionLayer(prefix) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Changing the visible sections on the companion page...");
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	prefix = prefix ? prefix : "";
	var notesFld = prefix + (typePF ? "Cnote.Left" : "Cnote.Right");
	var toShow = eval(What(prefix + "Companion.Layers.Remember")); //an array with two true/false values, the first is for the image section, second is for the equipment section
	var changeNotes = typePF ? toShow[1] : toShow[0] || toShow[1];

	if (changeNotes) {
		Hide(notesFld);
	} else {
		Show(notesFld);
	}
	if (toShow[0]) {
		Show(prefix + "Comp.img");
		if (toShow[1] && !typePF) {
			Hide(prefix + "Comp.img.Notes");
		} else if (typePF) {
			Hide(prefix + "Cnote.Right");
		}
	} else {
		Hide(prefix + "Comp.img");
		if (typePF) Show(prefix + "Cnote.Right");
	}
	if (toShow[1]) {
		Show(prefix + "Comp.eqp");
		DontPrint(prefix + "Comp.eqpB");
		if (toShow[0] && !typePF) Hide(prefix + "Comp.eqp.Notes");
	} else {
		Hide(prefix + "Comp.eqp.");
		Hide(prefix + "Comp.eqpB");
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

//(re)set the dropdowns
function UpdateDropdown(type, weapon) {
	if (minVer || !IsNotUserScript) return;
	IsSetDropDowns = true;
	type = type ? type.toLowerCase() : "all";
	var notAll, forceTT = false;
	calcStop();
	switch (type) {
	 case "tooltips" :
		forceTT = true;
	 case "resources" :
		notAll = true;
	 case "all" :
		SetRacesdropdown(forceTT);
		SetBackgrounddropdown(forceTT);
		SetBackgroundFeaturesdropdown(forceTT);
		SetFeatsdropdown(forceTT);
		SetMagicItemsDropdown(forceTT);
		SetCompDropdown(forceTT);
		SetWildshapeDropdown(forceTT);
		SetArmordropdown(forceTT);
		SetAmmosdropdown(forceTT);
		if (notAll) {
			SetWeaponsdropdown(forceTT);
			break;
		}
	 case "attack" :
	 case "attacks" :
	 case "weapon" :
	 case "weapons" :
		if (weapon) {
			if (!isArray(weapon)) weapon = [weapon]; //make this into an array
			weapon.forEach( function (wea) {
				var weaKey = WeaponsList[wea];
				if (!weaKey || weaKey.list) return;
				weaKey.list = "extra";
			});
		};
		SetWeaponsdropdown();
		break;
	 case "armour" :
	 case "armours" :
	 case "armor" :
	 case "armors" :
		SetArmordropdown();
		break;
	 case "race" :
	 case "races" :
		SetRacesdropdown();
		SetCompDropdown();
		break;
	 case "background" :
	 case "backgrounds" :
		SetBackgrounddropdown();
		break;
	 case "backgroundfeature" :
	 case "backgroundfeatures" :
		SetBackgroundFeaturesdropdown();
		break;
	 case "feat" :
	 case "feats" :
		SetFeatsdropdown();
		break;
	 case "item" :
	 case "items" :
	 case "magic" :
	 case "magic item" :
	 case "magic items" :
		SetMagicItemsDropdown();
		break;
	 case "ammo" :
	 case "ammunition" :
	 case "ammunitions" :
		SetAmmosdropdown();
		break;
	 case "creature" :
	 case "creatures" :
	 case "wildshape" :
	 case "wildshapes" :
		SetCompDropdown();
		SetWildshapeDropdown();
		break;
	};
	IsSetDropDowns = false;
};

function ChangeToCompleteAdvLogSheet() {
	if (minVer) return;
	ResetAll();
	tDoc.resetForm(["User Script", "User_Imported_Files.Stringified"]); // remove all custom scripts
	tDoc.getField("AdvLog.Class and Levels").setAction("Calculate", "CalcAdvLogInfo();");
	tDoc.getField("AdvLog.Class and Levels").setAction("Validate", "ValidateAdvLogInfo();");
	tDoc.getField("AdvLog.Class and Levels").readonly = false;

	tDoc.getField("AdvLogS.Background_Faction.Text").setAction("OnBlur", "UpdateFactionSymbols();");
	tDoc.getField("AdvLogS.Background_Faction.Text").setAction("Keystroke", "");

	tDoc.getTemplate("ALlog").spawn(0, true, false);
	tDoc.deletePages({nStart: 1, nEnd: tDoc.numPages - 1});
	tDoc.getTemplate("ALlog").hidden = false;
	tDoc.getTemplate("remember").hidden = false;
	tDoc.getTemplate("blank").hidden = false;
	Value("Template.extras.ALlog", ",P0.ALlog.");

	//remove the saveIMG fields that are now useless
	tDoc.removeField("SaveIMG.SpellSlots");
	tDoc.removeField("SaveIMG.Spells");

	if (typePF) { //if the Printer Friendly version, update the copyright
		var newCR = "Made by Joost Wijnen (mpmb@flapkan.com); Design inspired by Wizards of the Coast " + (tDoc.info.SheetType === "Printer Friendly" ? "adventure logsheet" : "character sheet");
		tDoc.getField("CopyrightInformation").defaultValue = newCR;
		tDoc.getField("P0.ALlog.CopyrightInformation").defaultValue = newCR;
		tDoc.resetForm(["CopyrightInformation", "P0.ALlog.CopyrightInformation"]);
	} else { //if the Colorful version, remove some more useless fields
		tDoc.removeField("SaveIMG.Title");
		tDoc.removeField("SaveIMG.Level");
		tDoc.removeField("SaveIMG.Attack");
		tDoc.removeField("SaveIMG.Prof");
		tDoc.removeField("SaveIMG.Stats");
		tDoc.removeField("SaveIMG.Header.Right");
		tDoc.removeField("SaveIMG.DividerFlip");
		tDoc.removeField("SaveIMG.Arrow");
		tDoc.removeField("SaveIMG.IntArrow");
		tDoc.removeField("SaveIMG.HPdragonhead");
		tDoc.removeField("SaveIMG.SaveDC");
		tDoc.removeField("SaveIMG.DnDLogo");
		tDoc.removeField("SaveIMG.Honor");
		tDoc.removeField("SaveIMG.Sanity");
	};

	var keyPF = "This Adventure Logsheet is an extraction from MPMB's Character Record Sheet [Printer Friendly]. It follows the design and uses elements of the official D&D 5e adventure logsheet by Wizards of the Coast, but has been heavily modified by Joost Wijnen [morepurplemorebetter] (mpmb@flapkan.com).\\n\\nOther credits:\\n- Gretkatillor on ENworld.org for the code in this sheet was inspired by Gretkatillor's brilliant 'Clean Sheet'.";

	var keyPFR = "This Adventure Logsheet is an extraction from MPMB's Character Record Sheet [Printer Friendly - Redesign]. It follows the design idea of the official D&D 5e character sheet by Wizards of the Coast, but has been created from the ground up by Joost Wijnen [morepurplemorebetter] (mpmb@flapkan.com).\\n\\nOther credits:\\n- Gretkatillor on ENworld.org for the code in this sheet was inspired by Gretkatillor's brilliant 'Clean Sheet'.";

	var keyCF = "This Adventure Logsheet is an extraction from MPMB's Character Record Sheet [" + tDoc.info.SheetType + "]. This sheet uses elements designed by Javier Aumente, but has been created from the ground up by Joost Wijnen [morepurplemorebetter] (mpmb@flapkan.com).\\n\\nOther credits:\\n- Gretkatillor on ENworld.org for the code in this sheet was inspired by Gretkatillor's brilliant 'Clean Sheet'."

	//move the pages that we want to extract to a new instance, by running code from a console
	var forConsole = "tDoc.extractPages({nStart: 0, nEnd: 3});\n\n";
	forConsole += "this.info.AdvLogOnly = true;";
	forConsole += " var toDelScripts = ['AbilityScores', 'ClassSelection', 'ListsBackgrounds', 'ListsClasses', 'ListsCreatures', 'ListsFeats', 'ListsGear', 'ListsPsionics', 'ListsRaces', 'ListsSources', 'ListsSpells']; for (var s = 0; s < toDelScripts.length; s++) {this.removeScript(toDelScripts[s]);};";
	forConsole += " this.createTemplate({cName:\"ALlog\", nPage:1 });";
	forConsole += " this.createTemplate({cName:\"remember\", nPage:2 });";
	forConsole += " this.createTemplate({cName:\"blank\", nPage:3 });";
	forConsole += " this.getTemplate(\"ALlog\").hidden = true;";
	forConsole += " this.getTemplate(\"remember\").hidden = true;";
	forConsole += " this.getTemplate(\"blank\").hidden = true;";
	forConsole += " this.info.SheetVersion = \"" + tDoc.info.SheetVersion + "\";";
	forConsole += " this.info.SheetType = \"" + tDoc.info.SheetType + "\";";
	forConsole += " this.info.Keywords = \"" + (!typePF ? keyCF : (tDoc.info.SheetType === "Printer Friendly" ? keyPF : keyPFR)) + "\";";
	forConsole += " this.info.Subject = \"D&D 5e; Character Sheet; Adventurers League; Adventure Logsheet\";";
	forConsole += " this.info.ContactEmail = \"mpmb@flapkan.com\";";
	forConsole += " this.info.Title = MakeDocName();";
	forConsole += " typePF = (/printer friendly/i).test(this.info.SheetType);";
	forConsole += " typeA4 = (/a4/i).test(this.info.SheetType);";
	forConsole += " typeLR = (/letter/i).test(this.info.SheetType);";
	forConsole += " minVer = this.info.SpellsOnly || this.info.AdvLogOnly;";
	forConsole += " CreateBkmrksCompleteAdvLogSheet();";
	forConsole += " this.calculateNow();";
	forConsole += " this.importDataObject({cName: 'FAQ.pdf', cDIPath: \"/D/Doc/NAS/02 Hobby/Dungeons & Dragons/5th Edition/- Sheets Creation/- MPMB's Character Record Sheet/Frequently Asked Questions/FAQ.pdf\"});";
	forConsole += " Value(\"Opening Remember\", \"No\");";
	forConsole += " app.execMenuItem(\"GeneralInfo\");";
	console.show();
	console.println("Execute the following:\n" + forConsole);
}

//create the bookmarks of a Adventure Logsheet
function CreateBkmrksCompleteAdvLogSheet() {
	//make the functions bookmark section
	tDoc.bookmarkRoot.createChild({cName: "Functions", cExpr: "MakeButtons();", nIndex: 0});

	var NameBm = typePF ? "Set Highlight Color" : "Set Color Theme";
	tDoc.bookmarkRoot.children[0].createChild({cName: NameBm, cExpr: "MakeColorMenu(); ColoryOptions();", nIndex: 0});
	tDoc.bookmarkRoot.children[0].children[0].color = ["RGB", 0.5, 0.5, 0.5];

	tDoc.bookmarkRoot.children[0].createChild({cName: "Unit System", cExpr: "SetUnitDecimals_Button();", nIndex: 0});
	tDoc.bookmarkRoot.children[0].children[0].color = ["RGB",0.463,0.192,0.467];

	tDoc.bookmarkRoot.children[0].createChild({cName: "Flatten", cExpr: "MakeMobileReady();", nIndex: 0});
	tDoc.bookmarkRoot.children[0].children[0].color = ["RGB", 0.2823486328125, 0.1921539306640625, 0.478424072265625];

	tDoc.bookmarkRoot.children[0].createChild({cName: "Text Options", cExpr: "MakeTextMenu_TextOptions();", nIndex: 0});
	tDoc.bookmarkRoot.children[0].children[0].color = ["RGB", 0.8000030517578125, 0.6666717529296875, 0.1137237548828125];

	tDoc.bookmarkRoot.children[0].createChild({cName: "Set Pages Layout", cExpr: "MakeAdvLogMenu_AdvLogOptions(true);", nIndex: 0});
	tDoc.bookmarkRoot.children[0].children[0].color = ["RGB", 0.9098052978515625, 0.196075439453125, 0.48626708984375];

	//make links bookmark section
	tDoc.bookmarkRoot.createChild({cName: "Links", cExpr: "", nIndex: 1});

	var aLink = typePF ? "http://www.dmsguild.com/product/186823/" : "http://www.dmsguild.com/product/193053/";
	tDoc.bookmarkRoot.children[1].createChild({cName: "Get the Full Character Record Sheet", cExpr: "contactMPMB('fullversion');", nIndex: 0});

	var NameLink = tDoc.info.SheetType === "Printer Friendly" ? "Get the Printer Friendly Redesign" : "Get the Latest Version";
	tDoc.bookmarkRoot.children[1].createChild({cName: NameLink, cExpr: "contactMPMB('latestversion');", nIndex: 1});

	NameLink = typePF ? "Get the Colorful Design" : "Get the Printer Friendly Design";
	tDoc.bookmarkRoot.children[1].createChild({cName: NameLink, cExpr: "contactMPMB('otherdesign');", nIndex: 2});

	//make FAQ bookmark section
	tDoc.bookmarkRoot.createChild({cName: "FAQ", cExpr: "getFAQ();", nIndex: 2});

	//make the contact bookmark section
	tDoc.bookmarkRoot.createChild({cName: "Contact MPMB", cExpr: "contactMPMB('patreon');", nIndex: 3});
	tDoc.bookmarkRoot.children[3].style = 2;
	tDoc.bookmarkRoot.children[3].createChild({cName: "on DMs Guild", cExpr: "contactMPMB('dmsguild');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "on EN world", cExpr: "contactMPMB('enworld');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "via Email", cExpr: "contactMPMB('email');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "on GitHub", cExpr: "contactMPMB('github');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "on Reddit", cExpr: "contactMPMB('reddit');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "on Twitter", cExpr: "contactMPMB('twitter');", nIndex: 0});
	tDoc.bookmarkRoot.children[3].createChild({cName: "on Patreon", cExpr: "contactMPMB('patreon');", nIndex: 0});

	//make all bookmarks bold
	for (var p = 0; p < tDoc.bookmarkRoot.children.length; p++) {
		tDoc.bookmarkRoot.children[p].style = 2;
		if (tDoc.bookmarkRoot.children[p].children) {
			for (var c = 0; c < tDoc.bookmarkRoot.children[p].children.length; c++) {
				tDoc.bookmarkRoot.children[p].children[c].style = 2;
			}
		}
	}
}

// update all the level-dependent features for the UA's revised ranger companions on the companion pages
function UpdateRevisedRangerCompanions(newLvl) {
	var thermoTxt;

	var notesArray = [
		"\u2022 " + "When I take the Attack action, my companion can use its reaction to make one melee attack", //add at level 5
		"\u2022 " + "While my companion can see me, it has advantage on all saving throws", //add at level 7
		"\u2022 " + "My companion can, as an action, make a melee attack vs. all creatures within 5 ft of it", //add at level 11
		"\u2022 " + "My companion can, as a reaction, halve the damage of an attack from an attacker that it sees", //add at level 15
	];

	var theText = function (input) {
		var toReturn = "My companion gains a bonus on damage rolls against my favored enemies just like me";
		if (input >= 5) {
			toReturn += "\n" + notesArray[0];
		}
		if (input >= 7) {
			toReturn += "\n" + notesArray[1];
		}
		if (input >= 11) {
			toReturn += "\n" + notesArray[2];
		}
		if (input >= 15) {
			toReturn += "\n" + notesArray[3];
		}
		return What("Unit System") === "imperial" ? toReturn : ConvertToMetric(toReturn, 0.5);
	}

	var featuresArray = [
		"\u25C6 " + "Coordinated Attack: " + "As a reaction when the ranger owner takes the attack action, the companion can make one melee attack.", //add at level 5
		"\u25C6 " + "Beast's Defense: " + "While the ranger owner is within eyeshot, the companion has advantage on all saving throws.", //add at level 7
		"\u25C6 " + "Storm of Claws and Fangs: " + "As an action, the companion can make a melee attack against each creature that is within 5 ft.", //add at level 11
		"\u25C6 " + "Superior Beast's Defense: " + "As a reaction, the companion can halve the damage of an attack from an attacker that it can see.", //add at level 15
	];

	var theFeature = function (input) {
		var toReturn = "";
		if (input >= 5) {
			toReturn += featuresArray[0];
		}
		if (input >= 7) {
			toReturn += "\n" + featuresArray[1];
		}
		if (input >= 11) {
			toReturn += "\n" + featuresArray[2];
		}
		if (input >= 15) {
			toReturn += "\n" + featuresArray[3];
		}
		return What("Unit System") === "imperial" ? toReturn : ConvertToMetric(toReturn, 0.5);
	}

	var ASIs = 0;
	for (var aClass in classes.known) {
		var classLvL = Math.min(CurrentClasses[aClass].improvements.length, classes.known[aClass].level);
		ASIs += 2 * CurrentClasses[aClass].improvements[classLvL - 1];
	}
	var ASIstring = function (aCreat) {
		var toReturn = "whenever I gain an ASI\r   Currently, there are " + ASIs + " points ";
		toReturn += aCreat && aCreat.scores ? "(default: " + aCreat.scores[0] + " Str, " + aCreat.scores[1] + " Dex, " + aCreat.scores[2] + " Con, " + aCreat.scores[3] + " Int, " + aCreat.scores[4] + " Wis, " + aCreat.scores[5] + " Cha)" : "to divide among the ability scores";
		return toReturn;
	}

	newLvl = newLvl !== undefined ? newLvl : Number(What("Character Level"));
	var deleteIt = newLvl === 0;
	var newLvlProfB = newLvl ? ProficiencyBonusList[Math.min(newLvl, ProficiencyBonusList.length) - 1] : 0;
	var RangerLvl = deleteIt || !classes.known.rangerua ? newLvl : classes.known.rangerua.level;
	var newLvlText = theText(RangerLvl);
	var newLvlFea = theFeature(RangerLvl);
	var AScompA = What("Template.extras.AScomp").split(",").splice(1);

	for (var i = 0; i < AScompA.length; i++) {
		var prefix = AScompA[i];
		if (What(prefix + "Companion.Remember") === "companionrr") { //only do something if the creature is set to "companionrr"

			if (!thermoTxt) { // Start progress bar and stop calculations
				thermoTxt = thermoM("Updating Revised Ranger's Companion(s)...");
				calcStop();
			}

			thermoM((i+2)/(AScompA.length+2)); //increment the progress dialog's progress

			var thisCrea = CurrentCompRace[prefix] && CurrentCompRace[prefix].typeFound === "creature" ? CurrentCompRace[prefix] : false;

			//first update the proficiency bonus
			Value(prefix + "Comp.Use.Proficiency Bonus", !deleteIt ? newLvlProfB : thisCrea ? thisCrea.proficiencyBonus : "");

			//now look into adding the proficiency bonus to attack damage and removing multiattacks
			var remLvl = Who(prefix + "Companion.Remember").split(",");
			var oldLvl = Number(remLvl[0]);
			var RangerLvlOld = remLvl[1] !== undefined ? Number(remLvl[1]) : 0;
			var oldLvlProfB = oldLvl ? ProficiencyBonusList[Math.min(oldLvl, ProficiencyBonusList.length) - 1] : 0;
			var diff = newLvlProfB - oldLvlProfB;

			//add ranger's prof to attacks damage fields
			var NameEntity = "Revised Ranger's Companion";
			var Explanation = "The Revised Ranger's Companion adds the ranger's proficiency bonus (oProf) to the damage of its attacks.";
			for (var A = 1; A <= 3; A++) {
				if (What(prefix + "Comp.Use.Attack." + A + ".Weapon Selection")) {
					var weaFldDmg = prefix + "BlueText.Comp.Use.Attack." + A + ".Damage Bonus";
					var hasProfAdded = What(weaFldDmg).indexOf("oProf") !== -1;
					if (!deleteIt) {
						ReplaceString(prefix + "Comp.Use.Attack." + A + ".Description", "", false, "(((One|Two).+as an Attack action)|(2 per Attack));? ?", true);
						if (!hasProfAdded) AddToModFld(weaFldDmg, "oProf", false, NameEntity, Explanation);
					} else if (deleteIt && hasProfAdded) {
						AddToModFld(weaFldDmg, "oProf", true, NameEntity, Explanation);
					};
				};
			};

			//add the HD
			if (thisCrea && deleteIt) {
				Value(prefix + "Comp.Use.HD.Level", thisCrea.hd[0]);
			} else if (thisCrea) {
				Value(prefix + "Comp.Use.HD.Level", thisCrea.hd[0] + RangerLvl - 3);
			} else if (What(prefix + "Comp.Use.HD.Level")) {
				var HDincr = oldLvl === 0 ? RangerLvl - 3 : RangerLvl - oldLvl;
				Value(prefix + "Comp.Use.HD.Level", What(prefix + "Comp.Use.HD.Level") + HDincr);
			}
			var theCompSetting = How(prefix + "Comp.Use.HP.Max").split(",");
			theCompSetting[3] = deleteIt ? "nothing" : "fixed";
			tDoc.getField(prefix + "Comp.Use.HP.Max").submitName = theCompSetting.join();

			//add the alignment
			if (thisCrea && deleteIt) {
				Value(prefix + "Comp.Desc.Alignment", thisCrea.alignment);
			} else {
				var theAL = tDoc.getField("Alignment").currentValueIndices;
				if (theAL !== -1) {
					PickDropdown(prefix + "Comp.Desc.Alignment", theAL);
				} else {
					Value(prefix + "Comp.Desc.Alignment", What("Alignment"));
				}
			}

			//add saving throw proficiencies
			for (var s = 0; s < 6; s++) {
				var saveFld = prefix + "Comp.Use.Ability." + AbilityScores.abbreviations[s] + ".ST";
				if (deleteIt && thisCrea && thisCrea.saves[s] !== "") {
					Checkbox(saveFld + ".Prof"); //set the save as proficient
				} else if (deleteIt) {
					Checkbox(saveFld + ".Prof", false); //set the save as not proficient
				} else {
					Checkbox(saveFld + ".Prof"); //set the save as proficient
				}
			}

			//then look into the AC
			if (deleteIt) {
				Value(prefix + "Comp.Use.AC", thisCrea ? thisCrea.ac : '');
			} else if (diff) {
				Value(prefix + "Comp.Use.AC", What(prefix + "Comp.Use.AC") + diff);
			};

			//then look into the attacks per action
			if (thisCrea && deleteIt) {
				Value(prefix + "Comp.Use.Attack.perAction", thisCrea.attacksAction);
			} else {
				Value(prefix + "Comp.Use.Attack.perAction", 1);
			}

			//remove the old ASI line (if any)
			var ASIregex = /whenever I gain an ASI\r.*Currently.+(scores|Cha\))/;
			if ((ASIregex).test(What(prefix + "Cnote.Left"))) {
				ReplaceString(prefix + "Cnote.Left", "whenever I gain an ASI", false, "whenever I gain an ASI\\r.*Currently.+(scores|Cha\\))", true);
			}

			//then look into the string in the notes and feature fields
			if (deleteIt) {
				for (var t = 0; t < notesArray.length; t++) {
					RemoveString(prefix + "Cnote.Left", notesArray[t]);
				}
				for (var t = 0; t < featuresArray.length; t++) {
					RemoveString(prefix + "Comp.Use.Features", featuresArray[t]);
				}
				RemoveString(prefix + "Cnote.Left", compString.companionrr.string);
			} else {
				var oldLvlText = theText(RangerLvlOld);
				ReplaceString(prefix + "Cnote.Left", newLvlText, false, oldLvlText);
				var oldLvlFea = theFeature(RangerLvlOld);
				ReplaceString(prefix + "Comp.Use.Features", newLvlFea, false, oldLvlFea);
				var creaASI = ASIstring(thisCrea);
				ReplaceString(prefix + "Cnote.Left", creaASI, false, "whenever I gain an ASI");

				//remove any multiattack trait
				ReplaceString(prefix + "Comp.Use.Traits", "", false, "\u25C6 Multiattack: .+(\r|$)", true);
			}

			if (!deleteIt) {
				//set the new level to the tooltip text of the remember field for later use
				AddTooltip(prefix + "Companion.Remember", newLvl + "," + RangerLvl + ",");
			} else if (thisCrea && thisCrea.traits) {
				//bring back the multiattack trait, if applicable
				for (var t = 0; t < thisCrea.traits.length; t++) {
					var tName = thisCrea.traits[t].name;
					if ((/multiattack/i).test(tName)) {
						var traitString = "\u25C6 " + tName + ": " + thisCrea.traits[t].description;
						AddString(prefix + "Comp.Use.Traits", traitString, true);
					}
				}
			}
		}
	}
	if (thermoTxt) {
		SetHPTooltip(false, true);
		thermoM(thermoTxt, true); // Stop progress bar
	}
}

//a function to change the sorting of the skills
function MakeSkillsMenu_SkillsOptions(input, onlyTooltips) {
	var sWho = Who("Text.SkillsNames");
	var sList = Who("Acr Prof").replace(/^.*(\n|\r)*/, "");
	if (!input || input == "justMenu") {
		Menus.skills = [{
			cName : "Sort skills alphabetically",
			cReturn : "skills#alphabeta",
			bMarked : sWho === "alphabeta"
		}, {
			cName : "Sort skills by ability score",
			cReturn : "skills#abilities",
			bMarked : sWho === "abilities"
		}, {
			cName : "-"
		}, {
			cName : "Show a dialog with my skill options" + (sList ? "" : " (nothing to show)"),
			cReturn : "skills#dialog",
			bEnabled : sList !== ""
		}];
		if (input == "justMenu") return;
	};

	var mStr = toUni(" Bonus Modifier") + "\nThe number you type in here will be added to the calculated ";
	var mStr1 = " value.\n\n" + toUni("Dynamic Modifiers") + "\nYou can also have the field use ability score modifiers. To do this, use the abbreviations of ability scores (Str, Dex, Con, Int, Wis, Cha, HoS), math operators (+, -, /, *), and numbers.\n   For example: '2+Str' or 'Wis+Int'.\nDon't worry if you are only able to write one or two letters of an ability score's abbreviation, the field will auto-complete (e.g. typing 'S+1' will result in 'Str+1').";
	var mStrC = mStr1.replace(", HoS", "");
	var mStr2 = "\n\nNote that any bonus from \"Jack of All Trades\" or \"Remarkable Athelete\" will be added automatically if the appropriate checkbox is checked.";
	var mStr3 = "\n\n" + toUni("Not Enough Space to Write?") + "\nIf you find that you need more space to type out the modifier you want to use, you can get a bigger input-form by left-clicking in this field while holding either the Ctrl, Shift, or Cmd key.\n   This pop-up dialogue will also show you the origins of modifiers added by the automation, if any.";
	var getStr = function(aSkill, isCom) {
		return toUni(aSkill) + mStr + aSkill + (isCom ? mStrC : mStr1) + (isCom ? "" : mStr2) + mStr3;
	};

	if (onlyTooltips) { // only do the bonus modifier tooltips
		for (var S = 0; S < (SkillsList.abbreviations.length - 2); S++) {
			var newSkill = SkillsList.names[S];
			AddTooltip(SkillsList.abbreviations[S] + " Bonus", getStr(newSkill));
			if (typePF) AddTooltip("BlueText.Comp.Use.Skills." + SkillsList.abbreviations[S] + ".Bonus", getStr(newSkill, true), "");
		}
		return;
	};

	var MenuSelection = input ? input : getMenu("skills");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;

	if (MenuSelection[1] === "dialog") {
		ShowDialog("Skill proficiency origins and options", sList);
	} else if (MenuSelection[1] !== sWho) {
		// Start progress bar and stop calculations
		var thermoTxt = thermoM("Changing the order of the skills...");
		calcStop();
		var skillFlds = [" Prof", " Exp", " Bonus"];
		if (!typePF) skillFlds = skillFlds.concat([" Adv", " Dis"]);
		var skillRemObj = {}, useFld;

		// a function to do the actual copying
		var copy = function(fromObj, toObj, justObj) {
			if (fromObj.type == "checkbox") {
				if (justObj) {
					toObj.isBoxCheckVal = fromObj.isBoxChecked(0);
					toObj.type = "checkbox";
				} else {
					toObj.checkThisBox(0, fromObj.isBoxCheckVal);
				}
			} else {
				toObj.value = fromObj.value;
			}
			toObj.userName = fromObj.userName;
			toObj.submitName = fromObj.submitName;
			toObj.readonly = fromObj.readonly;
		}

		// Swap everything between the two types of lists
		for (var n = 1; n <= 2; n++) {
			for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
				var aSkill = SkillsList.abbreviations[s];
				var linkedSkill = SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(aSkill)];
				if (n == 1) {
					skillRemObj[aSkill] = {};
					useFld = sWho === "alphabeta" ? aSkill : linkedSkill;
				} else {
					useFld = sWho === "alphabeta" ? linkedSkill : aSkill;
				}
				for (var i = 0; i < skillFlds.length; i++) {
					if (n == 1) {
						skillRemObj[aSkill][skillFlds[i]] = {};
						copy(tDoc.getField(useFld + skillFlds[i]), skillRemObj[aSkill][skillFlds[i]], true);
					} else {
						copy(skillRemObj[aSkill][skillFlds[i]], tDoc.getField(useFld + skillFlds[i]));
					}
				}
			}
		}

		if (typePF) {
			// If this is a printer friendly sheet, show the stealth disadvantage field, if checked
			Hide("Stealth Disadv");
			if (How("AC Stealth Disadvantage") == "Dis") Show("Stealth Disadv." + MenuSelection[1]);

			// If this is a printer friendly sheet, also rearrange the skills of the companion page(s)
			var AScompA = What("Template.extras.AScomp").split(",");
			for (var AS = 0; AS < AScompA.length; AS++) {
				var prefix = AScompA[AS];
				var aField = prefix + "Comp.Use.Skills.";
				var bField = prefix + "BlueText.Comp.Use.Skills.";
				skillFlds = [[aField, ".Prof"], [aField, ".Exp"], [bField, ".Bonus"]];
				for (var n = 1; n <= 2; n++) {
					for (var s = 0; s < (SkillsList.abbreviations.length - 2); s++) {
						var aSkill = SkillsList.abbreviations[s];
						var linkedSkill = SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(aSkill)];
						if (n == 1) {
							skillRemObj[aSkill] = {};
							useFld = sWho === "alphabeta" ? aSkill : linkedSkill;
						} else {
							useFld = sWho === "alphabeta" ? linkedSkill : aSkill;
						}
						for (var i = 0; i < skillFlds.length; i++) {
							if (n == 1) {
								skillRemObj[aSkill][skillFlds[i][1]] = {};
								copy(tDoc.getField(skillFlds[i][0] + useFld + skillFlds[i][1]), skillRemObj[aSkill][skillFlds[i][1]], true);
							} else {
								copy(skillRemObj[aSkill][skillFlds[i][1]], tDoc.getField(skillFlds[i][0] + useFld + skillFlds[i][1]));
							}
						}
					}
				}
			}
		}

		//set the correct tooltip for remembering
		AddTooltip("Text.SkillsNames", MenuSelection[1]);

		//set the rich text for the skill names
		SetRichTextFields(false, true);
		thermoM(thermoTxt, true); // Stop progress bar
	}
}

// returns an object of the different elements to populate the class features or limited features section if olchoice is provided, oldlevel has to be provided as well
function GetLevelFeatures(aFea, level, choice, oldlevel, oldchoice, ForceChoice) {
	var tRe = { changed : false };
 	var attr = [["Add", "additional"], ["Use", "usages"], ["UseCalc", "usagescalc"], ["Recov", "recovery"], ["UseName", "name"], ["UseName", "limfeaname"], ["Descr", "description"], ["source", "source"]];

	for (var a = 0; a < attr.length; a++) {
		// add the new choice
		var setA = attr[a][0];
		var objA = attr[a][1];
		tRe[setA] = choice && aFea[choice] && aFea[choice][objA] ? aFea[choice][objA] : aFea[objA] && !ForceChoice ? aFea[objA] : tRe[setA] ? tRe[setA] : "";
		tRe[setA + "Old"] = oldchoice && aFea[oldchoice] && aFea[oldchoice][objA] ? aFea[oldchoice][objA] : aFea[objA] && !ForceChoice ? aFea[objA] : tRe[setA + "Old"] ? tRe[setA + "Old"] : "";
		if (objA.indexOf("usages") !== -1) {
			if (level === 0) tRe[setA] = "";
			if (oldlevel === 0) tRe[setA + "Old"] = "";
		}
	}

	for (var aProp in tRe) {
		if (aProp.indexOf("source") !== -1) continue;
		var theP = tRe[aProp];
		if (theP && isArray(theP)) {
			var lvlUse = aProp.indexOf("Old") !== -1 && (oldlevel || oldlevel === 0) ? oldlevel : level;
			lvlUse = Math.min(lvlUse, theP.length) - 1;
			tRe[aProp] = theP[lvlUse] ? theP[lvlUse] : "";

			// now see if anything changed compared to the new
			if (!tRe.changed && aProp.indexOf("Old") !== -1) {
				var otherProp = aProp.replace("Old", "");
				if (tRe[otherProp] !== "" && !isArray(tRe[otherProp])) {
					tRe.changed = tRe[aProp] != tRe[otherProp];
				}
			}
		}
	}
	return tRe;
};

// set some variables to their metric functionality
function setListsUnitSystem(isMetric, onStart) {
	var wasMetric = What("Unit System") === "metric";
	isMetric = isMetric ? isMetric === "metric" : What("Unit System") === "metric";
	if (onStart && !isMetric) return; //nothing to do on startup and the unit system is not metric
	var conStr = !onStart && wasMetric === isMetric ? "UpdateDecimals" : (isMetric ? "ConvertToMetric" : "ConvertToImperial");

	for (var cType in compString) {
		var cString = compString[cType].string
		if (compString[cType].string) compString[cType].string = tDoc[conStr](compString[cType].string, 0.5);
	};
}

// automatically add a new entry on the Adventurers Logsheet with the sheets current values
function addALlogEntry() {
	//first find the next empty logsheet entry
	var theTypesA = [
		".xp",
		".gold",
		".downtime",
		".renown",
		".magicItems"
	];
	var ALlogA = What("Template.extras.ALlog").split(",").splice(1);
	var emptyLog = [];
	var emptyFound = false;
	for (var tA = 0; tA < ALlogA.length; tA++) {
		for (var i = 1; i <= FieldNumbers.logs; i++) {
			var emptyFlds = 0;
			for (var A = 0; A < theTypesA.length; A++) {
				emptyFlds += What(ALlogA[tA] + "AdvLog." + i + theTypesA[A] + ".gain") === "" ? 1 : 0;
			}
			if (emptyFlds === 5) {
				emptyFound = true;
				emptyLog[0] = ALlogA[tA];
				emptyLog[1] = i;
				emptyLog[2] = i !== 1 ? ALlogA[tA] : (tA !== 0 ? ALlogA[tA - 1] : "stop");
				break;
			}
		}
		if (emptyFound) break;
	};
	//now if no empty log was found, first add another logsheet page
	if (emptyLog.length === 0) {
		emptyLog[0] = DoTemplate("ALlog", "Add");
		emptyLog[1] = 1;
		emptyLog[2] = ALlogA[ALlogA.length - 1];
	};

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Adding new logsheet entry...");
	calcStop();

	var baseFld = emptyLog[0] + "AdvLog." + emptyLog[1] + ".";
	// experience
	var start = baseFld === "AdvLog.1." ? 0 : What(baseFld + "xp.start");
	var total = What("Total Experience") - start;
	Value(baseFld + "xp.gain", (total >= 0 ? "+" : "") + total);
	thermoM(1/5);

	// gold
	start = baseFld === "AdvLog.1." ? 0 : What(baseFld + "gold.start");
	total = Math.round(((Number(What("Platinum Pieces").replace(",", ".")) * 10) + Number(What("Gold Pieces").replace(",", ".")) + (Number(What("Electrum Pieces").replace(",", ".")) / 2) + (Number(What("Silver Pieces").replace(",", ".")) / 10) + (Number(What("Copper Pieces").replace(",", ".")) / 100)) * 100) / 100 - start;
	Value(baseFld + "gold.gain", (total >= 0 ? "+" : "") + total);
	thermoM(2/5);

	// downtime (can't really be calculated, so just add a zero)
	Value(baseFld + "downtime.gain", "+0");

	// renown
	start = baseFld === "AdvLog.1." ? 0 : What(baseFld + "renown.start");
	total = What("Background_Renown.Text") - start;
	Value(baseFld + "renown.gain", (total >= 0 ? "+" : "") + total);
	thermoM(3/5);

	// magicItems
	start = baseFld === "AdvLog.1." ? 0 : What(baseFld + "magicItems.start");
	var MInr = [];
	for (var mi = 1; mi <= FieldNumbers.magicitems; mi++) {
		var thisMI = What("Extra.Magic Item " + mi).toLowerCase();
		if (thisMI) MInr.push(thisMI);
	};
	if (What("Adventuring Gear Remember") === false) {
		for (var gmi = FieldNumbers.gearMIrow + 1; gmi <= FieldNumbers.gear; gmi++) {
			var thisMI = What("Adventuring Gear Row " + mi).toLowerCase();
			if (thisMI && MInr.index(thisMI) === -1) MInr.push(thisMI);
		}
	};
	total = MInr.length - start;
	Value(baseFld + "magicItems.gain", (total >= 0 ? "+" : "") + total);
	thermoM(4/5);

	// set today's date
	Value(baseFld + "date", util.printd('yy-mm-dd', new Date()));

	// set the other fields, if a previous entry was detected
	if (emptyLog[2] !== "stop") {
		var preBase = emptyLog[2] + "AdvLog." + (emptyLog[1] === 1 ? FieldNumbers.logs : emptyLog[1] - 1) + ".";
		Value(baseFld + "adventure", What(preBase + "adventure"));
		Value(baseFld + "dm", What(preBase + "dm"));
		var oldSesh = Number(What(preBase + "session").replace(/[^\d+]*(\d+)?.*/, "$1"));
		Value(baseFld + "session", What(preBase + "session").replace(oldSesh, oldSesh + 1));
	};

	tDoc.getField(baseFld + "notes" + (emptyLog[0] === "" ? ".1" : "")).setFocus();

	//alert the user of what happened
	app.alert({
		cMsg : "The sheet automatically filled '" + toUni(What(emptyLog[0] + "Text.AdvLog." + emptyLog[1]).capitalize()) + "' with the date of today.\n\nThe numerical 'gain' fields are calculated using the information from the rest of the sheet compared to the last entry.\nThe Adventure Name, Session number, and DMs Name have been taken from the previous entry.\n\nNote that the Downtime gain is set to zero as the sheet doesn't track those.",
		cTitle : "A new Logsheet Entry has been added",
		nType : 0,
		nIcon : 3
	});
	thermoM(thermoTxt, true); // Stop progress bar
};

//menu for logsheet entries to move up, move down, insert, delete, or clear
function MakeAdvLogLineMenu_AdvLogLineOptions() {
	var prefix = getTemplPre(event.target.name, "ALlog", true);
	var firstPrefix = isTemplVis("ALlog", true)[1];
	var lineNmbr = Number(event.target.name.slice(-1));
	var theArray = [
		["Move up", "up"],
		["Move down", "down"],
		["-", "-"],
		["Insert empty Logsheet Entry", "insert"],
		["Delete Logsheet Entry", "delete"],
		["Clear Logsheet Entry", "clear"]
	];
	var menuLVL1 = function (item, array) {
		for (var i = 0; i < array.length; i++) {
			var isEnabled = true;
			if (array[i][1] === "up" && prefix === firstPrefix && lineNmbr === 1) {
				isEnabled = false;
			}
			item.push({
				cName : array[i][0],
				cReturn : array[i][1],
				bEnabled : isEnabled
			});
		}
	}
	var AdvLogLineMenu = [];
	menuLVL1(AdvLogLineMenu, theArray);
	Menus.advlogline = AdvLogLineMenu;

	var MenuSelection = getMenu("advlogline");
	if (!MenuSelection || MenuSelection[0] == "nothing") return;
	doAdvLogLine(MenuSelection[0], lineNmbr, prefix);
}

//do with logsheet entry, move up, move down, insert, delete, clear
function doAdvLogLine(action, lineNmbr, prefix) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Applying the layout settings...");
	calcStop();
	var ALlogA = What("Template.extras.ALlog").split(",").splice(1);
	var preNm = prefix + "AdvLog.";
	var firstPrefix = isTemplVis("ALlog", true)[1];
	var FieldNames = [
		".xp.gain",
		".gold.gain",
		".downtime.gain",
		".renown.gain",
		".magicItems.gain",
		".date",
		".adventure",
		".session",
		".dm",
		".notes"
	];
	var extraPage = false;
	switch (action) {
	 case "up" :
	 case "down" :
		var Fields = [], FieldsValue = [], FieldsUp = [], FieldsUpValue = [], FieldsDown = [], FieldsDownValue = [];
		for (var F = 0; F < FieldNames.length; F++) {
			Fields[F] = preNm + lineNmbr + FieldNames[F];
			FieldsValue[F] = What(Fields[F]);
			if (action === "up" && (prefix !== firstPrefix || lineNmbr !== 1)) {
				if (lineNmbr !== 1) {
					FieldsUp[F] = preNm + (lineNmbr - 1) + FieldNames[F];
					FieldsUpValue[F] = What(FieldsUp[F]);
				} else {
					FieldsUp[F] = ALlogA[ALlogA.indexOf(prefix) - 1] + "AdvLog." + FieldNumbers.logs + FieldNames[F];
					FieldsUpValue[F] = What(FieldsUp[F]);
				}
			};
			if (action === "down") {
				if (lineNmbr !== FieldNumbers.logs) {
					FieldsDown[F] = preNm + (lineNmbr + 1) + FieldNames[F];
					FieldsDownValue[F] = What(FieldsDown[F]);
				} else if (ALlogA.indexOf(prefix) !== ALlogA.length - 1) {
					FieldsDown[F] = ALlogA[ALlogA.indexOf(prefix) + 1] + "AdvLog.1" + FieldNames[F];
					FieldsDownValue[F] = "";
				} else {
					if (!extraPage) extraPage = DoTemplate("ALlog", "Add");
					FieldsDown[F] = extraPage + "AdvLog.1" + FieldNames[F];
					FieldsDownValue[F] = "";
				}
			};
		};
		var useArr = action === "up" ? [FieldsUp, FieldsUpValue] : [FieldsDown, FieldsDownValue];
		for (var F = 0; F < FieldNames.length; F++) {
			Value(useArr[0][F], FieldsValue[F]);
			Value(Fields[F], useArr[1][F]);
		}
		break;
	 case "delete" :
		for (var tA = ALlogA.indexOf(prefix); tA < ALlogA.length; tA++) {
			var startI = ALlogA[tA] === prefix ? lineNmbr : 1;
			for (var i = startI; i <= FieldNumbers.logs; i++) {
				if (tA === (ALlogA.length - 1) && i === FieldNumbers.logs) {
					tDoc.resetForm([ALlogA[tA] + "AdvLog." + i]);
				} else {
					for (var F = 0; F < FieldNames.length; F++) {
						if (i === FieldNumbers.logs) {
							Value(ALlogA[tA] + "AdvLog." + i + FieldNames[F], What(ALlogA[tA + 1] + "AdvLog." + 1 + FieldNames[F]));
						} else {
							Value(ALlogA[tA] + "AdvLog." + i + FieldNames[F], What(ALlogA[tA] + "AdvLog." + (i + 1) + FieldNames[F]));
						}
					}
				}
			}
		};
		break;
	 case "insert" :
		for (var tA = (ALlogA.length - 1); tA >= ALlogA.indexOf(prefix); tA--) {
			var endI = ALlogA[tA] === prefix ? lineNmbr : 0;
			for (var i = FieldNumbers.logs; i > endI; i--) {
				if (tA === (ALlogA.length - 1) && i === FieldNumbers.logs) {
					for (var F = 0; F < FieldNames.length; F++) {
						var fieldVal = What(ALlogA[tA] + "AdvLog." + i + FieldNames[F]);
						if (fieldVal && !extraPage) extraPage = DoTemplate("ALlog", "Add");
						Value(extraPage + "AdvLog.1" + FieldNames[F], fieldVal);
						Value(ALlogA[tA] + "AdvLog." + i + FieldNames[F], What(ALlogA[tA] + "AdvLog." + (i - 1) + FieldNames[F]));
					}
					if (extraPage) event.target.setFocus();
				} else {
					for (var F = 0; F < FieldNames.length; F++) {
						if (i === 1) {
							Value(ALlogA[tA] + "AdvLog." + i + FieldNames[F], What(ALlogA[tA - 1] + "AdvLog." + FieldNumbers.logs + FieldNames[F]));
						} else {
							Value(ALlogA[tA] + "AdvLog." + i + FieldNames[F], What(ALlogA[tA] + "AdvLog." + (i - 1) + FieldNames[F]));
						}
					}
				}
			}
		};
	 case "clear" :
		tDoc.resetForm([preNm + lineNmbr]);
		break;
	};
	thermoM(thermoTxt, true); // Stop progress bar
}

//a way to contact morepurplemorebetter
function contactMPMB(medium) {
	switch (medium.toLowerCase()) {
	 case "email" :
		app.launchURL(("https://flapkan.com/contact?edit[message]=%0D%0A%0D%0A%0D%0A%0D%0A%0D%0A%0D%0ASheet version: MPMB\'s " + (tDoc.info.SpellsOnly ? "Complete " + tDoc.info.SpellsOnly.capitalize() + " Spell Sheet" : (tDoc.info.AdvLogOnly ? "Adventure Logsheet" : "Character Record Sheet")) + " v" + semVers + " (" + tDoc.info.SheetType + ")" + " %0D%0APDF viewer: " + app.viewerType + ", v" + app.viewerVersion + "; Language: " + app.language + "; OS: " + app.platform).replace(/ /g, "%20"), true);
		break;
	 case "twitter" :
		app.launchURL("https://twitter.com/BetterOfPurple", true);
		break;
	 case "reddit" :
		app.launchURL("https://www.reddit.com/u/morepurplemorebetter/", true);
		break;
	 case "patreon" :
		app.launchURL("https://www.patreon.com/morepurplemorebetter", true);
		break;
	 case "github" :
		app.launchURL("https://github.com/morepurplemorebetter/", true);
		break;
	 case "dmsguild" :
		app.launchURL("https://www.dmsguild.com/browse.php?author=morepurplemorebetter", true);
		break;
	 case "enworld" :
		app.launchURL("http://www.enworld.org/forum/rpgdownloads.php?do=download&downloadid=1180", true);
		break;
	 case "syntax" :
		app.launchURL("https://flapkan.com/mpmb/syntax", true);
		break;
	 case "additions" :
		app.launchURL("https://flapkan.com/how-to/import-scripts", true);
		break;
	 case "syntaxgit" :
		app.launchURL("https://github.com/morepurplemorebetter/MPMBs-Character-Record-Sheet/tree/master/additional%20content%20syntax", true);
		break;
	 case "additionsgit" :
		app.launchURL("https://github.com/morepurplemorebetter/MPMBs-Character-Record-Sheet/tree/master/additional%20content", true);
		break;
	 case "latestversion" :
		app.launchURL(
			patreonVersion || tDoc.info.SpellsOnly ? LinksLatest.patreon :
			LinksLatest[minVer ? "advlog" : "character"][typePF ? "PF" : "CF"],
			true
		);
		break;
	 case "otherdesign" :
		app.launchURL(
			patreonVersion || tDoc.info.SpellsOnly ? LinksLatest.patreon :
			LinksLatest[minVer ? "advlog" : "character"][typePF ? "CF" : "PF"],
			true
		);
		break;
	 case "fullversion" :
		app.launchURL(
			patreonVersion ? LinksLatest.patreon :
			LinksLatest.character[typePF ? "PF" : "CF"],
			true
		);
		break;
	 case "subreddit" :
		app.launchURL("http://flapkan.com/mpmb/fanforum", true);
		break;
	 case "bug" :
		var sheetType = typePF ? "pf" + ((/redesign/i).test(tDoc.info.SheetType) ? "r" : "") : typeA4 ? "cf-a4" : "cf-lt";
		var acroType = app.viewerType == "Reader" ? "reader-" : "pro-";
		var acroVers = app.viewerVersion < 9 ? "other" : acroType + (app.viewerVersion < 10 ? "ix" : app.viewerVersion < 11 ? "x" : app.viewerVersion < 12 ? "xi" : "dc");
		var bugURL = [
			"https://flapkan.com/contact/bug_report", //base URL
			"?edit[field_sheet_type]=",
			sheetType, // sheet type (cf-a4, cf-lt, pf, pfr)
			"&edit[field_version_number]=",
			sheetVersion, // sheet version, as a decimal
			"&edit[field_operating_system]=",
			app.platform.toLowerCase(), // OS (win, mac, unix, ios, android, other)
			"&edit[field_pdf_viewing_software]=",
			acroVers, // acrobat version (reader-, pro-) + (ix, x, xi, dc)
		];
		app.launchURL(bugURL.join(""), true);
		break;
	};
};

//open a dialogue for the Patreon
function PatreonStatement() {
	try {
		var iNow = new Date();
		var timeDiff = iNow.getTime() - eval(tDoc.getField("SaveIMG.Patreon").submitName).getTime();
		if (Math.floor(timeDiff / (1000 * 3600 * 24)) >= 28) {
			var oButIcon = this.getField("SaveIMG.Patreon").buttonGetIcon();
			var oMyIcon = util.iconStreamFromIcon(oButIcon);

			var theTxt = "If you like this sheet, please consider becoming a patron at the Patreon for MPMB's Character Record Sheet.\n\nWith your contribution on Patreon:\n   \u2022 I can continue expanding the functionality of this sheet.\n   \u2022 You get to choose which new features get added.\n   \u2022 Your favourite third-party material gets added.\n   \u2022 You get instant access and alerts when new versions are released.";
			var theTxt2 = "Don't worry, the sheet will stay available for free on my website.\nHowever, if you feel like contributing more, it will all flow back into expanding the sheets' features and content.\n\nYou can always visit the Patreon webpage using the \"Contact MPMB\" bookmarks.";
			var PatreonDialog = {
				initialize : function (dialog) {
					dialog.load({
						"img1" : oMyIcon
					});
				},
				bPat : function (dialog) {contactMPMB("patreon");},
				description : {
					name : "Become a patron",
					elements : [{
						type : "view",
						elements : [{
							type : "view",
							align_children : "align_distribute",
							elements : [{
								type : "image",
								item_id : "img1",
								alignment : "align_top",
								width : 63,
								height : 63
							}, {
								type : "view",
								char_width : 40,
								elements : [{
									type : "static_text",
									name : "Become a patron on Patreon",
									item_id : "head",
									alignment : "align_top",
									font : "title",
									bold : true,
									height : 24,
									char_width : 40
								}, {
									type : "static_text",
									item_id : "txt1",
									alignment : "align_fill",
									font : "dialog",
									wrap_name : true,
									char_width : 40,
									name : theTxt
								}, {
									type : "button",
									font : "heading",
									bold : true,
									item_id : "bPat",
									name : "Go to the Patreon webpage",
									alignment : "align_center"
								}, {
									type : "static_text",
									item_id : "txt2",
									alignment : "align_fill",
									font : "dialog",
									wrap_name : true,
									char_width : 40,
									name : theTxt2
								}]
							}]
						}, {
							type : "ok"
						}]
					}]
				}
			};

			app.execDialog(PatreonDialog);
			//reset the counter
			tDoc.getField("SaveIMG.Patreon").submitName = new Date().toSource();
		};
	} catch (e) {};
}

//a way to change the calculations of the sheet; The input is an object with the "atkDmg", "atkHit", "atkAdd", and/or "hp" attributes;
// Add === true to add something, or Add === false to remove something;
function addEvals(evalObj, NameEntity, Add) {
	if (!evalObj) return;

	// remember the old attack changing strings
	if ((evalObj.atkAdd || evalObj.atkCalc || evalObj.spellCalc) && CurrentUpdates.atkStrOld == undefined) CurrentUpdates.atkStrOld = StringEvals("atkStr");
	if (evalObj.atkAdd) CurrentUpdates.types.push("attacksforce");

	// make the changes to the CurrentEvals object for attack changes
	var atkStr = "";
	var atkTypes = ["atkAdd", "atkCalc", "spellCalc"];
	for (var i = 0; i < atkTypes.length; i++) {
		var atkT = atkTypes[i];
		if (!evalObj[atkT]) continue;
		var atkIsArray = isArray(evalObj[atkT]);
		// add the descriptive text
		if (atkIsArray && evalObj[atkT][1]) atkStr += "\n \u2022 " + evalObj[atkT][1];
		// set the function
		if (Add) {
			if (!CurrentEvals[atkT]) CurrentEvals[atkT] = {};
			CurrentEvals[atkT][NameEntity] = atkIsArray ? evalObj[atkT][0] : evalObj[atkT];
		} else if (CurrentEvals[atkT] && CurrentEvals[atkT][NameEntity]) {
			delete CurrentEvals[atkT][NameEntity];
		}
	};
	// set the descriptive text for the attack calculations
	if (atkStr) {
		if (Add) {
			if (!CurrentEvals.atkStr) CurrentEvals.atkStr = {};
			CurrentEvals.atkStr[NameEntity] = atkStr;
		} else if (CurrentEvals.atkStr && CurrentEvals.atkStr[NameEntity]) {
			delete CurrentEvals.atkStr[NameEntity];
		}
		// as the descriptive text changed, show it in the changes dialog
		CurrentUpdates.types.push("atkstr");
	}

	// do the stuff for the hp calculations
	if (evalObj.hp) {
		if (Add) {
			if (!CurrentEvals.hp) CurrentEvals.hp = {};
			CurrentEvals.hp[NameEntity] = evalObj.hp;
		} else if (CurrentEvals.hp && CurrentEvals.hp[NameEntity]) {
			delete CurrentEvals.hp[NameEntity];
		};
		CurrentUpdates.types.push("hp");
	};

	// remember the old spell changing strings
	if ((evalObj.spellList || evalObj.spellAdd) && CurrentUpdates.spellStrOld == undefined) CurrentUpdates.spellStrOld = StringEvals("spellStr");

	// make the changes to the CurrentEvals object for spell changes
	var spellStr = "";
	var spellTypes = ["spellList", "spellAdd"];
	for (var i = 0; i < spellTypes.length; i++) {
		var spellT = spellTypes[i];
		if (!evalObj[spellT]) continue;
		var spellIsArray = isArray(evalObj[spellT]);
		// add the descriptive text
		if (spellIsArray && evalObj[spellT][1]) spellStr += "\n \u2022 " + evalObj[spellT][1];
		// set the function
		if (Add) {
			if (!CurrentEvals[spellT]) CurrentEvals[spellT] = {};
			CurrentEvals[spellT][NameEntity] = spellIsArray ? evalObj[spellT][0] : evalObj[spellT];
		} else if (CurrentEvals[spellT] && CurrentEvals[spellT][NameEntity]) {
			delete CurrentEvals[spellT][NameEntity];
		}
	};
	// set the descriptive text for the attack calculations
	if (spellStr) {
		if (Add) {
			if (!CurrentEvals.spellStr) CurrentEvals.spellStr = {};
			CurrentEvals.spellStr[NameEntity] = spellStr;
		} else if (CurrentEvals.spellStr && CurrentEvals.spellStr[NameEntity]) {
			delete CurrentEvals.spellStr[NameEntity];
		}
		// as the descriptive text changed, show it in the changes dialog
		CurrentUpdates.types.push("spellstr");
	}

	if (!Add) CurrentEvals = CleanObject(CurrentEvals); // remove any remaining empty objects
	SetStringifieds("evals"); //now set this global variable to its field for safekeeping
};

// make a string of all the things affecting the attack calculations
function StringEvals(type) {
	if (!type || !CurrentEvals[type]) return "";
	var txt = [];
	for (var str in CurrentEvals[type]) {
		txt.push(toUni(str) + CurrentEvals[type][str]);
	}
	return txt.join("\n\n");
}

//apply the effect of a weapon with inputText the literal string in the Weapon Selection field and fldName the name of the field (any one of them); If fldName is left blank, use the event.target.name
function ApplyWeapon(inputText, fldName, isReCalc, onlyProf) {
	if (IsSetDropDowns) return; // when just changing the dropdowns, don't do anything
	fldName = fldName ? fldName : event.target.name;
	var QI = fldName.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var fldNmbr = fldName.replace(/.*Attack\.(\d+?)\..+/, "$1");
	var ArrayNmbr = Number(fldNmbr) - 1;
	var fldBase = prefix + Q + "Attack." + fldNmbr + ".";
	var fldBaseBT = prefix + "BlueText." + Q + "Attack." + fldNmbr + ".";

	//set the input as the submitName for reference and set the non-automated field with the same value as well
	tDoc.getField(fldBase + "Weapon Selection").submitName = inputText;
	if (!IsNotWeaponMenu || CurrentVars.manual.attacks || (!isReCalc && inputText === (QI ? CurrentWeapons.field[ArrayNmbr] : CurrentWeapons.compField[prefix][ArrayNmbr]))) return; //don't do the rest of this function if only moving weapons around or weapons are set to manual or the CurrentWeapons.field didn't change

	if (What(fldBase + "Weapon") !== inputText) Value(fldBase + "Weapon", inputText);

	//remember what the old weapon was
	var oldWea = QI ? CurrentWeapons.known[ArrayNmbr][0] : CurrentWeapons.compKnown[prefix][ArrayNmbr][0];

	//now find the new weapon and put it in the document level variable CurrentWeapons
	if (QI) {
		CurrentWeapons.field[ArrayNmbr] = inputText;
		FindWeapons(ArrayNmbr);
	} else {
		CurrentWeapons.compField[prefix][ArrayNmbr] = inputText;
		FindCompWeapons(ArrayNmbr, prefix);
	};

	//a variable with all different fields of the one weapon
	var fields = {
		Proficiency : false,
		Mod : "",
		Range : "",
		Damage_Type : "",
		Description : "",
		Description_Tooltip : "",
		To_Hit_Bonus : 0,
		Damage_Bonus : 0,
		Damage_Die : "",
		Weight : ""
	};
	var BTflds = ["To_Hit_Bonus", "Damage_Bonus", "Damage_Die", "Weight"];

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Filling out the weapon's details...");
	calcStop();

	//set a variable to refer to the new weapon
	var thisWeapon = QI ? CurrentWeapons.known[ArrayNmbr] : CurrentWeapons.compKnown[prefix][ArrayNmbr];
	var WeaponName = thisWeapon[0];
	var aWea = QI || isNaN(parseFloat(WeaponName)) ? WeaponsList[WeaponName] : !QI && !isNaN(parseFloat(WeaponName)) && CurrentCompRace[prefix] ? CurrentCompRace[prefix].attacks[WeaponName] : false;

	//if there is a new weapon entered and the old weapon had ammo that is not used by any of the current weapons, remove that ammo from the ammo section.
	if (QI && oldWea && WeaponsList[oldWea].ammo) {
		var theOldAmmo = WeaponsList[oldWea].ammo;
		var tempFound = false;
		for (var j = 0; j < CurrentWeapons.known.length; j++) {
			var jWeapon = WeaponsList[CurrentWeapons.known[j][0]];
			if (jWeapon && jWeapon.ammo && jWeapon.ammo === theOldAmmo) {
				tempFound = true;
				break;
			};
		};
		if (!tempFound) RemoveAmmo(theOldAmmo);
	};

	// if a weapon was found, set the variables
	if (aWea) {
		// create the variable from the baseWeapon
		var theWea = {};
		if (aWea.baseWeapon && WeaponsList[aWea.baseWeapon]) {
			for (var attr in WeaponsList[aWea.baseWeapon]) theWea[attr] = WeaponsList[aWea.baseWeapon][attr];
		}
		for (var attr in aWea) theWea[attr] = aWea[attr];

		thermoTxt = thermoM("Applying the weapon's features...", false); //change the progress dialog text
		var curDescr = What(fldBase + "Description");
		var curRange = What(fldBase + "Range");
		fields.Description = theWea.description; //add description
		fields.Description_Tooltip = theWea.tooltip ? theWea.tooltip : ""; //add the tooltip for the description
		fields.Range = theWea.range; //add range
		fields.Damage_Type = theWea.damage[2]; //add Damage Type

		//add Weight
		fields.Weight = isReCalc ? What(fldBaseBT + "Weight") :
			theWea.weight ? theWea.weight : "";

		//add Damage Die
		fields.Damage_Die = theWea.damage[0] + (parseFloat(theWea.damage[1]) ? "d" + theWea.damage[1] : "");

		//add To Hit Bonus
		fields.To_Hit_Bonus = isReCalc ? What(fldBaseBT + "To Hit Bonus") :
			theWea.dc ? "dc" :
			theWea.modifiers && theWea.modifiers[0] ? theWea.modifiers[0] : 0;

		//add Damage Bonus
		fields.Damage_Bonus = isReCalc ? What(fldBaseBT + "Damage Bonus") :
			theWea.modifiers && theWea.modifiers[1] ? theWea.modifiers[1] : 0;

		//add proficiency checkmark
		fields.Proficiency = !QI ? true :
			QI && (/natural|spell|cantrip|alwaysprof/i).test(theWea.type) ? true :
			(/^(simple|martial)$/i).test(theWea.type) && tDoc.getField("Proficiency Weapon " + theWea.type.capitalize()).isBoxChecked(0) ? true :
			CurrentProfs.weapon.otherWea && RegExp(";(" + CurrentProfs.weapon.otherWea.finalProfs.join("s?|").replace(/ss\?\|/g, "s?|") + ");", "i").test(";" + [WeaponName, theWea.type].concat(theWea.list ? [theWea.list] : []).concat(theWea.baseWeapon ? [theWea.baseWeapon] : []).join(";") + ";") ? true :
			false;

		//add mod
		var StrDex = What(QI ? "Str" : prefix + "Comp.Use.Ability.Str.Score") < What(QI ? "Dex" : prefix + "Comp.Use.Ability.Dex.Score") ? 2 : 1;
		fields.Mod = isReCalc && !theWea.ability ? What(fldBase + "Mod") :
			(/finesse/i).test(theWea.description) ? StrDex : theWea.ability;

		//change mod if this is concerning a spell/cantrip
		if (thisWeapon[3]) {
			if (thisWeapon[4].length) {
				var abiArr = thisWeapon[4].map( function(sClass) {
					return CurrentSpells[sClass] && CurrentSpells[sClass].ability && !isNaN(CurrentSpells[sClass].ability) ? CurrentSpells[sClass].ability : 0;
				});
			} else {
				// the spell is not known by any class, so just gather the ability scores from all spellcasting entries so we can select the highest
				var abiArr = [];
				for (var aCast in CurrentSpells) {
					if (!isNaN(CurrentSpells[aCast].ability)) abiArr.push(CurrentSpells[aCast].ability);
				}
			}
			var abiDone = [];
			var abiModArr = [];
			for (var i = 0; i < abiArr.length; i++) {
				if (!abiArr[i] || abiDone.indexOf(abiArr[i]) !== -1) continue;
				abiDone.push(abiArr[i]);
				var thisMod = What(AbilityScores.abbreviations[abiArr[i] - 1]);
				if (thisMod > Math.max.apply(Math, abiModArr)) fields.Mod = abiArr[i];
				abiModArr.push(thisMod);
			}
		}

		if (theWea.ammo) fields.Ammo = theWea.ammo; //add ammo

		//now run the code that was added by class/race/feat
		if (QI && CurrentEvals.atkAdd) {

			// define some variables that we can check against later or with the CurrentEvals
			var WeaponText = inputText + " " + fields.Description;
			var isDC = (/dc/i).test(fields.To_Hit_Bonus);
			var isSpell = (thisWeapon[3] || (/cantrip|spell/i).test(theWea.type) || (/\b(cantrip|spell)\b/i).test(WeaponText)) && WeaponName !== "shillelagh";
			var isMeleeWeapon = !isSpell && (/melee/i).test(fields.Range);
			var isRangedWeapon = !isSpell && (/^(?!.*melee).*\d+.*$/i).test(fields.Range);
			var isNaturalWeapon = !isSpell && (/natural/i).test(theWea.type);

			var gatherVars = {
				WeaponText : WeaponText,
				WeaponTextName : inputText,
				isDC : isDC,
				isSpell : isSpell,
				isMeleeWeapon : isMeleeWeapon,
				isRangedWeapon : isRangedWeapon,
				isNaturalWeapon : isNaturalWeapon,
				theWea : theWea,
				StrDex : StrDex,
				WeaponName : WeaponName,
				baseWeaponName : theWea.baseWeapon ? theWea.baseWeapon : WeaponName,
				thisWeapon : thisWeapon
			}

			var evalsToDo = [[], [], []]; // [0] magic items, [1] feats, [2] others
			for (var anEval in CurrentEvals.atkAdd) {
				evalsToDo[anEval.indexOf("(magic item)") != -1 ? 0 : anEval.indexOf("(feat)") != -1 ? 1 : 2].push(anEval);
			}
			evalsToDo = evalsToDo[0].concat(evalsToDo[1]).concat(evalsToDo[2]);
			for (var i = 0; i < evalsToDo.length; i++) {
				var evalThing = CurrentEvals.atkAdd[evalsToDo[i]];
				try {
					if (typeof evalThing == 'string') {
						eval(evalThing);
					} else if (typeof evalThing == 'function') {
						evalThing(fields, gatherVars);
					}
				} catch (error) {
					var eText = "The custom ApplyWeapon/atkAdd script '" + evalsToDo[i] + "' produced an error! It will be removed from the sheet for now, but please contact the author of the feature to have this issue corrected:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
					delete CurrentEvals.atkAdd[evalsToDo[i]];
				}
			}
		};
		// if this is a field recalculation and no custom eval changed the description or range, just use the one from the field so that manual changes are preserved
		if (isReCalc) {
			if (fields.Description === theWea.description) fields.Description = curDescr;
			if (fields.Range === theWea.range) fields.Range = curRange;
		}
	};

	// apply the values to the fields only if we need to either reset the fields or a weapon was found
	if (onlyProf) {
		Checkbox(fldBase + "Proficiency", fields.Proficiency);
	} else if (aWea || !inputText) {
		var resetFlds = [];
		for (var weaKey in fields) {
			var keyFld = (BTflds.indexOf(weaKey) !== -1 ? fldBaseBT : fldBase) + weaKey.replace(/_/g, " ");
			if (!fields[weaKey]) {
				if (tDoc.getField(keyFld)) resetFlds.push(keyFld);
				continue;
			};
			switch (weaKey) {
			 case "Description_Tooltip" :
				break;
			 case "Proficiency" :
				Checkbox(keyFld, fields[weaKey]);
				break;
			 case "Mod" :
				PickDropdown(keyFld, fields[weaKey]);
				break;
			 case "Damage_Type" :
				AddDmgType(keyFld, fields[weaKey]);
				break;
			 case "Weight" :
				var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
				Value(keyFld, RoundTo(fields[weaKey] * massMod, 0.001, true));
				break;
			 case "Description" :
			 case "Range" :
				Value(keyFld, What("Unit System") === "imperial" ? fields[weaKey] : ConvertToMetric(fields[weaKey], 0.5), weaKey !== "Description" ? "" : What("Unit System") === "imperial" ? fields.Description_Tooltip : ConvertToMetric(fields.Description_Tooltip, 0.5));
				break;
			 case "Ammo" :
				if (fields[weaKey]) AddAmmo(fields[weaKey]);
				break;
			 default :
				Value(keyFld, fields[weaKey]);
			};
		};
		if (resetFlds.length) tDoc.resetForm(resetFlds);
	} else if (CurrentProfs.weapon.otherWea) { //if not a known weapon or an empty field, still check if we need to set the checkmark for proficiency
		var matchTxt = CurrentWeapons.field[ArrayNmbr].toLowerCase();
		for (var i = 0; i < CurrentProfs.weapon.otherWea.length; i++) {
			var weaProf = CurrentProfs.weapon.otherWea[i];
			if (!WeaponsList[weaProf] && matchTxt.indexOf(weaProf.toLowerCase()) !== -1) {
				Checkbox(fldBase + "Proficiency", true);
				break;
			};
		};
	};
	//if (QI && ((event.target && fldName == event.target.name) || Number(fldNmbr) === FieldNumbers.attacks)) SetOffHandAction();
	thermoM(thermoTxt, true); // Stop progress bar
};

//calculate the attack damage and to hit, can be called from any of the attack fields (sets the fields)
function CalcAttackDmgHit(fldName) {
	if (CurrentVars.manual.attacks) return; //if the attack calculation is set to manual, don't do anything

	fldName = fldName ? fldName : event.target.name;
	var QI = fldName.indexOf("Comp.") === -1;
	var Q = QI ? "" : "Comp.Use.";
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var fldNmbr = fldName.replace(/.*Attack\.(\d+?)\..+/, "$1");
	var ArrayNmbr = Number(fldNmbr) - 1;
	var fldBase = prefix + Q + "Attack." + fldNmbr + ".";
	var fldBaseBT = prefix + "BlueText." + Q + "Attack." + fldNmbr + ".";
	var fields = {
		Proficiency : tDoc.getField(fldBase + "Proficiency").isBoxChecked(0),
		Mod : What(fldBase + "Mod"),
		Range : What(fldBase + "Range"),
		Damage_Type : What(fldBase + "Damage Type"),
		Description : What(fldBase + "Description"),
		To_Hit_Bonus : What(fldBaseBT + "To Hit Bonus"),
		Damage_Bonus : What(fldBaseBT + "Damage Bonus"),
		Damage_Die : What(fldBaseBT + "Damage Die")
	};

	var thisWeapon = QI ? CurrentWeapons.known[ArrayNmbr] : CurrentWeapons.compKnown[prefix][ArrayNmbr];
	var WeaponName = thisWeapon[0];
	var aWea = QI || isNaN(parseFloat(WeaponName)) ? WeaponsList[WeaponName] : !QI && !isNaN(parseFloat(WeaponName)) && CurrentCompRace[prefix] ? CurrentCompRace[prefix].attacks[WeaponName] : false;
	var WeaponText = QI ? CurrentWeapons.field[ArrayNmbr] : CurrentWeapons.compField[prefix][ArrayNmbr];
	var aWeaAbi = aWea && aWea.ability !== undefined ? aWea.ability : aWea && aWea.baseWeapon && WeaponsList[aWea.baseWeapon] && WeaponsList[aWea.baseWeapon].ability !== undefined ? WeaponsList[aWea.baseWeapon].ability : false;

	if (!WeaponText || ((/^(| |empty)$/).test(fields.Mod) && aWeaAbi !== 0)) {
		Value(fldBase + "Damage", "");
		Value(fldBase + "To Hit", "");
		if (QI) CurrentWeapons.offHands[ArrayNmbr] = false;
		return;
	};

	// only add the description part now, so we don't test against it above
	if (fields.Description) WeaponText += " " + fields.Description;

	// get the damage bonuses from the selected modifier, magic, and the blueText field
	var output = {
		prof : !fields.Proficiency ? 0 : (QI ? (tDoc.getField("Proficiency Bonus Dice").isBoxChecked(0) ? 0 : Number(How("Proficiency Bonus"))) : (tDoc.getField(prefix + "BlueText.Comp.Use.Proficiency Bonus Dice").isBoxChecked(0) ? 0 : What(prefix + "Comp.Use.Proficiency Bonus"))),
		die : fields.Damage_Die,
		modToDmg : thisWeapon[2],
		mod : !fields.Mod || fields.Mod === "empty" ? 0 : What(prefix + fields.Mod),
		magic : thisWeapon[1],
		bHit : fields.To_Hit_Bonus,
		bDmg : fields.Damage_Bonus,
		extraDmg : 0,
		extraHit : 0
	};

	// define some variables that we can check against later or with the CurrentEvals
	var isDC = (/dc/i).test(fields.To_Hit_Bonus);
	if (QI) {
		var theWea = {};
		if (aWea && aWea.baseWeapon && WeaponsList[aWea.baseWeapon]) {
			for (var attr in WeaponsList[aWea.baseWeapon]) theWea[attr] = WeaponsList[aWea.baseWeapon][attr];
		}
		if (aWea) for (var attr in aWea) theWea[attr] = aWea[attr];

		var isSpell = (thisWeapon[3] || (theWea && (/cantrip|spell/i).test(theWea.type)) || (/\b(cantrip|spell)\b/i).test(WeaponText)) && WeaponName !== "shillelagh";
		var isMeleeWeapon = !isSpell && (/melee/i).test(fields.Range);
		var isRangedWeapon = !isSpell && (/^(?!.*melee).*\d+.*$/i).test(fields.Range);
		var isNaturalWeapon = !isSpell && theWea && (/natural/i).test(theWea.type);

		// see if this is a off-hand attack and the modToDmg shouldn't be use
		var isOffHand = isMeleeWeapon && (/^(?!.*(spell|cantrip))(?=.*(off.{0,3}hand|secondary)).*$/i).test(WeaponText);
		if (CurrentWeapons.offHands[ArrayNmbr] !== isOffHand) {
			CurrentWeapons.offHands[ArrayNmbr] = isOffHand;
			SetOffHandAction();
		}
		if (isOffHand) output.modToDmg = output.mod < 0;

		//add the BlueText field value of the corresponding spellcasting class
		var spCaster = false;
		var abiScoreNo = tDoc.getField(fldBase + "Mod").currentValueIndices;
		if (thisWeapon[3] && thisWeapon[4].length) {
			var DCorHit = isDC ? "dc" : "atk";
			var abiBonArr = thisWeapon[4].map( function(sClass) {
				var ExtraBonus = CurrentSpells[sClass] && CurrentSpells[sClass].ability == abiScoreNo && CurrentSpells[sClass].blueTxt && CurrentSpells[sClass].blueTxt[DCorHit] ? CurrentSpells[sClass].blueTxt[DCorHit] : 0;
				return EvalBonus(ExtraBonus, true);
			});
			var highestBon = Math.max.apply(Math, abiBonArr);
			if (highestBon) {
				spCaster = [];
				for (var i = 0; i < abiBonArr.length; i++) {
					if (abiBonArr[i] == highestBon) spCaster.push(thisWeapon[4][i]);
				}
				output.extraHit += highestBon;
			}
		};

		// now run the code that was added by class/race/feat
		if (CurrentEvals.atkCalc) {

			var gatherVars = {
				WeaponText : WeaponText,
				WeaponTextName : WeaponText.replace(" " + fields.Description, ""),
				isDC : isDC,
				isSpell : isSpell,
				isMeleeWeapon : isMeleeWeapon,
				isRangedWeapon : isRangedWeapon,
				isNaturalWeapon : isNaturalWeapon,
				theWea : theWea,
				WeaponName : WeaponName,
				baseWeaponName : theWea.baseWeapon ? theWea.baseWeapon : WeaponName,
				thisWeapon : thisWeapon,
				isOffHand : isOffHand
			}

			var evalsToDo = [[], [], []]; // [0] magic items, [1] feats, [2] others
			for (var anEval in CurrentEvals.atkCalc) {
				evalsToDo[anEval.indexOf("(magic item)") != -1 ? 0 : anEval.indexOf("(feat)") != -1 ? 1 : 2].push(anEval);
			}
			evalsToDo = evalsToDo[0].concat(evalsToDo[1]).concat(evalsToDo[2]);
			for (var i = 0; i < evalsToDo.length; i++) {
				var evalThing = CurrentEvals.atkCalc[evalsToDo[i]];
				try {
					if (typeof evalThing == 'string') {
						eval(evalThing);
					} else if (typeof evalThing == 'function') {
						evalThing(fields, gatherVars, output);
					}
				} catch (error) {
					var eText = "The custom CalcAttackDmgHit/atkCalc script '" + evalsToDo[i] + "' produced an error! It will be removed from the sheet for now, but please contact the author of the feature to have this issue corrected:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
					delete CurrentEvals.atkCalc[evalsToDo[i]];
				}
			}
		};
		if (isSpell && CurrentEvals.spellCalc) {
			// get the variables we need to pass to the function
			var spType = isDC ? "dc" : "attack";
			var spCasters = spCaster ? spCaster : !thisWeapon[4].length ? [] : thisWeapon[4].map( function(sClass) {
				return CurrentSpells[sClass] && CurrentSpells[sClass].ability == abiScoreNo ? sClass : "";
			});

			var evalsToDo = [[], [], []]; // [0] magic items, [1] feats, [2] others
			for (var anEval in CurrentEvals.spellCalc) {
				evalsToDo[anEval.indexOf("(magic item)") != -1 ? 0 : anEval.indexOf("(feat)") != -1 ? 1 : 2].push(anEval);
			}
			evalsToDo = evalsToDo[0].concat(evalsToDo[1]).concat(evalsToDo[2]);
			for (var i = 0; i < evalsToDo.length; i++) {
				var evalThing = CurrentEvals.spellCalc[evalsToDo[i]];
				try {
					if (typeof evalThing == 'function') {
						var addSpellNo = evalThing(spType, spCasters, abiScoreNo);
						if (!isNaN(addSpellNo)) output.extraHit += Number(addSpellNo);
					}
				} catch (error) {
					var eText = "The custom spell attack/DC (spellCalc) script '" + evalsToDo[i] + "' produced an error! It will be removed from the sheet for now, but please contact the author of the feature to have this issue corrected:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
					delete CurrentEvals.spellCalc[evalsToDo[i]];
				}
			}
		}
	};

	var dmgDie = "";
	var dmgNum = 0;
	var hitNum = 0;
	var addNum = function(inP, DmgHit) {
		inP = Number(inP);
		if (isNaN(inP)) inP = 0;
		if (!DmgHit || (/dmg/i).test(DmgHit)) dmgNum += inP;
		if (!DmgHit || (/hit/i).test(DmgHit)) hitNum += inP;
	};

	for (var out in output) {
		switch (out) {
		 case "modToDmg" :
			break;
		 case "prof" :
			addNum(output[out], "hit");
			break;
		 case "extraHit" :
			addNum(output[out], "hit");
			break;
		 case "extraDmg" :
			addNum(output[out], "dmg");
			break;
		 case "die" :
			dmgDie = EvalDmgDie(output[out], QI ? true : prefix);
			break;
		 case "mod" :
			if (output.modToDmg) addNum(output[out], "dmg");
			addNum(output[out], "hit");
			break;
		 case "bHit" :
			if (isDC) {
				addNum(8, "hit");
			};
		 case "bDmg" :
		 // if the blueText field is not a number, find the ability modifier
			addNum(EvalBonus(output[out], QI ? true : prefix), out);
			break;
		 default :
			addNum(output[out]);
			break;
		};
	};
	if (!isNaN(Number(dmgDie))) dmgDie = Number(dmgDie);
	if (dmgDie && isNaN(dmgDie) && Number(dmgNum) > 0) dmgNum = "+" + dmgNum;
	var dmgTot = dmgDie === "\u2015" || dmgDie === "-" ? dmgDie : dmgDie + (dmgNum === 0 ? "" : dmgNum);
	var hitTot = (isDC ? "DC " : (hitNum >= 0 ? "+" : "")) + hitNum;

	Value(fldBase + "Damage", dmgTot == 0 ? "" : dmgTot);
	if (event.target && event.target.name && (/.*Attack.*To Hit/).test(event.target.name)) {
		event.value = fields.Range === "With melee wea" ? "" : hitTot;
	} else {
		Value(fldBase + "To Hit", fields.Range === "With melee wea" ? "" : hitTot);
	};
};

//see if the bonus action for Off-hand attack is needed or not
function SetOffHandAction() {
	var areOffHands = CurrentWeapons.offHands.some( function(n) { return n});
	tDoc[(areOffHands ? "Add" : "Remove") + "Action"]("bonus action", "Off-hand Attack");
};

//a way to show a very long piece of text without the dialogue overflowing the screen
function ShowDialog(hdr, strng) {
	if (strng === "sources") { // ShowDialog("List of Sources, sorted by abbreviation", "sources");
		strng = "";
		var srcRef = {};
		var srcArr = {};
		var srcGroups = [];
		for (var src in SourceList) {
			var tSrc = SourceList[src];
			srcRef[tSrc.abbreviation] = src;
			var tGroup = !tSrc.group || tSrc.group === "default" ? "\u200B\u200Bother" : tSrc.group === "Primary Sources" ? tSrc.group : "\u200B" + tSrc.group;
			if (!srcArr[tGroup]) srcArr[tGroup] = [];
			srcArr[tGroup].push(tSrc.abbreviation);
			if (srcGroups.indexOf(tGroup) === -1) srcGroups.push(tGroup);
		};
		srcGroups.sort();
		for (var group in srcArr) srcArr[group].sort();
		for (var i = 0; i < srcGroups.length; i++) {
			strng += "\n\n" + srcGroups[i].replace(/\u200B/g, "") + ":";
			var tArr = srcArr[srcGroups[i]];
			for (var j = 0; j < tArr.length; j++) {
				var theSrc = srcRef[tArr[j]];
				strng += "\n\u2022 " + (SourceList[theSrc].abbreviation + "            ").substr(0,12) + "\t" + SourceList[theSrc].name;
			};
		};
	}
	var ShowString_dialog = {
		initialize : function(dialog) {
			dialog.load({
				"Eval" : strng.replace(/^(\r|\n)*/, "")
			});
		},
		description : {
			name : hdr,
			elements : [{
				type : "view",
				align_children : "align_left",
				elements : [{
					type : "view",
					elements : [{
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						wrap_name : true,
						width : 550,
						name : hdr
					}, {
						type : "view",
						align_children : "align_row",
						elements : [{
							type : "static_text",
							item_id : "txt0",
							alignment : "align_fill",
							font : "palette",
							wrap_name : true,
							height : 20,
							name : "[Can't see the 'OK' button at the bottom? Use ENTER to close this dialog]",
							width : 548
						}, {
							type : "edit_text",
							item_id : "ding",
							alignment : "align_fill",
							readonly : true,
							height : 1,
							width : 1
						}]
					}, {
						type : "edit_text",
						item_id : "Eval",
						alignment : "align_fill",
						readonly : true,
						multiline: true,
						height : 500,
						width : 550
					}, {
						type : "gap",
						height : 5
					}]
				}, {
					type : "ok"
				}]
			}]
		}
	};
	app.execDialog(ShowString_dialog);
};

//calculate the mod for the Dex field in the initiative section (field calculation)
function CalcInitDexMod() {
	var QI = getTemplPre(event.target.name, "AScomp");
	event.value = QI === true ? What(SkillsList.abilityScores[SkillsList.abbreviations.indexOf("Init")] + " Mod") : What(QI + "Comp.Use.Ability.Dex.Mod");
};

function FunctionIsNotAvailable() {
	app.alert({
		nIcon : 0,
		cTitle : "Please update your Adobe Acrobat",
		cMsg : "This feature doesn't work (correctly) with the version of Adobe Acrobat you are using. This version of Adobe Acrobat is not supported for use with MPMB's D&D 5e Character Tools. Please update to Adobe Acrobat DC.\n\nYou can get Adobe Acrobat Reader DC for free at https://get.adobe.com/reader/"
	});
};

// a way to eval the content of a modifier field; notComp if it is the character (true) or if it is for a companion page (the prefix of the companion page); if isSpecial === "test" it will output undefined if an error occurs; if isSpecial is a number it will look for that entry on the Wild Shape page with the corresponding notComp variable as a prefix;
function EvalBonus(input, notComp, isSpecial) {
	if (!input) {
		return 0;
	} else if (!isNaN(input)) {
		return Number(input);
	};
	var modStr = notComp === true ? ["", " Mod"] : !isSpecial || isSpecial === "test" ? [notComp + "Comp.Use.Ability.", ".Mod"] : [notComp + "Wildshape." + isSpecial + ".Ability.", ".Mod"];
	var ProfB = notComp === true ? Number(How("Proficiency Bonus")) : !isSpecial || isSpecial === "test" ? What(notComp + "Comp.Use.Proficiency Bonus") : What(notComp + "Wildshape." + isSpecial + ".Proficiency Bonus");
	var abbrRegex = /(o?(Str|Dex|Con|Int|Wis|Cha|HoS|Prof))(o?(Str|Dex|Con|Int|Wis|Cha|HoS|Prof))/ig;
	// remove 'dc' and convert commas to dots for decimal handling
	input = input.replace(/,/g, ".").replace(/dc/ig, "");
	// add a "+" between abbreviations that have no operator. Do this twice, so we also catch uneven groups
	input = input.replace(abbrRegex, "$1+$3");
	input = input.replace(abbrRegex, "$1+$3");
	// removing double or trailing operators and replace double minus with a plus
	input = input.replace(/[+\-/*]+([+/*])/g, "$1").replace(/--/g, "+").replace(/^[+/*]+|[+\-/*]+$/g, "");
	// change ability score abbreviations with their modifier
	["Str", "Dex", "Con", "Int", "Wis", "Cha", "HoS"].forEach(function(AbiS) {
		input = input.replace(RegExp("o" + AbiS, "ig"), Number(What(AbiS + " Mod")));
		input = input.replace(RegExp(AbiS, "ig"), Number(What(modStr[0] + AbiS + modStr[1])));
	});
	// change Prof with the proficiency bonus
	input = input.replace(/oProf/ig, How("Proficiency Bonus"));
	input = input.replace(/Prof/ig, ProfB);
	// double negative to positive
	input = input.replace(/--/g, "+");
	try {
		output = eval(input);
		return !isNaN(output) ? Math.round(Number(output)) : 0;
	} catch (err) {
		return isSpecial === "test" ? undefined : 0;
	};
};

// a way to eval the content of a weapon damage die field; notComp if it is the character (true) or if it is for a companion page (the prefix of the companion page); if isSpecial === "test" it will output _ERROR_ for the part that produces an error;
function EvalDmgDie(input, notComp, isSpecial) {
	if (!input) {
		return 0;
	} else if (!isNaN(input)) {
		return Number(input);
	};
	// resolve the C and B for cantrip die, if present
	if ((/^(?=.*(B|C))(?=.*d\d).*$/).test(input)) { //if this involves a cantrip calculation
		var cLvl = Number(notComp === true ? What("Character Level") : What(notComp + "Comp.Use.HD.Level"));
		var cDie = cantripDie[Math.min(Math.max(cLvl, 1), cantripDie.length) - 1];
		input = input.replace(/cha/ig, "kha").replace(/con/ig, "kon");
		input = input.replace(/C/g, cDie).replace(/B/g, cDie - 1).replace(/0.?d\d+/g, 0);
		input = input.replace(/kha/g, "Cha").replace(/kon/g, "Con");
	};
	if (input[0] == "=") { // only if a string staring with "=" does it mean that it wants to be calculate to values
		input = input.substr(1).split("_").map(function(u) {
			return u.split("d").map(function(v) {
				try {
					var theEval = EvalBonus(v, notComp, isSpecial);
					return theEval === undefined ? "_ERROR_" : theEval;
				} catch (errV) {
					return v;
				};
			}).join("d");
		}).join("+");
	};
	return input;
};

// add a way to set the value of a field
function SetThisFldVal() {
	var len = typePF ? 4 : 3;
	if (event.target.submitName || event.target.value.length > len || event.modifier || event.shift) {
		var QI = getTemplPre(event.target.name, "AScomp");
		var dmgDie = event.target.name.indexOf("Damage Die") !== -1;
		var theName = event.target.userName;
		if (theName && (/\n/).test(theName)) {
			theName = theName.match(/.*\n/)[0].replace(/\n/, "");
		};
		var theVal = event.target.value;
		if (!isNaN(theVal)) theVal = theVal.toString();
		var theExpl = event.target.submitName.replace(/^\n*/, "");
		var theDialTxt = (dmgDie ? "If you want the Damage Die to be a calculated value, and not just a string, make sure the first character is a '='.\nRegardless of the first character, a 'C' will be replaced with the Cantrip die, and a 'B' with the Cantrip die minus 1.\n\nIf a calculated value (=), you can use underscores to keep the strings separate. For the calculated parts, y" : "Y") + "ou can use numbers, logical operators (+, -, /, *), ability score abbreviations (Str, Dex, Con, Int, Wis, Cha" + (QI === true ? ", HoS" : "") + "), and 'Prof'." + (QI === true ? "" : "\nIn addition, you can use the values from the character (the 1st page) by adding the letter 'o' before the variable (oStr, oDex, oCon, oInt, oWis, oCha, oHoS, oProf).");
		var theDialog = {
			notComp : QI,
			isDmgDie : dmgDie,
			theExp : theExpl,
			theTXT : theVal,
			initialize : function (dialog) {
				var toLoad = { "user" : this.theTXT };
				if (this.theTXT) {
					var calcVal = this.isDmgDie ? EvalDmgDie(this.theTXT, this.notComp, "test") : EvalBonus(this.theTXT, this.notComp, "test");
					toLoad["rslt"] = calcVal === undefined ? "ERROR" : calcVal.toString();
				};
				if (this.theExp) {
					toLoad["expl"] = this.theExp;
				};
				dialog.load(toLoad);
			},
			commit : function (dialog) {
				var oResult = dialog.store();
				this.theTXT = oResult["user"];
			},
			calc : function (dialog) {
				var oResult = dialog.store()["user"];
				var calcVal = this.isDmgDie ? EvalDmgDie(oResult, this.notComp, "test") : EvalBonus(oResult, this.notComp, "test");
				dialog.load({
					"rslt" : calcVal === undefined ? "ERROR" : calcVal.toString()
				});
			},
			description : {
				name : "Set the field's value",
				elements : [{
					type : "view",
					align_children : "align_left",
					elements : [{
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						wrap_name : true,
						char_width : 35,
						name : theName ? theName : "Set the field's value"
					}, {
						type : "cluster",
						alignment : "align_fill",
						item_id : "txt0",
						name : "Fill out the value you want to set",
						font : "dialog",
						bold : true,
						elements : [{
							type : "static_text",
							alignment : "align_left",
							item_id : "txt3",
							name : theDialTxt,
							char_width : 35,
							wrap_name : true
						}, {
							type : "edit_text",
							alignment : "align_center",
							item_id : "user",
							char_width : 35,
							height : 20
						}, {
							type : "view",
							align_children : "align_distribute",
							char_width : 35,
							elements : [{
								type : "static_text",
								alignment : "align_left",
								item_id : "txt2",
								name : "This calculates to:",
								char_width : 1,
								height : 25
							}, {
								type : "static_text",
								alignment : "align_left",
								item_id : "rslt",
								font : "dialog",
								bold : true,
								name : "0",
								char_width : 8,
								height : 25
							}, {
								type : "button",
								alignment : "align_left",
								item_id : "calc",
								name : "<< Re-Calculate This"
							}]
						}]
					}, {
						type : "static_text",
						alignment : "align_fill",
						item_id : "txt1",
						wrap_name : true,
						name : "If the above calculates to 'ERROR', the field will not be changed.\nNote that the field won't appear to change until you click/tab out of it.",
						char_width : 35
					}].concat(theExpl ? [{
						type : "cluster",
						alignment : "align_fill",
						name : "Modifiers set by class features, race, feats, or magic items",
						font : "dialog",
						bold : true,
						elements : [{
							type : "edit_text",
							item_id : "expl",
							alignment : "align_fill",
							readonly : true,
							multiline: true,
							char_width : 35,
							height : 200
						}]
					}] : []).concat([{
						type : "ok_cancel"
					}])
				}]
			}
		};
		if (app.execDialog(theDialog) === "ok") {
			event.target.value = theDialog.theTXT;
		};
	};
};

// add a modifier to a modifier field so that the formula stays intact; Remove is boolean
function AddToModFld(Fld, Mod, Remove, NameEntity, Explanation) {
	if (!tDoc.getField(Fld)) return;
	var aFld = What(Fld);
	var setFld = "";
	if (!isNaN(Mod)) {
		Mod = Remove ? -1 * Mod : Number(Mod);
		var noRegEx = /((^|\+|[^*/]-)\d+)(?:($|\+|-))/;
		if (!isNaN(aFld)) {
			setFld = Number(aFld) + Mod;
		} else if ((noRegEx).test(aFld)) {
			var FldNum = Number(aFld.match(noRegEx)[1]);
			var FldNumNew = FldNum + Mod;
			setFld = aFld.replace(noRegEx, (FldNumNew < 0 ? "" : "+") + FldNumNew + "$3");
		} else {
			setFld = aFld + (Mod < 0 ? "" : "+") + Mod;
		};
	} else if (Remove) { // remove string
		setFld = aFld.replace(RegExp("\\+?" + Mod, "i"), "");
	} else { // add string
		setFld = (aFld ? aFld : "") + (Mod.substr(0, 1) === "-" ? "" : "+") + Mod
	};
	// remove zeroes
	setFld = setFld.replace(/[\+-/*]0([\+-/*]|$)/g, "$1");
	// remove useless leading things
	while (isNaN(setFld) && (/[+*/0]/).test(setFld[0])) {
		setFld = setFld.substr(1);
	}
	if (setFld == 0) setFld = "";
	var theSubmit = How(Fld);
	if (NameEntity && Explanation) {
		var theAdd = "\n\n" + toUni(NameEntity) + "\n" + Explanation;
		if (Remove) {
			theSubmit = theSubmit.replace(theAdd, "");
			// in case unicode use has changed between adding and removing
			theSubmit = theSubmit.replace("\n\n" + NameEntity + "\n" + Explanation, "");
		} else {
			theSubmit += theAdd;
		};
	};
	Value(Fld, setFld, undefined, theSubmit);
};

// add a modifier to a skill
// addMod : {type : "save", field : "all", mod : "Cha", text : "While I'm conscious I can add my Charisma modifier (min 1) to all my saving throws."} // this can be an array of objects, all of which will be processed
function processMods(AddRemove, NameEntity, items) {
	var QI = !event.target || !event.target.name || event.target.name.indexOf("Comp.") === -1;
	var prefix = QI ? "" : getTemplPre(event.target.name, "AScomp", true);
	var alphaB = Who("Text.SkillsNames") === "alphabeta";
	if (!isArray(items)) items = [items];
	for (var i = 0; i < items.length; i++) {
		var type = items[i].type.toLowerCase();
		var Fld = items[i].field;
		var Mod = items[i].mod;
		var Explanation = items[i].text;
		switch (type) {
			case "initiative" :
				Fld = QI ? "Init Bonus" : prefix + "Comp.Use.Combat.Init.Bonus";
			case "skill" :
				if ((/^all/i).test(Fld)) {
					Fld = QI ? "All Skills Bonus" : prefix + "BlueText.Comp.Use.Skills.All.Bonus";
				} else if ((/^pass/i).test(Fld)) {
					Fld = QI ? "Passive Perception Bonus" : prefix + "BlueText.Comp.Use.Skills.Perc.Pass.Bonus";
				} else {
					var skill = Fld.substr(0,4).capitalize();
					if (SkillsList.abbreviations.indexOf(skill) === -1) {
						skill = skill.substr(0,3);
						if (SkillsList.abbreviations.indexOf(skill) === -1) continue;
					};
					var skillOrder = alphaB || (!QI && !typePF) ? "abbreviations" : "abbreviationsByAS";
					var skillAbbr = SkillsList.abbreviations[SkillsList[skillOrder].indexOf(skill)];
					Fld = QI ? skillAbbr + " Bonus" : skillAbbr == "Init" ? prefix + "Comp.Use.Combat.Init.Bonus" : prefix + "BlueText.Comp.Use.Skills." + skillAbbr + ".Bonus";
				};
				break;
			case "save" :
				var matchSv = QI ? /.*(Str|Dex|Con|Int|Wis|Cha|HoS|All).*/i : /.*(Str|Dex|Con|Int|Wis|Cha|All).*/i;
				if (!(matchSv).test(Fld)) continue;
				var save = Fld.replace(matchSv, "$1").capitalize();
				if (save === "Hos") save = "HoS";
				Fld = QI ? save + " ST Bonus" : prefix + "BlueText.Comp.Use.Ability." + save + ".ST.Bonus";
				break;
			default :
				if (!tDoc.getField(Fld)) continue;
		};
		AddToModFld(Fld, Mod, !AddRemove, NameEntity, Explanation);
	};
};

// a way to pass an array of action strings or arrays to be processed by the Add/RemoveAction functions
// ["action", " (with Attac)"] or [["action", " (start)"], ["bonus action", " (end)"]]
function processActions(AddRemove, srcNm, itemArr, itemNm) {
	if (!itemArr) return;
	if (!isArray(itemArr) || (itemArr.length === 2 && !isArray(itemArr[0]) && !isArray(itemArr[1]) && (/^(?!.*action).*$|\(.*\)|\[.*\]/i).test(itemArr[1]))) {
		itemArr = [itemArr];
	};
	for (var i = 0; i < itemArr.length; i++) {
		var theAct = isArray(itemArr[i]) ? itemArr[i] : [itemArr[i], ""];
		var actNm = theAct[1] && !(/^( |-|,|\(|\[|\{|'|"|\/)/).test(theAct[1]) ? theAct[1] : itemNm + theAct[1];
		if (AddRemove) {
			AddAction(theAct[0], actNm, srcNm, theAct[2] ? theAct[2] : false);
		} else if (theAct[2]) {
			AddAction(theAct[0], theAct[2], srcNm, actNm);
		} else {
			RemoveAction(theAct[0], actNm, srcNm);
		}
	};
};

// a way to pass an array of tools to be processed by the SetProf function
// [["Musical instrument", 3], ["Thieves' tools", "Dex"]]
// "Land vehicles"
function processTools(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	if (!isArray(itemArr) || (itemArr.length === 2 && !isArray(itemArr[0]) && !isArray(itemArr[1]) && (!isNaN(itemArr[1]) || AbilityScores.fields[itemArr[1].substr(0,3).toLowerCase()]))) {
		itemArr = [itemArr];
	};
	for (var i = 0; i < itemArr.length; i++) {
		var subj = itemArr[i];
		if (isArray(subj)) {
			var prof = subj[0];
			var extra = subj[1];
		} else {
			var prof = subj;
			var extra = false;
		};
		SetProf("tool", AddRemove, prof, srcNm, extra);
	};
};

// a way to pass an array of languages to be processed by the SetProf function
// ["Elvish", 3] >> elvish and three other languages
function processLanguages(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	itemArr = isArray(itemArr) ? itemArr : [itemArr];
	for (var i = 0; i < itemArr.length; i++) {
		var subj = itemArr[i];
		if (isArray(subj)) {
			var prof = subj[0];
			var extra = subj[1];
		} else if (isNaN(subj)) {
			var prof = subj;
			var extra = false;
		} else {
			var prof = "from " + srcNm;
			var extra = subj;
		};
		SetProf("language", AddRemove, prof, srcNm, extra);
	};
};

// a way to pass an array of vision string to be processed by the SetProf function
// ["Darkvision", 60] >> Darkvision 60 ft
function processVision(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	if (!isArray(itemArr) || (itemArr.length === 2 && !isArray(itemArr[0]) && !isArray(itemArr[1]) && (!isNaN(itemArr[1]) || !isNaN(itemArr[1].substr(1))))) {
		itemArr = [itemArr];
	};
	var profsdone = {};
	for (var i = 0; i < itemArr.length; i++) {
		var subj = itemArr[i];
		if (isArray(subj)) {
			var prof = subj[0];
			var extra = subj[1];
		} else {
			var prof = subj;
			var extra = 0;
		};
		if (!profsdone[prof]) { profsdone[prof] = 1; } else { profsdone[prof] += 1; };
		var useScrNm = srcNm + (profsdone[prof] < 2 ? "" : " (" + profsdone[prof] + ")");
		SetProf("vision", AddRemove, prof, useScrNm, extra);
	};
};

// a way to pass an array of damage resistance strings or arrays to be processed by the SetProf function
// ["Slashing", "Slash. (nonmagical)"] >> Slash. (nonmagical) or Slashing if another doesn't have the nonmagical clause
function processResistance(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	if (!isArray(itemArr) || (itemArr.length === 2 && !isArray(itemArr[0]) && !isArray(itemArr[1]) && (/\(.*\)|\[.*\]/).test(itemArr[1]))) {
		itemArr = [itemArr];
	};
	for (var i = 0; i < itemArr.length; i++) {
		var theDmgres = isArray(itemArr[i]) ? itemArr[i] : [itemArr[i], false];
		SetProf("resistance", AddRemove, theDmgres[0], srcNm, theDmgres[1]);
	}
};

// a way to pass an array of save proficiency strings to be processed by the SetProf function
// ["Str", "Dex"]
function processSaves(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	if (!isArray(itemArr)) itemArr = [itemArr];
	for (var i = 0; i < itemArr.length; i++) {
		SetProf("save", AddRemove, itemArr[i], srcNm);
	}
};
// a way to pass an array of advantage/disadvantage giving arrays strings to be processed by the SetProf function
// ["Str", true] to give advantage on Strenght saves
// ["Init", false]  to give disadvantage on Initiative checks
function processAdvantages(AddRemove, srcNm, itemArr) {
	if (!itemArr || !isArray(itemArr)) return;
	if (itemArr.length == 2 && !isArray(itemArr[0])) itemArr = [itemArr];
	for (var i = 0; i < itemArr.length; i++) {
		SetProf("advantage", AddRemove, itemArr[i], srcNm);
	}
};

// a way to pass an array of skill proficiency strings to be processed by the SetProf function
// ["Persuasion", "full"]
function processSkills(AddRemove, srcNm, itemArr, descrTxt) {
	// add or remove the descrTxt
	var setDescr = false;
	if (!AddRemove) {
		if (CurrentProfs.skill.descrTxt && CurrentProfs.skill.descrTxt[srcNm]) {
			delete CurrentProfs.skill.descrTxt[srcNm];
		}
	} else {
		if (!CurrentProfs.skill.descrTxt) CurrentProfs.skill.descrTxt = {};
		if (descrTxt) {
			CurrentProfs.skill.descrTxt[srcNm] = descrTxt;
		} else {
			setDescr = true;
			descrTxt = [];
		}
	}
	if (!itemArr) {
		if (descrTxt) setSkillTooltips();
		return; // no items to process, so stop now
	}
	var getSkillAbbr = function(inSkill) {
		return SkillsList.abbreviations.indexOf(inSkill) !== -1 ? inSkill : false;
	}
	if (!isArray(itemArr) || (itemArr.length === 2 && !isArray(itemArr[0]) && !isArray(itemArr[1]) && (/full|increment|only/i).test(itemArr[1]))) itemArr = [itemArr];
	for (var i = 0; i < itemArr.length; i++) {
		var isArr = isArray(itemArr[i]);
		var aSkill = isArr ? itemArr[i][0] : itemArr[i];
		var sExp = isArr ? itemArr[i][1] : false;
		aSkill = aSkill[0].toUpperCase() + aSkill.substring(1, 4).toLowerCase();
		if (!getSkillAbbr(aSkill)) {
			aSkill = getSkillAbbr(aSkill.substring(0, 3));
			if (!aSkill) continue; // skill not found, so do the next one
		}
		SetProf("skill", AddRemove, aSkill, srcNm, sExp);
		if (setDescr) {
			var tSkill = SkillsList.names[SkillsList.abbreviations.indexOf(aSkill)];
			var eSkill = !sExp && !(/full|increment|only/i).test(sExp) ? "" : (/full/i).test(sExp) ? " expertise" : (/increment/i).test(sExp) ? " (expertise if already proficient)" : " expertise (only if already proficient)";
			descrTxt.push(tSkill + eSkill);
		}
	}
	// if we generated a new descriptive text and none was provided, add it now
	if (setDescr && descrTxt.length) CurrentProfs.skill.descrTxt[srcNm] = formatLineList(false, descrTxt);
	// then update the skill tooltips
	setSkillTooltips();
};
// Update the skill tooltips
function setSkillTooltips(noPopUp) {
	var oldTooltipTxt = Who("Acr Prof");
	if (!CurrentProfs.skill.descrTxt) CurrentProfs.skill.descrTxt = {};
	var iSet = CurrentProfs.skill.descrTxt;
	var tooltipTxt = "";
	var tooltipArr = [];
	for (var aSrc in iSet) tooltipArr.push(toUni(aSrc) + ": " + iSet[aSrc]);
	if (tooltipArr.length) {
		tooltipArr.sort();
		tooltipTxt = formatMultiList("Skill proficiencies gained from:", tooltipArr);
	}

	if (tooltipTxt == oldTooltipTxt) return; // nothing changed, so stop here

	for (i = 0; i < SkillsList.abbreviations.length; i++) {
		var theSkill = SkillsList.abbreviations[i];
		if (theSkill == "Init") continue;
		AddTooltip(theSkill + " Prof", tooltipTxt);
		AddTooltip(theSkill + " Exp", tooltipTxt);
	}
	if (!noPopUp && CurrentUpdates.types.indexOf("skills") === -1) {
		CurrentUpdates.types.push("skills");
		CurrentUpdates.skillStrOld = oldTooltipTxt.replace(/.+(\r|\n)*/, '');
	}
	AddTooltip("SkillsClick", "Click here to change the order of the skills. You can select either alphabetic order or ordered by ability score." + (tooltipTxt ? "\n\n" + tooltipTxt : ""));
}
// manual trigger for clicking the skill proficiency/expertise (MouseUp) on the 1st page
function applySkillClick(theSkill, isExp) {
	if (SkillsList.abbreviations.indexOf(theSkill) == -1) return;
	var isCheck = event.target.isBoxChecked(0) ? true : false;
	if (Who('Text.SkillsNames') !== 'alphabeta') {
		theSkill = SkillsList.abbreviationsByAS[SkillsList.abbreviations.indexOf(theSkill)];
	}
	var setExp = !isExp ? false : isCheck || (!isCheck && CurrentProfs.skill[theSkill]  && CurrentProfs.skill[theSkill].length > 1) ? "full" : "only";
	// if the proficiency is checked, but it already exists from another source, stop now
	// if the expertise is checked but it is already proficient and expertise already exists, stop now
	var alreadyProf = isCheck && CurrentProfs.skill[theSkill];
	if ((!isExp && alreadyProf) || (isExp && alreadyProf && CurrentProfs.skill[theSkill + " Prof"])) return;
	// apply the manual skill proficiency changes
	SetProf("skill", isCheck, theSkill, "manualClick", setExp);
	// if disabling manually, but set to enabled by the CurrentProfs variable, do an extra check to make sure it is manually disabled
	if (!isCheck && event.target.isBoxChecked(0)) {
		event.target.checkThisBox(0, false);
	}
}

// a way to pass an array of weapon proficiency booleans to be processed by the SetProf function
// [true, true, ["dagger", "sling"]] >> [simple, martial, [other array]]
function processWeaponProfs(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	var weaponTypes = ["simple", "martial", "other"]
	for (var i = 0; i < itemArr.length; i++) {
		if (itemArr[i] && weaponTypes[i]) {
			SetProf("weapon", AddRemove, weaponTypes[i], srcNm,
				i != 2 ? false : isArray(itemArr[i]) && itemArr[i].length ? itemArr[i] : itemArr[i] ? [itemArr[i]] : false
			);
		}
	}
};
// a way to pass an array of armour proficiency booleans to be processed by the SetProf function
// [true, true, false, false] >> [light, medium, heavy, shield]
function processArmourProfs(AddRemove, srcNm, itemArr) {
	if (!itemArr) return;
	var armorTypes = ["light", "medium", "heavy", "shields"]
	for (var i = 0; i < itemArr.length; i++) {
		if (itemArr[i] && armorTypes[i]) SetProf("armour", AddRemove, armorTypes[i], srcNm);
	}
};
// set the armour/weapon proficiency manually (field action)
function setCheckboxProfsManual(theField) {
	calcStop();
	var fld = theField ? tDoc.getField(theField) : event.target;
	var isActive = fld.isBoxChecked(0) === 1;
	var sort = (/simple|martial/i).test(fld.name) ? "weapon" : "armour";
	var type = fld.name.replace(/proficiency |armor |weapon /ig, '').toLowerCase();
	var normalState = CurrentProfs[sort][type] ? true : false;
	delete CurrentProfs[sort][type+"_manualon"];
	delete CurrentProfs[sort][type+"_manualoff"];
	if (normalState != isActive) CurrentProfs[sort][type+"_manual" + (isActive ? "on" : "off")] = true;
	SetProf(sort, undefined, type, undefined, true);
}
// do something with the manually entered 'other' weapon proficiencies (field action)
function setOtherWeaponProfsManual() {
	calcStop();
	var set = CurrentProfs.weapon;
	if (!set.otherWea) set.otherWea = { finalProfs : [], finalString : "", finalNamesNotManual : [], finalProfsNotManual : [] };
	var iSet = set.otherWea;
	var remString = iSet.finalString;
	var othWea = What("Proficiency Weapon Other Description");
	if (remString == othWea) return; // nothing changed

	var othWeaArr = othWea.split(/[/,\\\;\~\|]+ ?/); //split the current list with some commonly used separators
	var newWea = [];
	for (var i = 0; i < othWeaArr.length; i++) {
		var aWea = othWeaArr[i];
		if (!aWea) continue;
		// first test if this same name doesn't already exist by the regularly added stuff
		var testRegExp = RegExp("\\b"+aWea+"\\b", "i");
		var isKnownProf = iSet.finalNamesNotManual.some(function (wea) { return testRegExp.test(wea) });
		if (isKnownProf) continue;
		// then test if the weapon key is not already known
		var parsedWea = ParseWeapon(aWea);
		if (parsedWea && iSet.finalProfsNotManual.indexOf(parsedWea) !== -1) continue;
		// guess it isn't known, so add it
		var doWea = parsedWea ? parsedWea : aWea;
		if (newWea.indexOf(doWea) == -1) newWea.push(doWea);
	}

	var didChange = false;
	var manualWea = iSet["Manually added"] ? iSet["Manually added"].toString() : "";
	if (newWea.length) {
		// we found some manually added things, so add them
		newWea.sort();
		if (newWea.toString() != manualWea) {
			iSet["Manually added"] = newWea;
			didChange = true;
		}
	} else if (iSet["Manually added"]) {
		// nothing manually added, so remove that entry
		delete iSet["Manually added"];
		didChange = true;
	}
	if (didChange) SetProf("weapon", undefined, "other");
}

// A way to set the extra AC lines for magic / miscellaneous
function processExtraAC(AddRemove, srcNm, itemArr, parentName) {
	if (!itemArr) return;
	if (!isArray(itemArr)) itemArr = [itemArr];
	for (var i = 0; i < itemArr.length; i++) {
		if (!itemArr[i].name) itemArr[i].name = parentName ? parentName : "Undefined";
		SetProf("specialarmour", AddRemove, itemArr[i], srcNm, i.toString());
	}
}
// Function is still present for backwards-compatibility. If 'useMod' == 0, remove
function AddACMisc(useMod, useName, useText, useStopeval) {
	var makeObject = {
		name : useName,
		mod : useMod,
		text : useText,
		stopeval : useStopeval
	};
	var extra = "-addacmisc";
	// if we are removing something, we first have to fint the mod that was previously used
	if (!useMod && CurrentProfs.specialarmour[useName + extra]) {
		makeObject.mod = CurrentProfs.specialarmour[useName + extra].mod;
	}
	SetProf("specialarmour", !!useMod, makeObject, useName, extra);
}

// ProfType can be: "armour", "weapon", "save", "savetxt", "resistance", "vision", "speed", "language", or "tool"
// Add: AddRemove = true; Remove: AddRemove = false
// ProfObj is the proficiency that is gained/removed
// ProfSrce is the name of the thing granting the proficiency
// What "Extra" is, depends on ProfType
function SetProf(ProfType, AddRemove, ProfObj, ProfSrc, Extra) {
	ProfType = ProfType.toLowerCase();
	var set = CurrentProfs[ProfType];
	var ProfObjLC = typeof ProfObj == "string" ? clean(ProfObj, false, true).toLowerCase() : false;
	var metric = What("Unit System") !== "imperial";
	if (!set) return;
	if (!Extra) Extra = false;

	// function for adding all resistances of a single entry
	var DoResistance = function(keyName, skipA) {
		var aSet = CurrentProfs.resistance[keyName];
		if (!aSet || (CurrentProfs.savetxt.immune && CurrentProfs.savetxt.immune[keyName])) return;
		if (!skipA) skipA = [];
		if (aSet.merge) {
			if (skipA.indexOf(aSet.name) === -1) AddResistance(aSet.name, aSet.src);
		} else {
			for (var i = 0; i < aSet.cond.length; i++) {
				if (aSet.cond.indexOf(aSet.cond[i]) !== i) continue;
				if (skipA.indexOf(aSet.cond[i]) === -1) AddResistance(aSet.cond[i], aSet.lookup[aSet.cond[i]]);
			};
		};
	};

 switch (ProfType) {
	case "skill" : { // Extra is if the skill should also have expertise ('full'), or only expertise if already proficient from another source, else just proficient ('increment'), or only expertise if already proficient from another source ('only'), else nothing
		if (AddRemove) { // add
			// set the proficiency, but not if only adding expertise
			if (!Extra || !(/only/i).test(Extra)) {
				if (!set[ProfObj]) set[ProfObj] = [];
				if (set[ProfObj].indexOf(ProfSrc) == -1) set[ProfObj].push(ProfSrc);
			}
			// add the expertise, if any
			if (Extra) {
				if (!set[ProfObj+"_Exp"]) set[ProfObj+"_Exp"] = {};
				set[ProfObj+"_Exp"][ProfSrc] = Extra;
			}
		} else { // remove
			// delete the proficiency entry
			if ((!Extra || !(/only/i).test(Extra)) && set[ProfObj] && set[ProfObj].indexOf(ProfSrc) !== -1) {
				set[ProfObj].splice(set[ProfObj].indexOf(ProfSrc), 1);
				if (set[ProfObj].length == 0) delete set[ProfObj];
			}
			// delete the expertise entry
			if (set[ProfObj+"_Exp"] && set[ProfObj+"_Exp"][ProfSrc]) {
				delete set[ProfObj+"_Exp"][ProfSrc];
				if (ObjLength(set[ProfObj+"_Exp"]) === 0) delete set[ProfObj+"_Exp"];
			}
			// also remove the descriptive text if it is still there
			if (set.descrTxt && set.descrTxt[ProfSrc]) delete set.descrTxt[ProfSrc];
		}
		// now determine the new state of the skill
		var isProf = set[ProfObj] ? true : false;
		// then see if we need to add exp
		if (set[ProfObj+"_Exp"]) {
			for (var expSrc in set[ProfObj+"_Exp"]) {
				var aExp = set[ProfObj+"_Exp"][expSrc];
				var isExp = (/full/i).test(aExp) ? true : isProf && (/only/i).test(aExp) ? true : isProf && (/increment/i).test(aExp) && (set[ProfObj].length > 1 || set[ProfObj][0] !== expSrc);
				if (isExp) break;
			}
		} else {
			var isExp = false;
		}
		// get the name of the skill field
		var skillFld = Who('Text.SkillsNames') === 'alphabeta' ? ProfObj : SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(ProfObj)];
		// now update the fields
		Checkbox(skillFld + " Prof", isProf);
		Checkbox(skillFld + " Exp", isExp);
	}; break;
	case "weapon" : // if this is the 'other' weapons do something special. If not, it is Simple/Martial weapons and they can be treated just like armour
		if (ProfObj == "other") {
			if (!set.otherWea) set.otherWea = { finalProfs : [], finalString : "", finalNamesNotManual : [], finalProfsNotManual : [] };
			var iSet = set.otherWea;
			// Add or remove the new weapons from the objects
			var toDo = Extra && isArray(Extra) ? Extra : false;
			if (toDo) {
				if (AddRemove) { // Add
					iSet[ProfSrc] = toDo;
					iSet[ProfSrc].sort();
				} else { // Remove
					if (iSet[ProfSrc]) delete iSet[ProfSrc];
				}
			}
			// Make an array of all the weapons that are not covered by another proficiency
			iSet.finalProfs = [];
			iSet.finalNamesNotManual = [];
			iSet.finalProfsNotManual = [];
			var finalNames = [];
			var tooltipArr = [];
			var simpleProf = tDoc.getField("Proficiency Weapon Simple").isBoxChecked(0) === 1;
			var martialProf = tDoc.getField("Proficiency Weapon Martial").isBoxChecked(0) === 1;
			for (var key in iSet) {
				if ((/^final(Names|Profs|String)/).test(key)) continue;
				var aWea = iSet[key];
				// create the tooltip
				var lineTooltip = [];
				for (var i = 0; i < aWea.length; i++) {
					if (!aWea[i]) continue;
					// lookup to see if the weapon is a known key
					var aWeaI = aWea[i].toLowerCase();
					var theW = WeaponsList[aWeaI];
					var theWeaKey = theW ? aWeaI : aWea[i];
					var theName = theW ? theW.name : theWeaKey[0].toUpperCase() + theWeaKey.substr(1);
					// add the weapon to the tooltip
					lineTooltip.push(theName);
					if (theW && theW.type && ((/natural|spell|cantrip/i).test(theW.type) || ((/^simple$/i).test(theW.type) && simpleProf) || ((/^martial$/i).test(theW.type) && martialProf))) continue; // already proficient
					if (iSet.finalProfs.indexOf(theWeaKey) === -1) {
						// not yet proficient, so add the weapon to the final arrays
						iSet.finalProfs.push(theWeaKey);
						finalNames.push(theName[0].toUpperCase() + theName.substr(1));
						if (key != "Manually added") {
							iSet.finalProfsNotManual.push(theWeaKey);
							iSet.finalNamesNotManual.push(theName);
						}
					}
				}
				lineTooltip.sort();
				tooltipArr.push(formatLineList(key + " - ", lineTooltip));
			}
			// create the new field text
			finalNames.sort();
			iSet.finalString = finalNames.join(", ");
			// create the new field tooltip
			var weaProfs = [].concat(simpleProf ? ["simple"] : []).concat(martialProf ? ["martial"] : []).join(" and ");
			var extraTooltip = !weaProfs ? "" : "\n\nBecause you also have proficiency with " + weaProfs + " weapons, any falling into those categories are not displayed in the field."
			var otherWeaTooltip = tooltipArr.length == 0 ? "" : formatMultiList("Other weapon proficiencies gained from:", tooltipArr) + extraTooltip;
			// set the fields
			Checkbox("Proficiency Weapon Other", iSet.finalString != "");
			Value("Proficiency Weapon Other Description", iSet.finalString, otherWeaTooltip);
			// recalculate the attacks with the proficiency changes
			CurrentUpdates.types.push("attacksprofs");
			break; // only stop if this concerning "other" weapon proficiencies
		}
		// if simple or martial proficiency, do the same as the armour proficiency below
	case "armour" : { // if (Extra == true) means to not change the field, only the tooltip
		var sort = ProfType.replace('ou', 'o');
		var fld = "Proficiency " + ((/shield/i).test(ProfObj) ? "Shields" : (sort + " " + ProfObj).capitalize());
		var fldState = tDoc.getField(fld).isBoxChecked(0) === 1;
		if (!tDoc.getField(fld)) return;
		// set the object
		if (!Extra && AddRemove) { // add
			if (!set[ProfObj]) {
				set[ProfObj] = [ProfSrc];
			} else if (set[ProfObj].indexOf(ProfSrc) === -1) {
				set[ProfObj].push(ProfSrc);
			}
			delete set[ProfObj+"_manualon"];
		} else if (!Extra && set[ProfObj] && set[ProfObj].indexOf(ProfSrc) !== -1) { // remove
			set[ProfObj].splice(set[ProfObj].indexOf(ProfSrc), 1);
			if (set[ProfObj].length === 0) {
				delete set[ProfObj];
				delete set[ProfObj+"_manualoff"];
			}
		};
		// set the field and tooltip
		var tooltipArr = [].concat(set[ProfObj] ? set[ProfObj] : []);
		if (set[ProfObj+"_manualoff"]) tooltipArr.push("[Manually disabled]");
		if (set[ProfObj+"_manualon"]) tooltipArr.push("[Manually enabled]");
		var TooltipTxt = tooltipArr.length ? formatMultiList(ProfObj.capitalize() + " " + sort + " proficiency gained from:", tooltipArr) : "";
		var isOn = set[ProfObj+"_manualon"] ? true : set[ProfObj+"_manualoff"] ? false : set[ProfObj] ? true : false;
		if (Extra || isOn == fldState) {
			AddTooltip(fld, TooltipTxt);
		} else {
			Checkbox(fld, isOn, TooltipTxt);
		}
		// if this was weapons, we need to do some more things
		if (ProfType == "weapon") {
			if ((Extra || isOn != fldState) && Who("Proficiency Weapon Other Description")) {
				// redo the other weapon proficiencies, as they might have changed now
				SetProf("weapon", undefined, "other");
				return;
			} else if (Extra || isOn != fldState) {
				// recalculate the attacks if the proficiency value changed
				CurrentUpdates.types.push("attacksprofs");
			}
		}
	}; break;
	case "save" : {
		var Abi = AbilityScores.fields[ProfObjLC.substr(0,3)];
		if (!Abi) return; // stop if the input can't be used
		var SvFld = Abi + " ST Prof";
		if (AddRemove) { // add
			if (!set[Abi]) {
				set[Abi] = [ProfSrc];
			} else if (set[Abi].indexOf(ProfSrc) === -1) {
				set[Abi].push(ProfSrc);
			}
		} else if (set[Abi] && set[Abi].indexOf(ProfSrc) !== -1) { // remove
			set[Abi].splice(set[Abi].indexOf(ProfSrc), 1);
			if (set[Abi].length === 0) delete set[Abi];
		};
		// now update the saving throw checkbox
		if (set[Abi]) {
			var AbiNm = AbilityScores.names[AbilityScores.abbreviations.indexOf(Abi)];
			var TooltipTxt = formatMultiList(AbiNm + " saving throws proficiency was gained from:", set[Abi]);
			Checkbox(SvFld, true, TooltipTxt);
		} else {
			Checkbox(SvFld, false, "");
		};
	}; break;
	case "resistance" : { // Extra is something to replace the actual text, if even one source has no condition for the resistance (e.g. not something like "Bludg. (in Rage)"), then there is no need to add multiple instances of essentially the same resistance
		var setRem = !set[ProfObjLC] ? undefined : set[ProfObjLC].merge;
		if (AddRemove) { // add
			if (!set[ProfObjLC]) set[ProfObjLC] = {name : ProfObj, src : [], cond : [], lookup : {}, merge : false};
			var theSet = set[ProfObjLC];
			if (theSet.src.indexOf(ProfSrc) !== -1) return; // the thing already exists so exit
			theSet.src.push(ProfSrc);
			if (Extra) {
				theSet.cond.push(Extra);
				if (theSet.lookup[Extra]) {
					theSet.lookup[Extra].push(ProfSrc);
				} else {
					theSet.lookup[Extra] = [ProfSrc];
				};
			};
			theSet.merge = theSet.src.length !== theSet.cond.length;
		} else if (set[ProfObjLC]) { // remove
			var theSet = set[ProfObjLC];
			if (theSet.src.indexOf(ProfSrc) !== -1) theSet.src.splice(theSet.src.indexOf(ProfSrc), 1);
			if (theSet.src.length == 0) {
				delete set[ProfObjLC];
			} else {
				if (Extra && theSet.cond.indexOf(Extra) !== -1) theSet.cond.splice(theSet.cond.indexOf(Extra), 1);
				if (Extra && theSet.lookup[Extra].indexOf(ProfSrc) !== -1) {
					theSet.lookup[Extra].splice(theSet.lookup[Extra].indexOf(ProfSrc), 1);
					if (theSet.lookup[Extra].length == 0) delete theSet.lookup[Extra];
				};
				theSet.merge = theSet.src.length !== theSet.cond.length;
			};
		};

		// now update the resistance fields
		var resRemoved = 0;
		if (set[ProfObjLC]) {
			if (setRem != undefined) { // the object existed before, so see if something changed
				if (setRem && !theSet.merge) { // if before it was merged, but now no longer (removed the option without condiion)
					RemoveResistance(ProfObj);
					resRemoved = 1;
				} else if (!setRem && theSet.merge) { // if before it was not merged, but now is (the new addition must be without condition)
					for (var i = 0; i < theSet.cond.length; i++) {
						RemoveResistance(theSet.cond[i]);
						resRemoved += 1;
					};
				}; // if the merge status didn't change, we don't have to do anything here
			};
			// now add the resistance
			DoResistance(ProfObjLC);
		} else { // guess the current item was the only thing to remove
			RemoveResistance(Extra ? Extra : ProfObj);
			resRemoved = 1;
		};
		// if a space opened up, maybe some other resistances can finally fit
		if (resRemoved) {
			// first make a list of all the items currently in the fields
			var curRes = [];
			for (var k = 1; k <= 6; k++) {
				var aDmgRes = What("Resistance Damage Type " + k);
				if (aDmgRes) curRes.push(aDmgRes);
			};
			if (curRes.length !== 6) {
				for (var resObj in set) {
					if (resObj !== ProfObjLC) DoResistance(resObj, curRes);
				};
			};
		};
	}; break;
	case "language" :
	case "tool" : { // Extra is a number if the entry is a choice to be made by the user duplicates should be ignored (e.g. 'musical instrument'); // Alternatively, for a tool the Extra can be the 3-letter abbreviation if the tool is also to be added in the Skill Proficiencies section with a calculated value;
		var optNmbr = Extra && !isNaN(Extra) ? Extra : false;
		if (optNmbr) {
			var uID = ProfSrc + "_#_" + ProfObj + "_#_" + optNmbr;
			if (AddRemove) { // add
				if (!set[uID]) set[uID] = {source : ProfSrc, entries : [], choices : []};
				// first ask the user to select choices
				var optType = ProfType.capitalize() + "s";
				var optSubj = [];
				for (var i = 1; i <= optNmbr; i++) {
					optSubj.push(ProfObj + (optNmbr > 1 ? " (" + i + "/" + optNmbr + ")" : ""));
					set[uID].entries.push(uID + "-" + i);
				};
				set[uID].choices = optSubj;
				if (IsNotImport) {
					var knownOpt = [];
					for (var i = 1; i <= FieldNumbers.langstools; i++) {
						var theI = What(ProfType.capitalize() + " " + i);
						if (theI) knownOpt.push(theI);
					};
					set[uID].choices = AskUserOptions(optType, ProfSrc, optSubj, knownOpt);
				} else if (global.docFrom && global.docFrom.CurrentProfs && global.docFrom.CurrentProfs[ProfType] && global.docFrom.CurrentProfs[ProfType][uID] && global.docFrom.CurrentProfs[ProfType][uID].choices) {
					if (global.docFrom.CurrentProfs[ProfType][uID].choices.length === optNmbr) set[uID].choices = global.docFrom.CurrentProfs[ProfType][uID].choices;
				};
				// now add these choices to the sheet
				for (var i = 0; i < optNmbr; i++) {
					AddLangTool(ProfType, set[uID].choices[i], ProfSrc, set[uID].entries[i]);
				};
			} else if (set[uID]) { // remove
				for (var i = 0; i < optNmbr; i++) {
					RemoveLangTool(ProfType, ProfObj, set[uID].entries[i], set[uID].choices[i]);
				};
				delete set[uID];
			};
		} else {
			if (AddRemove) { // add
				if (!set[ProfObjLC]) {
					set[ProfObjLC] = [ProfSrc];
				} else if (set[ProfObjLC].indexOf(ProfSrc) === -1) {
					set[ProfObjLC].push(ProfSrc);
				};
			} else if (set[ProfObjLC] && set[ProfObjLC].indexOf(ProfSrc) !== -1) { // remove
				set[ProfObjLC].splice(set[ProfObjLC].indexOf(ProfSrc), 1);
				if (set[ProfObjLC].length === 0) delete set[ProfObjLC];
			};
			// now update the proficiency
			if (set[ProfObjLC]) {
				AddLangTool(ProfType, ProfObj, set[ProfObjLC]);
			} else {
				RemoveLangTool(ProfType, ProfObj);
			};

			// if dealing with a tool, we might need to add it to the skill proficiencies section to get a calculated value
			var toolAbi = ProfType === "tool" && Extra && isNaN(Extra) ? AbilityScores.fields[Extra.substr(0,3).toLowerCase()] : false;
			if (toolAbi) {
				var theTooTxt = ProfObj + " (" + (typePF ? toolAbi : toolAbi.toUpperCase()) + ")";
				if (AddRemove) { // add
					if (!set.toolSkill) {
						set.toolSkill = [theTooTxt];
					} else if (set.toolSkill.indexOf(ProfSrc) === -1) {
						set.toolSkill.push(theTooTxt);
					};
				} else if (!set[ProfObjLC] && set.toolSkill && set.toolSkill.indexOf(theTooTxt) !== -1) { // remove
					set.toolSkill.splice(set.toolSkill.indexOf(theTooTxt), 1);
					if (set.toolSkill.length === 0) delete set.toolSkill;
				};
				// now update the skill proficiency entry
				var curToolTxt = What("Too Text");
				if (theTooTxt.toLowerCase().indexOf(curToolTxt.toLowerCase()) !== -1 && set.toolSkill && set.toolSkill.indexOf(curToolTxt) === -1) {
					Value("Too Text", set.toolSkill[0]);
					Checkbox("Too Prof", true);
					Checkbox("Too Exp", false);
				} else if (!set.toolSkill && theTooTxt.toLowerCase().indexOf(curToolTxt.toLowerCase()) !== -1) {
					tDoc.resetForm(["Too Text"]);
					Checkbox("Too Prof", false);
					Checkbox("Too Exp", false);
				};
			};
		};
	}; break;
	case "savetxt" : { // text to be put in the "Saving Throw advantages / disadvantages" field
		var fld = "Saving Throw advantages / disadvantages";
		//create the set object if it doesn't exist already
		var setKeys = function() {
			for (var e in set) {return true;};
			CurrentProfs.savetxt = { text : {}, immune : {}, adv_vs : {} };
			set = CurrentProfs.savetxt;
		}();
		//put the input into a form we can use
		if (typeof ProfObj == "string") ProfObj = { text : [ProfObj] };
		for (var st in ProfObj) {
			if (typeof ProfObj[st] == "string") ProfObj[st] = [ProfObj[st]];
			for (var i = 0; i < ProfObj[st].length; i++) {
				ProfObj[st][i] = clean(ProfObj[st][i], false, true);
				if (st !== "text") ProfObj[st][i] = ProfObj[st][i].replace(/,|;/g, "");
			};
		};
		//a functino to parse the 'immune' and 'adv_vs' parts into a usable string
		var preTxt = {adv_vs : "Adv. on saves vs.", immune : "Immune to"};
		var parseSvTxt = function() {
			var adv_vsArr = [], immuneArr = [];
			for (var svAdv in set.adv_vs) {
				if (!set.immune[svAdv]) adv_vsArr.push(set.adv_vs[svAdv].name);
			};
			for (var svImm in set.immune) {
				immuneArr.push(set.immune[svImm].name);
			};
			adv_vsArr.sort();
			immuneArr.sort();
			var theRe = {
				adv_vs : formatLineList(preTxt.adv_vs, adv_vsArr),
				adv_vsA : adv_vsArr,
				immune : formatLineList(preTxt.immune, immuneArr),
				immuneA : immuneArr
			};
			return theRe;
		};
		//create an object of the current state
		var oldSvTxt = parseSvTxt();
		//Process the input. //for the simple text strings, immediately add/remove it
		for (var attr in ProfObj) {
			var setT = set[attr];
			var addT = ProfObj[attr];
			for (var i = 0; i < addT.length; i++) {
				var iAdd = addT[i];
				var iAddM = ConvertToMetric(iAdd, 0.5);
				var iAddLC = iAdd.toLowerCase();
				if (AddRemove) { // add
					if (!setT[iAddLC]) {
						setT[iAddLC] = {
							name : iAdd,
							nameMetric : iAddM,
							src : [ProfSrc]
						};
						if (attr === "text") {
							AddString(fld, metric ? iAdd : iAddM, "; ");
						} else if (attr === "immune" && CurrentProfs.resistance[iAddLC]) {
							//adding immunity to something that the character also has resistance to, so remove the resistance
							var theRes = CurrentProfs.resistance[iAddLC];
							if (theRes.merge) {
								RemoveResistance(theRes.name);
							} else {
								for (var j = 0; j < theRes.cond.length; j++) {
									RemoveResistance(theRes.cond[j]);
								};
							};
						};
					} else if (setT[iAddLC].src.indexOf(ProfSrc) === -1) {
						setT[iAddLC].src.push(ProfSrc);
					};
				} else if (setT[iAddLC] && setT[iAddLC].src.indexOf(ProfSrc) !== -1) { // remove
					setT[iAddLC].src.splice(setT[iAddLC].src.indexOf(ProfSrc), 1);
					if (setT[iAddLC].src.length === 0) {
						delete setT[iAddLC];
						if (attr === "text") {
							RemoveString(fld, metric ? iAdd : iAddM);
						} else if (attr === "immune" && CurrentProfs.resistance[iAddLC]) {
							//removing immunity to something that the character also has resistance to, so add the resistance (again)
							DoResistance(iAddLC);
						};
					};
				};
			};
		};
		// Put the immune and adv_vs into the field, if anything changed
		var svFld = What(fld);
		var newSvTxt = parseSvTxt();
		for (var i = 0; i <= 1; i++) {
			var attri = i ? "adv_vs" : "immune";
			var oldStr = oldSvTxt[attri];
			var oldStrRE = RegExp(oldStr.RegEscape(), "i");
			var newStr = newSvTxt[attri];
			if (!oldStr && newStr) {
				svFld += (svFld ? "; " : "") + newStr;
			} else if (oldStr && (oldStrRE).test(svFld)) {
				svFld = svFld.replace(oldStrRE, newStr);
			} else if (oldStr) {
				// the string was probably altered manually, we got to find what was added, if anything
				var oldArr = oldSvTxt[attri + "A"];
				var newArr = newSvTxt[attri + "A"];
				var findRE = RegExp(preTxt[attri].RegEscape() + " ?(.*?),?( and)? ?" + oldArr[oldArr.length - 1].RegEscape(), "i");
				var foundStr = (findRE).test(svFld) ? svFld.match(findRE)[0].replace(findRE, "$1") : "";
				if (foundStr) {
					// we could match the string with something added in between, we can re-create the string with the manually added thing
					var addOb = foundStr.split(/, |; /);
					for (var j = 0; j < addOb.length; j++) {
						if (addOb[j] && !(RegExp("\\b" + addOb[j] + "\\b", "i")).test(oldArr)) newArr.push(addOb[j]);
					};
					newArr.sort();
					newStr = formatLineList(preTxt[attri], newArr);
					svFld = svFld.replace(findRE, newStr);
				} else if (newStr) {
					// we could not match the string, so lets just add the new object
					svFld += (svFld ? "; " : "") + newStr;
				};
			};
		};
		// Create the tooltip string for the "Saving Throw advantages / disadvantages" field
		var svTooltip = "";
		for (var a1 in set) {
		 for (var b2 in set[a1]) {
			var nmFld = a1 === "text" && metric ? "nameMetric" : "name";
			var aSvHead = (a1 === "immune" ? "\"Immunity to " : a1 === "adv_vs" ? "\"Adv. on saves vs. " : "\"") + set[a1][b2][nmFld] + "\"" + " was gained from:";
			var aSvTxt = formatLineList(aSvHead, set[a1][b2].src);
			if (aSvTxt) svTooltip += (svTooltip ? "\n \u2022 " : " \u2022 ") + aSvTxt + ".";
		 };
		};
		//Set the value of the field after cleaning any unfortunate replacement leftovers
		svFld = svFld.replace(/(,|;) (,|;)/g, "$2").replace(/^(,|;) |(,|;) $/g, "");
		Value(fld, svFld, svTooltip);
	}; break;
	case "vision" : { // Extra is optionally used to add a range, in feet, to the vision entry
		var fld = "Vision";
		var range = Extra ? Extra : 0;
		if (AddRemove) { // add
			if (!set[ProfObjLC]) {
				set[ProfObjLC] = {name : ProfObj, src : [], ranges : {}};
				var prevNm = "";
			} else {
				var prevRng = RoundTo(getHighestTotal(set[ProfObjLC].ranges) * (metric ? 0.3 : 1), 0.5, false, true);
				var prevNm = set[ProfObjLC].name + (!prevRng ? "" : " " + prevRng + (metric ? " m" : " ft"));
			}
			var theSet = set[ProfObjLC];
			if (theSet.src.indexOf(ProfSrc) !== -1) return; // the thing already exists so exit
			theSet.src.push(ProfSrc);
			theSet.ranges[ProfSrc] = range;
			// See what the new entry is now
			var newRng = RoundTo(getHighestTotal(theSet.ranges) * (metric ? 0.3 : 1), 0.5, false, true);
			var newNm = theSet.name + (!newRng ? "" : " " + newRng + (metric ? " m" : " ft"));
			// Add or replace someting in the field
			if (prevNm != newNm) {
				ReplaceString(fld, newNm, "; ", prevNm);
			};
		} else if (set[ProfObjLC]) { // remove
			var theSet = set[ProfObjLC];
			if (theSet.src.indexOf(ProfSrc) !== -1) theSet.src.splice(theSet.src.indexOf(ProfSrc), 1);
			if (theSet.src.length == 0) { // remove all of this entry
				var newRng = RoundTo(getHighestTotal(theSet.ranges) * (metric ? 0.3 : 1), 0.5, false, true);
				var newNm = theSet.name + (!newRng ? "" : " " + newRng + (metric ? " m" : " ft"));
				RemoveString(fld, newNm);
				delete set[ProfObjLC];
			} else {
				var prevRng = RoundTo(getHighestTotal(theSet.ranges) * (metric ? 0.3 : 1), 0.5, false, true);
				var prevNm = theSet.name + (!prevRng ? "" : " " + prevRng + (metric ? " m" : " ft"));
				if (theSet.ranges[ProfSrc] !== undefined) delete theSet.ranges[ProfSrc];
				var newRng = RoundTo(getHighestTotal(theSet.ranges) * (metric ? 0.3 : 1), 0.5, false, true);
				var newNm = theSet.name + (!newRng ? "" : " " + newRng + (metric ? " m" : " ft"));
				if (prevNm != newNm) {
					ReplaceString(fld, newNm, "; ", prevNm);
				};
			};
		};
		//update the tooltip
		var visTxt = "";
		for (var aVis in set) {
			var aSet = set[aVis];
			var aSrcs = [];
			for (var aSrc in aSet.ranges) {
				var aRng = "";
				if (aSet.ranges[aSrc]) {
					aRng = " [" + aSet.ranges[aSrc] + " ft]";
					if (metric) aRng = ConvertToMetric(aRng, 0.5);
				};
				aSrcs.push(aSrc + aRng);
			};
			var aVisTxt = formatLineList("\"" + aSet.name + "\" was gained from:", aSrcs);
			if (aVisTxt) visTxt += (visTxt ? "\n \u2022 " : " \u2022 ") + aVisTxt + ".";
		};
		AddTooltip(fld, visTxt);
	}; break;
	case "speed" : {
		var fldSpd = "Speed";
		var fldSpdW = What(fldSpd).replace(/\n|\r/g, "").replace(/,/g, ".");
		var fldEnc = "Speed encumbered";
		var fldEncdW = What(fldEnc).replace(/\n|\r/g, "").replace(/,/g, ".");
		var spdTypes = ["walk", "burrow", "climb", "fly", "swim"];
		//create the set object if it doesn't exist already
		var setKeys = function() {
			for (var e in set) {return true;};
			CurrentProfs.speed = { allModes : {} };
			for (var i = 0; i < spdTypes.length; i++) CurrentProfs.speed[spdTypes[i]] = {spd : {}, enc : {}};
			set = CurrentProfs.speed;
		}();
		// a function to get the correct value of the speed
		var parseSpeed = function(type, inpObj, fullString, replaceWalk, extra) {
			var useObj = eval(inpObj.toSource());
			var goOn = function() {for (var e in useObj) {return true;} return false; }();
			if (!goOn) return fullString == "both" ? ["", 0] : fullString ? "" : 0;
			useObj.extra = extra;
			var total = getHighestTotal(useObj, true, replaceWalk, CurrentProfs.speed.allModes);
			var typeStr = type === "walk" ? "" : type + " ";
			var totalStr = !total ? "" : typeStr + RoundTo(total * (metric ? 0.3 : 1), 0.5, false, true) + (metric ? " m" : " ft");
			return fullString == "both" ? [totalStr, total] : fullString ? totalStr : total;
		};
		// get the totals before we change anything
		var oldTotals = {
			walkSpd : parseSpeed("walk", set.walk.spd, false, 0),
			walkEnc : parseSpeed("walk", set.walk.enc, false, 0)
		};
		for (var i = 0; i < spdTypes.length; i++) {
			var sT = spdTypes[i];
			if (sT === "walk") continue;
			oldTotals[sT + "Spd"] = parseSpeed(sT, set[sT].spd, false, oldTotals.walkSpd);
			oldTotals[sT + "Enc"] = parseSpeed(sT, set[sT].enc, false, oldTotals.walkEnc);
		};
		// make an object of all the differences between the values of the field and the oldTotals
		var deltaSpds = {};
		var splitSpdString = function(type, str) {
			for (var i = 0; i < spdTypes.length; i++) {
				var sT = spdTypes[i];
				if (!str) {
					deltaSpds[sT + type] = 0;
					continue;
				};
				var strParse = oldTotals[sT + type];
				var typeRE = sT === "walk" ? /^(\d+.?\d*).*/ : RegExp(".*" + sT + " *(\\d+.?\\d*).*", "i");
				if ((typeRE).test(str)) strParse = Number(str.replace(typeRE, "$1"));
				if (metric) strParse = RoundTo(strParse / 0.3, 5, false, false);
				var total = strParse - oldTotals[sT + type];
				deltaSpds[sT + type] = !total ? 0 : total > 0 ? "+" + total : total.toString();
			}
		};
		splitSpdString("Spd", fldSpdW);
		splitSpdString("Enc", fldEncdW);
		if (isArray(ProfObj)) ProfObj = { walk : {spd : parseFloat(ProfObj[0]), enc : parseFloat(ProfObj[1])} };
		// add or remove the ProfObj from the current object
		for (var spdType in ProfObj) {
			if (!CurrentProfs.speed[spdType]) continue
			var theInp = ProfObj[spdType];
			var theSet = CurrentProfs.speed[spdType];
			if (AddRemove) { // add
				if (spdType === "allModes") {
					theSet[ProfSrc] = theInp;
				} else if (typeof theInp == "object") {
					if (theInp.spd) theSet.spd[ProfSrc] = theInp.spd;
					if (theInp.enc) theSet.enc[ProfSrc] = theInp.enc;
				} else {
					theSet.spd[ProfSrc] = theInp;
					theSet.enc[ProfSrc] = theInp;
				};
			} else { // remove
				if (spdType === "allModes") {
					delete theSet[ProfSrc];
				} else {
					if (theSet.spd[ProfSrc] !== undefined) delete theSet.spd[ProfSrc];
					if (theSet.enc[ProfSrc] !== undefined) delete theSet.enc[ProfSrc];
				};
			};
		};
		// get the new totals
		var theWalks = {
			spd : parseSpeed("walk", set.walk.spd, "both", 0, deltaSpds.walkSpd),
			enc : parseSpeed("walk", set.walk.enc, "both", 0, deltaSpds.walkEnc)
		};
		var newTotals = { walkSpd : theWalks.spd[0], walkEnc : theWalks.enc[0] };
		for (var i = 0; i < spdTypes.length; i++) {
			var sT = spdTypes[i];
			if (sT === "walk") continue;
			newTotals[sT + "Spd"] = parseSpeed(sT, set[sT].spd, true, theWalks.spd[1], deltaSpds[sT + "Spd"]);
			newTotals[sT + "Enc"] = parseSpeed(sT, set[sT].enc, true, theWalks.enc[1], deltaSpds[sT + "Enc"]);
		};
		// create the strings
		var spdString = "";
		var encString = "";
		for (var i = 0; i < spdTypes.length; i++) {
			var sT = spdTypes[i];
			var sSpd = newTotals[sT + "Spd"];
			if (sSpd) spdString += (!spdString ? "" : ",\n") + sSpd;
			var eSpd = newTotals[sT + "Enc"];
			if (eSpd) encString += (!encString ? "" : typePF ? ", " : ",\n") + eSpd;
		};
		// create the tooltips
		var ttips = {spd : "", enc : ""};
		var modArray = [];
		for (var spMod in set.allModes) {
			var theVal = set.allModes[spMod];
			if (!theVal) continue;
			theVal += " ft";
			if (metric) theVal = ConvertToMetric(theVal, 0.5);
			modArray.push(spMod + " [" + theVal + "]");
		};
		for (var i = 0; i < spdTypes.length; i++) {
			var sT = spdTypes[i];
			var arrs = {spd : [], enc : []};
			for (var n = 0; n <= 1; n++) {
				var sV = n ? "enc" : "spd";
				var theSpeeds = set[sT][sV];
				var goOn = false;
				for (var aSpeed in theSpeeds) {
					var theVal = theSpeeds[aSpeed];
					if (!theVal) continue;
					if (theVal === "walk") {
						theVal = "as walking speed";
					} else {
						theVal += " ft";
					};
					if (metric) theVal = ConvertToMetric(theVal, 0.5);
					arrs[sV].push(aSpeed + " [" + theVal + "]");
					goOn = true;
				};
				if (goOn) {
					arrs[sV] = arrs[sV].concat(modArray);
					ttips[sV] += (ttips[sV] ? "\n\n" : "") + formatMultiList("The total " + (n ? "encumbered " : "") + sT + "ing speed comes from:", arrs[sV]);
				};
			};
		};
		// set them to the fields
		Value(fldSpd, spdString, ttips.spd);
		Value(fldEnc, encString, ttips.enc);
	}; break;
	case "specialarmour" : { // Extra is to make the entry unique (the array index)
		if (!ProfObj.mod) return;
		var fldNms = {
			magic : ["AC Magic", "AC Magic Description"],
			misc1 : ["AC Misc Mod 1", "AC Misc Mod 1 Description"],
			misc2 : ["AC Misc Mod 2", "AC Misc Mod 2 Description"]
		};
		var objName = ProfSrc + "-" + Extra;
		if (AddRemove) { // add
			var tObj = {
				name : ProfObj.name,
				mod : ProfObj.mod,
				text : ProfObj.text,
				stopeval : ProfObj.stopeval,
				source : ProfSrc
			};
			if (ProfObj.magic) {
				tObj.type = "magic";
			} else {
				// count how many of each misc we got, and add to the fewest
				var tCount = { misc1 : 0, misc2 : 0 };
				for (var key in set) if (set[key].type != "magic") tCount[set[key].type] += 1;
				tObj.type = tCount.misc1 <= tCount.misc2 ? "misc1" : "misc2";
			}
			set[objName] = tObj;
			// update the description
			AddString(fldNms[tObj.type][1], tObj.name, ", ");
		} else { // remove
			var tObj = set[objName];
			if (!tObj) return; // nothing to do so stop now
			// only remove this if the name isn't used for another in the same field
			var removeName = true;
			for (var key in set) {
				if (key !== objName && set[key].name == tObj.name && set[key].type == tObj.type) {
					removeName = false;
					break;
				}
			}
			// update the description
			if (removeName) RemoveString(fldNms[tObj.type][1], tObj.name);
		}
		// update the modifier field
		AddToModFld(fldNms[tObj.type][0], tObj.mod, !AddRemove, tObj.name, tObj.text);
		// now set the tooltip
		var tooltipArr = [];
		for (var key in set) {
			if (!AddRemove && key == objName) continue;
			if (set[key].type == tObj.type) {
				var srcStr = set[key].source.indexOf(set[key].name) == -1 ? set[key].source + " (" + set[key].name + ")" : set[key].source;
				tooltipArr.push(srcStr);
			};
		}
		var tooltipStr = formatMultiList("This line of " + (tObj.type == "magic" ? "magic" : "miscellaneous") + " AC bonuses contains:\n(tip: click on the number field in this line for more info)", tooltipArr);
		AddTooltip(fldNms[tObj.type][1], tooltipStr);
		if (!AddRemove) delete set[objName]; // now delete the object
	}; break;
	case "carryingcapacity" : {
		ProfObj = parseFloat(ProfObj);
		if (isNaN(ProfObj)) return; // nothing to do
		var cFld = "Carrying Capacity Multiplier";
		var curFactor = Number(What(cFld));
		if (isNaN(curFactor)) { // recreate the total from the attributes
			curFactor = 1;
			for (var srcs in set) curFactor *= set[srcs];
		}
		if (AddRemove) { // add
			set[ProfSrc] = ProfObj;
			curFactor *= ProfObj;
		} else if (set[ProfSrc]) { // remove
			curFactor /= set[ProfSrc];
			delete set[ProfSrc];
		}
		// Make the new tooltip
		var sourcesArray = [];
		for (var srcs in set) {
			sourcesArray.push(srcs + ": \u00D7" + set[srcs]);
		}
		var ttText = toUni("Carrying Capacity Multiplier") + "\nThe number you type in here will be used to multiply the carrying capacity with. This must be a positive number.\n\nWhen you set this value to zero, all the encumbrance calculations will be halted and the encumbrance fields will be left empty." + formatMultiList("\n\nThe following features have changed this multiplier:", sourcesArray);
		// Set the new field value
		Value("Carrying Capacity Multiplier", Math.max(0, RoundTo(curFactor, 0.25)), ttText);
	}; break;
	case "advantage" : { // ProfObj array [field, boolean (true = adv; false = disadv)]
		var fld = ProfObj[0], fldDescr;
		fld = fld.substr(0,1).toUpperCase() + fld.substr(1).toLowerCase();
		var fld3 = fld.substr(0,3), fld4 = fld.substr(0,4);
		var isSkill = false;
		if (SkillsList.abbreviations.indexOf(fld3) !== -1) {
			fld = fld3;
			isSkill = true;
		} else if (SkillsList.abbreviations.indexOf(fld4) !== -1) {
			fld = fld4;
			isSkill = true;
		} else if (AbilityScores.abbreviations.indexOf(fld3) !== -1) {
			fld = fld3 + " ST";
			fldDescr = AbilityScores.names[AbilityScores.abbreviations.indexOf(fld3)] + " saving throws";
		} else if (fld3 == "Att") {
			fld = fld3;
			fldDescr = "attack rolls";
		}
		if (isSkill) {
			fldDescr = SkillsList.names[SkillsList.abbreviations.indexOf(fld)] + " checks";
		}
		if (!set[fld]) set[fld] = {};
		if (AddRemove) { // add
			set[fld][ProfSrc] = ProfObj[1];
		} else if (set[fld][ProfSrc] !== undefined) { // remove
			delete set[fld][ProfSrc];
		}
		// what to change the field to
		var setAdv = 0, setDis = 0, tooltipArr = [];
		for (var src in set[fld]) {
			var giveAdv = set[fld][src];
			tooltipArr.push((!giveAdv ? "Disa" : "A") + "dvantage: " + src);
			if (giveAdv) {
				setAdv++;
			} else {
				setDis++;
			}
		}
		tooltipArr.sort();
		if (setAdv && setDis) { // both advantage and disadvantage, so set neither
			setAdv = false;
			setDis = false;
		}
		// apply the fields
		if (!typePF) {
			var useFld = isSkill && Who("Text.SkillsNames") != "alphabeta" ? SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(fld)] : fld;
			var fullTT = !tooltipArr.length ? "" : formatMultiList("(Dis)advantage with " + fldDescr + " gained from:", tooltipArr) + "\n\nRemember that advantage and disadvantage cancel each other out and that there is no bonus in having multiple sources of either.\nOne disadvantage will cancel any number of reasons for advantage and vice versa.";
			Checkbox(useFld + " Adv", setAdv, fullTT);
			Checkbox(useFld + " Dis", setDis, fullTT);
		} else {
			if (fld == "Perc") {
				AddTooltip("Passive Perception Bonus", undefined, setAdv ? "Adv" : setDis ? "Dis" : "");
			} else if (fld == "Ste") {
				if (setDis) {
					Show("Stealth Disadv." + Who("Text.SkillsNames"));
				} else {
					Hide("Stealth Disadv");
				}
				AddTooltip("AC Stealth Disadvantage", undefined, setAdv ? "Adv" : setDis ? "Dis" : "");
			}
		}
		// clean the object
		if (!AddRemove && !tooltipArr.length) delete set[fld];
	}; break;
 };
	SetStringifieds("profs");
};

//a way of creating a formatted list with multiple lines or on a single line
function formatMultiList(caption, elements) {
	if (!elements || (isArray(elements) && elements.length === 0)) return "";
	if (!isArray(elements)) elements = [elements];
	var rStr = caption + "\n \u2022 " + elements[0];
	for (var i = 1; i < elements.length; i++) {
		rStr += ";\n \u2022 " + elements[i];
	};
	return rStr + ".";
};
function formatLineList(caption, elements) {
	if (!elements || (isArray(elements) && elements.length === 0)) return "";
	if (!isArray(elements)) elements = [elements];
	var rStr = (caption ? caption + " " : "") + elements[0];
	var EL = elements.length;
	for (var i = 1; i < EL; i++) {
		rStr += EL > 2 ? "," : "";
		rStr += (i === EL - 1 ? " and " : " ") + elements[i];
	};
	return rStr;
};

//a way to condense an array of numbers down to the highest and modifiers
function getHighestTotal(nmbrObj, notRound, replaceWalk, extraMods) {
	var values = [0];
	var modifications = [];
	var fixedVals = [0];
	var noModsIfWalks = false;
	var prsVal = function(val) {
		if (!val) {
			return;
		} else if (isNaN(val.substring(0,1)) && !isNaN(val.substring(1))) {
			modifications.push(val);
		} else if (!isNaN(val)) {
			values.push(val);
		} else if (replaceWalk !== undefined && replaceWalk !== "walk" && val === "walk") {
			prsVal(replaceWalk);
			noModsIfWalks = true;
		} else if ((/fixed/i).test(val) && (/\d+/).test(val)) { // for Magic Items granting a speed, no modifiers at all
			fixedVals.push(Number(val.match(/\d+/)[0]));
		};
	};
	var recurProcess = function(input) {
		if (isArray(input)) {
			for (var i = 0; i < input.length; i++) { recurProcess(input[i]); };
		} else if (typeof input == "object") {
			for (var i in input) { recurProcess(input[i]); };
		} else {
			prsVal(input);
		};
	};
	recurProcess(nmbrObj);
	//process the values
	var tValue = Math.max.apply(Math, values);
	//process the modifications
	var processModifiers = function(modA) {
		for (n = 1; n <= 2; n++) { // first do substractions and additions, then multiplications and divisions
			for (var i = 0; i < modA.length; i++) {
				var aMod = modA[i];
				var aOperator = aMod.substring(0,1);
				var aValue = Number(aMod.substring(1));
				if (isNaN(aValue)) continue;
				if (n === 1) {
					switch (aOperator) {
						case "+" :
							tValue += aValue;
							break;
						case "-" :
						case "\u2015" :
							tValue -= aValue;
							break;
						case "_" :
							tValue = tValue ? tValue + aValue : tValue;
							break;
					};
				} else {
					switch (aOperator) {
						case "x" :
						case "X" :
						case "*" :
						case "\u00d7" :
							tValue *= aValue;
							break;
						case "/" :
						case ":" :
							tValue /= aValue;
							break;
					};
				};
			};
		};
	};
	if (tValue && modifications.length) processModifiers(modifications);
	if (tValue && extraMods && !(replaceWalk && noModsIfWalks && tValue === replaceWalk)) {
		modifications = [];
		recurProcess(extraMods);
		if (modifications.length) processModifiers(modifications);
	};
	if (fixedVals.length > 1) {
		tValue = Math.max.apply(Math, fixedVals.concat([tValue]));
	};
	return notRound ? tValue : Math.round(tValue);
};

// open a dialogue with a number of lines of choices and return the choices in an array; if knownOpt === "radio", show radio buttons instead, and return the entry selected
// if notProficiencies is set to true, the optType will serve as the dialog header, and optSrc will serve as the multline explanatory text
function AskUserOptions(optType, optSrc, optSubj, knownOpt, notProficiencies) {
	if (!IsNotImport) return optSubj;
	//first make the entry lines
	var selectionLines = [];
	for (var i = 0; i < optSubj.length; i++) {
		if (knownOpt === "radio") {
			selectionLines.push({
				type : "radio",
				item_id : "sl" + ("0" + i).slice(-2),
				group_id : "slct",
				name : optSubj[i]
			});
		} else {
			selectionLines.push({
				type : "view",
				alignment : "align_fill",
				align_children : "align_row",
				elements : [{
					type : "static_text",
					alignment : "align_left",
					item_id : "st" + ("0" + i).slice(-2),
					font : "dialog",
					name : "Already known!"
				}, {
					type : "edit_text",
					alignment : "align_right",
					item_id : "sl" + ("0" + i).slice(-2),
					char_width : 30,
					height : 20
				}]
			});
		};
	};
	// split to two columns if radio options and more than 7
	if (knownOpt === "radio" && optSubj.length > 7) {
		var leftCol = selectionLines.slice(0,Math.ceil(selectionLines.length/2));
		var rightCol = selectionLines.slice(Math.ceil(selectionLines.length/2));
		selectionLines = [{
			type : "view",
			alignment : "align_fill",
			align_children : "align_distribute",
			elements : [{
				type : "view",
				alignment : "align_left",
				align_children : "align_left",
				elements : leftCol
			}, {
				type : "view",
				alignment : "align_right",
				align_children : "align_left",
				elements : rightCol
			}]
		}];
	}

	var diaHeader = notProficiencies ? optType : "Select proficiencies";

	//make all the known options lowercase for easier testing
	var showOptions = "";
	if (knownOpt && knownOpt !== "radio") {
		showOptions = knownOpt.toString();
		for (var i = 0; i < knownOpt.length; i++) { knownOpt[i] = knownOpt[i].toLowerCase(); };
	};

	var theDialog = {
		choices : [],
		already : knownOpt,
		subj : optSubj, //array of default choices
		initialize : function (dialog) {
			if (this.already === "radio") return;
			var toLoad = {};
			var toShow = {};
			for (var i = 0; i < this.subj.length; i++) {
				toLoad["sl" + ("0" + i).slice(-2)] = this.subj[i];
				var stTxt = "st" + ("0" + i).slice(-2);
				toShow[stTxt] = false;
				dialog.setForeColorRed(stTxt);
			};
			dialog.load(toLoad);
			dialog.visible(toShow);
		},
		commit : function (dialog) {
			var oResult = dialog.store();
			this.choices = [];
			for (var i = 0; i < this.subj.length; i++) {
				var theResult = oResult["sl" + ("0" + i).slice(-2)];
				if (this.already === "radio") {
					if (theResult) {
						this.choices = this.subj[i];
						return;
					};
				} else {
					this.choices.push(theResult ? theResult : this.subj[i]);
				};
			};
		},
		check : function (dialog, nmbr) {
			if (!this.already || this.already === "radio") return;
			var toChk = "sl" + ("0" + nmbr).slice(-2);
			var tTxt = "st" + ("0" + nmbr).slice(-2);
			var tResult = dialog.store()[toChk].toLowerCase();
			var toShow = {};
			toShow[tTxt] = this.already.indexOf(tResult) !== -1;
			dialog.visible(toShow);
		},
		description : {
			name : diaHeader,
			elements : [{
				type : "view",
				align_children : "align_left",
				elements : [{
					type : "static_text",
					item_id : "head",
					alignment : "align_fill",
					font : "heading",
					bold : true,
					wrap_name : true,
					char_width : 40,
					name : diaHeader
				}].concat(notProficiencies ? [{
					type : "static_text",
					item_id : "txtA",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					char_width : 40,
					name : optSrc
				}] : [{
					type : "view",
					alignment : "align_fill",
					align_children : "align_row",
					elements : [{
						type : "view",
						alignment : "align_left",
						align_children : "align_left",
						elements : [{
							type : "static_text",
							alignment : "align_left",
							font : "dialog",
							item_id : "txt0",
							name : "Regarding:"
						}, {
							type : "static_text",
							alignment : "align_left",
							font : "dialog",
							item_id : "txt2",
							name : "Gained from:"
						}]
					}, {
						type : "view",
						alignment : "align_right",
						align_children : "align_left",
						elements : [{
							type : "static_text",
							alignment : "align_left",
							item_id : "txt1",
							font : "dialog",
							bold : true,
							name : optType
						}, {
							type : "static_text",
							alignment : "align_left",
							item_id : "txt3",
							font : "dialog",
							bold : true,
							name : optSrc
						}]
					}]
				}]).concat([{
					type : "view",
					alignment : "align_center",
					align_children : "align_left",
					elements : selectionLines
				}]).concat(!showOptions ? [] : [{
					type : "static_text",
					alignment : "align_fill",
					item_id : "txtO",
					wrap_name : true,
					name : "Currently already known: " + showOptions + ".",
					char_width : 40
				}]).concat([{
					type : "static_text",
					alignment : "align_fill",
					item_id : "txtL",
					wrap_name : true,
					name : "You can always change what you set here at a later time by editing the corresponding field on the sheet. What you select here is not permanent.",
					char_width : 40
				}, {
					type : "ok"
				}])
			}]
		}
	};
	if (knownOpt !== "radio") { for (var i = 0; i < optSubj.length; i++) {
		theDialog["sl" + ("0" + i).slice(-2)] = Function("dialog", "this.check(dialog, " + i + ");");
	}; };
	app.execDialog(theDialog)
	return theDialog.choices;
};

// Process a feature attribute through the AddToNotes function
// namesArr = [tipNm, displName, fObjName, aParent]
function processToNotesPage(AddRemove, items, type, mainObj, parentObj, namesArr) {
	if (!isArray(items)) items = [items];
	// set the alertType, determined by type
	var fallback = {
		alertType : "Class Features section",
		noteOrig : namesArr[1],
		noteSrc : mainObj.source ? stringSource(mainObj, "first,abbr", ", ") : parentObj && parentObj.source ? stringSource(parentObj, "first,abbr", ", ") : ""
	}
	switch (GetFeatureType(type)) {
		case "classes":
			fallback.alertType = "Class Features section";
			fallback.noteOrig = namesArr[2].indexOf("subclassfeature") !== -1 ? CurrentClasses[namesArr[3]].subname : CurrentClasses[namesArr[3]].name;
			fallback.noteOrig += mainObj.minlevel ? " " + mainObj.minlevel : parentObj && parentObj.minlevel ? " " + parentObj.minlevel : "";
			break;
		case "race":
			fallback.alertType = "Racial Traits section";
			fallback.noteOrig = namesArr[1];
			break;
		case "background":
			fallback.alertType = "Background Feature description";
			fallback.noteOrig = namesArr[1];
			break;
		case "feats":
			fallback.alertType = "Feat description";
			fallback.noteOrig = namesArr[0];
			break;
		case "items":
			fallback.alertType = "Magic Item description";
			fallback.noteOrig = namesArr[0];
			break;
	};
	for (var i = 0; i < items.length; i++) {
		var noteObj = items[i];
		var alertTxt = noteObj.popupName ? noteObj.popupName : noteObj.name;
		var noteSrc = noteObj.source ? stringSource(noteObj, "first,abbr", ", ") : fallback.noteSrc;
		var noteDesc = (isArray(noteObj.note) ? desc(noteObj.note) : noteObj.note).replace(/\n/g, "\r");
		if (What("Unit System") === "metric") noteDesc = ConvertToMetric(noteDesc, 0.5);
		var noteStr = "\u25C6 " + noteObj.name + " (" + fallback.noteOrig + noteSrc + ")" + (noteObj.additional ? " [" + noteObj.additional + "]" : "") + noteDesc;
		if (noteObj.page3notes) { // add to 3rd page notes section
			if (AddRemove) {
				AddString('Extra.Notes', noteStr, true);
				show3rdPageNotes(); // for a Colourful sheet, show the notes section on the third page
				var changeMsg = alertTxt + " has been added to the Notes section on the third page" + (!typePF ? ", while the Rules section on the third page has been hidden" : "") + ". They wouldn't fit in the " + fallback.alertType + ".";
				CurrentUpdates.types.push("notes");
				if (!CurrentUpdates.notesChanges) {
					CurrentUpdates.notesChanges = [changeMsg];
				} else {
					CurrentUpdates.notesChanges.push(changeMsg);
				}
			} else {
				RemoveString('Extra.Notes', noteStr, true);
			}
		} else { // add to its own section on a notes page
			if (AddRemove) {
				AddToNotes(noteStr, alertTxt, false, fallback.alertType, true);
			} else {
				AddToNotes("", false, noteStr, false, true);
			}
		}
	}
}

// A way to add a string to a notes page, or generate a notes page if it didn't exist yet
function AddToNotes(noteStr, alertTxt, oldNoteStr, alertType, isProcessed) {
	if (!noteStr && !oldNoteStr) return;
	var prefix = false;
	if (!isProcessed) {
		if (What("Unit System") === "metric") {
			if (noteStr) noteStr = ConvertToMetric(noteStr, 0.5);
			if (oldNoteStr) oldNoteStr = ConvertToMetric(oldNoteStr, 0.5);
		}
		if (noteStr) noteStr = noteStr.replace(/\n/g, "\r");
		if (oldNoteStr) oldNoteStr = oldNoteStr.replace(/\n/g, "\r");
	};
	var replaceOldNote = false;
	if (noteStr && !isTemplVis("ASnotes")) {
		var noteFld = DoTemplate("ASnotes", "Add");
		noteFld += "Notes.Left";
	} else {
		var noteFld = false;
		var noteFlds = ["Notes.Left", "Notes.Right"];
		var notesPrefix = What("Template.extras.ASnotes").split(",");
		for (var i = 1; i < notesPrefix.length; i++) {
			for (var n = 0; n < noteFlds.length; n++) {
				var aFld = notesPrefix[i] + noteFlds[n];
				var inFld = What(aFld);
				if (noteStr && inFld.toLowerCase().indexOf(noteStr.toLowerCase()) !== -1) {
					return;
				} else if (oldNoteStr && inFld.toLowerCase().indexOf(oldNoteStr.toLowerCase()) !== -1) {
					prefix = notesPrefix[i];
					noteFld = aFld;
					replaceOldNote = true;
					i = noteFlds.length;
					break;
				} else if (inFld === "" && !noteFld) {
					noteFld = aFld;
				};
			};
		};
		if (!noteFld && noteStr) {
			noteFld = DoTemplate("ASnotes", "Add");
			noteFld += "Notes.Left";
		} else if (!noteFld && oldNoteStr) {
			return;
		};
	};
	ReplaceString(noteFld, noteStr, false, oldNoteStr ? oldNoteStr : "");
	if (!replaceOldNote && noteStr && alertTxt) {
		if (!alertType) alertType = "Class Features section";
		var changeMsg = alertTxt + ' has been added to the Notes page at page number ' + (tDoc.getField(noteFld).page + 1) + ". They wouldn't fit in the " + alertType + " or the third page's Notes section.";
		CurrentUpdates.types.push("notes");
		if (!CurrentUpdates.notesChanges) {
			CurrentUpdates.notesChanges = [changeMsg];
		} else {
			CurrentUpdates.notesChanges.push(changeMsg);
		}
	} else if (replaceOldNote && oldNoteStr && prefix && !What(prefix + "Notes.Left") && !What(prefix + "Notes.Right")) {
		// if the notes page is now completely empty, remove it completely
		DoTemplate("ASnotes", "Remove", prefix, true);
	}
};

// check if a newer version is available (Acrobat Pro only)
function checkForUpdates() {
	if (!(/exchange/i).test(app.viewerType)) return; // using Reader
	var serv = Net.SOAP.connect("http://update.flapkan.com/mpmb.wsdl");
	if (!serv || !serv.version) return;
	var thisType = typeA4 ? "CF-A4" : typeLR ? "CF-L" : (/redesign/i).test(tDoc.info.SheetType) ? "PF-R" : "PF";
	var lVers = parseFloat(serv.version(thisType));
	if (!lVers) return;
};

// a function to see if the character has proficiency in a skill; This returns an array of two booleans: [proficiency, expertise]
function hasSkillProf(theSkill) {
	var skill = theSkill.substr(0,4).capitalize();
	if (SkillsList.abbreviations.indexOf(skill) === -1) {
		skill = skill.substr(0,3);
		if (SkillsList.abbreviations.indexOf(skill) === -1) return [false, false];
	};
	var skillFld = Who('Text.SkillsNames') === 'alphabeta' ? skill : SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(skill)];
	var hasProf = tDoc.getField(skillFld + ' Prof').isBoxChecked(0) != 0;
	var hasExp = !hasProf ? false : tDoc.getField(skillFld + ' Exp').isBoxChecked(0) != 0;
	return [hasProf, hasExp];
};

// (Re)set all the calculations in their right order
function setCalcOrder() {
	calcStop();
	var cFlds = [];
	var abis = ["Str", "Dex", "Con", "Int", "Wis", "Cha", "HoS"];
	var skills = ["Acr", "Ani", "Arc", "Ath", "Dec", "His", "Ins", "Inti", "Inv", "Med", "Nat", "Perc", "Perf", "Pers", "Rel", "Sle", "Ste", "Sur"];
	// ability modifiers
	for (var i = 0; i < abis.length; i++) cFlds.push(abis[i]+" Mod");
	// Proficiency bonus
	cFlds.push("Proficiency Bonus");
	// saving throws
	for (var i = 0; i < abis.length; i++) cFlds.push(abis[i]+" ST Mod");
	// skills & initiative
	cFlds = cFlds.concat(skills);
	cFlds = cFlds.concat(["Too", "Passive Perception", "Initiative bonus"]);
	if (!typePF) cFlds.push("Init Dex Mod");
	// Spell Saves
	cFlds = cFlds.concat(["Spell save DC 1", "Spell save DC 2"]);
	// AC
	cFlds = cFlds.concat(["AC Armor Bonus", "AC Dexterity Modifier", "AC"]);
	// HD
	if (!typePF) for (var i = 1; i <= 3; i++) cFlds.push("HD"+i+" Con Mod");
	// attacks
	for (var i = 1; i <= FieldNumbers.attacks; i++) cFlds.push("Attack."+i+".To Hit");
	// weight information
	cFlds = cFlds.concat(["Weight Encumbered", "Weight Heavily Encumbered", "Weight Push/Drag/Lift", "Weight Carrying Capacity.Field"]);
	if (!typePF) cFlds = cFlds.concat(["Weight Encumbered Text", "Display.Speed.Enc", "Weight Heavily Encumbered Text", "Display.Speed.EncH", "Weight Push/Drag/Lift Text", "Display.Speed.Push", "Weight Carrying Capacity.Text"]);
	// equipment 2nd page
	cFlds.push("Adventuring Gear Weight Subtotal Right");
	if (typePF) cFlds.push("Adventuring Gear Weight Subtotal Middle");
	cFlds.push("Adventuring Gear Weight Subtotal Left");
	for (var i = 1; i <= (typePF ? 9 : 6); i++) cFlds.push("Adventuring Gear Location.Subtotal "+i);
	// equipment 3rd page
	cFlds.push("Extra.Gear Weight Subtotal Right");
	cFlds.push("Extra.Gear Weight Subtotal Left");
	for (var i = 1; i <= 6; i++) cFlds.push("Extra.Gear Location.Subtotal "+i);
	// weight carried
	cFlds.push("Weight Carried");
	// unrelated fields
	cFlds = cFlds.concat(["Next level", "SheetInformation"]);
	// companion page
	var tpls = What("Template.extras.AScomp").split(",");
	for (var t = 0; t < tpls.length; t++) {
		var tpl = tpls[t];
		// companion ability modifiers
		for (var i = 0; i < (abis.length - 1); i++) cFlds.push(tpl+"Comp.Use.Ability."+abis[i]+".Mod");
		// companion saving throws
		for (var i = 0; i < (abis.length - 1); i++) cFlds.push(tpl+"Comp.Use.Ability."+abis[i]+".ST.Mod");
		// companion skills
		for (var i = 0; i < skills.length; i++) cFlds.push(tpl+"Comp.Use.Skills."+skills[i]+".Mod");
		cFlds.push(tpl+"Comp.Use.Skills.Perc.Pass.Mod");
		// companion initiative
		cFlds.push(tpl+"Comp.Use.Combat.Init.Mod");
		if (!typePF) cFlds.push(tpl+"Comp.Use.Combat.Init.Dex");
		// companion HD
		if (!typePF) cFlds.push(tpl+"Comp.Use.HD.Con");
		// companion equipment
		if (typePF) {
			cFlds.push(tpl+"Comp.eqp.Gear Weight Subtotal");
		} else {
			cFlds = cFlds.concat([tpl+"Comp.eqp.Gear Weight Subtotal Left", tpl+"Comp.eqp.Gear Weight Subtotal Right"]);
		}
		// companion notes
		cFlds.push(tpl+"Comp.eqp.Notes");
		if (!typePF) cFlds.push(tpl+"Comp.img.Notes");
		// companion attacks
		for (var i = 1; i <= 3; i++) cFlds.push(tpl+"Comp.Use.Attack."+i+".To Hit");
	}
	// Wild Shape page
	var tpls = What("Template.extras.WSfront").split(",");
	for (var t = 0; t < tpls.length; t++) {
		var tpl = tpls[t];
		if (tpl) cFlds.push(tpl+"AdvLog.Player Name");
		for (var w = 1; w <= 4; w++) {
			for (var i = 0; i < (abis.length - 1); i++) cFlds.push(tpl+"Wildshape."+w+".Ability."+abis[i]+".Mod")
		}
	}
	// spell sheet pages
	var tpls = (What("Template.extras.SSfront") + "," + What("Template.extras.SSmore")).replace(/,(,)|,$()/, "$1").split(",");
	for (var t = 0; t < tpls.length; t++) {
		var tpl = tpls[t];
		cFlds.push(tpl+"SpellSheetInformation");
		if (typePF) {
			cFlds.push(tpl+"zAdvLog.PC Name");
		} else if (tpl) {
			cFlds.push(tpl+"AdvLog.PC Name");
		}
		if (!typePF && What("Template.extras.SSfront").indexOf(tpl) !== -1) cFlds.push(tpl+"spellshead.Text.prepare.0");
		for (var i = 0; i <= 3; i++) cFlds = cFlds.concat([tpl+"spellshead.prepare."+i, tpl+"spellshead.dc."+i, tpl+"spellshead.attack."+i]);
	}
	// adventurers log page last
	var advT = [".xp", ".gold", ".downtime", ".renown", ".magicItems"];
	var tpls = What("Template.extras.ALlog").split(",");
	for (var t = 0; t < tpls.length; t++) {
		var tpl = tpls[t];
		cFlds = cFlds.concat([
			tpl+"AdvLog.previous",
			tpl+"AdvLog.DCI.Text",
			tpl+"AdvLog.Player Name",
			tpl+"AdvLog.PC Name",
			tpl+"AdvLog.Class and Levels",
			tpl+"AdvLog.sheetNumber" // before the numeric fields for correct working of the SetAdvLogCalcOrder() function
		]);
		for (var l = 1; l <= FieldNumbers.logs; l++) {
			for (var i = 0; i < advT.length; i++) {
				var aLog = tpl+"AdvLog."+l+advT[i];
				cFlds = cFlds.concat([aLog+".start", aLog+".total"]);
			}
		}
	}

	// Set the actual calculation order
	var cOrd = 0;
	for (var i = 0; i < cFlds.length; i++) {
		var aFld = tDoc.getField(cFlds[i]);
		if (aFld) {
			aFld.calcOrderIndex = cOrd;
			cOrd++;
		}
	};
};

// The function called when the FAQ button is pressed
function getFAQ(input, delay) {
	var MenuSelection = input ? input : getMenu("faq");
	if (!MenuSelection || MenuSelection[0] != "faq") return;
	switch (MenuSelection[1]) {
		case "online" :
			app.launchURL("https://flapkan.com/faq", true);
			break;
		case "pdf" :
			if (delay) return true;
			tDoc.exportDataObject({ cName: 'FAQ.pdf', nLaunch: 2 });
			break;
		case "ogl" :
			ShowDialog("Open Gaming License, for use of the SRD", licenseOGL.join("\n\n"));
			break;
		case "gplv3" :
			ShowDialog("GNU License, for the software by MPMB", licenseGPLV3.join("\n\n"));
			break;
	}
};

// Make a menu to enable or disable the use of unicode
function makeUnicodeMenu() {
	var isEnabled = What("UseUnicode") != "";
	Menus.unicode = {
		cName : "Use Unicode " + (isEnabled ? "(disable if you can't read this: \"" + toUni("This") + "\")" : "[disabled]"),
		cReturn : "unicode#unicode#" + (isEnabled ? "" : "true"),
		bMarked : isEnabled
	}
}

// Do something with the menu
function setUnicodeUse(enable, force) {
	enable = enable != "";
	var isEnabled = What("UseUnicode") != "";
	if (isEnabled !== enable || force) {
		Value("UseUnicode", enable ? "true" : "");
		if (!force) {
			app.alert({
				cMsg : "You have changed the use of unicode characters to: " + (enable ? "ENABLED" : "DISABLED") + "\nUnicode characters are those that are bold, italic, or superscript in tooltips and dialogs. Not all systems handle them well.\n\nNote that there still will be some static tooltips that use unicode and thus might have unreadable characters for you.\n\nYou can already see the result of your change here:\n\"" + toUni("This text is bold and italic if unicode is enabled") + '\".',
				nIcon : 3,
				cTitle : "Unicode has been " + (enable ? "ENABLED" : "DISABLED")
			});
		}
		// update the sourcelist superscript
		for (var aSrc in SourceList) {
			SourceList[aSrc].uniS = toSup(SourceList[aSrc].abbreviation);
		};
		// update the tooltips that use unicode
		UpdateDropdown("tooltips");
		AbilityScores_Button(true);
		setSkillTooltips(true);
		MakeSkillsMenu_SkillsOptions(true, true);
		SetHPTooltip();
		AtHigherLevels = "\n   " + toUni("At Higher Levels") + ": ";
	}
}

// Copy all the attributes of a field to another field (or even swap between the two)
// excl is an object with optional attributes { userName : true, submitName : true, readonly : true, noCalc : true }
function copyField(fldFromName, fldToName, excl, swap) {
	var fldTo = tDoc.getField(fldToName);
	var fldFrom = tDoc.getField(fldFromName);
	if (!fldTo || !fldFrom || fldTo.type !== fldFrom.type) return;

	if (!excl) excl = {};

	// a function to do the actual copying
	var copy = function(fromObj, toObj, justObj) {
		if (fromObj.type == "checkbox") {
			if (justObj) {
				toObj.isBoxCheckVal = fromObj.isBoxChecked(0);
				toObj.isBoxChecked = function() { return saveTo.isBoxCheckVal; };
				toObj.type = "checkbox";
			} else {
				toObj.checkThisBox(0, fromObj.isBoxChecked(0));
			}
		} else {
			toObj.value = fromObj.value;
			if (justObj) toObj.type = "text";
		}
		if (!excl.userName) toObj.userName = fromObj.userName;
		if (!excl.submitName) toObj.submitName = fromObj.submitName;
		if (!excl.readonly) toObj.readonly = fromObj.readonly;
		if (fromObj.type == "text" && !excl.noCalc && !justObj) {
			toObj.setAction("Calculate", toObj.submitName);
		}
	}

	// If swapping the fields, first save the fldTo attributes to a separate object
	if (swap) {
		var saveTo = {};
		copy(fldTo, saveTo, true);
	}

	// Apply the attributes to the fldTo
	copy(fldFrom, fldTo);

	// If swapping the fields, now apply the fldTo attributes to the fldFrom from the object
	if (swap) copy(saveTo, fldFrom);
}

// a function to get the different versions of names used
function GetFeatureType(type) {
	var theReturn = "classes";
	switch (type.toLowerCase()) {
		case "classes":
		case "class":
			theReturn = "classes";
			break;
		case "backgrounds":
		case "background":
			theReturn = "background";
			break;
		case "races":
		case "race":
			theReturn = "race";
			break;
		case "feats":
		case "feat":
			theReturn = "feats";
			break;
		case "magicitems":
		case "magicitem":
		case "magic item":
		case "magic items":
		case "items":
		case "item":
			theReturn = "items";
			break;
		case "magic":
			theReturn = "magic";
			break;
	};
	return theReturn;
}

/*	---- ApplyFeatureAttributes ----
	A function to handle all the common attributes a feature can have
	Input:
		type - the type of thing being processed
			STRING "class", "race", "feat", or "item"
		fObjName - the object name; array only for class/race with features
			if type="feat" or type="item":
				STRING
			if type="class" or type="race":
				ARRAY [STRING: class/race-name, STRING: feature-name]
				// for a race, if the feature-name is also the race-name, the parent race object will be used
		lvlA - old and new level and a true/false to force updating regardless of old-level
			ARRAY [INTEGER: old-level, INTEGER: new-level, BOOLEAN: force-apply]
		choiceA - child object names of overriding choice
			ARRAY [STRING: old-choice, STRING: new-choice, STRING: "only","change"]
			// if 'only-choice' is set to true, it is viewed as an extra-choice and just the child features will be used (e.g. Warlock Invocations)
		forceNonCurrent - the parent object name if the sheet is to use the original list object and not the CurrentXXX (CurrentRace, CurrentClasses)
			STRING
	Examples:
		ApplyFeatureAttributes("feat", "grappler", [0,1,false], false, false);
		ApplyFeatureAttributes("class", ["warlock","pact boon"], [4,4,true], ["pact of the blade","pact of the chain","change"], false); // change from Pact of the Blade to Pact of the Chain
		ApplyFeatureAttributes("class", ["warlock","eldritch invocations"], [0,4,true], ["","devil's sight","only"], false); // add Devil's Sight
		ApplyFeatureAttributes("class", ["warlock","eldritch invocations"], [15,0,true], ["devil's sight","","only"], false); // remove Devil's Sight
*/
function ApplyFeatureAttributes(type, fObjName, lvlA, choiceA, forceNonCurrent) {
	if (!IsNotReset) return; //stop this function on a reset

	// validate input
	if (!lvlA) lvlA = [0,1,false];
	if (!choiceA) choiceA = ["","",false];
	type = type.toLowerCase();
	// base variables
	var FeaChoice = "", FeaOldChoice = "", tipNmExtra = "";
	var aParent = fObjName;
	var lvlH = Math.max(lvlA[0], lvlA[1]), lvlL = Math.min(lvlA[0], lvlA[1]);
	var defaultUnits = What("Unit System") === "imperial";
	var choiceLimFeaTooltip;

	// the function to run an eval string/function
	var runEval = function(evalThing, attributeName, ignoreUnits) {
		if (!evalThing) return;
		try {
			var convertUnits = false;
			if (typeof evalThing == 'string') {
				var convertUnits = !defaultUnits && !ignoreUnits && !(/ConvertTo(Metric|Imperial)/).test(evalThing);
				if (convertUnits) evalThing = ConvertToMetric(evalThing, 0.5);
				eval(evalThing);
			} else if (typeof evalThing == 'function') {
				evalThing(lvlA, choiceA);
			}
		} catch (error) {
			// the error could be caused by the ConvertToMetric function, so try it without to see if that works
			if (convertUnits) {
				runEval(evalThing, attributeName, true);
				return;
			}
			var eText = "The " + attributeName + " from '" + fObjName + (aParent ? "' of the '" + aParent : "") + "' " + type + " produced an error! Please contact the author of the feature to correct this issue:\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
		}
	}

	// the function to run all regular level-independent attributes
	// addIt = true to add things and addIt = false to remove things
	var useAttr = function(uObj, addIt, skipEval, objNm) {
		var uniqueObjNm = objNm == undefined ? fObjName : fObjName + objNm; // has to be unique
		var tipNm = displName;
		var useSpCasting = objNm && (type === "feat" || type === "magic item") ? objNm : aParent;
		if (cnt > 1) {
			tipNm += " (" + cnt + ")";
			if (cntCh > 1) uniqueObjNm += " (" + cntCh + ")";
		}
		if (!uObj.name || displName !== uObj.name) {
			if (type === "feat" || type === "magic item") {
				if (uObj.name) {
					tipNm = uObj.name;
				} else if (objNm && fObj.choices) {
					for (var j = 0; j < fObj.choices.length; j++) {
						if (fObj.choices[j].toLowerCase() == objNm) {
							tipNm = displName + " [" + fObj.choices[j] + "]";
							break;
						}
					}
				}
				if (cntCh > 1) tipNm += " (" + cntCh + ")";
				if (addIt) choiceLimFeaTooltip = tipNm;
			} else if (uObj.name) {
				tipNm = displName + ": " + uObj.name;
			}
		}
		var tipNmF = tipNm + (tipNmExtra ? " " + tipNmExtra : "");

		// we should add the options for weapons/armours/ammos before adding the item itself
		// but we should be removing them only after removing the item itself
		var addListOptions = function() {
			if (uObj.armorOptions) processArmorOptions(addIt, tipNm, uObj.armorOptions, type === "magic item");
			if (uObj.ammoOptions) processAmmoOptions(addIt, tipNm, uObj.ammoOptions, type === "magic item");
			if (uObj.weaponOptions) processWeaponOptions(addIt, tipNm, uObj.weaponOptions, type === "magic item");
		}

		// run eval or removeeval first
		var evalType = addIt ? "eval" : "removeeval";
		if (!skipEval && uObj[evalType]) runEval(uObj[evalType], evalType);

		if (uObj.calcChanges) addEvals(uObj.calcChanges, tipNmF, addIt);
		if (uObj.savetxt) SetProf("savetxt", addIt, uObj.savetxt, tipNmF);
		if (uObj.speed) SetProf("speed", addIt, uObj.speed, tipNmF);
		if (uObj.addMod) processMods(addIt, tipNmF, uObj.addMod);
		if (uObj.saves) processSaves(addIt, tipNmF, uObj.saves);
		if (uObj.toolProfs) processTools(addIt, tipNmF, uObj.toolProfs);
		if (uObj.languageProfs) processLanguages(addIt, tipNmF, uObj.languageProfs);
		if (uObj.vision) processVision(addIt, tipNmF, uObj.vision);
		if (uObj.dmgres) processResistance(addIt, tipNmF, uObj.dmgres);
		if (uObj.action) processActions(addIt, tipNmF, uObj.action, uObj.limfeaname ? uObj.limfeaname : uObj.name);
		if (uObj.extraLimitedFeatures) processExtraLimitedFeatures(addIt, tipNmF, uObj.extraLimitedFeatures);
		if (uObj.extraAC) processExtraAC(addIt, tipNmF, uObj.extraAC, uObj.name);
		if (uObj.toNotesPage) processToNotesPage(addIt, uObj.toNotesPage, type, uObj, fObj, [tipNm, displName, fObjName, aParent]);
		if (uObj.carryingCapacity) SetProf("carryingcapacity", addIt, uObj.carryingCapacity, tipNmF);
		if (uObj.advantages) processAdvantages(addIt, tipNmF, uObj.advantages);

		// --- backwards compatibility --- //
		var abiScoresTxt = uObj.scorestxt ? uObj.scorestxt : uObj.improvements ? uObj.improvements : false;
		if (uObj.scores || abiScoresTxt) processStats(addIt, type, tipNm, uObj.scores, abiScoresTxt, false, uObj.scoresMaximum);
		if (uObj.scoresOverride) processStats(addIt, type, tipNm, uObj.scoresOverride, abiScoresTxt, "overrides");
		if (uObj.scoresMaximum) processStats(addIt, type, tipNm, uObj.scoresMaximum, abiScoresTxt, "maximums");

		// spellcasting
		if (uObj.spellcastingBonus) processSpBonus(addIt, uniqueObjNm, uObj.spellcastingBonus, type, aParent, objNm);
		if (CurrentSpells[useSpCasting] && (uObj.spellFirstColTitle || uObj.spellcastingExtra || uObj.spellChanges)) {
			CurrentUpdates.types.push("spells");
			if (uObj.spellFirstColTitle) CurrentSpells[useSpCasting].firstCol = addIt ? uObj.spellFirstColTitle : false;
			if (uObj.spellcastingExtra) CurrentSpells[useSpCasting].extra = addIt ? uObj.spellcastingExtra : false;
			if (uObj.spellChanges) processSpChanges(addIt, tipNmF, uObj.spellChanges, useSpCasting);
		}

		if (addIt) addListOptions(); // add weapon/armour/ammo option(s)

		// --- backwards compatibility --- //
		// armor and weapon proficiencies
		var weaponProf = uObj.weaponProfs ? uObj.weaponProfs : (/^(class|feat)$/).test(type) && uObj.weapons ? uObj.weapons : uObj.weaponprofs ? uObj.weaponprofs : false;
		if (weaponProf) processWeaponProfs(addIt, tipNmF, weaponProf);
		var armorProf = uObj.armorProfs ? uObj.armorProfs : uObj.armor ? uObj.armor : false;
		if (armorProf) processArmourProfs(addIt, tipNmF, armorProf);

		// --- backwards compatibility --- //
		// armor, shield, and weapon additions
		var aWeaponsAdd = uObj.weaponsAdd ? uObj.weaponsAdd : type == "race" && uObj.weapons ? uObj.weapons : false;
		if (aWeaponsAdd) processAddWeapons(addIt, aWeaponsAdd);
		var anArmorAdd = uObj.armorAdd ? uObj.armorAdd : uObj.addarmor ? uObj.addarmor : false;
		if (anArmorAdd) processAddArmour(addIt, anArmorAdd);
		if (uObj.shieldAdd) processAddShield(addIt, uObj.shieldAdd, uObj.weight);

		// --- backwards compatibility --- //
		// skills additions
		var skillsTxt = uObj.skillstxt ? uObj.skillstxt : uObj.skills && type == "feat" && !isArray(uObj.skills) ? uObj.skills : false;
		if (skillsTxt) skillsTxt = skillsTxt.replace(/^( |\n)*.*: |\;$|\.$/g, '');
		var skills = uObj.skills && (type != "feat" || (type == "feat" && isArray(uObj.skills))) ? uObj.skills : false;
		if (skills || skillsTxt) processSkills(addIt, tipNmF, skills, skillsTxt);

		if (!addIt) addListOptions(); // remove weapon/armour/ammo option(s)
	};

	// set the main variables, determined by type
	switch (GetFeatureType(type)) {
		case "classes":
			type = "class";
			aParent = fObjName[0];
			fObjName = fObjName[1];
			var fObj = forceNonCurrent && ClassList[aParent].features[fObjName] && !choiceA[0] ? ClassList[aParent].features[fObjName] : CurrentClasses[aParent].features[fObjName];
			var displName = fObjName.indexOf("subclassfeature") !== -1 ? CurrentClasses[aParent].fullname : CurrentClasses[aParent].name;

			// --- backwards compatibility --- //
			// also create some variables that (old) eval scripts tend to use
			var oldClassLvl = {}; oldClassLvl[aParent] = lvlA[0];
			var newClassLvl = {}; newClassLvl[aParent] = lvlA[1];
			var ClassLevelUp = {}; ClassLevelUp[aParent] = [lvlA[1] >= lvlA[0], lvlL, lvlH];

			break;
		case "race":
			type = "race";
			aParent = fObjName[0];
			fObjName = fObjName[1];
			var fObj = aParent == fObjName && !CurrentRace.features[fObjName] ?
					(forceNonCurrent ? RaceList[aParent] : CurrentRace) :
				forceNonCurrent && RaceList[aParent].features[fObjName] && !choiceA[0] ?
					RaceList[aParent].features[fObjName] : CurrentRace.features[fObjName];
			var displName = CurrentRace.name;
			break;
		case "background":
			type = "background";
			var fObj = forceNonCurrent && BackgroundList[fObjName] ? BackgroundList[fObjName] : CurrentBackground;
			var displName = fObj.name;
			break;
		case "feats":
			type = "feat";
			var fObj = FeatsList[fObjName];
			var displName = fObj.name;
			tipNmExtra = "(feat)";
			break;
		case "items":
			type = "magic item";
			var fObj = MagicItemsList[fObjName];
			var displName = fObj.name;
			tipNmExtra = "(magic item)";
			break;
	};

	if (!fObj) {
		console.println("The '" + fObjName + (aParent ? "' of the '" + aParent : "") + "' " + type + " could not be found! Please contact the author of the feature to correct this issue.");
		console.show();
		return false;
	};

	if (fObj.minlevel && fObj.minlevel > lvlH) return false; // no reason to continue with this function

	// Are we to do anything with the feature?
	var CheckLVL = lvlA[2] ? true : fObj.minlevel ? fObj.minlevel <= lvlH && fObj.minlevel > lvlL : lvlL == 0;
	// Add (true) or remove (false) the feature's attributes?
	var AddFea = fObj.minlevel ? fObj.minlevel <= lvlA[1] : 0 < lvlA[1];

	// Get the choice, if any choices exist, it was selected in the past, and not entered into this function
	if (!choiceA[1] && !choiceA[2] && fObj.choices) {
		choiceA[1] = GetFeatureChoice(type, aParent, aParent !== fObjName ? fObjName : "", false);
		if (choiceA[1] && !choiceA[0]) choiceA[0] = choiceA[1];
	}

	// --- backwards compatibility --- //
	// First do the eval attribute of the main object, as it might change things for the choice
	var skipMainEval = false;
 	if (!choiceA[2] && CheckLVL && AddFea && fObj.eval && (typeof fObj.eval == "string") && (/Fea(Old)?Choice/).test(fObj.eval)) {
		runEval(fObj.eval, "eval");
		skipMainEval = true;
		// redo the choice array, as the eval might have changed it
		if (FeaOldChoice) choiceA[0] = FeaOldChoice;
		if (FeaChoice) choiceA[1] = FeaChoice;
	}

	// set the choice objects, if any
	var cOldObj = choiceA[0] && fObj[choiceA[0]] ? fObj[choiceA[0]] : false;
	var cNewObj = choiceA[1] && fObj[choiceA[1]] ? fObj[choiceA[1]] : false;
	var cJustChange = (/change|update/).test(choiceA[2]) && cOldObj && cNewObj && choiceA[0] != choiceA[1];
	var cOnly = ((AddFea && cNewObj) || (!AddFea && cOldObj)) && (/only/).test(choiceA[2]);

	// Now if there was a choice, and this is a feat or an item, check for duplicates
	var cnt = 0, cntCh = 0;
	if (type === "feat" || type === "magic item") {
		var checkObj = type === "feat" ? CurrentFeats : CurrentMagicItems;
		for (var i = 0; i < checkObj.known.length; i++) {
			if (checkObj.known[i] == fObjName) {
				cnt++;
				if ((choiceA[0] && checkObj.choices[i] == choiceA[0]) || (choiceA[1] && checkObj.choices[i] == choiceA[1])) cntCh++;
			}
		}
	}

	// get the level-dependent attributes for the current and old levels
	var Fea = GetLevelFeatures(fObj, lvlA[1], cNewObj ? choiceA[1] : false, lvlA[0], cOldObj ? choiceA[0] : cOnly ? choiceA[1] : false, cOnly);
	// add some of the current variables to this object, so it is given in the return
	Fea.CheckLVL = CheckLVL;
	Fea.AddFea = AddFea;
	Fea.Choice = choiceA[1];
	Fea.ChoiceOld = choiceA[0];

	// now do all the level-independent attributes, only if this is mandated by the level change
	if (CheckLVL) {
		// do the main object if not only interested in the choice, but without the eval as we just did that already
		if (!choiceA[2]) useAttr(fObj, AddFea, skipMainEval);
		// if we are are changing the choice or removing the feature, now remove the old choice
		//if (cJustChange || (!AddFea && cOldObj)) {
		if (cOldObj && (cJustChange || !AddFea)) {
			SetFeatureChoice(type, aParent, aParent !== fObjName ? fObjName : "", false, cOnly ? choiceA[0] : "");
			useAttr(cOldObj, false, false, choiceA[0]);
		}
		// if we are changing the choice or adding the feature, now add the new choice
		//if (cJustChange || cOnly || (AddFea && cNewObj)) {
		if (cNewObj && AddFea) {
			SetFeatureChoice(type, aParent, aParent !== fObjName ? fObjName : "", AddFea ? choiceA[1] : "", cOnly ? choiceA[1] : "");
			useAttr(cNewObj, true, false, choiceA[1]);
		}
	}
	// next do the level-dependent attributes, if any of them changed or we are supposed to do them
	if ((CheckLVL || Fea.changed) && (Fea.UseOld || Fea.UseCalcOld || Fea.Use || Fea.UseCalc)) {
		// remove the limited feature entry if it is no longer applicable
		if (lvlA[0] && (!AddFea || ((Fea.UseOld || Fea.UseCalcOld) && (Fea.UseName !== Fea.UseNameOld || (!Fea.Use && !Fea.UseCalc) || (/unlimited|\u221E/i).test(Fea.Use))))) {
			RemoveFeature(Fea.UseNameOld ? Fea.UseNameOld : Fea.UseName, lvlA[1] === 0 ? "" : Fea.UseOld, "", "", "", "", Fea.UseCalcOld);
			Fea.UseOld = 0;
		}
		// add the limited feature entry if it changed or added for the first time
		if (AddFea && (Fea.UseCalc || Fea.Use) && !(/unlimited|\u221E/i).test(Fea.Use)) {
			var tooltipName = choiceLimFeaTooltip ? choiceLimFeaTooltip : displName + (fObj.tooltip ? fObj.tooltip : displName !== fObj.name ? ": " + fObj.name : "");
			AddFeature(Fea.UseName, Fea.Use, Fea.Add ? " (" + Fea.Add + ")" : "", Fea.Recov, tooltipName, Fea.UseOld, Fea.UseCalc);
		}
	}

	// changeeval always at the end and regardless of AddFea or CheckLVL
	if (!cOnly && fObj.changeeval) runEval(fObj.changeeval, 'changeeval');
	if (cOldObj && cOldObj.changeeval) runEval(cOldObj.changeeval, 'changeeval');
	if (cNewObj && cNewObj.changeeval) runEval(cNewObj.changeeval, 'changeeval');

	// if this is a class feature (and not doing an extrachoice), always check if we need to update the dependencies
	if (type == "class" && !cOnly) {
		if (choiceA[1] && fObj.choiceDependencies) processClassFeatureChoiceDependencies(lvlA, aParent, fObjName, choiceA[1]);
		if (fObj.autoSelectExtrachoices) processClassFeatureExtraChoiceDependencies(lvlA, aParent, fObjName, fObj);
	}

	// return the level-dependent attributes so it doesn't have to be queried again
	return Fea;
}

// a function to apply the first-level attributes of a class object
// AddRemove - can be boolean (true = add all feature, false = remove all features)
//		or can be an Array of [oldsubclass, newsubclass]
function ApplyClassBaseAttributes(AddRemove, aClass, primaryClass) {
	// declare some variables
	var fObj = CurrentClasses[aClass];
	var n = primaryClass ? 0 : 1; // for backwards compatibility
	var nAttr = primaryClass ? "primary" : "secondary";

	// a way to see if we should process the attribute or not
	var checkIfIn = function(nObj, testObj, attrA, noN) {
		attrA[1] = attrA[1] ? attrA[1] : "nonExistentAttributeName";
		if (!nObj[attrA[0]] && !nObj[attrA[1]]) {
			// if the first object doesn't have either attribute, just stop
			return [false];
		}
		var useAttr = nObj[attrA[0]] ? attrA[0] : attrA[1];
		var subAttr = noN ? 0 : isArray(nObj[useAttr]) ? n : nAttr;
		if (!noN && !nObj[useAttr][subAttr]) {
			// the first object has an attribute, but not the right sub-attribute, so stop
			return [false];
		} else if (!testObj) {
			// there is no object to test against, so continue with the first object
			return [true, useAttr, subAttr];
		}
		var useAttr2 = testObj[attrA[0]] ? attrA[0] : testObj[attrA[1]] ? attrA[1] : false;
		return !useAttr2 || !testObj[useAttr2][noN ? 0 : isArray(testObj[useAttr2]) ? n : nAttr] ? [false] : [true, useAttr, subAttr];
	}

	// loop through the attributes and apply them
	var processAttributes = function (uObj, addIt, tipNmF, ifInObj) {
		// saves, if primary class
		if (primaryClass && checkIfIn(uObj, ifInObj, ['saves'], true)[0]) processSaves(addIt, tipNmF, uObj.saves);

		// skills
		var doSkills = checkIfIn(uObj, ifInObj, ['skills', 'skillstxt']);
		if (doSkills[0]) {
			var oSkills = false;
			var oSkillsTxt = false;
			if (doSkills[1] === "skillstxt") {
				// no 'skills' attribute, only 'skillstxt'
				oSkillsTxt = uObj.skillstxt[doSkills[2]];
			} else if (doSkills[1] === "skills" && uObj.skillstxt) {
				// both 'skills' and 'skillstxt' attributes
				oSkills = uObj.skills[doSkills[2]];
				oSkillsTxt = isArray(uObj.skillstxt) ? uObj.skillstxt[n] : uObj.skillstxt[nAttr];
			} else if (doSkills[2] == n && !isArray(uObj.skills[n]) && SkillsList.abbreviations.indexOf(uObj.skills[n]) == -1 && SkillsList.names.indexOf(uObj.skills[n]) == -1) {
				// --- backwards compatibility --- //
				// the class has skillstxt as skills attribute (pre v13)
				oSkillsTxt = uObj.skills[n].replace(/^( |\n)*.*: |\;$|\.$/g, '');
			} else {
				// no 'skillstxt' attribute, only 'skills'
				oSkills = uObj.skills[doSkills[2]];
			}
			processSkills(addIt, tipNmF, oSkills, oSkillsTxt);
		}

		// weapon proficiencies ('weapons' attribute for backwards compatibility)
		var doWeapons = checkIfIn(uObj, ifInObj, ['weaponProfs', 'weapons']);
		if (doWeapons[0]) processWeaponProfs(addIt, tipNmF, uObj[doWeapons[1]][doWeapons[2]]);

		// armour proficiencies ('armor' attribute for backwards compatibility)
		var doArmour = checkIfIn(uObj, ifInObj, ['armorProfs', 'armor']);
		if (doArmour[0]) processArmourProfs(addIt, tipNmF, uObj[doArmour[1]][doArmour[2]]);

		// tool proficiencies
		var doTools = checkIfIn(uObj, ifInObj, ['toolProfs']);
		if (doTools[0]) processTools(addIt, tipNmF, uObj.toolProfs[doTools[2]]);

		// spellcasting extra array
		if (CurrentSpells[aClass] && checkIfIn(uObj, ifInObj, ['spellcastingExtra'], true)[0]) {
			CurrentSpells[aClass].extra = !addIt ? "" : uObj.spellcastingExtra;
			CurrentUpdates.types.push("spells");
		}
	}

	if (!isArray(AddRemove)) {
		// just do the AddRemove for the object
		processAttributes(fObj, AddRemove, fObj.name, false);
	} else if (!AddRemove[0] && AddRemove[1]) {
		// adding a subclass while previously none was there
		var parentCl = fObj;
		var newSubCl = ClassSubList[AddRemove[1]];
		// first remove everything that is in class and also in the subclass
		processAttributes(parentCl, false, parentCl.name, newSubCl);
		// then add everything from the subclass
		processAttributes(newSubCl, true, newSubCl.subname);
	} else if (AddRemove[0] && !AddRemove[1]) {
		// removing a subclass, going back to just the class
		var oldSubCl = ClassSubList[AddRemove[0]];
		var parentCl = fObj;
		// first remove everything that is in the subclass
		processAttributes(oldSubCl, false, oldSubCl.subname);
		// then add everything from the class that is also in the subclass
		processAttributes(parentCl, true, parentCl.name, oldSubCl);
	} else if (AddRemove[0] && AddRemove[1]) {
		// changing subclasses
		var parentCl = fObj;
		var oldSubCl = ClassSubList[AddRemove[0]];
		var newSubCl = ClassSubList[AddRemove[1]];
		// first remove everything that is in old subclass
		processAttributes(oldSubCl, false, oldSubCl.subname);
		// then add everything from the class that is also in old subclass
		processAttributes(parentCl, true, parentCl.name, oldSubCl);
		// next remove everything that is in class and also in new subclass
		processAttributes(parentCl, false, parentCl.name, newSubCl);
		// lastly add everything from new subclass
		processAttributes(newSubCl, true, newSubCl.subname);
	}
}

// a function to set the choice for something (choice = objectname) or remove it (choice = false)
// put the objectname in extra for extrachoices (both when adding and when removing)
function SetFeatureChoice(type, objNm, feaNm, choice, extra) {
	choice = choice ? choice.toLowerCase() : false;
	extra = extra ? extra.toLowerCase() : false;
	type = GetFeatureType(type);
	if (type == "items" || type == "feats") return;
	if (!CurrentFeatureChoices[type]) CurrentFeatureChoices[type] = {};
	if (!choice) { // remove the choice
		if (!CurrentFeatureChoices[type][objNm]) return;
		var lookin = feaNm ? CurrentFeatureChoices[type][objNm][feaNm] : CurrentFeatureChoices[type][objNm];
		if (!lookin) return;
		if (extra) {
			if (lookin.extrachoices) {
				lookin.extrachoices.splice(lookin.extrachoices.indexOf(extra), 1);
				if (lookin.extrachoices.length == 0) delete lookin.extrachoices;
			}
		} else {
			if (lookin.choice) delete lookin.choice;
		}
		CurrentFeatureChoices = CleanObject(CurrentFeatureChoices); // remove any remaining empty objects
	} else { // add the choice
		if (!CurrentFeatureChoices[type][objNm]) CurrentFeatureChoices[type][objNm] = {};
		if (feaNm && !CurrentFeatureChoices[type][objNm][feaNm]) CurrentFeatureChoices[type][objNm][feaNm] = {};
		var touse = feaNm ? CurrentFeatureChoices[type][objNm][feaNm] : CurrentFeatureChoices[type][objNm];
		if (extra) {
			if (!touse.extrachoices) touse.extrachoices = [];
			if (touse.extrachoices.indexOf(extra) == -1) touse.extrachoices.push(extra);
		} else {
			touse.choice = choice;
		}
	}
	SetStringifieds("choices");
}

// a function to return the feature choice(s); if extra==true, returns array
function GetFeatureChoice(type, objNm, feaNm, extra) {
	var theReturn = extra ? [] : "";
	type = GetFeatureType(type);
	if (CurrentFeatureChoices[type] && CurrentFeatureChoices[type][objNm] && (!feaNm || CurrentFeatureChoices[type][objNm][feaNm])) {
		var useObj = feaNm ? CurrentFeatureChoices[type][objNm][feaNm] : CurrentFeatureChoices[type][objNm];
		var foundSel = extra ? useObj.extrachoices : useObj.choice;
		if (foundSel) theReturn = foundSel.slice();
	}
	return theReturn;
}

// a function to get a string of class feature choices just like how they use to be prior to v13 with the "Class Feature Remember" field
function classFeaChoiceBackwardsComp() {
	var chc = CurrentFeatureChoices.classes;
	if (!chc) return "";
	var returnStr = "";
	for (var aClass in chc) {
		for (var aFea in chc[aClass]) {
			var fea = chc[aClass][aFea];
			if (fea.choice) returnStr += [aClass, aFea, fea.choice].toString();
		}
	}
	return returnStr;
}

// a function to create the CurrentSpells global variable entry
function CreateCurrentSpellsEntry(type, fObjName, aChoice) {
	type = GetFeatureType(type);
	var fObjP = false;
	var setCSobj = function(oName) {
		if (!CurrentSpells[oName]) {
			CurrentSpells[oName] = {bonus : {}};
			CurrentUpdates.types.push("spells");
		}
		return CurrentSpells[oName];
	};
	switch (type.toLowerCase()) {
		case "classes":
			var fObj = CurrentClasses[fObjName];
			var aClass = classes.known[fObjName].name;
			var aSubClass = classes.known[fObjName].subclass;
			var sObj = setCSobj(fObjName);
			sObj.name = fObj.fullname;
			sObj.shortname = ClassList[aClass].spellcastingFactor ? ClassList[aClass].name : ClassSubList[aSubClass].fullname ? ClassSubList[aSubClass].fullname : ClassSubList[aSubClass].subname;
			sObj.level = classes.known[fObjName].level;
			if (sObj.typeSp == undefined) sObj.typeSp = "";
			sObj.refType = "class";
			break;
		case "race":
			var fObj = CurrentRace;
			var sObj = setCSobj(CurrentRace.known);
			sObj.name = fObj.name;
			sObj.typeSp = "race";
			sObj.level = fObj.level;
			sObj.refType = "race";
			break;
		case "feats":
			var fObj = FeatsList[fObjName];
			if (aChoice && fObj[aChoice]) {
				fObj = FeatsList[fObjName][aChoice];
				fObjP = FeatsList[fObjName];
				fObjName = aChoice;
			}
			var sObj = setCSobj(fObjName);
			sObj.name = fObj.name + " (feat)";
			sObj.typeSp = "feat";
			sObj.refType = "feat";
			break;
		case "items":
			var fObj = MagicItemsList[fObjName];
			if (aChoice && fObj[aChoice]) {
				fObj = MagicItemsList[fObjName][aChoice];
				fObjP = MagicItemsList[fObjName];
				fObjName = aChoice;
			}
			var sObj = setCSobj(fObjName);
			sObj.name = fObj.name + " (item)";
			sObj.typeSp = "item";
			sObj.refType = "item";
			break;
		default:
			return false;
	};
	if (aChoice && (type == "items" || type == "feats") && !fObj.name && fObjP && fObjP.choices) {
		for (var j = 0; j < fObjP.choices.length; j++) {
			if (fObjP.choices[j].toLowerCase() == aChoice) {
				sObj.name = fObjP.name + " [" + fObjP.choices[j] + "]" + " (item)";
				break;
			}
		}
	}
	if (!sObj.ability) sObj.ability = fObj.spellcastingAbility ? fObj.spellcastingAbility : fObj.abilitySave ? fObj.abilitySave : 0;
	if (!sObj.fixedDC && fObj.fixedDC) sObj.fixedDC = Number(fObj.fixedDC);
	if (!sObj.fixedSpAttack && fObj.fixedSpAttack) sObj.fixedSpAttack = Number(fObj.fixedSpAttack);
	if (fObjP) {
		if (!sObj.ability) sObj.ability = fObjP.spellcastingAbility ? fObjP.spellcastingAbility : fObjP.abilitySave ? fObjP.abilitySave : 0;
		if (!sObj.fixedDC && fObjP.fixedDC) sObj.fixedDC = Number(fObjP.fixedDC);
		if (!sObj.fixedSpAttack && fObjP.fixedSpAttack) sObj.fixedSpAttack = Number(fObjP.fixedSpAttack);
	}
	if (!sObj.abilityToUse) sObj.abilityToUse = getSpellcastingAbility(fObjName);
	return sObj;
}

// process a spellcastingBonus feature
function processSpBonus(AddRemove, srcNm, spBon, type, parentName, choice) {
	type = GetFeatureType(type);
	var useSpName = choice && (type === "feats" || type === "items") ? choice : parentName;
	if (!AddRemove && !CurrentSpells[useSpName]) return; // nothing to remove
	// create the spellcasting object if it doesn't yet exist
	var sObj = CurrentSpells[useSpName] ? CurrentSpells[useSpName] : CreateCurrentSpellsEntry(type, parentName, choice);
	// do something with the spellcastingBonus object
	if (!AddRemove) { // removing the entry
		delete sObj.bonus[srcNm];
		// now see if the bonus object is empty and if so, delete the whole entry
		if (!sObj.factor && !sObj.list && ObjLength(sObj.bonus) == 0) delete CurrentSpells[useSpName];
	} else { // adding the entry
		sObj.bonus[srcNm] = spBon;
		// see if this wants to change the spellcasting ability
		var spFeatItemLvl = false;
		var spAbility = !isArray(spBon) ? spBon.spellcastingAbility : false;
		var spFixedDC = !isArray(spBon) ? spBon.fixedDC : false;
		var spFixedSpAttack = !isArray(spBon) ? spBon.fixedSpAttack : false;
		if (isArray(spBon)) {
			for (var i = 0; i < spBon.length; i++) {
				if (!spFeatItemLvl && spBon[i].times && isArray(spBon[i].times)) spFeatItemLvl = true;
				if (spBon[i].spellcastingAbility) spAbility = spBon[i].spellcastingAbility;
				if (spBon[i].fixedDC) spFixedDC = spBon[i].fixedDC;
				if (spBon[i].fixedSpAttack) spFixedSpAttack = spBon[i].fixedSpAttack;
			}
		}
		if (spAbility) sObj.ability = spAbility;
		if (spFixedDC) sObj.fixedDC = spFixedDC;
		if (spFixedSpAttack) sObj.fixedSpAttack = spFixedSpAttack;
		// if concerning a feat or item, set the level only if the spellcastingBonus needs it
		if ((/feat|item/i).test(sObj.typeSp) && spFeatItemLvl) sObj.level = Math.max(Number(What("Character Level")), 1);
	}
	SetStringifieds('spells');
	CurrentUpdates.types.push("spells");
}

// process the spellChanges attribute
function processSpChanges(AddRemove, srcNm, spChng, parentName) {
	var spCast = CurrentSpells[parentName];
	var changeHead = "Changes by " + srcNm;
	if (!spCast || (!AddRemove && !spCast.spellAttrOverride)) return; // nothing to do
	if (AddRemove) { // adding
		if (!spCast.spellAttrOverride) spCast.spellAttrOverride = {};
		for (var aSpell in spChng) {
			if (!spCast.spellAttrOverride[aSpell]) spCast.spellAttrOverride[aSpell] = { changesObj : {} };
			var spObj = spCast.spellAttrOverride[aSpell];
			if (spChng[aSpell].changes) spObj.changesObj[changeHead] = "\n - " + spChng[aSpell].changes;
			for (var key in spChng[aSpell]) {
				if (key == "changes") continue;
				spObj[key] = spChng[aSpell][key];
			}
		}
	} else { // removing
		for (var aSpell in spChng) {
			var spObj = spCast.spellAttrOverride[aSpell];
			if (!spObj || !spObj.changesObj[changeHead]) continue;
			for (var key in spChng[aSpell]) {
				if (key == "changes") continue;
				delete spObj[key];
			}
			delete spObj.changesObj[changeHead];
			// now maybe delete this spellAttrOverride entry if its changesObj is empty
			if (!ObjLength(spObj.changesObj)) delete spCast.spellAttrOverride[aSpell];
		}
		// now maybe delete the whole spellAttrOverride if it is empty
		if (!ObjLength(spCast.spellAttrOverride)) delete spCast.spellAttrOverride;
	}
}

// set the armour (if more AC than current armour) or remove the armour
function processAddArmour(AddRemove, armour) {
	if (!armour || typeof armour != "string") return;
	if (!AddRemove) { // remove
		RemoveArmor(armour);
	} else { // add
		if (!ParseArmor(armour)) return;
		var remCurArm = What("AC Armor Description");
		var remAC = Number(What("AC"));
		Value("AC Armor Description", armour);
		if (remCurArm && remAC) { // there was a previous armor, so check if this new armor is better or not
			// calculate all the field values, or the AC field will not be updated
			var isStoppedCalc = calcStartSet != false;
			if (isStoppedCalc) calcCont(true);
			if (remAC > Number(What("AC"))) {
				Value("AC Armor Description", remCurArm);
			} else if (isStoppedCalc) {
				calcStop();
			}
		}
	}
}

// set the shield (if more AC than current shield) or remove the shield
function processAddShield(AddRemove, shield, weight) {
	if (!shield) return;
	if (isArray(shield)) {
		if (!shield.length) return;
		if ((shield[2] == undefined || isNaN(shield[2])) && weight !== undefined && !isNaN(weight)) shield[2] = weight;
	} else {
		var shield = [shield];
		if (weight !== undefined && !isNaN(weight)) shield[2] = weight;
	}

	// grab current fields
	var shieldFld = What("AC Shield Bonus Description");
	if (AddRemove) { // add
		// see what the new AC will be
		var newACdefined = shield[1] !== undefined && !isNaN(shield[1]) ? shield[1] : undefined;
		if (newACdefined !== undefined) {
			var newAC = newACdefined;
		} else {
			var magicRegex = /(?:^|\s|\(|\[)([\+-]\d+)/;
			var newAC = 2 + (magicRegex.test(shield[0]) ? parseFloat(shield[0].match(magicRegex)[1]) : 0);
		}
		if (newAC < What("AC Shield Bonus")) return; // do not continue if new AC would not be equal or more

		// set the value of the fields
		Value("AC Shield Bonus Description", shield[0]);
		if (newACdefined !== undefined) Value("AC Shield Bonus", shield[1]);
		if (shield[2] !== undefined && !isNaN(shield[2])) Value("AC Shield Weight", shield[2]);

	} else if (CurrentShield.field.indexOf(shield[0].toLowerCase()) !== -1) { // remove
		Value("AC Shield Bonus Description", "");
	}
}

// set attacks or remove the attacks
function processAddWeapons(AddRemove, weapons) {
	if (!weapons) return;
	if (!isArray(weapons)) weapons = [weapons];
	for (var w = 0; w < weapons.length; w++) {
		tDoc[(AddRemove ? "Add" : "Remove") + "Weapon"](weapons[w]);
	}
}

// set or remove armour options
function processArmorOptions(AddRemove, srcNm, itemArr, magical) {
	if (!itemArr) return;
	if (!isArray(itemArr)) itemArr = [itemArr];

	// if adding things but the variable doesn't exist
	if (AddRemove && !CurrentVars.extraArmour) CurrentVars.extraArmour = {};

	srcNm = srcNm.toLowerCase();
	for (var i = 0; i < itemArr.length; i++) {
		var newName = srcNm + "-" + itemArr[i].name.toLowerCase();
		if (AddRemove) {
			itemArr[i].list = "startlist";
			if (magical) itemArr[i].isMagicArmor = true;
			CurrentVars.extraArmour[newName] = itemArr[i];
			ArmourList[newName] = itemArr[i];
		} else {
			// remove the entries if they exist
			if (CurrentVars.extraArmour[newName]) delete CurrentVars.extraArmour[newName];
			if (ArmourList[newName]) delete ArmourList[newName];
		}
	}

	// if removing things and the variable is now empty
	if (!AddRemove && !ObjLength(CurrentVars.extraArmour)) delete CurrentVars.extraArmour;
	UpdateDropdown("armour"); // update the armour dropdown
	SetStringifieds("vars"); // Save the new settings to a field
}

// set or remove attack options
function processWeaponOptions(AddRemove, srcNm, itemArr, magical) {
	if (!itemArr) return;
	if (!isArray(itemArr)) itemArr = [itemArr];

	// if adding things but the variable doesn't exist
	if (AddRemove && !CurrentVars.extraWeapons) CurrentVars.extraWeapons = {};

	srcNm = srcNm.toLowerCase();
	for (var i = 0; i < itemArr.length; i++) {
		var newName = srcNm + "-" + itemArr[i].name.toLowerCase();
		if (AddRemove) {
			itemArr[i].list = "startlist";
			if (magical) itemArr[i].isMagicWeapon = true;
			CurrentVars.extraWeapons[newName] = itemArr[i];
			WeaponsList[newName] = itemArr[i];
		} else {
			// remove the entries if they exist
			if (CurrentVars.extraWeapons[newName]) delete CurrentVars.extraWeapons[newName];
			if (WeaponsList[newName]) delete WeaponsList[newName];
		}
	}

	// if removing things and the variable is now empty
	if (!AddRemove && !ObjLength(CurrentVars.extraWeapons)) delete CurrentVars.extraWeapons;
	UpdateDropdown("weapons"); // update the weapons dropdown
	SetStringifieds("vars"); // Save the new settings to a field
}

// set or remove ammo options
function processAmmoOptions(AddRemove, srcNm, itemArr, magical) {
	if (!itemArr) return;
	if (!isArray(itemArr)) itemArr = [itemArr];

	// if adding things but the variable doesn't exist
	if (AddRemove && !CurrentVars.extraAmmo) CurrentVars.extraAmmo = {};

	srcNm = srcNm.toLowerCase();
	for (var i = 0; i < itemArr.length; i++) {
		var newName = srcNm + "-" + itemArr[i].name.toLowerCase();
		if (AddRemove) {
			itemArr[i].list = "startlist";
			if (magical) itemArr[i].isMagicAmmo = true;
			CurrentVars.extraAmmo[newName] = itemArr[i];
			AmmoList[newName] = itemArr[i];
		} else {
			// remove the entries if they exist
			if (CurrentVars.extraAmmo[newName]) delete CurrentVars.extraAmmo[newName];
			if (AmmoList[newName]) delete AmmoList[newName];
		}
	}

	// if removing things and the variable is now empty
	if (!AddRemove && !ObjLength(CurrentVars.extraAmmo)) delete CurrentVars.extraAmmo;
	UpdateDropdown("ammo"); // update the ammunition dropdown
	SetStringifieds("vars"); // Save the new settings to a field
}

// set or remove extra limited feature options
function processExtraLimitedFeatures(AddRemove, srcNm, objArr) {
	if (!objArr) return;
	if (!isArray(objArr)) objArr = [objArr];

	for (var i = 0; i < objArr.length; i++) {
		var aObj = objArr[i];
		if (AddRemove) {
			AddFeature(aObj.name, aObj.usages ? aObj.usages : 0, aObj.additional ? " (" + aObj.additional + ")" : "", aObj.recovery ? aObj.recovery : "", srcNm, false, aObj.usagescalc);
		} else {
			RemoveFeature(aObj.name, aObj.usages ? aObj.usages : 0, "", "", "", "", aObj.usagescalc);
		}
	}
}

// add/remove a class feature text, replace the first line of it, or insert it after another
// the string is assumed to start with "\u25C6\uFEFF" (ParseClassFeature | ParseClassFeatureExtra)
// for possible values of 'act', see the switch statement
// each ...TxtA is [firstline, completetext]
function applyClassFeatureText(act, fldA, oldTxtA, newTxtA, prevTxtA) {
	if (!oldTxtA || !oldTxtA[0]) return; // no oldTxt, so we can't do anything

	// make some regex objects
	var oldFrstLnEsc = oldTxtA[0].replace(/^(\r|\n)*/, '').RegEscape();
	var oldRxHead = RegExp(oldFrstLnEsc + ".*", "i");
	var oldRx = RegExp("\\r?" + oldFrstLnEsc + "(.|\\r  )*", "i"); // everything until the first line that doesn't start with two spaces (e.g. an empty line or a new bullet point)

	// find the field we are supposed to update
	var fld = fldA[0];
	if (fldA.length > 1) {
		for (var i = 0; i < fldA.length; i++) {
			if (oldRx.test(What(fldA[i]))) {
				fld = fldA[i];
				break;
			}
		}
	}
	var fldTxt = What(fld);
	if (!fldTxt) return; // empty or non-existing field, so just stop now

	// apply the change
	switch (act) {
		case "first" : // update just the first line (usages, recovery, or additional changed)
			var changeTxt = fldTxt.replace(oldRxHead, newTxtA[0]);
			break;
		case "replace" : // replace the oldTxt with the newTxt
			var changeTxt = fldTxt.replace(oldRx, newTxtA[1]);
			break;
		case "insert" : // add the newTxt after the prevTxt
			if (!prevTxtA || !prevTxtA[0]) return; // no prevTxt, so we can't do anything
			var prevFrstLnEsc = prevTxtA[0].replace(/^(\r|\n)*/, '').RegEscape();
			var prevRx = RegExp("\\r?" + prevFrstLnEsc + "(.|\\r  )*", "i");
			var prevTxtFound = fldTxt.match(prevRx);
			var changeTxt = prevTxtFound ? fldTxt.replace(prevTxtFound[0], prevTxtFound[0] + newTxtA[1]) : fldTxt;
			break;
		case "remove" : // remove the oldTxt
			var changeTxt = fldTxt.replace(oldRx, '').replace(/^\r+/, '');
			break;
		default :
			return;
	}
	if (changeTxt != fldTxt) {
		Value(fld, changeTxt);
	} else if (act !== "insert") {
		// nothing changed, so just insert the whole feature, using this same function
		applyClassFeatureText("insert", fldA, oldTxtA, newTxtA, prevTxtA);
	}
}

// a function to recalculate the weapon entries after a change in weapon proficiencies or CurrentEvals
function UpdateSheetWeapons() {
	// some atkAdd eval might be level-dependent, so force updating the weapons when changing level and such an eval is present
	var isLvlDepAtkAdd = false;
	// iterate through all the atkAdd evals to see if any are level-dependent, but only when changing level
	if (CurrentUpdates.types.indexOf("xp") !== -1 && CurrentEvals.atkAdd) {
		for (addEval in CurrentEvals.atkAdd) {
			var evalThing = CurrentEvals.atkAdd[addEval];
			if (typeof evalThing == 'function') evalThing = evalThing.toSource();
			if ((/\.level/).test(evalThing)) {
				isLvlDepAtkAdd = true;
				break;
			}
		}
	}

	var CUflat = CurrentUpdates.types.toString();
	if (!isLvlDepAtkAdd && (!CurrentUpdates.types.length || !IsNotReset || !IsNotImport || CUflat.indexOf("attacks") == -1)) return;
	ReCalcWeapons(CurrentUpdates.types.indexOf("attacksprofs") !== -1, isLvlDepAtkAdd || CurrentUpdates.types.indexOf("attacksforce") !== -1);
}

// >>>> Changes Dialog functions <<<< \\

// a function to do all the default things after a change in level, class, race, feat, magic item, or companion
// this function is called whenever the calculations are activated again
function UpdateSheetDisplay() {
	if (!CurrentUpdates.types.length || !IsNotReset || !IsNotImport) {
		CurrentUpdates = {types : []}; // reset the CurrentUpdates variable
		return;
	}

	if (!ChangesDialogSkip) {
		var cDialogFld = What("ChangesDialogSkip.Stringified");
		ChangesDialogSkip = cDialogFld ? eval(cDialogFld) : {
			chXP : false, // experience points
			chAS : false, // ability scores
			chHP : false, // hit points
			chSP : false, // spells
			chSK : false, // skills
			chAT : false, // attack calculations
			chNO : false // notes additions
		};
		if (!cDialogFld) Value("ChangesDialogSkip.Stringified", ChangesDialogSkip.toSource());
	}

	// Show the progress dialog
	var thermoTxt = thermoM("Finalizing changes...", false);
	thermoM(2/5); // Increment the progress bar

	// initialize some variables
	var dialogParts = [];
	var autoHP;
	var CUflat = CurrentUpdates.types.toString();

	// create the dialog
	var titleTxt = "Changes Requiring Your Attention";
	var explTxt = "The things you just changed has effected the things listed below.\nNote that this dialog is just a reminder and you can find all the things listed below in their respective sections of the sheet and/or its functions.\nYou can always use the [ESC] key to close this dialog.";
	var checkboxTxt = "Don't alert me about these changes (unless there is another change I do want to be alerted about).";
	var Changes_Dialog = {
		// when starting the dialog
		initialize : function (dialog) {
			var thermoTxt = thermoM("Finalizing changes...", false);
			thermoM(2/5); // Increment the progress bar
			var toLoad = { "img1" : allIcons.automanual };
			for (var p = 0; p < dialogParts.length; p++) {
				var skType = dialogParts[p].skipType;
				toLoad[skType] = ChangesDialogSkip[skType];
			}
			dialog.load(toLoad);
		},
		// when closing the dialog, one way or another
		destroy : function (dialog) {
			Value("ChangesDialogSkip.Stringified", ChangesDialogSkip.toSource());
		},
		description : {
			name : titleTxt,
			first_tab : "CLOS",
			elements : [{
				type : "view",
				elements : [{
					type : "view", // the top row
					alignment : "align_fill",
					align_children : "align_row",
					elements : [{
						type : "image",
						item_id : "img1",
						alignment : "align_bottom",
						width : 20,
						height : 20
					}, {
						type : "static_text",
						item_id : "Hea0",
						alignment : "align_fill",
						font : "title",
						bold : true,
						height : 23,
						width : 250,
						name : titleTxt
					}]
				}, {
					type : "static_text", // explanatory text
					item_id : "txt0",
					alignment : "align_fill",
					font : "palette",
					name : explTxt,
					wrap_name : true,
					width : 500
				}, {
					type : "view",
					item_id : "sect",
					align_children : "align_left",
					elements : []
				}, {
					type : "view",
					alignment : "align_fill",
					align_children : "align_center",
					elements : [{
						type : "ok",
						item_id : "CLOS",
						alignment : "align_center",
						ok_name : "Close"
					}, {
						type : "ok_cancel",
						alignment : "align_offscreen",
						item_id : "CNCL",
						ok_name : "Close",
						cancel_name : "Close",
						height : 0
					}]
				}]
			}]
		}
	};

	// if the level changed but the xp (or similar system) is not correct, update the xp to the needed value for the level
	if (CurrentUpdates.types.indexOf("xp") !== -1) {
		var curLvl = Number(What("Character Level"));
		var curExp = What("Total Experience");
		if (!curExp) curExp = 0;
		var LvlXp = getCurrentLevelByXP(curLvl, curExp);
		// if the amount of xp is less than needed for the level, change the xp. But not if the level is 0
		Changes_Dialog.oldXPval = curExp;
		if (curLvl > LvlXp[0]) {
			Value("Total Experience", LvlXp[1]);
			// make the xp dialog insert
			dialogParts.push({
				skipType : "chXP",
				type : "cluster",
				align_children : "align_left",
				alignment : "align_fill",
				width : 500,
				font : "heading",
				name : "Experience Points",
				elements : [{
					type : "view",
					align_children : "align_row",
					alignment : "align_fill",
					elements : [{
						type : "static_text",
						width : 375,
						alignment : "align_fill",
						font : "dialog",
						wrap_name : true,
						name : "The current amount of experience points (" + toUni(curExp) + ") are not enough to attain the current level (" + toUni(curLvl) + "), as that requires " + toUni(LvlXp[1]) + " experience points.\nThe total XP has now been updated to " + toUni(LvlXp[1]) + "."
					}, {
						type : "button",
						item_id : "bXPo",
						name : "Change XP back to " + curExp
					}]
				}, {
					type : "check_box",
					item_id : "chXP",
					alignment : "align_fill",
					font : "palette",
					name : checkboxTxt
				}]
			});
			Changes_Dialog.bXPo = function (dialog) {
				Value("Total Experience", this.oldXPval);
			};
		}
	};

	// if something affecting the stats changed
	// possible options for stats: statsoverride, statsclasses, statsrace, statsfeats, statsitems
	if (CUflat.indexOf("stats") !== -1 || CurrentUpdates.types.indexOf("testasi") !== -1) {
		Changes_Dialog.oldStats = Who("Str");
		if (AbilityScores_Button(true)) { // sets tooltip for stats and returns true if anything changed
			var strStats = "";
			// ability score improvements
			if (CurrentUpdates.types.indexOf("testasi") !== -1) {
				var newASI = 0;
				for (var nClass in classes.known) {
					var clLvl = Math.min(CurrentClasses[nClass].improvements.length, classes.known[nClass].level);
					newASI += clLvl ? CurrentClasses[nClass].improvements[clLvl - 1] : 0;
				}
				var oldASI = 0;
				for (var oClass in classes.old) {
					var useObj = CurrentClasses[oClass] ? CurrentClasses[oClass] : ClassList[oClass];
					clLvl = Math.min(useObj.improvements.length, classes.old[oClass].classlevel);
					oldASI += clLvl ? useObj.improvements[clLvl - 1] : 0;
				}
				if (newASI !== oldASI) {
					var totalASI = newASI - oldASI;
					var ASItxt = " Ability Score Improvement" + (Math.abs(totalASI) != 1 ? "s" : "");
					strStats += "\nThe change in level has granted " + toUni(totalASI) + " new" + ASItxt + ".\nThis bring the new total to " + toUni(newASI) + ".";
				}
			}
			// other stat changes
			if (CUflat.indexOf("stats") !== -1) {
				var statChanges = [];
				if (CurrentUpdates.types.indexOf("statsrace") !== -1) statChanges.push(toUni("Race"));
				if (CurrentUpdates.types.indexOf("statsclasses") !== -1) statChanges.push(toUni("Class Feature(s)"));
				if (CurrentUpdates.types.indexOf("statsfeats") !== -1) statChanges.push(toUni("Feat(s)"));
				if (CurrentUpdates.types.indexOf("statsoverride") !== -1 || CurrentUpdates.types.indexOf("statsitems") !== -1 || CurrentUpdates.types.indexOf("statsmagic") !== -1) statChanges.push(toUni("Magic Item(s)"));
				strStats += formatLineList("\nThe following changed one or more ability score:", statChanges);
			}
			if (strStats) {
				// make the Stats dialog insert
				dialogParts.push({
					skipType : "chAS",
					type : "cluster",
					align_children : "align_left",
					alignment : "align_fill",
					width : 500,
					font : "heading",
					name : "Ability Scores",
					elements : [{
						type : "view",
						align_children : "align_row",
						alignment : "align_fill",
						elements : [{
							type : "static_text",
							width : 375,
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							name : "A change to ability scores has been detected. This is not applied automatically, but you can use the Ability Scores Dialog for that." + strStats
						}, {
							type : "view",
							align_children : "align_right",
							elements : [{
								type : "button",
								item_id : "bSTc",
								name : "See Changes"
							}, {
								type : "button",
								item_id : "bSTo",
								name : "Open Ability Scores Dialog"
							}]
						}]
					}, {
						type : "check_box",
						item_id : "chAS",
						alignment : "align_fill",
						font : "palette",
						name : checkboxTxt
					}]
				});
				Changes_Dialog.bSTc = function (dialog) {
					ShowCompareDialog(
						["Ability Score changes", "The text above is part of the 'Ability Scores Dialog' and the tooltip (mouseover text) of the ability score fields.\nYou can always open the 'Ability Scores Dialog' using the 'Scores' button in the 'JavaScript Window'-toolbar or the 'Ability Scores' bookmark."],
						[
							["Old ability score modifiers", this.oldStats],
							["New ability score modifiers", Who("Str")]
						],
						true
					);
				};
				Changes_Dialog.bSTo = function (dialog) {
					AbilityScores_Button();
					// this dialog might have just updated the stats, prompting for some other updates
					if (CurrentUpdates.types.indexOf("attacks") !== -1) ReCalcWeapons();
					if (CurrentUpdates.types.indexOf("hp") !== -1) SetHPTooltip(false, false);
				};
			}
		}
	}

	// if the HP changed (of the main character)
	if (CurrentUpdates.types.indexOf("hp") !== -1) {
		// save the current HP
		var settingsHP = How("HP Max").split(",");
		autoHP = settingsHP[3] && (/average|fixed|max/).test(settingsHP[3]);
		var oldHPmax = What("HP Max");
		Changes_Dialog.oldHPtt = Who("HP Max");
		// update the HP of the main character
		SetHPTooltip(false, false);
		// make the HP dialog insert
		var strHP = "The hit die and/or hit point maximum of the character have changed.";
		if (autoHP) {
			strHP += "\nAs HP has been set to update automatically, the Maximum Hit Points have been changed from " + toUni(oldHPmax) + " to " + toUni(What("HP Max")) + ".";
		}
		dialogParts.push({
			skipType : "chHP",
			type : "cluster",
			align_children : "align_left",
			alignment : "align_fill",
			width : 500,
			font : "heading",
			name : "Hit Points",
			elements : [{
				type : "view",
				align_children : "align_row",
				alignment : "align_fill",
				elements : [{
					type : "static_text",
					width : 400,
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					name : strHP
				}, {
					type : "button",
					item_id : "bHPc",
					name : "See Changes"
				}]
			}, {
				type : "check_box",
				item_id : "chHP",
				alignment : "align_fill",
				font : "palette",
				name : checkboxTxt
			}]
		});
		Changes_Dialog.bHPc = function (dialog) {
			ShowCompareDialog(
				["Hit Points changes", "You can always find the current Hit Point calculation in the tooltip (mouseover text) of the Max HP field."],
				[["Old HP calculation", this.oldHPtt], ["New HP calculation", Who("HP Max")]]
			);
		};
	}

	// if the spellcasting changed
	var CurrentSpellsLen = ObjLength(CurrentSpells);
	var hasSpellSheets = isTemplVis("SSfront", false) || isTemplVis("SSmore", false);
	var changedSpellEval = CurrentUpdates.types.indexOf("spellstr") !== -1;
	var changedSpellcasting = CurrentUpdates.types.indexOf("spells") !== -1 || (CurrentSpellsLen && changedSpellEval) || (!CurrentSpellsLen && CurrentUpdates.types.indexOf("testclassspellcasting") !== -1);
	// if there is no spellcastingBonus added, but change in spellcasting level was detected, see if a spellcasting class changed level and would require a new spell sheet
	if (!changedSpellcasting && CurrentUpdates.types.indexOf("testclassspellcasting") !== -1) {
		for (var theCaster in CurrentSpells) {
			var aCast = CurrentSpells[theCaster];
			// skip this entry if this is not a class, or not a class with spells known, or there is already a spell sheet made of all cantrips & spells
			if (!classes.known[theCaster] || !aCast.known || (aCast.typeList && aCast.typeList == 4)) continue;
			var newClass = !classes.old[theCaster];
			var lvlOld = newClass ? 0 : classes.old[theCaster].classlevel - 1;
			var lvlNew = classes.known[theCaster].level - 1;
			// see if there is a cantrips array in the known section and the amount of known
			if (isArray(aCast.known.cantrips)) {
				var oldCaLvl = Math.min(aCast.known.cantrips.length - 1, lvlOld);
				var newCaLvl = Math.min(aCast.known.cantrips.length - 1, lvlNew);
				changedSpellcasting = (newClass && aCast.known.cantrips[newCaLvl]) || (aCast.known.cantrips[oldCaLvl] !== aCast.known.cantrips[newCaLvl]);
			}
			// stop if there is already a reason to update
			if (changedSpellcasting) break;
			// see if there is a spells array in the known section and the amount of known
			if (aCast.known.spells && isArray(aCast.known.spells)) {
				var oldSpLvl = Math.min(aCast.known.spells.length - 1, lvlOld);
				var newSpLvl = Math.min(aCast.known.spells.length - 1, lvlNew);
				changedSpellcasting = (newClass && aCast.known.spells[newSpLvl]) || (aCast.known.spells[oldSpLvl] !== aCast.known.spells[newSpLvl]);
			} else if (aCast.known.spells && aCast.typeSp && (aCast.typeSp === "book" || (aCast.typeSp === "list" && aCast.typeList !== 2))) { // if this is a list/book, test if the caster just got access to a new spell slot level
				var theTable = aCast.spellsTable ? aCast.spellsTable : aCast.factor && aCast.factor[0] ? tDoc[aCast.factor[1] + "SpellTable"] : false;
				if (theTable) {
					var oldTableLvl = Math.min(theTable.length - 1, lvlOld + 1);
					var newTableLvl = Math.min(theTable.length - 1, lvlNew + 1);
					changedSpellcasting = (newClass && aCast.known.spells[newSpLvl]) || (theTable[oldTableLvl].trailingIndexOf(0) !== theTable[newTableLvl].trailingIndexOf(0));
				};
			}
			// stop if there is already a reason to update
			if (changedSpellcasting) break;
		}
	};
	if (changedSpellcasting && ((!CurrentSpellsLen && hasSpellSheets) || CurrentSpellsLen)) {
		// see if not all spellcasting stuff has been removed
		var strSpells = !CurrentSpellsLen ?
			"All spellcasting abilities have been removed from the character.\nYou might want to remove any Spell Sheets as well." :
			"A change to spellcasting" +
			(changedSpellEval ? " and how spells are displayed or spell lists are generated" : "") +
			" has been detected that require the Spell Sheets to be updated.\nTIP: if you plan to make more changes affecting spellcasting, do those first before generating Spell Sheets, because creating them takes very long.";
		var buttonSpells = !CurrentSpellsLen ? "Remove Spell Sheets" : (hasSpellSheets ? "Update" : "Create") + " Spell Sheets";
		var buttonSpellStr = changedSpellEval ? "Spells \u0026\u0026 -List Changes" : "Affecting Spells \u0026\u0026 -Lists";
		// make the Spells dialog insert
		dialogParts.push({
			skipType : "chSP",
			type : "cluster",
			align_children : "align_left",
			alignment : "align_fill",
			width : 500,
			font : "heading",
			name : "Spellcasting",
			elements : [{
				type : "view",
				align_children : "align_row",
				alignment : "align_fill",
				elements : [{
					type : "static_text",
					width : 375,
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					name : strSpells
				}, {
					type : "view",
					align_children : "align_right",
					elements : (changedSpellEval || CurrentEvals.spellStr ? [{
						type : "button",
						item_id : "bSPs",
						name : buttonSpellStr
					}] : []).concat([{
						type : "button",
						item_id : "bSPo",
						name : buttonSpells
					}])
				}]
			}, {
				type : "check_box",
				item_id : "chSP",
				alignment : "align_fill",
				font : "palette",
				name : checkboxTxt
			}]
		});
		Changes_Dialog.curSpLen = CurrentSpellsLen;
		Changes_Dialog.bSPo = function (dialog) {
			if (this.curSpLen) {
				if (GenerateSpellSheet(undefined, true)) {
					app.alert({
						cTitle : "New spell sheets have been generated",
						nIcon : 3,
						cMsg : "The new spell sheets have been generated. You will be taken to them as soon as you close the 'Changes' dialog."
					})
				};
			} else {
				RemoveSpellSheets();
			}
		};
		if (changedSpellEval || CurrentEvals.spellStr) {
			Changes_Dialog.oldSpellStr = CurrentUpdates.spellStrOld ? CurrentUpdates.spellStrOld : "";
			Changes_Dialog.spellStrChange = changedSpellEval;
			Changes_Dialog.bSPs = function (dialog) {
				ShowCompareDialog(
					["Things affecting spells, spell properties and/or spell list generation", "Some features might affect how spells are displayed on the spell sheet, by adding more range for example.\n\nOthers might affect how a spell list for a spellcasting class or feature is generated, by adding extra spells to choose from for example."],
					this.spellStrChange ?
					[
						["Old spell list/attribute manipulations", this.oldSpellStr],
						["New spell list/attribute manipulations", StringEvals("spellStr")]
					] : [
						["Spell list/attribute manipulations", StringEvals("spellStr")]
					],
					true
				);
			};
		}
	}

	// if skill proficiencies changed
	if (CurrentUpdates.types.indexOf("skills") !== -1) {
		// get the previous skill string
		Changes_Dialog.oldSkillStr = CurrentUpdates.skillStrOld ? CurrentUpdates.skillStrOld : "";
		// make the skills dialog insert
		dialogParts.push({
			skipType : "chSK",
			type : "cluster",
			align_children : "align_left",
			alignment : "align_fill",
			width : 500,
			font : "heading",
			name : "Skill Proficiencies",
			elements : [{
				type : "view",
				align_children : "align_row",
				alignment : "align_fill",
				elements : [{
					type : "static_text",
					width : 400,
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					name : "Proficiency with one or more skill has been added or removed. If this change offers you a choice, nothing on the sheet will have been altered and you will have to assign/remove the proficiency manually."
				}, {
					type : "button",
					item_id : "bSKc",
					name : "See Changes"
				}]
			}, {
				type : "check_box",
				item_id : "chSK",
				alignment : "align_fill",
				font : "palette",
				name : checkboxTxt
			}]
		});
		Changes_Dialog.bSKc = function (dialog) {
			ShowCompareDialog(
				["Skill proficiencies", "You can always find the current skill proficiencies in the tooltip (mouseover text) of the skill fields."],
				[
					["Old skill proficiencies", this.oldSkillStr],
					["New skill proficiencies", Who("Acr Prof").replace(/.+(\r|\n)*/, '')]
				],
				true
			);
		};
	}

	// if the attack calculations / populating changed
	if (CurrentUpdates.types.indexOf("atkstr") !== -1) {
		// get the previous atkCalc/stkAdd string
		Changes_Dialog.oldAtkStr = CurrentUpdates.atkStrOld ? CurrentUpdates.atkStrOld : "";
		// make the attack dialog insert
		dialogParts.push({
			skipType : "chAT",
			type : "cluster",
			align_children : "align_left",
			alignment : "align_fill",
			width : 500,
			font : "heading",
			name : "Attack Calculations (possibly including spellcasting DC)",
			elements : [{
				type : "view",
				align_children : "align_row",
				alignment : "align_fill",
				elements : [{
					type : "static_text",
					width : 400,
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					name : "A change was detected in the things that affect how (spell) attacks and/or how spell save DCs are calculated."
				}, {
					type : "button",
					item_id : "bAtk",
					name : "See Changes"
				}]
			}, {
				type : "check_box",
				item_id : "chAT",
				alignment : "align_fill",
				font : "palette",
				name : checkboxTxt
			}]
		});
		Changes_Dialog.bAtk = function (dialog) {
			ShowCompareDialog(
				["Things affecting attack/DC calculations", "You can always see what things are affecting the attack calculations with the small buttons in front of each attack entry on the first page.", "Be aware that things affecting spell attacks and spell save DCs are applied in the attack section and on the spell sheet pages, but not to the 'Ability Save DC' on the first page."],
				[
					["Old attack/DC manipulations", this.oldAtkStr],
					["New attack/DC manipulations", StringEvals("atkStr")]
				],
				true
			);
		};
	}

	// if an addition was done to the 3rd page Notes section or to a Notes page
	if (CurrentUpdates.notesChanges) {
		// get the previous atkCalc/stkAdd string
		Changes_Dialog.notesChange = "\u2022 " + CurrentUpdates.notesChanges.join("\n\u2022 ");
		// make the attack dialog insert
		dialogParts.push({
			skipType : "chNO",
			type : "cluster",
			align_children : "align_left",
			alignment : "align_fill",
			width : 500,
			font : "heading",
			name : "Notes Addition",
			elements : [{
				type : "view",
				align_children : "align_row",
				alignment : "align_fill",
				elements : [{
					type : "static_text",
					width : 400,
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					name : "A text was added to the Notes section on the 3rd page and/or a separate Notes page because it didn't fit into the space originally meant for it."
				}, {
					type : "button",
					item_id : "bNot",
					name : "See Addition(s)"
				}]
			}, {
				type : "check_box",
				item_id : "chNO",
				alignment : "align_fill",
				font : "palette",
				name : checkboxTxt
			}]
		});
		Changes_Dialog.bNot = function (dialog) {
			ShowCompareDialog(
				["Things added to the Notes section/page", "You can always edit the text in the Notes section or Notes pages, you don't have to keep it as set by the automation.", 'Class features added to the third page can always be moved to the Class Features section on the second page, it will not interfere with the sheet\'s automation. You will still be able to remove them using the "Choose Feature" button.'],
				[
					["", this.notesChange]
				],
				true
			);
		};
	}

	// check if any of the parts of the array should be shown
	var cancelDia = dialogParts.every(function (part) {
		// set the functions for the checkboxes
		var skType = part.skipType;
		Changes_Dialog[skType] = function (dialog, fldNm = skType) {
			ChangesDialogSkip[fldNm] = dialog.store()[fldNm] ? true : false;
		};
		// see if this part is set to be skipped or not
		return ChangesDialogSkip[skType] || (skType == "chHP" && autoHP);
	});
	// if there is nothing to show, stop the function now
	if (!cancelDia) {
		// reset the CurrentUpdates variable
		CurrentUpdates = {types : []};
		// add the sections to the dialog
		setDialogName(Changes_Dialog, "sect", "elements", dialogParts);
		// open the dialog
		var dia = app.execDialog(Changes_Dialog);
	}

	// reset the CurrentUpdates variable
	CurrentUpdates = {types : []};

	// Stop progress bar
	thermoM(thermoTxt, true);
}

//a way to show a dialog that compares multiple things
//arr is an array of arrays with two entries each [cluster title, cluster text]
function ShowCompareDialog(txtA, arr, canBeLong) {
	var clusterArr = [];
	var isTxtA = isArray(txtA);
	var hdr = isTxtA ? txtA[0] : txtA;
	var extraTxt = isTxtA && txtA[1] ? txtA[1] : "";
	var headTxt = isTxtA && txtA[2] ? txtA[2] : "";

	for (var i = 0; i < arr.length; i++) {
		var nextElem = {
			type : "cluster",
			alignment : "align_top",
			font : "heading",
			name : arr[i][0],
			elements : [{
				item_id : "tx" + ("0" + i).slice(-2),
				width : 300,
				alignment : "align_fill",
				font : "dialog"
			}]
		};
		if (canBeLong) {
			nextElem.elements[0].type = "edit_text";
			nextElem.elements[0].readonly = true;
			nextElem.elements[0].multiline = true;
			nextElem.elements[0].height = 350;
		} else {
			nextElem.elements[0].type = "static_text";
			nextElem.elements[0].wrap_name = true;
			nextElem.elements[0].name = arr[i][1].replace(/^(\r|\n)*/, "");
		}
		clusterArr.push(nextElem);
	}

	var otherWidths = clusterArr.length * 300;
	if (clusterArr.length == 1) {
		otherWidths = 400;
		clusterArr[0].elements[0].width = 400;
	}
	var ShowCompare_Dialog = {
		initialize : function (dialog) {
			if (!canBeLong) return;
			var toLoad = {};
			for (var i = 0; i < arr.length; i++) {
				toLoad["tx" + ("0" + i).slice(-2)] = arr[i][1].replace(/^(\r|\n)*/, "");
			}
			dialog.load(toLoad);
		},
		description : {
			name : txtA[0],
			elements : [{
				type : "view",
				align_children : "align_left",
				elements : (headTxt ? [{
					type : "static_text",
					item_id : "head",
					alignment : "align_fill",
					font : "heading",
					wrap_name : true,
					width : otherWidths,
					name : txtA[0]
				}, {
					type : "static_text",
					item_id : "txt2",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					width : otherWidths,
					name : headTxt
				}] : []).concat([{
					type : "view",
					align_children : "align_row",
					elements : [{
						type : "static_text",
						item_id : "txt0",
						alignment : "align_fill",
						font : "palette",
						wrap_name : true,
						height : 20,
						name : "[Can't see the 'OK' button at the bottom? Use ENTER to close this dialog]",
						width : otherWidths
					}, {
						type : "edit_text",
						item_id : "ding",
						alignment : "align_fill",
						readonly : true,
						height : 1,
						width : 1
					}]
				}, {
					type : "view",
					align_children : "align_top",
					elements : clusterArr
				}]).concat(extraTxt ? [{
					type : "static_text",
					item_id : "txt1",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					width : otherWidths,
					name : extraTxt
				}] : []).concat([{
					type : "ok"
				}])
			}]
		}
	}
	var dia = app.execDialog(ShowCompare_Dialog);
}

// >>>> Magic Items functions <<<< \\

function doDropDownValCalcWithChoices() {
	if (!event.target || event.type != "Field") return;
	switch (event.name) {
		case "Calculate":
			if (event.target.setVal !== undefined) {
				event.value = event.target.setVal;
			}
			break;
		case "Validate":
			if (event.target.setVal !== undefined) {
				delete event.target.setVal;
				return;
			}
			// only in case of a validation event and not changing the value
			var fldName = event.target.name;
			var fldNmbr = parseFloat(fldName.slice(-2));
			if (fldName.toLowerCase().indexOf("magic item") !== -1) {
				ApplyMagicItem(event.value, fldNmbr);
			} else if (fldName.toLowerCase().indexOf("feat") !== -1) {
				ApplyFeat(event.value, fldNmbr);
			}
			break;
		default:
			break;
	}
}

// Make an array of all magic item fields of that fieldnumber
function ReturnMagicItemFieldsArray(fldNmbr) {
	fldsArray = [
		"Extra.Magic Item " + fldNmbr,				// 0
		"Extra.Magic Item Note " + fldNmbr,			// 1
		"Extra.Magic Item Description " + fldNmbr,	// 2
		"Extra.Magic Item Weight " + fldNmbr,		// 3
		"Extra.Magic Item Attuned " + fldNmbr,		// 4
		"Image.MagicItemAttuned." + fldNmbr			// 5
	];
	return fldsArray;
}

// Lookup the name of a Magic Item and if it exists in the MagicItemsList
function ParseMagicItem(input) {
	var found = "";
	var subFound = "";
	if (!input) return [found, subFound, []];

	input = removeDiacritics(input).toLowerCase();
	var foundLen = 0;
	var foundDat = 0;
	var subFoundLen = 0;
	var subFoundDat = 0;
	var subOptionArr = [];
	var isMatch, isMatchLen, isMatchSub, tempDate, tempDateSub, tempNameLen;
	var varArr;

	// Scan string for all magic items
	for (var key in MagicItemsList) {
		var kObj = MagicItemsList[key];

		// test if the magic item or its source isn't excluded
		if (testSource(key, kObj, "magicitemExcl")) continue;

		isMatch = false;
		if (input.indexOf(kObj.name.toLowerCase()) !== -1) {
			isMatch = true;
			isMatchLen = kObj.name.length;
		} else if (kObj.nameAlt && input.indexOf(kObj.nameAlt.toLowerCase()) !== -1) {
			isMatch = true;
			isMatchLen = kObj.nameAlt.length;
		} else if (kObj.nameTest && input.indexOf(kObj.nameTest.toLowerCase()) !== -1) {
			isMatch = true;
			isMatchLen = kObj.nameTest.length;
		}
		tempDate = sourceDate(kObj.source);
		subFoundLen = 0;
		subFoundDat = 0;
		isMatchSub = "";
		varArr = [];

		if (kObj.choices) {
			for (var i = 0; i < kObj.choices.length; i++) {
				var keySub = kObj.choices[i].toLowerCase();
				var sObj = kObj[keySub];
				if (!sObj || (sObj.source && testSource(keySub, sObj, "magicitemExcl"))) continue;
				varArr.push(kObj.choices[i]);
				isMatchSub = false;
				if (sObj.name) {
					if (input.indexOf(sObj.name.toLowerCase()) !== -1) {
						isMatchSub = true;
						tempNameLen = sObj.name.length;
					} else if (sObj.nameAlt && input.indexOf(sObj.nameAlt.toLowerCase()) !== -1) {
						isMatchSub = true;
						tempNameLen = sObj.nameAlt.length;
					} else if (sObj.nameTest && input.indexOf(sObj.nameTest.toLowerCase()) !== -1) {
						isMatchSub = true;
						tempNameLen = sObj.nameTest.length;
					}
				} else if (isMatch && input.indexOf(keySub) !== -1) {
					isMatchSub = true;
					tempNameLen = keySub.length;
				}
				if (isMatchSub) {
					// the choice matched, but only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source than the other choices
					tempDateSub = sObj.source ? sourceDate(sObj.source) : tempDate;
					if (tempNameLen < subFoundLen || (tempNameLen == subFoundLen && tempDateSub < subFoundDat)) continue;
					// we have a match for a choice, so set the values
					subFoundLen = tempNameLen;
					subFoundDat = tempDateSub;
					foundLen = isMatchLen;
					foundDat = tempDate;
					found = key;
					subFound = keySub;
					subOptionArr = varArr;
				}
			}
		}
		if (!isMatch || subFoundLen) continue; // no match or sub already matched

		// only go on with if this entry is a better match (longer name) or is at least an equal match but with a newer source. This differs from the regExpSearch objects
		if (isMatchLen < foundLen || (isMatchLen == foundLen && tempDate < foundDat)) continue;

		// we have a match, set the values
		found = key;
		subFound = "";
		subOptionArr = varArr;
		foundLen = isMatchLen;
		foundDat = tempDate;
	}
	return [found, subFound, subOptionArr];
};

// Check all Magic Items fields and parse the once known into the global variable
function FindMagicItems() {
	CurrentMagicItems.known = [];
	CurrentMagicItems.choices = [];
	for (var i = 1; i <= FieldNumbers.magicitems; i++) {
		var parsedItem = ParseMagicItem( What("Extra.Magic Item " + i) );
		CurrentMagicItems.known.push(parsedItem[0]);
		CurrentMagicItems.choices.push(parsedItem[1]);
	}
}

// Add the text and features of a Magic Items
function ApplyMagicItem(input, FldNmbr) {
	if (IsSetDropDowns || CurrentVars.manual.items || !IsNotMagicItemMenu) return; // When just changing the dropdowns or magic items are set to manual or this is a menu action, don't do anything
	var MIflds = ReturnMagicItemFieldsArray(FldNmbr);
	// Not called from a field? Then just set the field and let this function be called anew
	if ((!event.target || event.target.name !== MIflds[0]) && What(MIflds[0]) !== input) {
		Value(MIflds[0], input);
		return;
	};

	var parseResult = ParseMagicItem(input);
	var newMI = parseResult[0];
	var newMIvar = parseResult[1];
	var aMI = MagicItemsList[newMI];
	var aMIvar = aMI && newMIvar ? aMI[newMIvar] : false;
	var ArrayNmbr = FldNmbr - 1;
	var oldMI = CurrentMagicItems.known[ArrayNmbr];
	var oldMIvar = CurrentMagicItems.choices[ArrayNmbr];
	var setFieldValueTo;
	var failedChoice = false;

	var doNotCommit = function(toSetVal) {
		if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
		if (!IsNotImport) return;
		event.rc = false;
		if (isArray(event.target.page)) OpeningStatementVar = app.setTimeOut("tDoc.getField('" + event.target.name + ".1').setFocus();", 10);
	}

	// If no variant was found, but there is a choice, ask it now
	if (aMI && aMI.choices && !newMIvar) {
		if (parseResult[2].length) {
			var selectMIvar = false;
			if (parseResult[2].length == 1) {
				selectMIvar = parseResult[2][0];
			} else if (aMI.selfChoosing && typeof aMI.selfChoosing == "function") {
				try {
					selectMIvar = aMI.selfChoosing();
				} catch (error) {
					var eText = "The function in the 'selfChoosing' attribute of '" + newMI + "' produced an error! Please contact the author of the magic item code to correct this issue:\n " + error + "\n ";
					for (var e in error) eText += e + ": " + error[e] + ";\n ";
					console.println(eText);
					console.show();
				}
				selectMIvar = selectMIvar && typeof selectMIvar == "string" && aMI[selectMIvar.toLowerCase()] ? selectMIvar : false;
			}
			if (!selectMIvar && !IsNotImport) {
				failedChoice = true;
			} else {
				// if none of the above selected a choice, ask the user!
				if (!selectMIvar) selectMIvar = AskUserOptions("Select " + aMI.name + " Type", "The '" + aMI.name + "' magic item exists in several forms. Select which form you want to add to the sheet at this time.\n\nYou can change the selected form with the little square button in the magic item line that this item is in.", parseResult[2], "radio", true);
				newMIvar = selectMIvar.toLowerCase();
				aMIvar = aMI[newMIvar];
				setFieldValueTo = aMIvar.name ? aMIvar.name : aMI.name + " [" + selectMIvar + "]";
			}
		} else if (!IsNotImport) {
			failedChoice = true;
		} else {
			app.alert({
				cTitle : "Error processing options for " + aMI.name,
				cMsg : "The magic item that you have selected, '" + aMI.name + "' offers a choice for the form it comes in. Unfortunately, the sheet has run into an issue where there are no forms to choose from because of resources being excluded. Use the \"Source Material\" bookmark to correct this.\n\nThis could also be an issue with the imported script containing the item not being written correctly. If so, please contact the author of that import script."
			});
			doNotCommit();
			return;
		}
	}

	// if there was a choice but none was selected for whatever reason (importing), do not apply anything and warn the user
	if (failedChoice) {
		Value(MIflds[2], 'ERROR, please reapply "' + aMI.name + '" above.');
		if (!IsNotImport) {
			console.println("The magic item '" + aMI.name + "' requires you to make a selection of a sub-choice. However, because this item was added during importing from another MPMB's Character Record Sheet, no pop-up dialog could be displayed to allow you to make a selection. Please reapply this magic item to show the pop-up dialog and make a selection for its sub-choice.");
			console.show();
		}
		if (thermoTxt) thermoM(thermoTxt, true); // Stop progress bar
		event.target.setVal = "ERROR, please reapply: " + (aMI.name.substr(0,2) + "\u200A" + aMI.name.substr(2)).split(" ").join("\u200A ");
		return;
	}

	if (oldMI === newMI && oldMIvar === newMIvar && (!aMI || !aMI.chooseGear) && (!aMIvar || !aMIvar.chooseGear)) {
		if (setFieldValueTo) event.target.setVal = setFieldValueTo;
		return; // No changes were made
	}

	// Start progress bar
	var thermoTxt = thermoM("Applying magic item...");
	thermoM(1/6); // Increment the progress bar

	// Create the object to use (merge parent and choice)
	if (!aMIvar) {
		var theMI = aMI;
		newMIvar = "";
	} else {
		var theMI = {
			name : aMIvar.name ? aMIvar.name : setFieldValueTo ? setFieldValueTo : input
		}
		var MIattr = ["source", "type", "rarity", "attunement", "magicItemTable", "weight", "description", "descriptionLong", "descriptionFull", "calculate", "prerequisite", "prereqeval", "chooseGear", "extraTooltip", "storyItemAL"];
		for (var a = 0; a < MIattr.length; a++) {
			var aKey = MIattr[a];
			if (aMIvar[aKey]) {
				theMI[aKey] = aMIvar[aKey];
			} else if (aMI[aKey]) {
				theMI[aKey] = aMI[aKey];
			}
		}
	}

	// Check if the magic item doesn't already exist (with the same choice, if any)
	if (IsNotImport && !ignoreDuplicates && aMI) {
		// count occurrence of parent & choice
		var parentDupl = 0;
		var choiceDupl = 0;
		for (var i = 0; i < CurrentMagicItems.known.length; i++) {
			if (i == ArrayNmbr) continue;
			if (CurrentMagicItems.known[i] == newMI) {
				parentDupl++;
				if (newMIvar && CurrentMagicItems.choices[i] == newMIvar) choiceDupl++;
			}
		}
		if ((parentDupl && !aMI.allowDuplicates) || (choiceDupl && !aMIvar.allowDuplicates)) {
			var stopFunct = app.alert({
				cTitle : "Can only have one instance of a magic item",
				cMsg : "The magic item that you have selected, '" + (choiceDupl ? theMI.name : aMI.name) + "' is already present on the sheet and you can't have duplicates of it.\n\nIf you want to show that your character has multiples of this item, consider adding \"(2)\" after its name. You can also list it in one of the equipment sections, where you can denote the number you have." + (newMIvar && !choiceDupl ? "\n\nHowever, as this is a composite item that exists in different forms, and you don't have '" + theMI.name + "' yet, the sheet can allow you to add it regardless of the rules. Do you want to continue adding this item?" : ""),
				nIcon : !newMIvar || choiceDupl ? 0 : 1,
				nType : !newMIvar || choiceDupl ? 0 : 2
			});
			if (stopFunct === 1 || stopFunct === 3) {
				doNotCommit();
				return;
			}
		}
	}

	// Before stopping the calculations, first test if the magic item has a prerequisite and if it meets that
	if (IsNotImport && IsNotReset && theMI && theMI.prereqeval && !ignorePrereqs && event.target && event.target.name == MIflds[0]) {
		try {
			if (typeof theMI.prereqeval == 'string') {
				var meetsPrereq = eval(theMI.prereqeval);
			} else if (typeof theMI.prereqeval == 'function') {
				var gatherVars = gatherPrereqevalVars();
				gatherVars.choice = newMIvar;
				var meetsPrereq = theMI.prereqeval(gatherVars);
			}
		} catch (error) {
			var eText = "The 'prereqeval' attribute for the magic item '" + theMI.name + "' produces an error and is subsequently ignored. If this is one of the built-in magic items, please contact morepurplemorebetter using one of the contact bookmarks to let him know about this bug. Please do not forget to list the version number of the sheet, name and version of the software you are using, and the name of the magic item.\nThe sheet reports the error as\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
			var meetsPrereq = true;
		};
		if (!meetsPrereq) {
			thermoTxt = thermoM("The magic item '" + theMI.name + "' has prerequisites that have not been met...", false); //change the progress dialog text
			thermoM(1/5); //increment the progress dialog's progress

			var askUserMI = app.alert({
				cTitle : "The prerequisites for '" + theMI.name + "' have not been met",
				cMsg : "The magic item that you have selected, '" + theMI.name + "' has a prerequisite listed" + (theMI.prerequisite ? ' as: \n\t"' + theMI.prerequisite + '"' : ".") + "\n\nYour character does not meet this requirement. Are you sure you want to apply this magic item?",
				nIcon : 1,
				nType : 2
			});

			if (askUserMI !== 4) { // If "NO" was pressed
				doNotCommit();
				return;
			}
		};
	};

	// if a magic item variant was chosen, make sure this field will show that selection, now that it can't be cancelled anymore due to not meeting a prerequisite
	if (setFieldValueTo) event.target.setVal = setFieldValueTo;

	calcStop(); // Now stop the calculations

	// Remove previous magic item at the same field
	if (oldMI !== newMI || oldMIvar !== newMIvar) {
		// Remove everything from the description field, value, calculation, tooltip, submitname
		tDoc.getField(MIflds[2]).setAction("Calculate", "");
		Value(MIflds[2], "", "", "");
		if (oldMI) {
			var anOldMI = MagicItemsList[oldMI];
			var skipNoAttunement = isDisplay(MIflds[4]) == display.visible && !tDoc.getField(MIflds[4]).isBoxChecked(0);
			if (oldMI !== newMI && !skipNoAttunement) {
				// Undo the selection of a weapon, ammo, or armor if defined
				if (anOldMI.chooseGear || (oldMIvar && anOldMI[oldMIvar].chooseGear)) {
					selectMagicItemGearType(false, FldNmbr, oldMIvar && anOldMI[oldMIvar].chooseGear ? anOldMI[oldMIvar].chooseGear : anOldMI.chooseGear);
				}

				// Remove its attributes
				var Fea = ApplyFeatureAttributes(
					"item", // type
					oldMI, // fObjName
					[CurrentMagicItems.level, 0, false], // lvlA [old-level, new-level, force-apply]
					[oldMIvar, "", false], // choiceA [old-choice, new-choice, "only"|"change"]
					false // forceNonCurrent
				);
			}
			// Remove the source from the notes field
			var sourceStringOld = stringSource(oldMIvar && anOldMI[oldMIvar].source ? anOldMI[oldMIvar] : anOldMI, "first", "[", "]");
			if (sourceStringOld) RemoveString(MIflds[1], sourceStringOld);
		}
		// Reset the attuned and weight fields
		tDoc.resetForm([MIflds[3], MIflds[4]]);
		AddTooltip(MIflds[4], undefined, "");
	}

	// Update the CurrentMagicItems.known variable
	CurrentMagicItems.known[ArrayNmbr] = newMI;
	CurrentMagicItems.choices[ArrayNmbr] = newMIvar;

	// Do something if there is a new magic item to apply
	if (aMI) {
		thermoTxt = thermoM("Applying '" + theMI.name + "' magic item...", false); //change the progress dialog text
		thermoM(1/3); //increment the progress dialog's progress

		// Set the field calculation
		if (theMI.calculate) {
			var theCalc = What("Unit System") === "imperial" ? theMI.calculate : ConvertToMetric(theMI.calculate, 0.5);
			if (typePF) theCalc = theCalc.replace("\n", " ");
			tDoc.getField(MIflds[2]).setAction("Calculate", theCalc);
		}

		// Create the tooltip
		var tooltipStr = (theMI.type ? theMI.type + ", " : "") + (theMI.rarity ? theMI.rarity : "");
		if (theMI.attunement) tooltipStr += tooltipStr ? " (requires attunement)" : "requires attunement";
		tooltipStr = toUni(theMI.name) + (tooltipStr ? "\n" + tooltipStr[0].toUpperCase() + tooltipStr.substr(1) : "");

		if (theMI.notLegalAL) {
			tooltipStr += "\n \u2022 Illegal in Adventurers League play";
		} else if (theMI.magicItemTable) {
			if (isArray(theMI.magicItemTable)) {
				theMI.magicItemTable.sort();
				tooltipStr += formatLineList("\n \u2022 Table: ", theMI.magicItemTable);
				var lowestTable = theMI.magicItemTable[0];
			} else {
				var lowestTable = theMI.magicItemTable;
				tooltipStr += "\n \u2022 Table: " + theMI.magicItemTable;
			}
			if (TreasureCheckpointsTable[lowestTable]) {
				var aTC = TreasureCheckpointsTable[lowestTable];
				tooltipStr += " (Tier " + aTC.tier + "+; " + aTC.points + " Treasure Checkpoints)";
			}
			tooltipStr += ".";
		} else if (theMI.rarity && theMI.rarity == "common") {
			tooltipStr += "\n \u2022 AL: Tier 1+; 2 Treasure Checkpoints";
		} else if (theMI.storyItemAL) {
			tooltipStr += "\n \u2022 Story Item (AL: only use in adventure it's found in)";
		} else if (!theMI.extraTooltip) {
			tooltipStr += "\n \u2022 Can't be traded in Adventurers League play";
		}
		if (theMI.extraTooltip) {
			tooltipStr += "\n \u2022 " + theMI.extraTooltip;
		}
		if (theMI.prerequisite) tooltipStr += "\n \u2022 Prerequisite: " + theMI.prerequisite;
		tooltipStr += stringSource(theMI, "full,page", "\n \u2022 Source: ", ".");

		if (theMI.descriptionFull) tooltipStr += isArray(theMI.descriptionFull) ? desc(theMI.descriptionFull).replace(/^\n   /i, "\n\n") : "\n\n" + theMI.descriptionFull;

		// Get the description
		var theDesc = "";
		if (!theMI.calculate) {
			theDesc = FldNmbr > FieldNumbers.magicitemsD && theMI.descriptionLong ? theMI.descriptionLong : theMI.description ? theMI.description : "";
			if (What("Unit System") !== "imperial") theDesc = ConvertToMetric(theDesc, 0.5);
			if (typePF) theDesc = theDesc.replace("\n", " ");
		}

		// Set it all to the appropriate field
		Value(MIflds[2], theDesc, tooltipStr, theMI.calculate ? theCalc : "");

		// Set the notes field
		var sourceString = stringSource(theMI, "first", "[", "]");
		if (sourceString) AddString(MIflds[1], sourceString, " ");

		// Set the weight
		if (theMI.weight) {
			var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
			Value(MIflds[3], RoundTo(theMI.weight * massMod, 0.001, true));
		} else {
			Value(MIflds[3], 0);
		}

		// Apply the rest of its attributes
		if (oldMI !== newMI || oldMIvar !== newMIvar) {
			// Set the attunement
			Checkbox(MIflds[4], theMI.attunement ? true : false, undefined, theMI.attunement ? "" : "hide");
			var justChange = oldMI == newMI && oldMIvar !== newMIvar;
			var Fea = ApplyFeatureAttributes(
				"item", // type
				newMI, // fObjName
				[justChange ? CurrentMagicItems.level : 0, CurrentMagicItems.level, justChange], // lvlA [old-level, new-level, force-apply]
				justChange ? [oldMIvar, newMIvar, "change"] : ["", newMIvar, false], // choiceA [old-choice, new-choice, "only"|"change"]
				false // forceNonCurrent
			);
		}

		// Do the selection of a weapon, ammo, or armor if defined
		var skipNoAttunement = isDisplay(MIflds[4]) == display.visible && !tDoc.getField(MIflds[4]).isBoxChecked(0);
		if (!skipNoAttunement && oldMI == newMI && (aMI.chooseGear || (oldMIvar && aMI[oldMIvar].chooseGear))) {
			// undo the previous
			selectMagicItemGearType(false, FldNmbr, oldMIvar && aMI[oldMIvar].chooseGear ? aMI[oldMIvar].chooseGear : aMI.chooseGear, oldMIvar);
		}
		if ((oldMI !== newMI || oldMIvar !== newMIvar) && theMI.chooseGear) selectMagicItemGearType(true, FldNmbr, theMI.chooseGear);
	}

	// Set the visibility of the attuned checkbox
	setMIattunedVisibility(FldNmbr);

	thermoM(thermoTxt, true); // Stop progress bar
};

function correctMIdescriptionLong(FldNmbr) {
	if (CurrentVars.manual.items) return;
	var ArrayNmbr = FldNmbr - 1;
	var aMI = MagicItemsList[CurrentMagicItems.known[ArrayNmbr]];
	var aMIvar = aMI && CurrentMagicItems.choices[ArrayNmbr] ? aMI[CurrentMagicItems.choices[ArrayNmbr]] : false;

	// Create the object to use (merge parent and choice)
	if (!aMIvar) {
		var theMI = aMI;
	} else {
		var theMI = {}
		var MIattr = ["description", "descriptionLong", "calculate"];
		for (var a = 0; a < MIattr.length; a++) {
			var aKey = MIattr[a];
			if (aMIvar[aKey]) {
				theMI[aKey] = aMIvar[aKey];
			} else if (aMI[aKey]) {
				theMI[aKey] = aMI[aKey];
			}
		}
	}

	// Now only do something if a magic item is recognized, doesn't have a calculation, or doesn't have two different description options (normal & long)
	if (!aMI || theMI.calculate || !theMI.descriptionLong) return;

	var theDesc = FldNmbr > FieldNumbers.magicitemsD && theMI.descriptionLong ? theMI.descriptionLong : theMI.description ? theMI.description : "";
	if (What("Unit System") !== "imperial") theDesc = ConvertToMetric(theDesc, 0.5);
	if (typePF) theDesc = theDesc.replace("\n", " ");
	Value("Extra.Magic Item Description " + FldNmbr, theDesc);
	// Apply the chooseGear item again to the description
	var hasChooseGear = aMIvar && aMIvar.chooseGear ? aMIvar.chooseGear : aMI.chooseGear;
	if (hasChooseGear) selectMagicItemGearType(true, FldNmbr, hasChooseGear, false, true);
}

function ApplyAttunementMI(FldNmbr) {
	if (CurrentVars.manual.items) return;
	var ArrayNmbr = FldNmbr - 1;
	var aMI = CurrentMagicItems.known[ArrayNmbr];
	if (!aMI) return; // no magic item recognized, so do nothing
	var aMIvar = CurrentMagicItems.choices[ArrayNmbr];

	var theFld = event.target && event.target.name.indexOf("Extra.Magic Item Attuned ") !== -1 ? event.target : tDoc.getField("Extra.Magic Item Attuned " + FldNmbr);
	var isChecked = theFld.isBoxChecked(0);

	// Start progress bar and stop calculation
	var thermoTxt = thermoM((isChecked ? "Applying" : "Removing") + " magic item features...");
	calcStop();
	thermoM(1/2); // Increment the progress bar

	// now apply or remove the magic item's features
	var Fea = ApplyFeatureAttributes(
		"item", // type
		aMI, // fObjName
		isChecked ? [0, CurrentMagicItems.level, false] : [CurrentMagicItems.level, 0, false], // lvlA [old-level, new-level, force-apply]
		isChecked ? ["", aMIvar, false] : [aMIvar, "", false], // choiceA [old-choice, new-choice, "only"|"change"]
		false // forceNonCurrent
	);

	// Do the selection of a weapon, ammo, armor if defined
	var useChooseGear = aMIvar && MagicItemsList[aMI][aMIvar].chooseGear ? MagicItemsList[aMI][aMIvar].chooseGear : MagicItemsList[aMI].chooseGear ? MagicItemsList[aMI].chooseGear : false;
	if (useChooseGear) selectMagicItemGearType(isChecked, FldNmbr, useChooseGear);
}

// Hide/show the attuned checkbox for a magic item entry
function setMIattunedVisibility(FldNmbr, force) {
	var MIflds = ReturnMagicItemFieldsArray(FldNmbr);
	var hideIt = How(MIflds[4]) != "";
	if (!force && hideIt == isDisplay(MIflds[4])) return; // already the right display

	var isOF = FldNmbr > FieldNumbers.magicitemsD;
	if (isOF && !isTemplVis("ASoverflow")) return; // overflow, but overflow is not visible

	// Define some constants
	var noteWidth = typePF ? 25 : 35;
	var fullWidth = !typePF ? 216 : isOF ? 243.45 : 164.3;
	var nameRect = tDoc.getField(MIflds[0] + ".1").rect;
	var noteRect = tDoc.getField(MIflds[1] + ".1").rect;
	var startCount = nameRect[0];
	var smallWidth = !typePF ? tDoc.getField(MIflds[4] + ".1").rect[0] - 1 - startCount : isOF ? 211.27 : 132.15;

	if (hideIt) {
		// hide it, uncheck it, and set the rect for the Name and Note fields
		Hide(MIflds[4]);
		Hide(MIflds[5]);
		Checkbox(MIflds[4], false);
		nameRect[2] = nameRect[0] + fullWidth - noteWidth;
	} else {
		// show it and set the rect for the Name and Note fields
		Show(MIflds[4]);
		Show(MIflds[5]);
		nameRect[2] = nameRect[0] + smallWidth - noteWidth;
	}
	// Apply the new positions of the Name and Note fields
	noteRect[0] = nameRect[2];
	noteRect[2] = noteRect[0] + noteWidth;
	tDoc.getField(MIflds[1] + ".1").rect = noteRect;
	tDoc.getField(MIflds[0] + ".1").rect = nameRect;
	if (!event.target || event.target.name !== MIflds[0]) {
		// Re-input the value as to counteract the changing of font rendering
		tDoc.getField(MIflds[0]).value = tDoc.getField(MIflds[0]).value;
	}
}

// Correct the visibility of the Magic Item attuned checkboxes when showing the 3rd/overflow page
function correctMIattunedVisibility(pageType) {
	var startNo = pageType == "ASoverflow" ? FieldNumbers.magicitemsD + 1 : 1;
	var endNo = pageType == "ASoverflow" ? FieldNumbers.magicitems : FieldNumbers.magicitemsD;
	for (var i = startNo; i <= endNo; i++) {
		setMIattunedVisibility(i, true);
	}
}

// Set the options of the dropdown of magic items
function SetMagicItemsDropdown(forceTooltips) {
	var ArrayDing = [""];
	var tempString = "Type in the name of the magic item (or select it from the drop-down menu) and its text and features will be filled out automatically, provided it is a recognized magic item.\n\nAbility scores will not be automatically altered other than their tool tips (mouseover texts) and in the Scores dialog.";
	for (var key in MagicItemsList) {
		if (testSource(key, MagicItemsList[key], "magicitemExcl")) continue;
		var MIname = MagicItemsList[key].name;
		if (ArrayDing.indexOf(MIname) === -1) ArrayDing.push(MIname);
	}
	ArrayDing.sort();

	var ArrayDingSource = ArrayDing.toSource();
	var applyItems = tDoc.getField("Extra.Magic Item 1").submitName !== ArrayDingSource;
	if (applyItems) tDoc.getField("Extra.Magic Item 1").submitName = ArrayDingSource;

	for (var i = 1; i <= FieldNumbers.magicitems; i++) {
		var MIfld = "Extra.Magic Item " + i;
		var MIfldV = What(MIfld);
		if (applyItems) {
			tDoc.getField(MIfld).setItems(ArrayDing);
			Value(MIfld, MIfldV, tempString);
		} else if (forceTooltips) {
			AddTooltip(MIfld, tempString);
		}
	}
}

//make a menu of all the magic items, sorted by different criteria
function ParseMagicItemMenu() {
	var iMenus = {
		alphabetical : {},
		rarity : {
			common : [],
			uncommon : [],
			rare : [],
			"very rare" : [],
			legendary : [],
			artifact : []
		},
		type : {
			"Armor, shield, AC bonus" : [],
			Potion : [],
			Ring : [],
			Rod : [],
			Scroll : [],
			Staff : [],
			Wand : [],
			"Wondrous item" : [],
			Weapon : []
		},
		special : {
			"Ability score increase" : [],
			"Hit points" : [],
			Movement : [],
			"Resistances or immunities" : [],
			Skills : [],
			Spells : [],
			Vision : [],
		},
		source : { namesArr : [] },
		ref : {}
	};
	var spaceArr = new Array(38).join("\u2002");
	var amendSrc = function(nameTxt, srcTxt) {
		if (!srcTxt) return nameTxt;
		return nameTxt + spaceArr.slice(0, nameTxt.length < 35 ? 38 - nameTxt.length : 4) + srcTxt;
	}
	var sortItem = function(mainItem, subItem) {
		var iObj = MagicItemsList[mainItem];
		var sObj = subItem ? iObj[subItem.toLowerCase()] : false;
		var tObj = sObj ? {} : iObj;
		if (sObj) {
			for (var attr in iObj) tObj[attr] = iObj[attr];
			for (var attr in sObj) tObj[attr] = sObj[attr];
		}
		var iSrc = tObj.source ? stringSource(tObj, "first,abbr", "(", ")") : false;  // DEBUGGING!!!
		var itemName = amendSrc(RemoveZeroWidths(!sObj ? iObj.name : sObj.name ? sObj.name : iObj.name + " [" + subItem + "]"), iSrc);
		var firstLetter = itemName[0].toUpperCase();
		// If this is a subitem and it has the exact same name as a previously added subitem, we have to make sure it 
		if (sObj && sObj.name && iMenus.ref[itemName]) {
			itemName = amendSrc(RemoveZeroWidths(iObj.name + " [" + subItem + "]"), iSrc);
			firstLetter = itemName[0].toUpperCase();
		}
		iMenus.ref[itemName] = subItem ? mainItem + "#" + subItem : mainItem;
		if (!iMenus.alphabetical[firstLetter]) iMenus.alphabetical[firstLetter] = [];
		iMenus.alphabetical[firstLetter].push(itemName);
		if (tObj.source) {
			var aSrcs = parseSource(tObj.source);
			for (var a = 0; a < aSrcs.length; a++) {
				var aSrc = SourceList[aSrcs[a][0]];
				var uSrc = aSrc.name + " (" + aSrc.abbreviation + ")";
				if (!iMenus.source[uSrc]) {
					iMenus.source[uSrc] = [];
					iMenus.source.namesArr.push(uSrc);
				}
				iMenus.source[uSrc].push(itemName);
			}
		}
		if (tObj.rarity && iMenus.rarity[tObj.rarity.toLowerCase()]) {
			iMenus.rarity[tObj.rarity.toLowerCase()].push(itemName);
		}
		if ((/weapon/i).test(tObj.type) || tObj.weaponsAdd || tObj.weaponOptions || (tObj.chooseGear && (/weapon|ammo/i).test(tObj.chooseGear.type))) {
			iMenus.type.Weapon.push(itemName);
		}
		if ((/armor|shield/i).test(tObj.type) || tObj.armorAdd || tObj.shieldAdd || tObj.armorOptions || tObj.extraAC || (tObj.chooseGear && tObj.chooseGear.type == "armor")) {
			iMenus.type["Armor, shield, AC bonus"].push(itemName);
		}
		var searchType = tObj.type ? tObj.type.toLowerCase() : false;
		for (var aType in iMenus.type) {
			if (!searchType) break;
			if ((/weapon|armor|shield/i).test(aType)) continue;
			if (searchType.indexOf(aType.toLowerCase()) !== -1) {
				iMenus.type[aType].push(itemName);
				break;
			}
		}
		if (tObj.scores || tObj.scorestxt || tObj.scoresOverride) {
			iMenus.special["Ability score increase"].push(itemName);
		}
		if (tObj.calcChanges && tObj.calcChanges.hp) {
			iMenus.special["Hit points"].push(itemName);
		}
		if (tObj.speed || (/(flying|climbing|burrowing|swimming|walking) speed/i).test(tObj.descriptionFull) || (/of (flying|climbing|burrowing|swimming)/i).test(tObj.name)) {
			iMenus.special.Movement.push(itemName);
		}
		if (tObj.dmgres || (tObj.savetxt && tObj.savetxt.immune)) {
			iMenus.special["Resistances or immunities"].push(itemName);
		}
		if (tObj.skills || tObj.skillstxt || tObj.advantage) {
			iMenus.special.Skills.push(itemName);
		}
		if (tObj.spellcastingBonus || tObj.spellChanges || (tObj.calcChanges && tObj.calcChanges.spellList)) {
			iMenus.special.Spells.push(itemName);
		}
		if (tObj.vision) {
			iMenus.special.Vision.push(itemName);
		}
	}
	for (var item in MagicItemsList) {
		var anItem = MagicItemsList[item];
		if (anItem.source && testSource(item, anItem, "magicitemExcl")) continue;
		var justDoMainItem = true;
		if (anItem.choices && !anItem.selfChoosing) {
			for (var c = 0; c < anItem.choices.length; c++) {
				var aChL = anItem.choices[c].toLowerCase();
				var aSubItem = anItem[aChL];
				if (!aSubItem || (aSubItem.source && testSource(aChL, aSubItem, "magicitemExcl"))) continue;
				for (var attr in aSubItem) {
					if (!(/^(description.*|name.*|source|notLegalAL|magicItemTable|storyItemAL|extraTooltip|attunement|weight|prereq.*|allowDuplicates|calculate)$/i).test(attr)) {
						justDoMainItem = false;
						sortItem(item, anItem.choices[c]);
						break;
					}
				}
			}
		}
		if (justDoMainItem) sortItem(item);
	}
	// First add the alphabetical listing of all the magic items
	var tempMenu = [], alphabetaArr = [];
	for (var letter in iMenus.alphabetical) alphabetaArr.push(letter);
	alphabetaArr.sort();
	for (var i = 0; i < alphabetaArr.length; i++) {
		var tempMenu2 = iMenus.alphabetical[alphabetaArr[i]];
		tempMenu2.sort();
		for (var a = 0; a < tempMenu2.length; a++) {
			tempMenu2[a] = {
				cName : tempMenu2[a],
				cReturn : "item#set#" + iMenus.ref[tempMenu2[a]]
			}
		}
		tempMenu.push({ cName : alphabetaArr[i], oSubMenu : [].concat(tempMenu2) });
	}
	AddMagicItemsMenu = [{
		cName : "Alphabetically",
		oSubMenu : [].concat(tempMenu)
	}]
	// Then a menu per rarity
	var tempMenu = [];
	for (var entry in iMenus.rarity) {
		var tempMenu2 = iMenus.rarity[entry];
		if (!tempMenu2.length) continue;
		tempMenu2.sort();
		for (var a = 0; a < tempMenu2.length; a++) {
			tempMenu2[a] = {
				cName : tempMenu2[a],
				cReturn : "item#set#" + iMenus.ref[tempMenu2[a]]
			}
		}
		tempMenu.push({ cName : entry[0].toUpperCase() + entry.substr(1), oSubMenu : [].concat(tempMenu2) });
	}
	AddMagicItemsMenu.push({
		cName : "By rarity",
		oSubMenu : [].concat(tempMenu)
	});
	// Then a menu per source
	var tempMenu = [];
	iMenus.source.namesArr.sort();
	for (var s = 0; s < iMenus.source.namesArr.length; s++) {
		var entry = iMenus.source.namesArr[s];
		var tempMenu2 = iMenus.source[entry];
		if (!tempMenu2 || !tempMenu2.length || entry == "namesArr") continue;
		tempMenu2.sort();
		for (var a = 0; a < tempMenu2.length; a++) {
			tempMenu2[a] = {
				cName : tempMenu2[a],
				cReturn : "item#set#" + iMenus.ref[tempMenu2[a]]
			}
		}
		tempMenu.push({ cName : entry, oSubMenu : [].concat(tempMenu2) });
	}
	AddMagicItemsMenu.push({
		cName : "By source",
		oSubMenu : [].concat(tempMenu)
	}, { cName : "-" });
	// Then a main menu item per type
	for (var entry in iMenus.type) {
		var tempMenu2 = iMenus.type[entry];
		if (!tempMenu2.length) continue;
		tempMenu2.sort();
		for (var a = 0; a < tempMenu2.length; a++) {
			tempMenu2[a] = {
				cName : tempMenu2[a],
				cReturn : "item#set#" + iMenus.ref[tempMenu2[a]]
			}
		}
		AddMagicItemsMenu.push({ cName : entry, oSubMenu : [].concat(tempMenu2) });
	}
	AddMagicItemsMenu.push({ cName : "-" });
	// Then a main menu item per bonus
	for (var entry in iMenus.special) {
		var tempMenu2 = iMenus.special[entry];
		if (!tempMenu2.length) continue;
		tempMenu2.sort();
		for (var a = 0; a < tempMenu2.length; a++) {
			tempMenu2[a] = {
				cName : tempMenu2[a],
				cReturn : "item#set#" + iMenus.ref[tempMenu2[a]]
			}
		}
		AddMagicItemsMenu.push({ cName : entry, oSubMenu : [].concat(tempMenu2) });
	}
};

//Make menu for the button on each Magic Item line and parse it to Menus.magicitems
function MakeMagicItemMenu_MagicItemOptions(MenuSelection, itemNmbr) {
	var magicMenu = [];
	if (!itemNmbr) itemNmbr = parseFloat(event.target.name.slice(-2));
	var ArrayNmbr = itemNmbr - 1;
	var MIflds = ReturnMagicItemFieldsArray(itemNmbr);
	var theField = What(MIflds[0]) != "";
	var noUp = itemNmbr === 1;
	var noDown = itemNmbr === FieldNumbers.magicitems;
	var upToOtherPage = itemNmbr === (FieldNumbers.magicitemsD + 1) ? " (to third page)" : "";
	var downToOtherPage = itemNmbr === FieldNumbers.magicitemsD ? " (to overflow page)" : "";
	var visibleAttunement = How(MIflds[4]) == "";
	var aMI;

	if (!MenuSelection || MenuSelection === "justMenu") {
		// a function to add the other items
		var menuLVL1 = function (array) {
			for (i = 0; i < array.length; i++) {
				magicMenu.push({
					cName : array[i][0],
					cReturn : "item#" + array[i][1],
					bEnabled : array[i][2] !== undefined ? array[i][2] : true,
					bMarked : array[i][3] !== undefined ? array[i][3] : false
				});
			}
		};
		// if this magic item allows for a choice, add that option as the first thing in the menu
		if (CurrentMagicItems.known[ArrayNmbr]) {
			aMI = MagicItemsList[CurrentMagicItems.known[ArrayNmbr]];
			if (MagicItemsList[CurrentMagicItems.known[ArrayNmbr]].choices) {
				var aMIopts = aMI.choices;
				var choiceMenu = {
					cName : "Change type of " + aMI.name,
					oSubMenu : []
				};
				for (var i = 0; i < aMIopts.length; i++) {
					var aCh = aMIopts[i];
					var aChL = aCh.toLowerCase();
					if (!aMI[aChL] || (aMI[aChL].source && testSource(aChL, aMI[aChL], "magicitemExcl"))) continue;
					choiceMenu.oSubMenu.push({
						cName : aCh + stringSource(aMI[aChL].source ? aMI[aChL] : aMI, "first,abbr", "\t   [", "]"),
						cReturn : "item#choice#" + aChL,
						bMarked : CurrentMagicItems.choices[ArrayNmbr] == aChL
					});
				}
				if (choiceMenu.oSubMenu.length > 1) magicMenu.push(choiceMenu);
			}
			// an option to read the whole description
			if (Who(MIflds[2])) menuLVL1([["Show full text of " + aMI.name, "popup"]]);
			// add a separator if we have any items in the menu so far
			if (magicMenu.length) magicMenu.push({ cName : "-" });
		}
		// a way to select another magic item
		if (!AddMagicItemsMenu) ParseMagicItemMenu();
		magicMenu.push({
			cName : CurrentMagicItems.known[ArrayNmbr] ? "Change item to" : "Apply item",
			oSubMenu : AddMagicItemsMenu
		},{ cName : "-" });
		// now all the default options
		var magicArray = [
			["Move up" + upToOtherPage, "up", !noUp],
			["Move down" + downToOtherPage, "down", !noDown],
			["-", "-"],
			["Insert empty item", "insert", noDown || !theField ? false : true],
			["Delete item", "delete"],
			["Clear item", "clear"],
			["-", "-"],
			["Show attuned checkbox", "attunement", undefined, visibleAttunement],
			["-", "-"],
			["Copy to Adventuring Gear (page 2)", "equipment#gear#r", theField]
		].concat(What("Adventuring Gear Remember") !== false || !visibleAttunement ? [] : [
			["Copy to Attuned Magical Items (page 2)", "equipment#magic#", theField]
		]).concat([
			["Copy to Extra Equipment (page 3)", "equipment#extra#", theField]
		]);
		menuLVL1(magicArray);
		// set it to the global variable
		Menus.magicitems = magicMenu;
		if (MenuSelection == "justMenu") return;
	}
	MenuSelection = MenuSelection ? MenuSelection : getMenu("magicitems");
	if (!MenuSelection || MenuSelection[0] == "nothing" || MenuSelection[0] != "item") return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Magic item menu option...");

	var getChoiceName = function(item, choice) {
		var aMI = MagicItemsList[item];
		if (!choice || !aMI[choice]) return aMI.name;
		if (aMI[choice].name) return aMI[choice].name;
		for (var i = 0; i < aMI.choices.length; i++) {
			if (aMI.choices[i].toLowerCase() == choice) {
				return aMI.name + " [" + aMI.choices[i] + "]";
			}
		}
	}

	switch (MenuSelection[1]) {
		case "set" :
			Value(MIflds[0], getChoiceName(MenuSelection[2], MenuSelection[3]));
			break;
		case "popup" :
			ShowDialog("Magic item's full description", Who(MIflds[2]));
			break;
		case "choice" :
			aMI = MagicItemsList[CurrentMagicItems.known[ArrayNmbr]];
			if (MenuSelection[2] && aMI && aMI[MenuSelection[2]] && CurrentMagicItems.choices[ArrayNmbr] != MenuSelection[2]) {
				var aMIvar = aMI[MenuSelection[2]];
				Value(MIflds[0], getChoiceName(CurrentMagicItems.known[ArrayNmbr], MenuSelection[2]));
			}
			break;
		case "up" :
			if (noUp) return;
		case "down" :
			if (MenuSelection[1] == "down" && noDown) return;
			calcStop();
			IsNotMagicItemMenu = false;
			thermoTxt = thermoM("Moving the magic item " + MenuSelection[1] + "...", false);
			// Get the other fields
			var otherNmbr = MenuSelection[1] == "down" ? itemNmbr + 1 : itemNmbr - 1;
			var MIfldsO = ReturnMagicItemFieldsArray(otherNmbr);
			// Now swap all the fields
			for (var i = 0; i < MIflds.length - 1; i++) {
				var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
				copyField(MIflds[i], MIfldsO[i], exclObj, true);
				thermoM(i/(MIflds.length - 1)); //increment the progress dialog's progress
			}
			// Correct the visibility of the attuned fields
			setMIattunedVisibility(itemNmbr);
			setMIattunedVisibility(otherNmbr);
			// Correct the entry in the CurrentMagicItems.known array
			if (!CurrentVars.manual.items) {
				var thisKnown = CurrentMagicItems.known[itemNmbr - 1];
				var thisChoice = CurrentMagicItems.choices[itemNmbr - 1];
				CurrentMagicItems.known[itemNmbr - 1] = CurrentMagicItems.known[otherNmbr - 1];
				CurrentMagicItems.known[otherNmbr - 1] = thisKnown;
				CurrentMagicItems.choices[itemNmbr - 1] = CurrentMagicItems.choices[otherNmbr - 1];
				CurrentMagicItems.choices[otherNmbr - 1] = thisChoice;
			}
			// Correct the description if moving between 3rd and overflow page
			if ((upToOtherPage && MenuSelection[1] == "up") || (downToOtherPage && MenuSelection[1] == "down")) {
				correctMIdescriptionLong(itemNmbr);
				correctMIdescriptionLong(otherNmbr);
			}
			IsNotMagicItemMenu = true;
			break;
		case "insert" :
			MagicItemInsert(itemNmbr);
			break;
		case "delete" :
			MagicItemDelete(itemNmbr);
			break;
		case "clear" :
			thermoTxt = thermoM("Clearing magic item...", false);
			MagicItemClear(itemNmbr, true);
			break;
		case "equipment" :
			calcStop();
			thermoTxt = thermoM("Copying the item to equipment section...", false);
			var itemWeight = What(MIflds[3]);
			if (isNaN(itemWeight) || itemWeight <= 0) itemWeight = "";
			AddToInv(MenuSelection[2], MenuSelection[3], What(MIflds[0]), "", itemWeight, "", false, false, false, true);
			break;
		case "attunement" :
			calcStop();
			thermoTxt = thermoM((visibleAttunement ? "Hiding" : "Showing") + " the attuned checkbox...", false);
			var currentlyChecked = tDoc.getField(MIflds[4]).isBoxChecked(0);
			Checkbox(MIflds[4], !visibleAttunement && What(MIflds[0]), undefined, visibleAttunement ? "hide" : "");
			setMIattunedVisibility(itemNmbr);
			// Now if attunement was visible and it was unchecked, we have to reapply the magic item's properties
			if (!CurrentVars.manual.items) {
				var curMI = CurrentMagicItems.known[itemNmbr - 1];
				if (curMI && visibleAttunement && !currentlyChecked) {
					// now apply or remove the magic item's features
					var Fea = ApplyFeatureAttributes(
						"item", // type
						curMI, // fObjName
						[0, CurrentMagicItems.level, false], // lvlA [old-level, new-level, force-apply]
						false, // choiceA [old-choice, new-choice, "only"|"change"]
						false // forceNonCurrent
					);
				}
			}
			break;
	}
	thermoM(thermoTxt, true); // Stop progress bar
}

// Add a magic item to the third page or overflow page
function AddMagicItem(item, attuned, itemDescr, itemWeight, overflow, forceAttunedVisible) {
	item = item.substring(0, 2) === "- " ? item.substring(2) : item;
	var itemLower = item.toLowerCase();
	var RegExItem = "\\b" + item.RegEscape() + "\\b";
	var RegExItemNo = RegExp(RegExItem + " \\+\\d+", "i");
	RegExItem = RegExp(RegExItem, "i");
	var startFld = overflow ? FieldNumbers.magicitemsD + 1 : 1;
	for (var n = 1; n <= 2; n++) {
		for (var i = startFld; i <= FieldNumbers.magicitems; i++) {
			var MIflds = ReturnMagicItemFieldsArray(i);
			var curItem = What(MIflds[0]);
			if (n === 1 && ((RegExItem.test(curItem) && !RegExItemNo.test(curItem)) || curItem.toLowerCase() === itemLower)) {
				return; // the item already exists
			} else if (n === 2 && curItem === "") {
				if (i > FieldNumbers.magicitemsD && !tDoc.getField(BookMarkList["Overflow sheet"])) DoTemplate("ASoverflow", "Add");
				Value(MIflds[0], item);
				var recognizedItem = CurrentMagicItems.known[i - 1];
				if (!recognizedItem) {
					if (itemDescr !== undefined) Value(MIflds[4], itemDescr);
					if (itemWeight !== undefined) Value(MIflds[3], itemWeight);
					if (attuned !== undefined) Checkbox(MIflds[4], attuned ? true : false);
				} else if ((forceAttunedVisible === undefined || forceAttunedVisible) && attuned !== undefined && !attuned && MagicItemsList[recognizedItem].attunement) {
					// This is an item that requires attunement, but attunement is explicitly set to none, so undo the automation of the magic item
					Checkbox(MIflds[4], false);
					ApplyAttunementMI(i);
				}
				var isAttuneVisible = How("Extra.Magic Item Attuned " + i) == "";
				if (forceAttunedVisible !== undefined && forceAttunedVisible !== isAttuneVisible) {
					AddTooltip("Extra.Magic Item Attuned " + i, undefined, forceAttunedVisible ? "" : "hide");
					setMIattunedVisibility(i);
					if (attuned === undefined) {
						Checkbox(MIflds[4], forceAttunedVisible);
					} else if (!attuned && forceAttunedVisible) {
						Checkbox(MIflds[4], false);
						ApplyAttunementMI(i);
					}
				}
				return;
			}
		}
	}
}

// Remove a magic item from the third page or overflow page
function RemoveMagicItem(item) {
	item = item.substring(0, 2) === "- " ? item.substring(2) : item;
	var itemLower = item.toLowerCase();
	var RegExItem = "\\b" + item.RegEscape() + "\\b";
	var RegExItemNo = RegExp(RegExItem + " \\+\\d+", "i");
	RegExItem = RegExp(RegExItem, "i");
	for (var i = 1; i <= FieldNumbers.magicitems; i++) {
		var curItem = What("Extra.Magic Item " + i);
		if ((RegExItem.test(curItem) && !RegExItemNo.test(curItem)) || curItem.toLowerCase() === itemLower) {
			MagicItemClear(i, true);
			break;
		}
	}
}

// Insert a magic item at the position wanted
function MagicItemInsert(itemNmbr) {
	// Stop the function if the selected slot is already empty
	if (!What("Extra.Magic Item " + itemNmbr)) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Inserting empty magic item...");
	calcStop();
	IsNotMagicItemMenu = false;

	//look for the first empty slot below the slot
	var endslot = false;
	for (var it = itemNmbr + 1; it <= FieldNumbers.magicitems; it++) {
		if (What("Extra.Magic Item " + it) === "") {
			endslot = it;
			break;
		}
	}

	// Only do something if an empty slot was found
	if (endslot) {
		// Cycle through the slots starting with the found empty one and add the values of the one above
		for (var it = endslot; it > itemNmbr; it--) {
			// Copy all the fields
			var MIfldsFrom = ReturnMagicItemFieldsArray(it - 1);
			var MIfldsTo = ReturnMagicItemFieldsArray(it);
			for (var i = 0; i < MIfldsFrom.length - 1; i++) {
				var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
				copyField(MIfldsFrom[i], MIfldsTo[i], exclObj);
			}
			// Correct the known array & choices arrays
			if (!CurrentVars.manual.items) {
				CurrentMagicItems.known[it - 1] = CurrentMagicItems.known[it - 2];
				CurrentMagicItems.choices[it - 1] = CurrentMagicItems.choices[it - 2];
			}
			// Correct the attuned checkbox visibility
			setMIattunedVisibility(it);
			// Correct the description (normal/long)
			if (it == FieldNumbers.magicitemsD + 1) correctMIdescriptionLong(it);
		}

		// Clear the selected slot
		MagicItemClear(itemNmbr);
	}

	IsNotMagicItemMenu = true;
	thermoM(thermoTxt, true); // Stop progress bar
}

// Delete a magic item at the position wanted and move the rest up
function MagicItemDelete(itemNmbr) {
	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Deleting magic item...");
	calcStop();

	var maxItem = FieldNumbers.magicitems;
	// Stop at the end of the first page if last one on first page is empty
	if (itemNmbr <= FieldNumbers.magicitemsD && !What("Extra.Magic Item " + FieldNumbers.magicitemsD)) maxItem = FieldNumbers.magicitemsD;

	// First clear the current item so that it's automation is run
	MagicItemClear(itemNmbr, true);
	IsNotMagicItemMenu = false;

	// Make every line identical to the one below, starting with the selected line
	for (var it = itemNmbr; it < maxItem; it++) {
		// Copy all the fields
		var MIfldsFrom = ReturnMagicItemFieldsArray(it + 1);
		var MIfldsTo = ReturnMagicItemFieldsArray(it);
		for (var i = 0; i < MIfldsFrom.length - 1; i++) {
			var exclObj = i != 0 ? {} : { userName : true, submitName : true, noCalc : true };
			copyField(MIfldsFrom[i], MIfldsTo[i], exclObj);
		}
		// Correct the known & choices arrays
		if (!CurrentVars.manual.items) {
			CurrentMagicItems.known[it - 1] = CurrentMagicItems.known[it];
			CurrentMagicItems.choices[it - 1] = CurrentMagicItems.choices[it];
		}
		// Correct the attuned checkbox visibility
		setMIattunedVisibility(it);
		// Correct the description (normal/long)
		if (it == FieldNumbers.magicitemsD) correctMIdescriptionLong(it);
	}

	// Clear the final line
	MagicItemClear(maxItem);

	IsNotMagicItemMenu = true;
	thermoM(thermoTxt, true); // Stop progress bar
}

// Clear a magic item at the position given
function MagicItemClear(itemNmbr, doAutomation) {
	var MIflds = ReturnMagicItemFieldsArray(itemNmbr);
	if (doAutomation && !CurrentVars.manual.items && CurrentMagicItems.known[itemNmbr - 1]) {
		IsNotMagicItemMenu = true;
		Value("Extra.Magic Item " + itemNmbr, "");
		tDoc.resetForm(MIflds[1]);
	} else {
		if (!CurrentVars.manual.items) CurrentMagicItems.known[itemNmbr - 1] = "";
		AddTooltip(MIflds[2], "", "");
		tDoc.getField(MIflds[2]).setAction("Calculate", "");
		AddTooltip(MIflds[4], undefined, "");
		if (IsNotReset) tDoc.resetForm(MIflds);
		setMIattunedVisibility(itemNmbr);
	}
}

// Change the magic item to include a selected weapon, armor, or ammunition
function selectMagicItemGearType(AddRemove, FldNmbr, typeObj, oldChoice, correctingDescrLong) {
	if (!event.target || !event.target.name || event.target.name.indexOf("Extra.Magic Item ") == -1 || !typeObj.type) return;
	if (typeObj.excludeCheck && typeof typeObj.excludeCheck != "function") delete typeObj.excludeCheck;
	// see what type of thing we are dealing with or return if none is recognized
	switch (typeObj.type.toLowerCase()) {
		case "ammo":
		case "ammos":
		case "ammunition":
		case "ammunitions":
			var typeNm = "ammunition";
			var typeNmC = "Ammunition";
			var parseFnct = "ParseAmmo";
			var baseList = AmmoList;
			var exclObj = "ammoExcl";
			break;
		case "wea":
		case "weapon":
		case "weapons":
			var typeNm = "weapon";
			var typeNmC = "Weapon";
			var parseFnct = "ParseWeapon"
			var baseList = WeaponsList;
			var exclObj = "weapExcl";
			break;
		case "armor":
		case "armors":
		case "armour":
		case "armours":
			var typeNm = "armor";
			var typeNmC = "Armor";
			var parseFnct = "ParseArmor";
			var baseList = ArmourList;
			var exclObj = "armorExcl";
			break;
		default:
			return;
	}

	var createString = function(type, addition, fixed) {
		switch (type ? type.toLowerCase() : "") {
			default:
			case "prefix":
				return addition + " " + fixed;
			case "suffix":
				return fixed + " " + addition;
			case "brackets":
				return fixed + " (" + addition.replace(/ ?\(.+\)/, '') + ")";
		}
	}
	var MIflds = ReturnMagicItemFieldsArray(FldNmbr);
	var isApplyFld = event.target.name == MIflds[0];
	var ArrayNmbr = FldNmbr - 1;
	var curItem = CurrentMagicItems.known[ArrayNmbr];
	var curChoice = oldChoice ? oldChoice : CurrentMagicItems.choices[ArrayNmbr];
	var aMI = MagicItemsList[curItem];
	var aMIvar = curChoice && aMI[curChoice] ? aMI[curChoice] : false;
	var curName = curChoice ? MagicItemsList[curItem][curChoice].name : MagicItemsList[curItem].name;
	var itemToProcess, selectedItem;

	// use the name of the choice object (if any) or the shortest of the name, nameAlt, and nameTest of the parent object
	var nameObj = aMIvar && aMIvar.name ? aMIvar : aMI;
	var curName = nameObj.name;
	var useName = [nameObj.name].concat(nameObj.nameAlt ? [nameObj.nameAlt] : []).concat(nameObj.nameTest ? [nameObj.nameTest] : []).reduce(function(a, b) { return a.length <= b.length ? a : b; });

	// get the value of the magic item name field
	var useVal = isApplyFld && AddRemove ? event.value : isApplyFld ? event.target.value : What(MIflds[0]);
	// see if the item is not already present in the string
	var isItem = tDoc[parseFnct](useVal);
	// if this is recognized as a weapon, make sure we are not just triggering on the default words (axe, sword, hammer, bow, crossbow)
	var defaultItems = {
		"battleaxe" : [/\baxes?\b/i, /battle/i],
		"longsword" : [/\bswords?\b/i, /long/i],
		"warhammer" : [/\bhammers?\b/i, /war/i],
		"shortbow" : [/\bbows?\b/i, /short/i],
		"light crossbow" : [/\bcrossbows?\b/i, /light/i]
	}
	if (typeNm == "weapon" && defaultItems[isItem] && (defaultItems[isItem][0]).test(useVal) && !(defaultItems[isItem][1]).test(useVal)) {
		isItem = ParseWeapon(useVal.replace(defaultItems[isItem][0], ''));
	}
	// if removing this item
	if (!AddRemove) {
		if (isItem) {
			selectedItem = baseList[isItem].name;
			var theItemName = selectedItem.toLowerCase();
		} else {
			return; // nothing more to do if we are just removing this item and no item is found
		}
	} else if (!isItem) {
		// collect all types of items
		var itemChoices = [];
		var itemRefs = {};
		for (var key in baseList) {
			var kObj = baseList[key];
			if (testSource(key, kObj, exclObj)) continue;
			// some type-dependent filters
			if (typeNm == "armor" && (!kObj.type || kObj.isMagicArmor)) {
				continue;
			} else if (typeNm == "weapon" && ((/natural|spell|cantrip|improvised/i).test(kObj.type) || kObj.isMagicWeapon)) {
				continue;
			} else if (typeNm == "ammunition" && (kObj.isMagicAmmo || WeaponsList[key])) {
				continue;
			}
			if (typeObj.excludeCheck && typeObj.excludeCheck(key, kObj)) continue;
			var capName = kObj.name.capitalize();
			itemChoices.push(capName);
			itemRefs[capName] = key;
		}
		if (typeNm != "armor") itemChoices.sort();
		if (!IsNotImport) {
			userSelected = itemChoices[0];
			console.println("During importing from another MPMB's Character Record Sheet, the sheet was unable to show a pop-up dialog to let you choose what type of " + typeNm + " the '" + curName + "' is. As a result, '" + userSelected + "' was chosen for you automatically. If you wish to change this, reapply the '" + curName + "'.");
			console.show();
		} else {
			var userSelected = AskUserOptions("Select Type of " + typeNmC, "Choose which " + typeNm + " type this '" + curName + "' is.\nIf you want to change the " + typeNm + " type at a later time, select the magic item again from the drop-down box." + (aMI.choices ? "\nYou will also be prompted to select the " + typeNm + " type again when you select a choice using the button in this magic item line," + (aMIvar ? " even when selecting '" + aMIvar.name + "' again." : ".") : ""), itemChoices, "radio", true);
		}

		var theItemName = userSelected.toLowerCase();
		isItem = itemRefs[userSelected];
		selectedItem = baseList[isItem].name;
	} else {
		if (isApplyFld && event.target.setVal) selectedItem = baseList[isItem].name;
		var theItemName = baseList[isItem].name.toLowerCase();
	}
	// ammunitions are often written as plural, but we don't want that here
	if (typeNm == "ammunition" && theItemName.substr(-1) == "s") {
		theItemName = theItemName.substr(0, theItemName.length - 1);
		if (selectedItem) selectedItem = selectedItem.substr(0, selectedItem.length - 1);
	}
	// get the new name of the magic item
	var newMIname = selectedItem ? createString(typeObj.prefixOrSuffix, selectedItem, useName) : useVal;
	// See if there is a special string set for how the item should appear on the 1st page
	if (typeObj.itemName1stPage) {
		itemToProcess = createString(typeObj.itemName1stPage[0], baseList[isItem].name, typeObj.itemName1stPage[1]);
	}
	// Apply the item to the sheet
	if (!correctingDescrLong) {
		switch (typeNm) {
			case "ammunition":
				tDoc[AddRemove ? 'AddAmmo' : 'RemoveAmmo'](itemToProcess ? itemToProcess : newMIname.replace(/ammunition (\+\d)/i, "$1").replace(/(\+\d) *\((.*?)\)/i, "$1 $2"), 1);
				break;
			case "weapon":
				processAddWeapons(AddRemove, itemToProcess ? itemToProcess : newMIname.replace(/weapon (\+\d)/i, "$1").replace(/(\+\d) *\((.*?)\)/i, "$1 $2"));
				break;
			case "armor":
				processAddArmour(AddRemove, itemToProcess ? itemToProcess : newMIname.replace(/armou?r (\+\d)/i, "$1").replace(/(\+\d) *\((.*?)\)/i, "$1 $2"));
				break;
		}
	}
	if (AddRemove && (isApplyFld || correctingDescrLong)) {
		// Update the description of the magic item to reflect the choice
		var descrWrd = typeObj.descriptionChange ? typeObj.descriptionChange[1] : typeNm;
		var desrcStr = What(MIflds[2]).replace(
			descrWrd,
			typeObj.descriptionChange && typeObj.descriptionChange[0].toLowerCase() == "replace" ? theItemName :
				createString(
					typeObj.descriptionChange ? typeObj.descriptionChange[0] : typeObj.prefixOrSuffix,
					theItemName,
					descrWrd
				)
		);
		Value(MIflds[2], desrcStr);
	}
	if (AddRemove && isApplyFld) {
		// set the weight of the item, if any
		if (baseList[isItem].weight) {
			var massMod = What("Unit System") === "imperial" ? 1 : UnitsList.metric.mass;
			Value(MIflds[3], RoundTo(baseList[isItem].weight * massMod, 0.001, true));
		}
		// set the changed name of the magic item (always do this last!)
		if (newMIname !== event.value) event.target.setVal = newMIname;
	}
}

// Gather some variables to pass to a prereqeval function
function gatherPrereqevalVars() {
	var moreProfs = What("MoreProficiencies");
	var gObj = {
		// general character abilities
		isSpellcaster : isSpellcaster(),
		characterLevel : Number(What("Character Level")),
		// armour proficiencies
		shieldProf : tDoc.getField("Proficiency Shields").isBoxChecked(0),
		lightArmorProf : tDoc.getField("Proficiency Armor Light").isBoxChecked(0),
		mediumArmorProf : tDoc.getField("Proficiency Armor Medium").isBoxChecked(0),
		heavyArmorProf : tDoc.getField("Proficiency Armor Heavy").isBoxChecked(0),
		// weapon proficiencies
		simpleWeaponsProf : tDoc.getField("Proficiency Weapon Simple").isBoxChecked(0),
		martialWeaponsProf : tDoc.getField("Proficiency Weapon Martial").isBoxChecked(0),
		otherWeaponsProf : What("Proficiency Weapon Other Description"),
		// other proficiencies
		toolProfs : [moreProfs],
		languageProfs : [moreProfs],
		skillProfs : [],
		// specifics
		hasEldritchBlast : (/,eldritch blast,/i).test(CurrentWeapons.known) || isSpellUsed("eldritch blast", true)
	};

	// fill the arrays for tool, language, and skill proficiencies
	for (var i = 1; i <= FieldNumbers.langstools; i++) {
		var aLang = What("Language " + i);
		if (aLang) gObj.languageProfs.push(aLang);
		var aTool = What("Tool " + i);
		if (aTool) gObj.toolProfs.push(aTool);
	}
	var skillsAlphaBeta = Who('Text.SkillsNames') === 'alphabeta';
	for (var i = 0; i < SkillsList.abbreviations.length - 2; i++) {
		var isProf = tDoc.getField(SkillsList.abbreviations[i] + " Prof").isBoxChecked(0);
		if (isProf) gObj.skillProfs.push(SkillsList[skillsAlphaBeta ? "names" : "namesByAS"][i]);
	}
	return gObj;
}

/*
NEW ATTRIBUTES
	limfeaname // Optional; If defined it is used for populating the limited feature section and the action section instead of `name`
	scorestxt // Optional; String; If defined it is used for the text in the Ability Score dialog and tooltips. If not defined, but 'scores' is defined, 'scores' will be used to generate a text
	scoresOverride // Optional; Array; works same as scores, but are used to populate the "Magical Override" column; If you are providing both 'scores' and 'scoresOverride' you should also give a 'scorestxt', as the auto-generated tooltip text doesn't work if you have both 'scores' and 'scoresOverride'
	calcChanges.spellList // Optional; an array with the first entry being a function, and the second entry being a descriptive text. This attribute can change the spell list created for a class / race / feat
	calcChanges.spellCalc // Optional; an array with the first entry being a function, and the second entry being a descriptive text. This attribute can change the DC, spell attack, and number of spells to memorize
	weaponOptions // Optional; an array of WeaponsList objects to be added to the WeaponsList (can also be a single object if only wanting to add a single weapon)
	armorOptions // Optional; an array of ArmourList objects to be added to the ArmourList (can also be a single object if only wanting to add a single armour)
	ammoOptions // Optional; an array of AmmoList objects to be added to the AmmoList (can also be a single object if only wanting to add a single armour)
	extraAC // replaces AddACMisc() in eval
	extraLimitedFeatures // replaces AddFeature() in eval
	carryingCapacity // multiply the Carrying Capacity Multiplier with this number
	spellcastingFactorRoundupMulti // in ClassList or ClassSublist to indicate that in case of multiclassing the spellcasting factor should be rounded up

CHANGED ATTRIBUTES
	armorProfs // Optional; Array; armor proficiencies to add [previous just 'armor']
	weaponProfs // Optional; Array; weapon proficiencies to add [previous just 'weapons' or 'weaponprofs' depending on List]
	armorAdd // Optional; String; name of the armor to put in the armor section (if results in higher AC) [previous 'addarmor']
	weaponsAdd // Optional; Array; names of the weapons to put in the attack section (if there is space) [previous 'weapons']


CHANGES TO IMPLEMENT IN LIST SCRIPTS

	'primaryAbility' for CLASS(main) no longer needs line-break, bullet point, name, or trailing semicolon
	'prereqs' for CLASS(main) no longer needs line-break, bullet point, name, or trailing semicolon


	'improvements' for RACE/FEAT replaced with 'scorestxt' (but without name or trailing semicolon)
	'improvements' for RACE/FEAT no longer needed if identical to changes by 'scores'

	'skills' can now be an array of arrays with 2 elements each, the first element being the skill name and the second element being the application of expertise "full", "increment", or "only"
	'skills' for FEATS/CLASS(main) is no longer used and should be replaced by 'skillstxt'

	'skillstxt' no longer need line breaks, name, or trailing semicolon/period
	'skillstxt' no longer needed if identical to changes by 'skills'

	'action' can now be an array, so no need for 'AddAction' in eval

	'tooltip' for racial features: make name same as tooltip (minus the parenthesis) and add limfeaname for the old name

	'eval', 'removeeval', 'changeeval' can now be a function

	'atkAdd[0]' & 'atkCalc[0]' can now be a function

	'armor' replace with 'armorProfs'
	'addarmor' replace with 'armorAdd'
	'weapons' for CLASS/FEAT: replace with 'weaponProfs'
	'weaponprofs' for RACE: replace with 'weaponProfs'
	'weapons' for RACE: replace with 'weaponsAdd'

	eval changes :
	- Class Features Remember
	- AddAction
	- AddWeapon
	- AddFeature
	- AddACMisc
	- ClassFeatureOptions (no longer needed in removeeval if to be removed at that level)

	spellcastingBonus.firstCol (options: 'atwill', 'oncesr', 'oncelr', 'markedbox', 'checkbox', 'checkedbox')
	REPLACE			WITH
	atwill : true	firstCol : 'atwill'
	oncesr : true	firstCol : 'oncesr'
	oncelr : true	firstCol : 'oncelr'
	prepared : true	firstCol : 'markedbox'

	(atwill|oncesr|oncelr) : true		firstCol : '\1'

OVERWRITTEN BY CHOICES (NOT EXTRACHOICES):
	name
	limfeaname // new, see above
	additional
	description
	recovery
	source
	usages
	usagescalc

CHANGED ATTRIBUTES
	action // can now be an array of actions
	  // if the second entry starts with a letter character, it will be used instead of the feature name
	  // if the second entry starts with a space or other common joining character like "-,'([{", it will be amended to the feature name
	  // e.g. ["action", " (start/stop)"] will result in "Feature name (start/stop)"
	  // while ["action", "start/stop"] will result in "start/stop"
	eval // can now be a function
	removeeval // can now be a function
	changeeval // can now be a function
	calcChanges.atkAdd[0] // the first entry of the array can now be a function (but has parameters!)
	calcChanges.atkCalc[0] // the first entry of the array can now be a function (but has parameters!)
	calcChanges.hp // can now be a function

	armor // replaced with armorProfs (so it is more clear)
	addarmor // replaced with armorAdd (notice difference in capitalisation)
	weapons // for CLASS/FEAT: replaced with weaponProfs (so it is more clear)
	weaponprofs // for RACE: replace with weaponProfs
	weapons // for RACE: replace with weaponsAdd


*/

//see if the JS file is installed
try {
	var MPMBImportFunctionsInstalled = MPMBImportFunctions_isInstalled;
} catch (MPMBerrors) {
	var MPMBImportFunctionsInstalled = false;
}

function ImportExport_Button() {
	if (minVer) {
		ImportScriptOptions();
		return;
	};
	var theMenu = getMenu("importexport");

	if (theMenu !== undefined && theMenu[0] !== "nothing") {
		switch (theMenu[1]) {
			case "script" :
				ImportScriptOptions(theMenu);
				break;
			case "import" :
				Import(theMenu[2]);
				break;
			case "export" :
				MakeXFDFExport(theMenu[2]);
				break;
			case "direct" :
				StartDirectImport();
				break;
		};
	};
};

//a function to open the sheet and call a timeout
function StartDirectImport() {
	//test if the version of Acrobat being used is good (DC or later)
	if (app.viewerVersion < 15) {
		app.alert({
			cMsg: "This features requires Adobe Acrobat DC or newer (Reader, Standard, or Pro).\n\nYou can get Adobe Acrobat Reader DC for free at get.adobe.com/reader/",
			cTitle: "Old version of Adobe Acrobat"
		});
		return;
	} else if (MPMBImportFunctionsInstalled) {
		DirectImport();
	} else if (event.target === undefined && !MPMBImportFunctionsInstalled) {
		DirectImport(true);
	} else if (event.target !== undefined && !MPMBImportFunctionsInstalled) {
		AddFolderJavaScript(false);
	}
}

// call this to add the folder level javascript if it is missing
function AddFolderJavaScript(justConsole) {
	var isType = app.viewerType === "Exchange-Pro" ? "Pro" : (app.viewerType === "Exchange" ? "Standard" : "Reader");
	var isContin = app.viewerVersion.substring(6, 8) != 30;
	var vYear = 20 + app.viewerVersion.substring(0, 2);

	var textLoc = "The 'JavaScripts' folder for Adobe Acrobat " + isType + " DC on " + (isWindows ? "Windows 10 x64" : "Mac OS") + " is:";
	var locWin = "C:\\Program Files (x86)\\Adobe\\Acrobat " + (isType === "Reader" ? "Reader " : "") + (isContin ? "DC" : vYear) + "\\" + (isType === "Reader" ? "Reader" : "Acrobat") + "\\Javascripts\\";
	var locMac = "/Applications/Adobe Acrobat " + (isType === "Reader" ? "Reader " : "") + (isContin ? "DC" : vYear) + ".app/Contents/Resources/JavaScripts/";

	var Text0 = justConsole ? "In order to import user-defined icons, you will have to manually add a JavaScript file to your Adobe Acrobat installation. This is necessary, because of Adobe Acrobat's security protocol. You will have to do this only once to get this function working." : "In order to use the 'Direct Import' functionality, you will need to do something to appease Adobe Acrobat's security settings. You have two options:\nOption 1 is that you add a JavaScript file to your installation. After you've done this, you will never see this dialogue again.\nOption 2 is that you run the code from console, but you will have to do this every time if you want to use this function.";
	var Text1 = "Do the following steps:\n   1)  Use the button below to save the file somewhere (don't change the filename).\n   2)  Rename the file so that its extension is \".js\" (can't be done while saving).\n   3)  Move the file to the right location mentioned below (can't be saved there directly).\n   4)  Restart Adobe Acrobat and try the 'Direct Import' function again.";
	var Text2 = "The directory where you have to put this file depends on your version of Adobe Acrobat and your operating system. The path shown here is an estimated guess for your installation. It is possible that this folder doesn't exist yet, or that it is hidden.\n" + toUni("Note that you can't save the file directly to this location!");
	var Text3 = "Open the console (a.k.a. \"JavaScript Debugger\") and run the code that is printed there. Running the code is done by selecting the line it is on and pressing " + (isWindows ? "Ctrl+Enter" : "Command+Enter") + " (or the numpad Enter).";
	var LocJS = isWindows ? locWin : locMac;

	var AddJS_dialog = {
		initialize : function(dialog) {
			dialog.load({
				locJ : LocJS
			});
		},
		bADD : function(dialog) {
			tDoc.exportDataObject({ cName: "MPMB-IF Remove '.txt' from the end.js.txt", nLaunch: 0});
		},
		bCON : function(dialog) {
			dialog.end("cons");
		},
		description : {
			name : "This function needs your help!",
			first_tab : "bADD",
			elements : [{
				type : "view",
				align_children : "align_left",
				elements : [{
					type : "view",
					elements : [{
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						name : justConsole ? "User-defined Icons: requires JavaScript file to be added" : "Add a JavaScript file to your Acrobat installation or use the Console",
						height : 21,
						width : 530
					}, {
						type : "static_text",
						item_id : "txt0",
						alignment : "align_fill",
						font : "dialog",
						wrap_name : true,
						width : 530,
						name : Text0
					}, {
						type : "view",
						item_id : "viJ1",
						back_color: "windowBackground",
						alignment : "align_fill",
						width : 530,
						elements : [{
							type : "cluster",
							item_id : "cluJ",
							alignment : "align_fill",
							font : "heading",
							name : justConsole ? "Add the JavaScript File" : "Option 1: Add a JavaScript File",
							height : 21,
							width : 530,
							elements : [{
								type : "static_text",
								item_id : "txt1",
								alignment : "align_fill",
								font : "dialog",
								bold : true,
								wrap_name : true,
								width : 500,
								name : Text1
							}, {
								type : "button",
								item_id : "bADD",
								name : "Click here to save the JavaScript file",
								font : "heading",
								bold : true,
								alignment : "align_center"
							}, {
								type : "view",
								item_id : "viJ2",
								back_color: "windowDialog",
								alignment : "align_fill",
								width : 500,
								elements : [{
									type : "cluster",
									item_id : "txtJ",
									alignment : "align_fill",
									font : "dialog",
									bold : true,
									width : 500,
									name : textLoc,
									elements : [{
										type : "edit_text",
										item_id : "locJ",
										alignment : "align_fill",
										font : "dialog",
										width : 470,
										readonly : true
									}, {
										type : "static_text",
										item_id : "txt2",
										alignment : "align_fill",
										font : "dialog",
										wrap_name : true,
										width : 470,
										name : Text2
									}, ]
								}, ]
							}, ]
						}, ]
					}, {
						type : "gap",
						height : 5
					}, {
						type : "view",
						item_id : "vieC",
						back_color: "windowBackground",
						alignment : "align_fill",
						width : 530,
						elements : [{
							type : "cluster",
							item_id : "cluC",
							alignment : "align_fill",
							font : "heading",
							name : "Option 2: Run the Code in the Console",
							height : 21,
							width : 530,
							elements : [{
								type : "static_text",
								item_id : "txt3",
								alignment : "align_fill",
								wrap_name : true,
								width : 500,
								name : Text3
							}, {
								type : "button",
								item_id : "bCON",
								name : "Click here to Open the Console",
								font : "heading",
								bold : true,
								alignment : "align_center"
							}, ]
						}, ]
					}, ]
				}, {
					type : justConsole ? "ok_cancel" : "ok",
					ok_name : "Done",
					cancel_name : "Continue without importing icons"
				}, ]
			}, ]
		}
	};

	if (justConsole) delete AddJS_dialog.description.elements[0].elements[0].elements[4];

	var theDialog = app.execDialog(AddJS_dialog);

	if (theDialog === "cons") {
		console.clear();
		console.println("Select the line below that says \"StartDirectImport();\" and press " + (isWindows ? "Ctrl+Enter" : "Command+Enter") + "\n\nStartDirectImport();");
		console.show();
	}

	return theDialog === "ok";
}

//the dialogue for the DirectImport function that ask for the path to a file to import from
function DirectImport_Dialogue() {
	var Text0 = "This 'Direct Import' function opens another MPMB's Character Record Sheet and goes through every field and layout setting in it to make this sheet similar to the other. This can take a long time and will not copy everything literally as this sheet will run through its automation to benefit from any updates to its code compared to the other sheet.\n\nIn order to do this, you will need to give the full path to a local file you want to import from.\nYou can use the 'Lookup' button to get the path."
	var Text01 = "Alternatively, place the sheet you want to import from in the same folder as this sheet, give the file name of the sheet you want to import from (including file extension), and check the box to use a relative path.";
	var Text1 = "If you continue with importing, the current sheet will first be reset without notice!";
	var TextIcons = (app.viewerType === "Reader" ? "Because of limitations in Adobe Acrobat Reader, this function is not available." : "'User-defined icons\' refers to those images that have been set for the symbol, portrait, companion(s) appearance, etc. that have been added from another file.") + "\n\nIcons that have been selected from the sheet built-in options will be imported regardless (faction symbols, Adventure League season icons, class icons).";
	var DirectImport_dialog = {
		fileLoc : "",
		relPath : false,
		importIcons : false,

		initialize : function(dialog) {
			var isReader = app.viewerType === "Reader";
			dialog.load({
				"img1": allIcons.import,
				"fLoc": this.fileLoc,
				"icCl": "Import user-defined icons as well?" + (isReader ? " (Requires Acrobat Pro or Standard)" : ""),
				"icNo": true
			});
			dialog.enable({
				"icNo": !isReader,
				"icYe": !isReader
			});
		},
		bFND : function(dialog) {
			tDoc.getField("SelectFile").browseForFileToSubmit();
			this.fileLoc = What("SelectFile");
			dialog.load({
				"fLoc": this.fileLoc
			});
		},
		commit : function(dialog) {
			var oResult = dialog.store();
			if (this.fileLoc !== oResult["fLoc"]) this.fileLoc = oResult["fLoc"];
			this.relPath = oResult["fRel"];
			this.importIcons = oResult["icYe"];
		},
		description : {
			name : "Import stuff directly",
			first_tab : "bFND",
			elements : [{
				type : "view",
				align_children : "align_left",
				elements : [{
					type : "view",
					elements : [{
						type : "view",
						align_children : "align_row",
						elements : [{
							type : "image",
							item_id : "img1",
							alignment : "align_bottom",
							width : 20,
							height : 20
						}, {
							type : "static_text",
							item_id : "head",
							alignment : "align_fill",
							font : "heading",
							bold : true,
							height : 21,
							width : 470,
							name : "Import all data, settings, and layout from a MPMB's Character Sheet"
						}]
					}, {
						type : "static_text",
						item_id : "txt0",
						alignment : "align_fill",
						font : "dialog",
						wrap_name : true,
						width : 500,
						name : Text0
					}, {
						type : "static_text",
						item_id : "txtx",
						alignment : "align_fill",
						font : "dialog",
						wrap_name : true,
						width : 500,
						name : Text01
					}, {
						type : "cluster",
						item_id : "fTxt",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						width : 500,
						name : "Give the file's full or relative path or use the button to look one up",
						elements : [{
							type : "button",
							item_id : "bFND",
							name : "Lookup the Path of a PDF to Import From",
							font : "dialog",
							bold : true,
							alignment : "align_center",
							next_tab : "fLoc"
						}, {
							type : "edit_text",
							item_id : "fLoc",
							alignment : "align_fill",
							font : "dialog",
							width : 470,
							next_tab : "fRel"
						}, {
							type : "check_box",
							item_id : "fRel",
							alignment : "align_left",
							name : "Resolve the path above relative to the current open sheet."
						}, ]
					}, {
						type : "cluster",
						item_id : "icCl",
						alignment : "align_fill",
						font : "dialog",
						bold : app.viewerType !== "Reader",
						width : 500,
						elements : [{
							type : "view",
							align_children :  "align_left",
							elements : [{
								type : "radio",
								item_id : "icNo",
								name : "No. I will set them again manually (recommended).",
								group_id : "icon",
								height : 20
							}, {
								type : "radio",
								item_id : "icYe",
								name : "Yes. Import the user-defined icons as well (experimental).",
								group_id : "icon",
								height : 20
							}, ]
						}, {
							type : "static_text",
							item_id : "icTx",
							alignment : "align_fill",
							font : "palette",
							width : 470,
							wrap_name : true,
							name : TextIcons
						}, ]
					}, {
						type : "static_text",
						item_id : "txt1",
						alignment : "align_fill",
						font : "dialog",
						bold : true,
						wrap_name : true,
						width : 500,
						name : Text1
					}, ]
				}, {
					type : "ok_cancel",
					item_id : "okca",
					ok_name : "Import (takes extremely long)",
					next_tab : "bFND"
				}, ]
			}, ]
		}
	};

	var theDialog = app.execDialog(DirectImport_dialog);

	var goII = false;
	if (DirectImport_dialog.importIcons) {
		if (MPMBImportFunctionsInstalled) {
			goII = true;
		} else {
			if (AddFolderJavaScript(true)) theDialog = "cancel"; //if the addJS dialog is cancelled (selected to go on without the user icons), it returns false
		}
	}

	return theDialog === "ok" ? [DirectImport_dialog.fileLoc, DirectImport_dialog.relPath, goII] : false;
};

//a function to import information directly from another MPMB's Character Record Sheets
function DirectImport(consoleTrigger) {
	//ask the user for the file to import from
	var importFromPath = DirectImport_Dialogue();
	if (!importFromPath) return; //no reason to go on with this

	// initiate a progress bar, so there is at least something
	var thermoTxt = thermoM("Importing directly from PDF...");

	var closeAlert = false, IIerror;
	try {
		if (consoleTrigger && !MPMBImportFunctionsInstalled) {
			global.docTo = this;
			global.docFrom = importFromPath[1] ? app.openDoc({cPath: importFromPath[0], oDoc: this}) : app.openDoc(importFromPath[0]);
			global.docTo.bringToFront();
		} else {
			MPMBOpenFile(this, importFromPath[0], importFromPath[1]);
		}
		closeAlert = global.docFrom && (/^(?=.*morepurplemorebetter)(?=.*character)(?=.*sheet).*$/i).test(global.docFrom.info.title) && global.docFrom.info.SheetVersion ? false : ["File is not one of MPMB's Character Record Sheets", "The opened document is not recognized as being one of MPMB's Character Record Sheets.\nNote that even though it might look like one of MPMB's Character Record Sheets, no form-fillable fields and back-end code be detected. Possibly the document was flattened (printed to PDF) or opened with Preview for Mac, subsequently destroying its automations. Unfortunately nothing can be imported from such a file.\n\nIt will now be closed and no changes will be made to either documents."];
	} catch (errorCode) {
		closeAlert = ["File not found", "Invalid file location or file type \"" + (importFromPath[1] ? tDoc.path.replace(tDoc.documentFileName, "") : "") + importFromPath[0] + "\".\n\nPlease try again and don't forget that the path must include the file extension (.pdf)."];
	};

	if (!closeAlert && (!global.docFrom || global.docFrom.toString() !== "[object Doc]")) {
		closeAlert = ["An error occurred", "An unknown error occurred. Importing failed.\n\nPlease make sure the file you want to import is not currently open in any application."];
	}

	//if opening the doc failed, or it is not one of MPMB's Character Record Sheets (according)
  if (closeAlert) {
	app.alert({
		cTitle: closeAlert[0],
		cMsg: closeAlert[1]
	});
  } else if (global.docFrom && global.docTo) { //we are good to go and import stuff!
	try {
		// Update the progress bar and stop the calculations
		thermoTxt = thermoM("Importing from '" + global.docFrom.documentFileName + "'...");
		thermoM(0.25);
		calcStop(true);

		// First we need to reset the prototypes to the current sheet because Acrobat will use the ones from the latest sheet that was opened
		global.docTo.setPrototypes();
		var FromVersion = parseFloat(global.docFrom.info.SheetVersion);
		if (isNaN(FromVersion)) FromVersion = parseFloat(global.docFrom.info.SheetVersion.replace(/.*?(\d.*)/, "$1"));
		var passBetaRestriction = FromVersion == 13 && global.docFrom.info.SheetVersionType && (/beta1(4|5|6|7|8)/i).test(global.docFrom.info.SheetVersionType);
		if (!passBetaRestriction && global.docFrom.info.SheetVersionType && (/beta/i).test(global.docFrom.info.SheetVersionType) && global.docFrom.semVers && global.docTo.semVers != global.docFrom.semVers) { // say that importing from an (other) beta version is not supported
			app.alert({
				cTitle : "Unable to import from beta version",
				cMsg : "You are trying to import from a beta version of MPMB's Character Record Sheet (" + global.docFrom.semVers + "), which is not supported. The version of the sheet you are importing to is " + global.docTo.semVers + ". You can only import from a beta version if both versions are identical.\n\nThe importing process will now be canceled."
			});
			closeAlert = true;
			throw "user stop";
		} else if (FromVersion < 12.999) { // give a warning about importing from a version that had all materials included automatically
			var askUserIsSure = {
				cTitle : "Continue with import?",
				cMsg : "You are about to import from a sheet with version " + FromVersion + ". Unlike the sheet you are importing to, v" + FromVersion + " of the sheet came with all published source materials included, such as the Player's Handbook, Dungeon Master's Guide, etc. From sheet v12.999 onwards, it only includes the SRD material by default.\n\nIf the same resources weren't added to the current sheet as are used in the old sheet, you will see that some things don't fill out automatically, such as subclass features, feats, racial traits, and background features.\n\nPlease make sure that you have the necessary resources available in the current sheet! See the \"Add Extra Materials\" bookmark for more information on what is already added and how to add the required resources." + (patreonVersion ? "\n\nIf you got this sheet from MPMB's Patreon, you are probably fine to proceed!" : "") + "\n\nAre you sure you want to continue importing?",
				nIcon : 2, //Status
				nType : 2 //Yes, No
			};
			if (app.alert(askUserIsSure) !== 4) {
				closeAlert = true;
				throw "user stop";
			};
		};

		IsNotImport = "no progress bar";
		ignorePrereqs = true;
		ResetAll(true, true); //first reset the current sheet to its initial state, but without the extra templates generated
		Value("Opening Remember", "Yes");
		IsNotImport = false;

		// Make sure no pop-up comes up with welcome text
		if (global.docFrom.getField("Opening Remember")) global.docFrom.Value("Opening Remember", "Yes");

		var fromSheetTypePF = global.docFrom.info.SheetType ? (/printer friendly/i).test(global.docFrom.info.SheetType) : false;
		var fromSheetTypeLR = global.docFrom.info.SheetType ? (/letter/i).test(global.docFrom.info.SheetType) : (global.docFrom.info.Title ? (/letter/i).test(global.docFrom.info.Title) : false);
		var bothPF = typePF && fromSheetTypePF;
		var bothCF = !typePF && !fromSheetTypePF;
		var sameType = bothPF || (bothCF && fromSheetTypeLR === typeLR);

		// Make sure to remove the flattened state from the sheet to import from
		if (FromVersion < 13) {
			if (global.docFrom.getField("MakeMobileReady Remember") && global.docFrom.getField("MakeMobileReady Remember").value !== "") global.docFrom.MakeMobileReady(false);
		} else {
			global.docFrom.MakeMobileReady(false);
		}

		//copy any custom script and run it
		var filesScriptFrom = global.docFrom.getField("User_Imported_Files.Stringified") && global.docFrom.getField("User_Imported_Files.Stringified").value !== "({})" ? eval(global.docFrom.getField("User_Imported_Files.Stringified").value) : false;
		var filesScriptTo = eval(global.docTo.getField("User_Imported_Files.Stringified").value);

		if (filesScriptFrom) {
			// add the old to the new, preferring the new if both have the same entries
			var filesScriptToNms = [];
			for (var toScr in filesScriptTo) filesScriptToNms.push(toScr.replace(/\d+\/\d+\/\d+ - /, ""));
			for (var fromScr in filesScriptFrom) {
				var fromScrNm = fromScr.replace(/\d+\/\d+\/\d+ - /, "");
				if (filesScriptToNms.indexOf(fromScrNm) == -1) filesScriptTo[fromScr] = filesScriptFrom[fromScr];
			};
			global.docTo.getField("User_Imported_Files.Stringified").value = filesScriptTo.toSource();
			GetStringifieds();
		}
		if (ImportField("User Script") || filesScriptFrom) {
			InitiateLists();
			RunUserScript(true);
			amendPsionicsToSpellsList();
		};
		//set the excl./incl. sources
		if (ImportField("CurrentSources.Stringified")) {
			if (!CurrentSources.globalExcl) CurrentSources.globalExcl = [];
			//set any UA sources that weren't in the old sheet to excluded, if any UA source was set to be excluded
			for (var s = 0; s < CurrentSources.globalExcl.length; s++) {
				var theSrc = CurrentSources.globalExcl[s];
				if (!SourceList[theSrc]) {
					CurrentSources.globalExcl.splice(s, 1);
				} else if ((/Unearthed Arcana/i).test(SourceList[theSrc].group)) {
					for (var src in SourceList) {
						if ((/Unearthed Arcana/i).test(SourceList[src].group) && !global.docFrom.SourceList[src]) {
							CurrentSources.globalExcl.push(src);
						};
					};
					break;
				};
			};
			//set the DMG weapons to being excluded, if importing from sheet version 12.93 or earlier
			if (FromVersion < 12.94) {
				if (!CurrentSources.ammoExcl) CurrentSources.ammoExcl = [];
				for (var amm in AmmoList) {
					if (AmmoList[amm].source && AmmoList[amm].source.toSource().indexOf('"D"') !== -1) CurrentSources.ammoExcl.push(amm);
				};
				if (!CurrentSources.weapExcl) CurrentSources.weapExcl = [];
				for (var wea in WeaponsList) {
					if (WeaponsList[wea].list === "firearm" && WeaponsList[wea].source && WeaponsList[wea].source.toSource().indexOf('"D"') !== -1) CurrentSources.weapExcl.push(wea);
				};
			}
			SetStringifieds("sources");
		};
		//now update the dropdowns and spell menus with these new settings (without unicode if that was set)
		ImportField("UseUnicode")
		setUnicodeUse(What("UseUnicode") != "", true); // also sets the dropdowns
		setSpellVariables(true);

		//reset conditions
		if (!fromSheetTypePF && global.docFrom.ConditionSet) {
			var conResets = [];
			var doCondi = false;
			for (var c = 1; c <= 14; c++) {
				if (c <= 6) {
					conResets.push("Extra.Exhaustion Level " + c);
					if (!doCondi && global.docFrom.getField("Extra.Exhaustion Level " + c).value !== global.docFrom.getField("Extra.Exhaustion Level " + c).defaultValue) doCondi = true;
				}
				conResets.push("Extra.Condition " + c);
				if (!doCondi && global.docFrom.getField("Extra.Condition " + c).value !== global.docFrom.getField("Extra.Condition " + c).defaultValue) doCondi = true;
			};
			if (doCondi) {
				global.docFrom.resetForm(conResets);
				global.docFrom.ConditionSet();
			}
		}

		//set the colours
		if (bothCF) {
			if (ImportField("Color.Theme")) ApplyColorScheme();
			if (ImportField("Color.DragonHeads")) ApplyDragonColorScheme();
			if (ImportField("Color.HPDragon")) ApplyHPDragonColorScheme();
			if (ImportField("Color.DC")) ApplyDCColorScheme();
		};

		//set the highlighting
		if (ImportField("Highlighting")) {
			global.docTo.getField("Highlighting").fillColor = global.docFrom.getField("Highlighting").fillColor;
			app.runtimeHighlight = eval(What("Highlighting"));
			app.runtimeHighlightColor = global.docTo.getField("Highlighting").fillColor;
		};

		//set some remember fields that might impact new page generation
		if (ImportField("Unit System") && typePF) Value("Display.Weighttxt.LbKg", What("Unit System") === "imperial" ? "LB" : "KG");
		ImportField("Decimal Separator"); ImportField("DateFormat_Remember");

		//set the text options
		if (FromVersion < 13) {
			if (global.docFrom.getField("WhiteoutRemember")) ToggleWhiteout(eval(global.docFrom.What("WhiteoutRemember")));
			var FontSize_Remember_field = global.docFrom.getField("FontSize Remember") ? global.docFrom.getField("FontSize Remember").value : undefined;
			if ((bothPF || bothCF || FontSize_Remember_field === 0) && FontSize_Remember_field != undefined) ToggleTextSize(FontSize_Remember_field);
			LayerVisibilityOptions(false, global.docFrom.getField("Extra.Layers Remember") ? global.docFrom.getField("Extra.Layers Remember").value : undefined);
			ToggleBlueText(global.docFrom.getField("Extra.Layers Remember") ? global.docFrom.getField("Extra.Layers Remember").value === "Yes" : false);
		} else {
			ToggleWhiteout(!!global.docFrom.CurrentVars.whiteout);
			ToggleTextSize(global.docFrom.CurrentVars.fontsize);
			LayerVisibilityOptions(false, global.docFrom.CurrentVars.vislayers);
			ToggleBlueText(!!global.docFrom.CurrentVars.bluetxt);
		}
		SetStringifieds("vars");

		if (bothPF && ImportField("BoxesLinesRemember")) ShowCalcBoxesLines(What("BoxesLinesRemember"));
		if ((bothPF || bothCF) && global.docFrom.getField("Player Name").textFont !== global.docTo.getField("Player Name").textFont) ChangeFont(global.docFrom.getField("Player Name").textFont);

		//set the league remember toggle
		if (ImportField("League Remember")) {
			if (FromVersion < 12.99) {
				if (What("League Remember") === "On") {
					ToggleAdventureLeague({
						dci : true,
						factionrank : true,
						renown : true,
						actions : true,
						asterisks : true
					});
				} else {
					global.docTo.resetForm(["League Remember"]);
				};
			} else {
				try {
					var theAdvL = eval(What("League Remember"));
					ToggleAdventureLeague({
						dci : theAdvL.dci,
						factionrank : theAdvL.factionrank,
						renown : theAdvL.renown,
						actions : theAdvL.actions,
						asterisks : theAdvL.asterisks
					});
				} catch (e) {
					global.docTo.resetForm(["League Remember"]);
				};
			};
		};

		//set the D&D logos visiblity
		if (global.docFrom.getField("Image.DnDLogo.long") && global.docFrom.getField("Image.DnDLogo.long").display !== global.docTo.getField("Image.DnDLogo.long").display) global.docTo.getField("Image.DnDLogo").display = global.docFrom.getField("Image.DnDLogo.long").display;

		//set the spell slots visiblity
		if (ImportField("SpellSlotsRemember")) {
			SetSpellSlotsVisibility();
			if (What("SpellSlotsRemember") === "[false,false]") {
				SpellPointsLimFea("Add");
				Show("Image.SpellPoints");
				Show("SpellSlots.Checkboxes.SpellPoints");
			}
		}

		//set the order of the skills
		if (global.docFrom.getField("Text.SkillsNames")) MakeSkillsMenu_SkillsOptions(["go", global.docFrom.Who("Text.SkillsNames")]);

		//set the visiblity of Honor/Sanity
		if (ImportField("HoSRememberState")) ShowHonorSanity();

		//set the location columns in the equipment sections
		if (ImportField("Gear Location Remember")) {
			var defState = global.docTo.getField("Gear Location Remember").defaultValue.split(",");
			var newState = What("Gear Location Remember").split(",");
			if (defState[0] !== newState[0]) HideInvLocationColumn("Adventuring Gear ", newState[0] == true);
			if (defState[1] !== newState[1]) HideInvLocationColumn("Extra.Gear ", newState[1] == true);
		}
		//set the magic item row in the equipment sections
		if (ImportField("Adventuring Gear Remember")) ShowAttunedMagicalItems();
		//set the carrying capacity type
		ImportField("Weight Carrying Capacity", {doVisiblity: true}, "Weight Carrying Capacity.Field"); ImportField("Weight Heavily Encumbered", {doVisiblity: true});
		//set the weight remember fields
		if (FromVersion < 13) {
			global.docTo.CurrentVars.weight = [];
			var weightTypes = {
				cArm : "Weight Remember Armor",
				cShi : "Weight Remember Shield",
				cWea : "Weight Remember Weapons",
				cAmL : "Weight Remember Ammo Left",
				cAmR : "Weight Remember Ammo Right",
				cCoi : "Weight Remember Coins",
				cP2L : "Weight Remember Page2 Left",
				cP2M : "Weight Remember Page2 Middle",
				cP2R : "Weight Remember Page2 Right",
				cP3L : "Weight Remember Page3 Left",
				cP3R : "Weight Remember Page3 Right",
				cMaI : "Weight Remember Magic Items"
			}
			for (var weightType in weightTypes) {
				var aWeightFld = global.docFrom.getField(weightTypes[weightType]);
				if (aWeightFld && aWeightFld.value !== "No") global.docTo.CurrentVars.weight.push(weightType);
			}
			global.docTo.SetStringifieds("vars");
		} else {
			if (global.docFrom.CurrentVars.weight) {
				global.docTo.CurrentVars.weight = global.docFrom.CurrentVars.weight;
				global.docTo.SetStringifieds("vars");
			}
		}

		//get the page layout of the sheet and copy it
		var pagesLayout = {};
		var onlySpawnsFrom = FromVersion >= 12.995;
		if (global.docFrom.BookMarkList) { //if no bookmarklist exists where we are importing from, don't do anything
			for (var templ in TemplateDep) {
				if (templ === "PRsheet" && (!fromSheetTypePF || !typePF)) continue;
				var onlySpawnsFromT = onlySpawnsFrom || templ.substring(0, 2) === "SS";
				//see if the template exists in the docFrom
				var dFfldT = onlySpawnsFrom ? global.docFrom.isTemplVis(templ) : global.docFrom.BookMarkList[templ] ? global.docFrom.getField(global.docFrom.BookMarkList[templ]) : false;
				if (dFfldT) pagesLayout[templ] = onlySpawnsFrom ? true : dFfldT.page !== -1;
				var dFfldTE = global.docFrom.getField("Template.extras." + templ); //see if any extra versions have been added
				if (dFfldTE) {
					pagesLayout[templ + "Extras"] = dFfldTE.value.split(",").length - (onlySpawnsFromT || !pagesLayout[templ] ? 1 : 0);
					if (pagesLayout[templ + "Extras"]) {
						pagesLayout[templ + "ExtraNmFrom"] = dFfldTE.value.split(",").splice(onlySpawnsFromT || !pagesLayout[templ] ? 1 : 0);
					};
				};
			};
			//now replicate that layout
			for (var templ in TemplateDep) {
				if (pagesLayout[templ] !== undefined && global.docTo.getField(BookMarkList[templ])) {
					var templAte = pagesLayout[templ];
					var tempExtr = pagesLayout[templ + "Extras"];
					var templToVis = global.docTo.isTemplVis(templ);
					if (templToVis && !templAte && !tempExtr) { // remove any visible pages that are not visible in the docFrom
						DoTemplate(templ, "Remove", false, true);
					} else if (templAte && !templToVis && TemplatesWithExtras.indexOf(templ) === -1) { //add the non-duplicatable templates
						DoTemplate(templ);
					} else if (tempExtr) { // add templates with dependencies
						if (sameType || (templ !== "SSmore" && (templ !== "SSfront" || !pagesLayout.SSmoreExtras))) {
							for (var tE = 0; tE < tempExtr; tE++) DoTemplate(templ, "Add");
						};
						pagesLayout[templ + "ExtraNmTo"] = What("Template.extras." + templ).split(",").splice(1);
					};
				};
			};
		};

	//do the fields for the main automations
		//add the weapons (before the rest so weapons added by any new automation are still added)
		for (var i = 1; i <= FieldNumbers.attacks; i++) {
			if (ImportField("Attack." + i + ".Weapon Selection", {notTooltip: true})) ImportField("Attack." + i + ".Description", {notTooltip: true});
		}
		var weaNrFrom = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.attacks ? global.docFrom.FieldNumbers.attacks : 5;
		if (weaNrFrom > FieldNumbers.attacks) {
			for (var i = FieldNumbers.attacks + 1; i <= weaNrFrom; i++) {
				var weaFldFrom = global.docFrom.getField("Attack." + i + ".Weapons Selection");
				if (weaFldFrom && weaFldFrom.value) AddWeapon(weaFldFrom.value);
			}
		}
		var weaBTflds = global.docTo.getField("BlueText.Attack").getArray();
		for (var i = 0; i < weaBTflds.length; i++) {
			if (weaBTflds[i].name.indexOf("Modifiers Title") === -1) ImportField(weaBTflds[i].name, {notTooltip: true, notSubmitName: true});
		}
		//the ammo
		ImportField("AmmoLeftDisplay.Amount", {notTooltip: true}); ImportField("AmmoLeftDisplay.Name", {notTooltip: true}); ImportField("AmmoLeftDisplay.Weight", {notTooltip: true});
		ImportField("AmmoRightDisplay.Amount", {notTooltip: true}); ImportField("AmmoRightDisplay.Name", {notTooltip: true}); ImportField("AmmoRightDisplay.Weight", {notTooltip: true});

		//set the more proficiencies overflow field before the automation
		ImportField("MoreProficiencies");

		//set the feature choices
		if (ImportField("CurrentFeatureChoices.Stringified")) CurrentFeatureChoices = eval(What("CurrentFeatureChoices.Stringified"));

		//set the level and xp
		ImportField("Character Level", {notTooltip: true}); ImportField("Total Experience", {notTooltip: true}); ImportField("Add Experience", {notTooltip: true});

		//set the race
		ImportField("Race", {notTooltip: true, notSubmitName: true});
		if (ImportField("Race Remember")) ApplyRace(What("Race Remember"));

		//set the values of the ability score dialog (after race, so scores manually set for race are not undone)
		if (FromVersion < 13) {
			initiateCurrentStats();
			var equalAbiCol = [0, 1, 4, 7, 5, 2];
			for (var a = 0; a < abiScoreFlds.length; a++) {
				var abiR = global.docFrom.getField(abiScoreFlds[a] + " Remember");
				if (!abiR) continue;
				var abiScAr = abiR.value.split(",");
				for (var i = 0; i < abiScAr.length; i++) {
					var abiSc = Number(abiScAr[i]);
					if (isNaN(abiSc) || !abiScAr[i] || (i == 0 && abiScAr == 8)) continue;
					CurrentStats.cols[equalAbiCol[i]].scores[a] = abiSc;
				}
			}
			SetStringifieds("stats");
		} else if (ImportField("CurrentStats.Stringified")) {
			CurrentStats = eval(What("CurrentStats.Stringified"));
		}

		//set the background
		ImportField("Background", {notTooltip: true, notSubmitName: true}); ImportField("Background Extra", {notTooltip: true});

		//set the class and class features
		if (FromVersion < 13) ImportExtraChoices();
		ImportField("Class and Levels", {notTooltip: true});

		//set the feats
		var feaNrFrom = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.feats ? global.docFrom.FieldNumbers.feats : FieldNumbers.feats;
		for (var i = 1; i <= feaNrFrom; i++) {
			if (i <= FieldNumbers.feats) {
				var impFeat = ImportField("Feat Name " + i, {notTooltip: true});
				if (impFeat && !CurrentFeats.known[i - 1]) {
					ImportField("Feat Note " + i);
					ImportField("Feat Description " + i);
				}
			}
			if (i > FieldNumbers.feats) {
				var feaFldFrom = global.docFrom.getField("Feat Name " + i);
				if (!feaFldFrom || !feaFldFrom.value) continue;
				for (var feaNr = 1; feaNr <= FieldNumbers.feats; feaNr++) {
					if (What("Feat Name " + feaNr) === "") {
						Value("Feat Name " + feaNr, feaFldFrom.value);
						if (!CurrentFeats.known[feaNr - 1]) {
							Value("Feat Note " + feaNr, global.docFrom.What("Feat Note " + i));
							Value("Feat Description " + feaNr, global.docFrom.What("Feat Description " + i));
						}
						break;
					}
				}
			}
		};

		// a function to import the magic items
		var importMagicItems = function () {
			var nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.magicitems ? global.docFrom.FieldNumbers.magicitems : FieldNumbers.magicitems;
			for (var i = 1; i <= nmbrFlds; i++) {
				var fromFld = global.docFrom.getField("Extra.Magic Item " + i);
				if (!fromFld || !fromFld.value) continue;
				AddMagicItem(
					fromFld.value,
					global.docFrom.getField("Extra.Magic Item Attuned " + i).isBoxChecked(0),
					global.docFrom.What("Extra.Magic Item Description " + i),
					global.docFrom.What("Extra.Magic Item Weight " + i),
					false,
					FromVersion < 13 ? undefined : global.docFrom.How("Extra.Magic Item Attuned " + i) == ""
				);
			}
		}

		// if from version >= 13, do magic items before setting the rest of the fields
		if (FromVersion >= 13) importMagicItems();

		//set the ability scores and associated fields
		var abiScoreFlds = ["Str", "Dex", "Con", "Int", "Wis", "Cha", "HoS"];
		for (var a = 0; a < abiScoreFlds.length; a++) {
			var abiS = abiScoreFlds[a];
			ImportField(abiS);
			Value(abiS + " Mod", Math.round((What(abiS) - 10.5) * 0.5));
			ImportField(abiS + " ST Prof", {notTooltip: true});
			ImportField(abiS + " ST Bonus", {notTooltip: true, notSubmitName: true});
			ImportField(abiS + " ST Adv", {doReadOnly: true});
			ImportField(abiS + " ST Dis", {doReadOnly: true});
		};
		ImportField("All ST Bonus", {notTooltip: true, notSubmitName: true});

		//set the ability save DC
		ImportField("Spell DC 1 Mod", {notTooltip: true}); ImportField("Spell DC 1 Bonus", {notTooltip: true, notSubmitName: true});
		ImportField("Spell DC 2 Bonus", {notTooltip: true, notSubmitName: true});
		if (ImportField("Spell DC 2 Mod", {notTooltip: true, doVisiblity: true})); Toggle2ndAbilityDC(global.docTo.getField("Spell DC 2 Mod").display === display.visible ? "show" : "hide");

		//set the prof bonus and inspiration
		ImportField("Proficiency Bonus Dice", {notTooltip: true}); ImportField("Proficiency Bonus Modifier", {notTooltip: true, notSubmitName: true}); ImportField("Inspiration", {notTooltip: true});

		//set the skills and associated fields
		var CurrentProfsFrom = global.docFrom.getField("CurrentProfs.Stringified") ? eval(global.docFrom.getField("CurrentProfs.Stringified").value) : false;
		var isAltSkillOrder = Who('Text.SkillsNames') === 'alphabeta' ? false : true;
		ImportField("Jack of All Trades", {notTooltip: true}); ImportField("Remarkable Athlete", {notTooltip: true}); ImportField("All Skills Bonus", {notTooltip: true, notSubmitName: true}); ImportField("Passive Perception Bonus", {notTooltip: true, notSubmitName: true}); ImportField("Too Text", {notTooltip: true, notSubmitName: true});
		for (var i = 0; i < SkillsList.abbreviations.length; i++) {
			var aSkill = SkillsList.abbreviations[i];
			ImportField(aSkill + " Bonus", {notTooltip: true, notSubmitName: true}); ImportField(aSkill + " Prof", {notTooltip: true}); ImportField(aSkill + " Exp", {notTooltip: true}); ImportField(aSkill + " Adv", {doReadOnly: true}); ImportField(aSkill + " Dis", {doReadOnly: true});
			if (!(/^(Init|Too)$/).test(aSkill) && FromVersion < 13 && global.docTo.getField(aSkill + " Prof").isBoxChecked(0)) {
				// set the "manualClick" entries in the CurrentProfs
				var useSkill = isAltSkillOrder ? SkillsList.abbreviations[SkillsList.abbreviationsByAS.indexOf(aSkill)] : aSkill;
				if (!CurrentProfs.skill[useSkill] || !CurrentProfs.skill[useSkill].length) {
					CurrentProfs.skill[useSkill] = ["manualClick"];
				}
				if (global.docTo.getField(aSkill + " Exp").isBoxChecked(0)) {
					if (!CurrentProfs.skill[useSkill + "_Exp"]) {
						CurrentProfs.skill[useSkill + "_Exp"] = { manualClick : "full" };
					} else {
						for (var aSkillExp in CurrentProfs.skill[useSkill + "_Exp"]) {
							var theSkillExp = CurrentProfs.skill[useSkill + "_Exp"][aSkillExp];
							if ((/only|full/).test(theSkillExp)) break;
						}
						// only 'increment', so add a manualClick to the non-expertise proficiency
						CurrentProfs.skill[useSkill].push("manualClick");
					}
				}
			}
		};
		// copy the "manualClick" entries from the imported CurrentProfs.skill
		if (FromVersion >= 13 && CurrentProfsFrom && CurrentProfsFrom.skill) {
			for (var anEntry in CurrentProfsFrom.skill) {
				if (anEntry == "descrTxt") continue;
				if (anEntry.indexOf("_Exp") !== -1) {
					if (CurrentProfsFrom.skill[anEntry]["manualClick"]) {
						if (!CurrentProfs.skill[anEntry]) CurrentProfs.skill[anEntry] = {};
						CurrentProfs.skill[anEntry]["manualClick"] = "full";
					}
				} else if (CurrentProfsFrom.skill[anEntry].indexOf("manualClick") !== -1) {
					if (!CurrentProfs.skill[anEntry]) CurrentProfs.skill[anEntry] = [];
					if (CurrentProfs.skill[anEntry].indexOf("manualClick") == -1) CurrentProfs.skill[anEntry].push("manualClick");
				}
			}
		}

		//set the description fields
		ImportField("PC Name"); ImportField("Player Name"); ImportField("Size Category", {notTooltip: true}); ImportField("Height", {notTooltip: true}); ImportField("Weight", {notTooltip: true}); ImportField("Sex"); ImportField("Hair colour", {notTooltip: true}); ImportField("Eyes colour", {notTooltip: true}); ImportField("Skin colour", {notTooltip: true}); ImportField("Age", {notTooltip: true}); ImportField("Alignment", {notTooltip: true}); ImportField("Faith/Deity", {notTooltip: true}); ImportField("Speed", {notTooltip: true}); ImportField("Speed encumbered", {notTooltip: true});

		//add the content from the saving throw and vision field, but not if importing from an older version
		if (FromVersion >= 12.998) {
			//First make sure the "Immune to" and "Adv. on saves vs." match with the import
			var importSaveTxt = function(type) {
				var preTxt = type === "adv_vs" ? "Adv. on saves vs." : type === "immune" ? "Immune to" : false;
				var fld = "Saving Throw advantages / disadvantages";
				var svFld = global.docFrom.getField(fld).value;
				if (!preTxt || !svFld) return;
				var fromArr = [], toArr = [];
				if (CurrentProfsFrom.savetxt[type]) {
					for (var testAtt in CurrentProfsFrom.savetxt[type]) {
						if (type === "immune" || !CurrentProfsFrom.savetxt.immune[testAtt]) {
							fromArr.push(CurrentProfsFrom.savetxt[type][testAtt].name);
						};
					};
				};
				if (CurrentProfs.savetxt[type]) {
					for (var testAtt in CurrentProfs.savetxt[type]) {
						if (type === "immune" || !CurrentProfs.savetxt.immune[testAtt]) {
							toArr.push(CurrentProfs.savetxt[type][testAtt].name);
						};
					};
				};
				var newArr = [].concat(toArr);
				var svMatch = svFld.match(RegExp(preTxt.RegEscape() + ".*?(; |$)", "i"));
				if (!svMatch) return;
				var svOpt = svMatch[0].replace(/; ?$/, "").replace(RegExp(preTxt.RegEscape() + " *?", "i"), "").split(/, and | and |, |; /);
				for (var i = 0; i < svOpt.length; i++) {
					var addObj = svOpt[i].replace(/^and |^ +/i, "");
					if (addObj && !(RegExp("\\b" + addObj + "\\b", "i")).test(toArr)) newArr.push(addObj);
				};
				newArr.sort();
				var toStr = formatLineList(preTxt, toArr);
				var newStr = formatLineList(preTxt, newArr);
				if (toStr !== newStr) {
					ReplaceString(fld, newStr, "; ", toStr, false);
					global.docFrom.getField(fld).value = global.docFrom.getField(fld).value.replace(svMatch[0], "");
				};
			};
			importSaveTxt("adv_vs");
			importSaveTxt("immune");
			//Then get the entries in these fields and add them one by one
			var addConsolidatedEntries = function(fName) {
				var fFld = global.docFrom.getField(fName);
				if (!fFld) return;
				var fArrF = fFld.value.split(/; ?/);
				var fArrT = global.docTo.getField(fName).value.split(/; ?/);
				for (var fF = 0; fF < fArrT.length; fF++) fArrT[fF] = clean(fArrT[fF].toLowerCase(), " ");
				for (var fF = 0; fF < fArrF.length; fF++) {
					var fVal = clean(fArrF[fF], " ");
					if (fArrT.indexOf(fVal.toLowerCase()) === -1) AddString(fName, fVal, "; ");
				};
			};
			addConsolidatedEntries("Vision"); addConsolidatedEntries("Saving Throw advantages / disadvantages");
		};

		//add limited features that are not yet defined (all those without a tooltip)
		for (var i = 1; i < FieldNumbers.limfea; i++) {
			var limFeaFrom = global.docFrom.getField("Limited Feature " + i);
			if (!limFeaFrom || !limFeaFrom.value || limFeaFrom.userName) continue;
			var lFFusa = global.docFrom.getField("Limited Feature Max Usages " + i).value;
			var lFFrec = global.docFrom.getField("Limited Feature Recovery " + i).value;
			AddFeature(limFeaFrom.value, lFFusa, "", lFFrec);
		};

		//add the spell boxes
		for (var i = 1; i <= 9; i++) ImportField("SpellSlots.CheckboxesSet.lvl" + i, {notTooltip: true});

		//set the armour and weapon proficiencies
		ImportField("Proficiency Armor Other Description", {notTooltip: true});
		if (FromVersion < 13) {
			// manually set proficiency checkboxes
			var profFldsArray = [
				"Proficiency Armor Light",
				"Proficiency Armor Medium",
				"Proficiency Armor Heavy",
				"Proficiency Shields",
				"Proficiency Weapon Simple",
				"Proficiency Weapon Martial"
			];
			for (var i = 0; i < profFldsArray.length; i++) {
				var profFromFld = global.docFrom.getField(profFldsArray[i]);
				var profToFld = global.docTo.getField(profFldsArray[i]);
				if (!profFromFld || !profToFld) continue;
				var profFromChecked = profFromFld.isBoxChecked(0) === 1;
				var profToChecked = profToFld.isBoxChecked(0) === 1;
				if (profFromChecked !== profToChecked) {
					profToFld.checkThisBox(0, profFromChecked);
					setCheckboxProfsManual(profFldsArray[i]);
				}
			}
			// manual weapon additions
			var profsManualFromFnd = global.docFrom.CurrentWeapons.proficiencies["Manually added"];
			var profsManualFromXtr = global.docFrom.CurrentWeapons.manualproficiencies;
			var profsManualFrom = profsManualFromXtr ? profsManualFromXtr : [];
			if (profsManualFromFnd) {
				for (var i = 0; i < profsManualFromFnd.length; i++) {
					var profManualWea = WeaponsList[profsManualFromFnd[i]];
					if (profManualWea) profsManualFrom.push(profManualWea.name);
				}
			}
			if (profsManualFrom.length) {
				Value("Proficiency Weapon Other Description", [What("Proficiency Weapon Other Description")].concat(profsManualFrom).join(", "));
				setOtherWeaponProfsManual();
			}
		} else {
			// manually set proficiency checkboxes
			var profFromVar = global.docFrom.CurrentProfs;
			var profFldsArray = [
				['armour', 'light'],
				['armour', 'medium'],
				['armour', 'heavy'],
				['armour', 'shields'],
				['weapon', 'simple'],
				['weapon', 'martial']
			];
			for (var i = 0; i < profFldsArray.length; i++) {
				var profSort = profFldsArray[i][0];
				var profType = profFldsArray[i][1];
				var normalState = CurrentProfs[profSort][profType] ? true : false;
				if (profFromVar[profSort][profType+"_manual" + (normalState ? "off" : "on")]) {
					CurrentProfs[profSort][profType+"_manual" + (normalState ? "off" : "on")] = true;
					SetProf(profSort, undefined, profType, undefined, true);
				}
			};
			// manual weapon additions
			if (profFromVar.weapon.otherWea && profFromVar.weapon.otherWea["Manually added"]) {
				CurrentProfs.weapon.otherWea["Manually added"] = profFromVar.weapon.otherWea["Manually added"];
				SetProf("weapon", undefined, "other");
			}
		}

		//a function to add the 'new' languages, tools, resistances, actions
		var addNotDefined = function(typeFlds, iterations) {
			var fromOldVersion = FromVersion < 12.998;
			var functionAdd = function(typeAdd, input, replaceThis) {
				switch (typeAdd) {
					case "Language " :
					case "Tool " :
						AddLangTool(typeAdd, input, false, false, replaceThis, fromOldVersion);
						break;
					case "Resistance Damage Type " :
						AddResistance(input, false, replaceThis, fromOldVersion);
						break;
					case "Action " :
					case "Bonus Action " :
					case "Reaction " :
						AddAction(typeAdd, input, false, replaceThis, fromOldVersion);
						break;
				};
			};
			for (var i = 1; i <= iterations; i++) {
				var fromFld = global.docFrom.getField(typeFlds + i);
				if (!fromFld || !fromFld.value || fromFld.value === fromFld.defaultValue) continue;
				if (!fromOldVersion) {
					if (fromFld.value !== fromFld.submitName) {
						functionAdd(typeFlds, fromFld.value, fromFld.submitName);
					};
				} else { // can't use the submitName as it wasn't used before v12.998
					var fromFldUNit = fromFld.userName && (/.*?\"(.*?)\".*/).test(fromFld.userName) ? fromFld.userName.replace(/.*?\"(.*?)\".*/, "$1") : (fromFld.userName ? fromFld.userName.replace(/.*?resistance to (.*?) was gained from.*/, "$1") : "");
					if (!fromFld.userName || fromFldUNit.toLowerCase() !== fromFld.value.toLowerCase()) {
						functionAdd(typeFlds, fromFld.value, fromFldUNit);
					};
				};
			};
		};

		//languages and tools
		var nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.langstools ? global.docFrom.FieldNumbers.langstools : FieldNumbers.langstools;
		addNotDefined("Language ", nmbrFlds); addNotDefined("Tool ", nmbrFlds);
		nmbrFlds = global.docFrom.FieldNumbers.actions ? global.docFrom.FieldNumbers.actions : FieldNumbers.actions;
		addNotDefined("Reaction ", nmbrFlds); addNotDefined("Bonus Action ", nmbrFlds);
		nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.trueactions ? global.docFrom.FieldNumbers.trueactions : FieldNumbers.trueactions;
		addNotDefined("Action ", nmbrFlds);
		addNotDefined("Resistance Damage Type ", 6);

		//armor
		ImportField("AC Armor Description", {notTooltip: true}); ImportField("AC Armor Bonus", {notTooltip: true}); ImportField("AC Armor Weight", {notTooltip: true}); ImportField("AC during Rest");
		ImportField("AC Shield Bonus Description", {notTooltip: true}); ImportField("AC Shield Bonus", {notTooltip: true}); ImportField("AC Shield Weight", {notTooltip: true});
		ImportField("Medium Armor", {notTooltip: true}); ImportField("Heavy Armor", {notTooltip: true});
		if (ImportField("AC Stealth Disadvantage", {notTooltip: true})) ConditionSet();

		//hit points, hit die
		ImportField("HP Max", {notTooltip: true}); ImportField("HP Max Current", {notTooltip: true}); ImportField("HP Temp", {notTooltip: true}); ImportField("HP Current", {notTooltip: true});
		ImportField("HD1 Level"); ImportField("HD1 Die"); ImportField("HD2 Level"); ImportField("HD2 Die"); ImportField("HD3 Level"); ImportField("HD3 Die"); SetHPTooltip(false, false);

		//do the second page
		ImportField("Personality Trait"); ImportField("Ideal"); ImportField("Bond"); ImportField("Flaw");
		ImportField("Background Feature", {notTooltip: true, notSubmitName: true}); ImportField("Background Feature Description", {notTooltip: true, compareNoSpaces: true});
		ImportField("Racial Traits", {notTooltip: true, compareNoSpaces: true});

		//do the adventure gear sections
		ImportField("Platinum Pieces"); ImportField("Gold Pieces"); ImportField("Electrum Pieces"); ImportField("Silver Pieces"); ImportField("Copper Pieces");
		ImportField("Valuables1"); ImportField("Valuables2"); ImportField("Valuables3"); ImportField("Valuables4");
		ImportField("Carrying Capacity Multiplier", {notTooltip: true});

		nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.gear ? global.docFrom.FieldNumbers.gear : FieldNumbers.gear;
		for (var i = 1; i <= nmbrFlds; i++) {
			var fromFld = global.docFrom.getField("Adventuring Gear Row " + i);
			if (i <= FieldNumbers.gear) {
				ImportField("Adventuring Gear Row " + i); ImportField("Adventuring Gear Location.Row " + i); ImportField("Adventuring Gear Amount " + i); ImportField("Adventuring Gear Weight " + i);
			} else if (fromFld && fromFld.value) {
				AddToInv("gear", "ronly", fromFld.value, global.docFrom.getField("Adventuring Gear Amount " + i).value, global.docFrom.getField("Adventuring Gear Weight " + i).value, global.docFrom.getField("Adventuring Gear Location.Row " + i).value, false, false, false, true);
			}
		}

	//the third page
		// if from version < 13, do magic items after setting the rest of the fields so their automation is run afterwards
		if (FromVersion < 13) importMagicItems();

		ImportField("Extra.Other Holdings");

		//extra equipment
		nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.extragear ? global.docFrom.FieldNumbers.extragear : FieldNumbers.extragear;
		for (var i = 1; i <= nmbrFlds; i++) {
			var fromFld = global.docFrom.getField("Extra.Gear Row " + i);
			if (i <= FieldNumbers.extragear) {
				ImportField("Extra.Gear Row " + i); ImportField("Extra.Gear Location.Row " + i); ImportField("Extra.Gear Amount " + i); ImportField("Extra.Gear Weight " + i);
			} else if (fromFld && fromFld.value) {
				AddToInv("extra", "ronly", fromFld.value, global.docFrom.getField("Extra.Gear Amount " + i).value, global.docFrom.getField("Extra.Gear Weight " + i).value, global.docFrom.getField("Extra.Gear Location.Row " + i).value, false, false, false, true);
			}
		}


	//the background page
		//set the all the organisation/faction texts and other Adventure League fields
		if (ImportField("Background_Faction.Text")) SetFactionSymbol("Background_Faction.Text", What("Background_Faction.Text"), true);
		ImportField("Background_FactionRank.Text"); ImportField("Background_Renown.Text"); ImportField("DCI.Text");
		//set the rest of the background page
		ImportField("Background_History"); ImportField("Background_Appearance"); ImportField("Background_Enemies");
		if (bothPF) {
			ImportField("Background_Organisation.Left"); ImportField("Background_Organisation.Right");
		} else if (bothCF) {
			ImportField("Background_Organisation");
		} else if (typePF && !fromSheetTypePF) {
			ImportField("Background_Organisation.Left", false, "Background_Organisation");
		} else if (!typePF && fromSheetTypePF) {
			ImportField("Background_Organisation", false, "Background_Organisation.Left");
		}
		ImportField("Lifestyle", {cleanValue: true});

		//some hidden fields that we should do now
		ImportField("ChangesDialogSkip.Stringified"); ImportField("Print Remember"); ImportField("SubClass Remember"); ImportField("Wildshapes.Remember");


	//>> make a function to do all children of a parent field
		var doChildren = function(parentFld, fromPre, toPre, excludeRegEx, inclVisibility, actionsObj) {
			var parentA = global.docTo.getField(toPre + parentFld);
			if (!parentA) return;
			if (actionsObj) {
				actionsObj.notTooltip = true;
				actionsObj.doVisiblity = inclVisibility
			};
			parentA = parentA.getArray();
			for (var pA =  0; pA < parentA.length; pA++) {
				var pAnameTo = parentA[pA].name;
				if (excludeRegEx && (excludeRegEx).test(pAnameTo)) continue;
				var pAnameFrom = pAnameTo.replace(toPre, fromPre);
				ImportField(pAnameTo, actionsObj ? actionsObj : {notTooltip: true, doVisiblity: inclVisibility}, pAnameFrom);
			}
		}

	// do the companion pages
		//run through each one in the array
		var prefixA = pagesLayout && pagesLayout.AScompExtras ? [pagesLayout.AScompExtraNmFrom, pagesLayout.AScompExtraNmTo] : [[], []];
		for (var i = 0; i < prefixA[0].length; i++) {
			var prefixFrom = prefixA[0][i];
			var prefixTo = prefixA[1][i];

			//set the visibility of the different elements
			if (ImportField(prefixTo + "Companion.Layers.Remember", {notTooltip: true, notSubmitName: true}, prefixFrom + "Companion.Layers.Remember")) ShowCompanionLayer(prefixTo);
			doChildren("Whiteout.Cnote", prefixFrom, prefixTo, false, true);

			//set the race
			ImportField(prefixTo + "Comp.Race", {notTooltip: true, notSubmitName: true}, prefixFrom + "Comp.Race");

			//set companion ability scores and modifiers now, for coming automation might require it
			for (var a = 0; a < AbilityScores.abbreviations.length; a++) {
				var abiS = AbilityScores.abbreviations[a];
				ImportField(prefixTo+"Comp.Use.Ability."+abiS+".Score", {notTooltip: true, notSubmitName: true}, prefixFrom+"Comp.Use.Ability."+abiS+".Score");
				Value(prefixTo+"Comp.Use.Ability."+abiS+".Mod", Math.round((What(prefixTo+"Comp.Use.Ability."+abiS+".Score") - 10.5) * 0.5));
			}

			//set the type, if any
			var compTypeFrom = global.docFrom.getField(prefixFrom + "Companion.Remember");
			if (compTypeFrom && compTypeFrom.value) changeCompType(compTypeFrom.value, prefixTo);

			//Set some one-off fields
			ImportField(prefixTo + "Comp.Type", {notTooltip: true, notSubmitName: true}, prefixFrom + "Comp.Type");

			//do the description fields
			doChildren("Comp.Desc", prefixFrom, prefixTo);

			//do the bulk of the fields
			doChildren("Comp.Use", prefixFrom, prefixTo, /\.Score|\.Mod|Text|Calculated|Button|Init\.Dex|HD\.Con/i);

			//do the BlueText fields
			doChildren("BlueText.Comp.Use", prefixFrom, prefixTo);

			//do the equipment fields
			doChildren("Comp.eqp", prefixFrom, prefixTo, /Display|Image|Subtotal|Notes|Whiteout|Text/i);

			//do the notes fields
			doChildren("Cnote", prefixFrom, prefixTo);

			//if importing from Colourful to Colourful, do skills (from Printer Friendly to Printer Friendly is already included above)
			if (bothCF) {
				doChildren("Text.Comp.Use.Skills", prefixFrom, prefixTo, /Name/i);
			} else if (!fromSheetTypePF && typePF) {
				//if importing from Colourful to Printer Friendly, do skills and the extra equipment rows
				var skillsOrderFrom = SkillsList["abbreviations" + (Who("Text.SkillsNames") === "abilities" ? "ByAS" : "")].slice(0, -2);
				var skillsOrderTo = SkillsList.abbreviations.slice(0, -2);
				for (var sN = 0; sN < skillsOrderTo.length; sN++) {
					var skillFrom = global.docFrom.getField(prefixFrom + "Text.Comp.Use.Skills." + skillsOrderFrom[sN] + ".Prof");
					var skillToProf = prefixTo + "Comp.Use.Skills." + skillsOrderTo[sN] + ".Prof";
					var skillToExp = prefixTo + "Comp.Use.Skills." + skillsOrderTo[sN] + ".Exp";
					if (skillFrom && skillFrom.value) {
						Checkbox(skillToProf, skillFrom.value === "proficient" || skillFrom.value === "expertise");
						Checkbox(skillToExp, skillFrom.value === "expertise");
					}
				};

				//companion equipment secion is bigger on the Colourful than on the Printer Friendly
				nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.compgear ? global.docFrom.FieldNumbers.compgear : FieldNumbers.compgear;
				for (var i = FieldNumbers.compgear + 1; i <= nmbrFlds; i++) {
					var fromFld = global.docFrom.getField(prefixFrom + "Comp.eqp.Gear Row " + i);
					if (fromFld && fromFld.value) {
						AddToInv(prefixFrom + "Comp.", "l", fromFld.value, global.docFrom.getField(prefixFrom + "Comp.eqp.Gear Amount " + i).value, global.docFrom.getField(prefixFrom + "Comp.eqp.Gear Weight " + i).value, "", false, false, false, true);
					}
				}
			} else if (fromSheetTypePF && !typePF) {
				//if importing from Printer Friendly to Colourful, do skills
				var skillsOrderFrom = SkillsList.abbreviations.slice(0, -2);
				var skillsOrderTo = SkillsList["abbreviations" + (global.docFrom.getField("Text.SkillsNames") && global.docFrom.getField("Text.SkillsNames").userName === "abilities" ? "ByAS" : "")].slice(0, -2);
				for (var sN = 0; sN < skillsOrderTo.length; sN++) {
					var skillTo = prefixTo + "Text.Comp.Use.Skills." + skillsOrderFrom[sN] + ".Prof";
					var skillFromProf = global.docFrom.getField(prefixFrom + "Comp.Use.Skills." + skillsOrderTo[sN] + ".Prof");
					var skillFromExp = global.docFrom.getField(prefixFrom + "Comp.Use.Skills." + skillsOrderTo[sN] + ".Exp");
					if (skillFromProf && skillFromExp) {
						if (skillFromProf.isBoxChecked(0)) {
							Value(skillTo, skillFromExp.isBoxChecked(0) ? "expertise" : "proficient");
						} else {
							Value(skillTo, "nothing");
						}
					}
				};
			}
		}

	//do the notes pages
		prefixA = pagesLayout && pagesLayout.ASnotesExtras ? [pagesLayout.ASnotesExtraNmFrom, pagesLayout.ASnotesExtraNmTo] : [[], []];
		for (var i = 0; i < prefixA[0].length; i++) {
			var prefixFrom = prefixA[0][i];
			var prefixTo = prefixA[1][i];
			doChildren("Whiteout.Notes", prefixFrom, prefixTo, false, true);
			doChildren("Notes", prefixFrom, prefixTo);
		}

	//do the wildshape pages
		prefixA = pagesLayout && pagesLayout.WSfrontExtras ? [pagesLayout.WSfrontExtraNmFrom, pagesLayout.WSfrontExtraNmTo] : [[], []];
		for (var i = 0; i < prefixA[0].length; i++) {
			var prefixFrom = prefixA[0][i];
			var prefixTo = prefixA[1][i];
			doChildren("Wildshapes.Info", prefixFrom, prefixTo); //the info values
			doChildren("Wildshape.Race", prefixFrom, prefixTo);
		}

	//do the adventure logsheet pages
		prefixA = pagesLayout && pagesLayout.ALlogExtras ? [pagesLayout.ALlogExtraNmFrom, pagesLayout.ALlogExtraNmTo] : [[], []];
		var advLogRegChl = FromVersion < 12.994 ? /^(?!.*\d)|(?=.*(start|total|date)).*$/i : /^(?!.*\d)|(?=.*(start|total)).*$/i;
		for (var i = 0; i < prefixA[0].length; i++) {
			var prefixFrom = prefixA[0][i];
			var prefixTo = prefixA[1][i];
			if (i === 0) doChildren("AdvLog.1", prefixFrom, prefixTo, /^(?!.*start).*$/i); //the starting values
			if (FromVersion < 12.994) {
				for (var x = 1; x <= FieldNumbers.logs; x++) {
					var dateFldFr = global.docFrom.getField(prefixFrom + "AdvLog." + x + ".date");
					var dateFldTo = global.docTo.getField(prefixTo + "AdvLog." + x + ".date");
					if (!dateFldTo || !dateFldFr) continue;
					var theDateForm = global.docFrom.What("DateFormat_Remember") ? global.docFrom.What("DateFormat_Remember") : "d mmm yyyy";
					var theDateVal = util.scand(theDateForm, dateFldFr.value);
					if (theDateVal) dateFldTo.value = util.printd("yy-mm-dd", theDateVal);
				};
			};
			doChildren("AdvLog", prefixFrom, prefixTo, advLogRegChl);
		}

	//do the spell sheet pages
		//first update the CurrentSpells variable
		if (global.docFrom.CurrentSpells) {
			var classesArray = [];
			for (var aCast in CurrentSpells) {
				classesArray.push(aCast);
				if (!global.docFrom.CurrentSpells[aCast]) continue; //doesn't exist in the sheet importing from
				var spCastTo = CurrentSpells[aCast];
				var spCastFrom = global.docFrom.CurrentSpells[aCast];
				if (spCastFrom.selectCa) spCastTo.selectCa = spCastFrom.selectCa;
				if (spCastFrom.offsetCa) spCastTo.offsetCa = spCastFrom.offsetCa;
				if (spCastFrom.selectBo) spCastTo.selectBo = spCastFrom.selectBo;
				if (spCastFrom.offsetBo) spCastTo.offsetBo = spCastFrom.offsetBo;
				if (spCastFrom.extraBo) spCastTo.extraBo = spCastFrom.extraBo;
				if (spCastFrom.selectSp) spCastTo.selectSp = spCastFrom.selectSp;
				if (spCastFrom.offsetSp) spCastTo.offsetSp = spCastFrom.offsetSp;
				if (spCastFrom.selectSpSB) spCastTo.selectSpSB = spCastFrom.selectSpSB;
				if (spCastFrom.selectPrep) spCastTo.selectPrep = spCastFrom.selectPrep;
				if (spCastFrom.blueTxt) spCastTo.blueTxt = eval(spCastFrom.blueTxt.toSource());
				if (spCastTo.bonus) {
					for (var bKey in spCastTo.bonus) {
						if (!spCastFrom.bonus[bKey]) continue; //doesn't exist in the sheet importing from
						var spBonusFrom = spCastFrom.bonus[bKey];
						var spBonusTo = spCastTo.bonus[bKey];
						var spIsArrayFrom = isArray(spBonusFrom);
						var spIsArrayTo = isArray(spBonusTo);
						if (spIsArrayTo !== spIsArrayFrom) continue; //types don't match
						var loop = spIsArrayTo && spIsArrayFrom;
						var loopEnd = loop ? spBonusTo.length : 1;
						for (var i = 0; i < loopEnd; i++) {
							var spBonusiFrom = loop ? spBonusFrom[i] : spBonusFrom;
							var spBonusiTo = loop ? spBonusTo[i] : spBonusTo;
							if (spBonusiFrom.selection && !spBonusiTo.selection) spBonusiTo.selection = spBonusiFrom.selection;
						}
					}
				};
			};
			if (global.docFrom.CurrentCasters.incl || global.docFrom.CurrentCasters.excl) {
				CurrentCasters = eval(global.docFrom.CurrentCasters.toSource());
				for (var aCast in CurrentCasters) {
					for (var i = 0; i < CurrentCasters.incl.length; i++) {
						if (classesArray.indexOf(CurrentCasters.incl[i]) === -1) {
							CurrentCasters.incl.splice(i, 1);
							i -= 1;
						}
					}
					for (var i = 0; i < CurrentCasters.excl.length; i++) {
						if (classesArray.indexOf(CurrentCasters.excl[i]) === -1) {
							CurrentCasters.excl.splice(i, 1);
							i -= 1;
						}
					}
				}
			}
			SetStringifieds();

			//now do the spell rows, but only if the sheet type is the same or only the first page was visible
			if (pagesLayout && pagesLayout.SSfrontExtras && (sameType || !pagesLayout.SSmoreExtras)) {
				prefixA = [[pagesLayout.SSfrontExtraNmFrom], [pagesLayout.SSfrontExtraNmTo]];
				if (pagesLayout.SSmoreExtras) {
					prefixA[0] = prefixA[0].concat(pagesLayout.SSmoreExtraNmFrom);
					prefixA[1] = prefixA[1].concat(pagesLayout.SSmoreExtraNmTo);
				}
				for (var i = 0; i < prefixA[0].length; i++) {
					var prefixFrom = prefixA[0][i];
					var prefixTo = prefixA[1][i];
					nmbrFlds = global.docFrom.FieldNumbers && global.docFrom.FieldNumbers.spells ? global.docFrom.FieldNumbers.spells : FieldNumbers.spells;
					nmbrFlds = nmbrFlds[i < 1 ? 0 : 1];
					if (i === 0) { //set the first class header on SSfront
						var tClassFld = global.docFrom.getField(prefixFrom + "spellshead.class.0");
						if (tClassFld && tClassFld.value && CurrentSpells[tClassFld.value]) SetSpellSheetElement(prefixTo + "spells.remember.0", "header", 0, tClassFld.value);
						//hide the prepared section if not visible
						var tPrepFldFrom = global.docFrom.getField(prefixFrom + "spellshead." + (fromSheetTypePF ? "Image" : "Text") + ".prepare.0");
						var tPrepFldToNm = prefixTo + "spellshead." + (typePF ? "Image" : "Text") + ".prepare.0";
						if (tPrepFldFrom && tPrepFldFrom.display === display.hidden) {
							MakePreparedMenu_PreparedOptions(tPrepFldToNm);
						};
					}
					//set the spell remember fields
					for (var a = 0; a < nmbrFlds; a++) {
						ImportField(prefixTo + "spells.remember." + a, {notTooltip: true, notSubmitName: true}, prefixFrom + "spells.remember." + a);
					}
					//set the headers and spell dividers
					for (var a = 0; a < 9; a++) {
						if (a < 4) {
							ImportField(prefixTo + "spellshead.Text.header." + a, {notTooltip: true, notSubmitName: true, cleanValue: true}, prefixFrom + "spellshead.Text.header." + a);
							ImportField(prefixTo + "spellshead.ability." + a, {notTooltip: true, notSubmitName: true, cleanValue: true}, prefixFrom + "spellshead.ability." + a);
						}
						ImportField(prefixTo + "spellsdiv.Text." + a, {notTooltip: true, notSubmitName: true, cleanValue: true}, prefixFrom + "spellsdiv.Text." + a);
					};
					//set the headers spellcasting abilities
					doChildren("spellshead.ability", prefixFrom, prefixTo);
					//set the headers bluetext values
					doChildren("BlueText.spellshead", prefixFrom, prefixTo);
				}
			};
		};
	//Change calculations to manual
		if (FromVersion < 13) {
			SetToManual_Dialog.mAtt = global.docFrom.getField("Manual Attack Remember") ? global.docFrom.What("Manual Attack Remember") !== "No" : false;
			SetToManual_Dialog.mBac = global.docFrom.getField("Manual Background Remember") ? global.docFrom.What("Manual Background Remember") !== "No" : false;
			SetToManual_Dialog.mCla = global.docFrom.getField("Manual Class Remember") ? global.docFrom.What("Manual Class Remember") !== "No" : false;
			SetToManual_Dialog.mFea = global.docFrom.getField("Manual Feat Remember") ? global.docFrom.What("Manual Feat Remember") !== "No" : false;
			SetToManual_Dialog.mRac = global.docFrom.getField("Manual Race Remember") ? global.docFrom.What("Manual Race Remember") !== "No" : false;
		} else {
			SetToManual_Dialog.mAtt = !!global.docFrom.CurrentVars.manual.attacks;
			SetToManual_Dialog.mBac = !!global.docFrom.CurrentVars.manual.background;
			SetToManual_Dialog.mCla = !!global.docFrom.CurrentVars.manual.classes;
			SetToManual_Dialog.mFea = !!global.docFrom.CurrentVars.manual.feats;
			SetToManual_Dialog.mRac = !!global.docFrom.CurrentVars.manual.race;
		}
		SetToManual_Button(true);

	//Recalculate the weapons, for things might have changed since importing them
		ReCalcWeapons(false);

		//now that all the attacks of the first page and companion pages have been imported, set the attack colors
		if (bothCF) {
			ApplyAttackColor("", "", "Default");
			ApplyAttackColor("", "", "Comp.");
		};

		//import the icons
		IIerror = ImportIcons(pagesLayout, app.viewerType !== "Reader" && importFromPath[2]);

		// set the focus to the top of the first page
		tDoc.getField("Player Name").setFocus();
	} catch (error) {
		if (error !== "user stop") {
			var eText = "An error occurred during importing:\n " + error + "\n ";
			for (var e in error) eText += e + ": " + error[e] + ";\n ";
			console.println(eText);
			console.show();
		};
	};

	// A pop-up to inform the user of the changes
	if (!closeAlert) {
		global.docTo.InitializeEverything(consoleTrigger, true);
		global.docTo.dirty = true;
		global.docTo.calcCont();
		thermoTxt = thermoM("Importing from '" + global.docFrom.documentFileName + "'...");
		thermoM(0.9);

		var aText = "[Can't see the 'OK' button at the bottom? Use ENTER to close this dialog]\n";
		if (app.viewerType !== "Reader" && importFromPath[2]) { // if icons were imported
			aText += toUni("IMPORTANT: Custom Icons") + "\nBecause you imported custom icons, the sheet will not work correctly right away, but only after saving the sheet and opening again. That is why, AFTER YOU CLOSE THIS DIALOG, YOU WILL BE PROMPTED TO SAVE THIS PDF AND IT WILL AUTOMATICALLY CLOSE AFTER THAT.\n\n";
		}
		if (!sameType) {
			aText += toUni("Sheet Types Differ");
			aText += "\nYou seem to have imported from another type of sheet (i.e. not \'" + tDoc.info.SheetType + "\'). This will have the unfortunate side-effect that some things might not have been imported, because there aren't an equal amount of entries for all things on all of MPMB's sheet types. For example, there is room for 6 attacks on the 'Colorful-A4' sheet, but for only 5 on the other types.";
			aText += "\n\n" + toUni("Any of the following sections might be truncated:");
			aText += typeA4 ? "" : "\n  > 1st page: attacks, actions" + (typePF ? ", languages, tools" : ";");
			aText += typePF ? "" : "\n  > 2nd page: equipment" + (typeA4 ? "" : ", feats, languages, tools");
			aText += typeA4 ? "" : ";\n  > Additional sheet: magic items" + (typePF ? ", equipment, feats" : "");
			aText += !typePF ? "" : ";\n  > Companion sheet(s): equipment;";
			aText += !typePF ? "" : ";\n  > Adventure Logsheet(s): the last entry of each page is missing";
			aText += typeA4 ? "" : ";\n  > Spell Sheet(s): spells near the bottom of the page";
			aText += ".\n\n"
		};
		aText += toUni("Some manual additions might not have transferred over") + "\n\nSome things that you adjusted manually on your old sheet might not have transferred to the new sheet. This is done intentionally because that way the automation can take advantage of any changes made in the new version.\n"
		aText += [
			toUni("The following things should be considered:"),
			"The 'Class Features' text is now solely what the automation added;",
			"The 'Notes' section on the 3rd page is now solely what the automation added;",
			"Attack and Ammunition attributes are now solely what the automation set;",
			"Magic and Misc AC bonuses are now solely what the automation set;",
			"Feat and Magic Item descriptions are now solely what the automation set;",
			"Companion pages have been copied exactly, not using any updates in automation;",
			"Wild Shapes have been re-calculated, manual changes have been ignored;",
			"Ability Score dialog has been duplicated from the old version, changes by newer automation have been ignored. Read that dialog's text carefully to see if you are missing anything;",
			sameType || (pagesLayout && !pagesLayout.SSmoreExtras) ? "Only spells recognized by the automation have been set, unrecognized spells are now an empty row." : "No spell sheets have been generated."
		].join("\n  > ");
		if (FromVersion < 12.998) {
			aText += [
				"\n\n" + toUni("Importing from older version, before v12.998"),
				"Some proficiencies you adjusted manually, like languages and tools, might not have transferred over correctly. This is because the new version of the sheet uses a different way of setting proficiencies that offer a choice.",
				"Things manually added/changed in the fields for Saving Throw Advantages/Disadvantages and Senses have not been copied."
			].join("\n  > ");
		};
		app.alert({
			cMsg : aText,
			nIcon : 3,
			cTitle : "Some things to consider about the import"
		});
		thermoStop(); // Stop progress bar, forcibly
	};

	// signal the end of importing
	IsNotImport = true;
	ignorePrereqs = false;
	if (IIerror && isNaN(IIerror)) app.alert(IIerror);
  };

	// close the document that was opened to import from (if any)
	if (global.docFrom && global.docFrom.toString() === "[object Doc]") {
		global.docFrom.dirty = false;
		global.docFrom.closeDoc(true);
	};
	// remove the global objects so that they don't make a clutter
	if (global.docTo) delete global.docTo;
	if (global.docFrom) delete global.docFrom;

	// if icons were imported ask to save and then close the sheet
	if (!closeAlert && app.viewerType !== "Reader" && importFromPath[2]) { 
		app.execMenuItem("SaveAs");
		app.execMenuItem("Close");
		tDoc.closeDoc();
	}
};

//a function to import a field from the global.docFrom
//several extra things can be set: actionsObj.SubmitCalc, actionsObj.notTooltip, actionsObj.notSubmitName, actionsObj.doReadOnly, actionsObj.cleanValue, actionsObj.doVisiblity, actionsObj.compareNoSpaces
function ImportField(fldNm, actionsObj, fromFldNm) {
	if (!global.docTo || !global.docFrom || !global.docTo.getField(fldNm) || !global.docFrom.getField(fromFldNm ? fromFldNm : fldNm)) return false; //either of the documents or fields doesn't exist

	if (!actionsObj) actionsObj = {};

	var didChange = false;
	var toFld = global.docTo.getField(fldNm);
	var fromFld = global.docFrom.getField(fromFldNm ? fromFldNm : fldNm);

	//check if the types of the fields match enough to proceed
	var combiTypes = ["button", "checkbox", "listbox", "radiobutton", "signature"];
	if ((combiTypes.indexOf(toFld.type) !== -1 || combiTypes.indexOf(fromFld.type) !== -1) && toFld.type !== fromFld.type) return false;

	//copy the value
	if (fromFld.value !== fromFld.defaultValue) {
		var testValFrom = fromFld.value.toString();
		var testValTo = toFld.value.toString();
		if (actionsObj.replaceFrom) testValFrom = testValFrom.replace(actionsObj.replaceFrom, actionsObj.replaceWith ? actionsObj.replaceWith : "");
		if (toFld.type === "combobox" && !toFld.editable && testValFrom !== testValTo) {
			try {toFld.value = fromFld.value} catch (e) {};
		} else if (!actionsObj.cleanValue && !actionsObj.compareNoSpaces && testValFrom !== testValTo) {
			toFld.value = fromFld.value;
			didChange = true;
		} else if (actionsObj.cleanValue) {
			testValFrom = clean(testValFrom);
			testValTo = clean(testValTo);
			if (testValFrom !== testValTo) {
				toFld.value = fromFld.value;
				didChange = true;
			}
		} else if (actionsObj.compareNoSpaces) {
			testValFrom = testValFrom.replace(/\r/g, "").replace(/ /g, "");
			testValTo = testValTo.replace(/\r/g, "").replace(/ /g, "");
			if (testValFrom !== testValTo) {
				toFld.value = fromFld.value;
				didChange = true;
			}
		}
	}

	//set the submitName and calculation
	if (actionsObj.SubmitCalc && fromFld.submitName && toFld.submitName !== fromFld.submitName) { //we need to set a calculation of the fields and copy the submitName
		toFld.setAction("Calculate", fromFld.submitName);
		actionsObj.notSubmitName = false;
	}
	if (!actionsObj.notSubmitName && fromFld.submitName && toFld.submitName !== fromFld.submitName) {
		toFld.submitName = fromFld.submitName;
		didChange = true;
	}

	//copy the tooltip
	if (!actionsObj.notTooltip && fromFld.userName && toFld.userName !== fromFld.userName) {
		toFld.userName = fromFld.userName;
		didChange = true;
	}

	//copy the readonly status
	if (actionsObj.doReadOnly && fromFld.readonly) toFld.readonly = true;

	if (actionsObj.doVisiblity) {
		var toFldVisCheck = toFld.getArray().length === 1 ? toFld : global.docTo.getField(fromFldNm);
		if (toFldVisCheck.display !== fromFld.display) {
			toFld.display = fromFld.display;
			didChange = true;
		}
	}

	return didChange;
};

//import the icons
function ImportIcons(pagesLayout, viaSaving) {
	if (!global.docTo || !global.docFrom) return true; //either of the documents or fields doesn't exist

	var fromSheetTypePF = global.docFrom.info.SheetType ? (/printer friendly/i).test(global.docFrom.info.SheetType) : false;
	var bothPF = typePF && fromSheetTypePF;
	var bothCF = !typePF && !fromSheetTypePF;
	var FromVersion = parseFloat(global.docFrom.info.SheetVersion);
	if (isNaN(FromVersion)) FromVersion = parseFloat(global.docFrom.info.SheetVersion.replace(/.*?(\d.*)/, "$1"));
	if (FromVersion < 3.7) return true; //the form is of a version before there were any icon fields

	var IconArray = [
		["Portrait", "Portrait"],
		["Symbol", "Symbol"],
		["Comp.img.Portrait", "Comp.img.Portrait"]
	];
	if (pagesLayout && pagesLayout.AScompExtras) {
		for (var i = 0; i < pagesLayout.AScompExtraNmFrom.length; i++) {
			IconArray.push([pagesLayout.AScompExtraNmFrom[i] + "Comp.img.Portrait", pagesLayout.AScompExtraNmTo[i] + "Comp.img.Portrait"]);
		}
	};
	if (pagesLayout && bothPF) {
		IconArray.push(["HeaderIcon", "HeaderIcon"]);
		IconArray.push(["AdvLog.HeaderIcon", "AdvLog.HeaderIcon"]);
		if (pagesLayout.ALlogExtras) {
			for (var i = 0; i < pagesLayout.ALlogExtraNmFrom.length; i++) {
				IconArray.push([pagesLayout.ALlogExtraNmFrom[i] + "AdvLog.HeaderIcon", pagesLayout.ALlogExtraNmTo[i] + "AdvLog.HeaderIcon"]);
			}
		}
	};
	//now only use the field names that appear in both sheets
	var FldsArray = [];
	for (var iA = 0; iA < IconArray.length; iA++) {
		if (global.docFrom.getField(IconArray[iA][0]) && global.docTo.getField(IconArray[iA][1])) {
			FldsArray.push([global.docFrom.getField(IconArray[iA][0]), IconArray[iA][1]]);
		}
	}

	//see if the icons match one of the prematched ones (only from v10.6 or later)
	var skipArray = [];
	if (FromVersion >= 10.6) {
		if (FromVersion < 11.8) {
			var IconsList = [
				["SaveIMG.harpers", "SaveIMG.Faction.harpers.symbol"],
				["SaveIMG.emeraldenclave", "SaveIMG.Faction.emeraldenclave.symbol"],
				["SaveIMG.lordsalliance", "SaveIMG.Faction.lordsalliance.symbol"],
				["SaveIMG.ordergauntlet", "SaveIMG.Faction.ordergauntlet.symbol"],
				["SaveIMG.zhentarim", "SaveIMG.Faction.zhentarim.symbol"]
			];
			var KnownIcons = [];
			for (var iL = 0; iL < IconsList.length; iL++) {
				if (global.docFrom.getField(IconsList[iL][0]) && global.docTo.getField(IconsList[iL][1])) {
					KnownIcons.push([global.docFrom.getField(IconsList[iL][0]).buttonGetIcon(), global.docTo.getField(IconsList[iL][1]).buttonGetIcon()]);
				}
			}
		} else {
			//populate the IconList with the different types of icons known
			var IconList = global.docTo.getField("SaveIMG.Faction").getArray();
			IconList = IconList.concat(global.docTo.getField("SaveIMG.ClassIcon").getArray());
			IconList = IconList.concat(global.docTo.getField("SaveIMG.ALicon").getArray());
			var KnownIcons = [];
			for (var iL = 0; iL < IconList.length; iL++) {
				var docFromIcon = global.docFrom.getField(IconList[iL].name);
				if (docFromIcon) KnownIcons.push([docFromIcon.buttonGetIcon(), IconList[iL].buttonGetIcon()]);
			}
		}

		//now set the icons of fields to be the same as from the imported sheet, if recognized
		for (var fA = 0; fA < FldsArray.length; fA++) {
			var fromIcon = FldsArray[fA][0].buttonGetIcon();
			//run through the icons to see if there is a match
			for (var iK = 0; iK < KnownIcons.length; iK++) {
				if (fromIcon === KnownIcons[iK][0]) {
					var changeFld = global.docTo.getField(FldsArray[fA][1]);
					changeFld.buttonSetIcon(KnownIcons[iK][1]);
					changeFld.display = display.visible;
					skipArray.push(fA);
					break;
				}
			}
		}
	}

	//now if selected and possible, see if we can transfer the icons for the remaining fields
	//for the sheets before v3.0, there is no way of making an empty page. Chances are very slim that anybody is still using those
	var goodImport = 1;
	var madeFlds = false;
	if (MPMBImportFunctionsInstalled && viaSaving) {
		var ClickIMG = global.docFrom.getField("SaveIMG.ClickMeIcon") ? global.docFrom.getField("SaveIMG.ClickMeIcon").buttonGetIcon() : false;
		var EmptyIMG = global.docFrom.getField("SaveIMG.EmptyIcon") ? global.docFrom.getField("SaveIMG.EmptyIcon").buttonGetIcon() : (global.docFrom.getField("Portrait_Blank") ? global.docFrom.getField("Portrait_Blank").buttonGetIcon() : false);
		var fromPagT = global.docFrom.numPages;

		//add a blank template page as first page
		if (global.docFrom.getTemplate("blank")) {
			global.docFrom.getTemplate("blank").spawn(fromPagT, true, false);
			var usePage = fromPagT;
		} else if (global.docFrom.getTemplate("ASnotes")) { //or add a blank notes template page as first page
			global.docFrom.getTemplate("ASnotes").spawn(fromPagT, true, false);
			global.docFrom.removeField("P0.ASnotes");
			var usePage = fromPagT;
		} else { //take the current notes page and delete all fields on it
			var notesFlds = global.docFrom.getField("Notes Left") ? global.docFrom.getField("Notes Left") : (global.docFrom.getField("Notes.Left") ? global.docFrom.getField("Notes.Left") : false);
			if (!notesFlds) {
				goodImport = "Unable to import the user-defined pictures";
			} else {
				var usePage = notesFlds.page;
				//now delete all the fields on this page that might cause problems upon importing
				for (var f = 0; f < global.docFrom.numFields; f++) {
					var fNm = global.docFrom.getNthFieldName(f);
					var fPage = global.docFrom.getField(fNm).page;
					if (fPage === usePage && global.docTo.getField(fNm)) global.docFrom.removeField(fNm);
				}
			}
		}

		//now add fields on this new page with the icons to import
		if (goodImport) {
			var fldIncr = 0;
			for (var fA = 0; fA < FldsArray.length; fA++) { if (skipArray.indexOf(fA) === -1) {
				var fromIcon = FldsArray[fA][0].buttonGetIcon();
				//check if this icon is actually in use and not just an empty one
				if ((ClickIMG && ClickIMG === fromIcon) || (EmptyIMG && EmptyIMG === fromIcon)) continue;
				var nwFld = global.docFrom.addField({
					cName : "tempIconImports." + fldIncr,
					cFieldType : "button",
					nPageNum : usePage,
					oCoords : [40, 40, 0, 0]
				});
				nwFld.buttonPosition = position.iconOnly;
				nwFld.buttonSetIcon(fromIcon);
				nwFld.userName = FldsArray[fA][1];
				fldIncr += 1;
				var madeFlds = true;
			}};
		};

		//now save this document and import this newly made page into the new document, as the last page
		if (madeFlds) {
		try {
			// First delete all the document-level scripts from the old sheet, otherwise we import them along
			var oldDocLvl = ["Functions", "ListsClassesUA", "ListsClassesUAArtificer", "ListsClassesUAMystic", "ListsFeatsUA", "ListsRacesUA", "ListsSpellsUA"];
			for (var d = 0; d < oldDocLvl.length; d++) {
				global.docFrom.removeScript(oldDocLvl[d]);
			}
			//import the page as the last page
			if (!MPMBImportPage(global.docTo, global.docFrom.path, usePage)) throw "Unable to import the user-defined icons-page.";

			//now continue with the newly added page
			var newFields = global.docTo.getField("tempIconImports").getArray();
			for (var nF = 0; nF < newFields.length; nF++) {
				var setFld = global.docTo.getField(newFields[nF].userName)
				setFld.buttonSetIcon(newFields[nF].buttonGetIcon());
				setFld.display = display.visible;
			}

			global.docTo.deletePages(global.docTo.numPages - 1); //remove the newly added page again
		} catch (e) {
			goodImport = "An error occured during importing the user-defined icons.";
		}
		}
	} else if (viaSaving && !MPMBImportFunctionsInstalled) {goodImport = "JavaScript file not installed";};

	return goodImport;
};

// import the class features that were manually selected from the extrachoices arrays in older versions
function ImportExtraChoices() {
	if (!global.docFrom.getField("Extra.Notes")) return; //nothing to do
	//use the content of the sheet we are importing from as a means to test what choices/extrachoices things had been selected
	var toTest = global.docFrom.getField("Class Features Remember").value;
	var toTestE = global.docFrom.getField("Extra.Notes").value + "\r" + global.docFrom.getField("Class Features").value;
	for (var aClass in global.docFrom.classes.known) {
		var classlevel = global.docFrom.classes.known[aClass].level;
		var Temps = global.docFrom.CurrentClasses[aClass];
		if (!Temps) continue;
		for (var prop in Temps.features) {
			var propFea = Temps.features[prop];
			if (propFea.minlevel > classlevel) continue;
			if (propFea.extrachoices && propFea.extraname) {
				propFea.extrachoices.forEach( function(opt) {
					opt = opt.toLowerCase();
					var propOpt = propFea[opt];
					if (toTestE.indexOf(propOpt.name + " (" + propFea.extraname) !== -1) {
						global.docTo.SetFeatureChoice("classes", aClass, prop, opt, opt);
					};
				});
			}
			if (propFea.choices) {
				propFea.choices.forEach( function(opt) {
					opt = opt.toLowerCase();
					var propStr = [aClass, prop, opt].toString();
					if (toTest.indexOf(propStr) !== -1) {
						global.docTo.SetFeatureChoice("classes", aClass, prop, opt);
					};
				});
			}
		}
	}
};

/* ---- the old, depreciated import function ---- */
function Import(type) {

	//first ask if this sheet is already set-up the right way before importing and if we can continue
	var AskFirst = {
		cMsg : "This method is no longer supported and will result in your character only being partially imported. If you want to be guaranteed of a good import, use the option \"Import Directly from a MPMB's PDF\" instead!"+"\n\nBefore you import anything into this sheet, please make sure that the following things are set correctly. If you don't do this, not everything will import. You will have to make the following things identical to the sheet you exported the data from:" + "\n  \u2022  The unit and decimal system;" + "\n  \u2022  The layout of the pages.\n      In order to do this, you will have to hide and/or add pages in the same order as you did in the sheet you are importing from. This is because the moment you add an extra page (so after the first of its type), that page gets a name based on the location of that page in the document. That location is based solely on the pages that are visible at the time of itscreation.\n      For example, if the sheet you are importing from has two Adventurers Logsheet pages, and these were added after generating a Spell Sheet of three pages long, while all of the other pages were visible as well, the second Adventurers Logsheet page would have been generated as page number 12. In order for this sheet to properly receive the import for that page, you will first need to generate an Adventurers Logsheet page at page number 12." + "\n\n\nDo you want to continue importing?",
		nIcon : 2,
		cTitle : "Is everything ready for importing?",
		nType : 2
	};


	if (app.alert(AskFirst) !== 4) return;

	// Start progress bar and stop calculations
	var thermoTxt = thermoM("Importing the data...");
	calcStop();

	MakeMobileReady(false); // Undo flatten, if needed

	templateA = [
		["Template.extras.AScomp", What("Template.extras.AScomp")],
		["Template.extras.ASnotes", What("Template.extras.ASnotes")],
		["Template.extras.WSfront", What("Template.extras.WSfront")],
		["Template.extras.ALlog", What("Template.extras.ALlog")]
	];
	var locStateOld = What("Gear Location Remember").split(",");

	if (typeof ProcResponse === "undefined") {
		IsNotImport = false;
		ignorePrereqs = true;
		if (type === "fdf") {
			tDoc.importAnFDF();
		} else if (type === "xfdf") {
			tDoc.importAnXFDF();
		}
		if (What("Race Remember").split("-")[1]) ApplyRace(What("Race Remember"));
		IsNotImport = true;
		ignorePrereqs = false;
	};

	GetStringifieds(); // Get the variables

	//set the values of the templates back
	for (var i = 0; i < templateA.length; i++) {
		Value(templateA[i][0], templateA[i][1]);
	}

	thermoM(13/25); //increment the progress dialog's progress
	thermoTxt = thermoM("Getting the sheet ready...", false); //change the progress dialog text

	//set the layer visibility to what the imported field says
	LayerVisibilityOptions();

	//set the visibility of Honor/Sanity as imported
	ShowHonorSanity();

	thermoM(14/25); //increment the progress dialog's progress

	if (CurrentVars.mobileset) CurrentVars.mobileset.active = false;

	thermoM(15/25); //increment the progress dialog's progress

	//set the visiblity of the text lines as the imported remember field has been set to
	ToggleWhiteout(CurrentVars.whiteout);

	thermoM(16/25); //increment the progress dialog's progress

	//set the text size for multiline fields as the imported remember field has been set to
	ToggleTextSize(CurrentVars.fontsize);

	thermoM(17/25); //increment the progress dialog's progress

	//set the visiblity of the manual attack fields on the first page as the imported remember field has been set to
	if (CurrentVars.manual.attacks) ToggleAttacks(true);

	thermoM(18/25); //increment the progress dialog's progress

	//set the visiblity of the adventure league as the imported field has been set to
	if (What("League Remember") === "On") {
		ToggleAdventureLeague({
			dci : true,
			factionrank : true,
			renown : true,
			actions : true,
			asterisks : true
		});
	} else {
		try {
			var theAdvL = eval(What("League Remember"));
			ToggleAdventureLeague({
				dci : theAdvL.dci,
				factionrank : theAdvL.factionrank,
				renown : theAdvL.renown,
				actions : theAdvL.actions,
				asterisks : theAdvL.asterisks
			});
		} catch (e) {
			global.docTo.resetForm(["League Remember"]);
		};
	};

	thermoM(19/25); //increment the progress dialog's progress

	//set the visiblity of the Blue Text fields as the imported remember field has been set to
	ToggleBlueText(CurrentVars.bluetxt);

	thermoM(20/25); //increment the progress dialog's progress

	//set the visiblity of the spell slots on the first page as the imported remember field has been set to
	SetSpellSlotsVisibility();

	thermoM(21/25); //increment the progress dialog's progress

	//set the visiblity of the location columns as the imported remember field has been set to

	var locStateNew = What("Gear Location Remember").split(",");
	if (locStateNew[0] !== locStateOld[0]) { //only do something if current visiblity (locStateOld) is not what was imported
		HideInvLocationColumn("Adventuring Gear ", locStateOld[0] === "true");
	}
	if (locStateNew[1] !== locStateOld[1]) { //only do something if current visiblity (locStateOld) is not what was imported
		HideInvLocationColumn("Extra.Gear ", locStateOld[1] === "true");
	}

	thermoM(22/25); //increment the progress dialog's progress

	//set the visiblity of the attuned magical item line on the second page as the imported remember field has been set to
	if (What("Adventuring Gear Remember") !== false) {
		ShowAttunedMagicalItems(false);
	}

	thermoM(23/25); //increment the progress dialog's progress

	//set all the color schemes as the newly imported fields dictate
	setColorThemes();

	thermoM(24/25); //increment the progress dialog's progress

	//set the weight carried multiplier back one if a race with powerful build was added
	if (CurrentRace.known && (/powerful build/i).test(CurrentRace.trait) && What("Carrying Capacity Multiplier") === 3) {
		tDoc.getField("Carrying Capacity Multiplier").value -= 1;
	}

	app.alert({
		cMsg : "Be aware that some fields might not have imported correctly if you imported data that you exported from another version of this sheet.\n\nTooltips might no longer display the correct information after importing (especially if you exported all the fields and not just the non-calculated ones). Also, some fields may be left empty and other fields may display the wrong information. Unfortunately, this can't be helped.\n\nIt is recommended that you check all the fields whether or not correspond with the data that you wanted to import.\n\nUnfortunately, the portrait and symbol on the fourth page can't be imported, you will have to re-do them manually.\n\nIf the sheet you exported information from has extra pages added (e.g. two companion pages, or multiple adventurers logsheets), than those will only be imported if you create those pages first in this document as well, in the exact same order as you did in the previous document.\n\nThe following only applies if you are importing from a version before v11:\nIf you imported a class and/or race that has any options that are selected via the buttons on the second page, then please select those features that grant spellcasting again (even if they are already displayed). Selecting them again will give the automation the information necessary to produce the proper Spell Sheets.",
		nIcon : 1,
		cTitle : "Notes on Importing",
		nType : 0
	});

	thermoM(thermoTxt, true); // Stop progress bar

	//re-apply stuff just as when starting the sheet
	InitializeEverything();

	tDoc.dirty = true;
};

/* ---- the old, depreciated export functions ---- */
//Export only the parts of the sheet that are unaffected by automation
function MakeExportArray() {
	var notExport = [
		"Spell DC 1 Mod",
		"Spell DC 2 Mod",
		"Speed Remember",
		"Racial Traits",
		"Class Features",
		"Proficiency Armor Light",
		"Proficiency Armor Medium",
		"Proficiency Armor Heavy",
		"Proficiency Shields",
		"Proficiency Weapon Simple",
		"Proficiency Weapon Martial",
		"Proficiency Weapon Other",
		"Background Feature",
		"Background Feature Description",
		"SheetInformation",
		"SpellSheetInformation",
		"CopyrightInformation",
		"Opening Remember"
	]
	var tempArray = [];
	for (var F = 0; F < tDoc.numFields; F++) {
		var Fname = tDoc.getNthFieldName(F);
		var Fvalue = What(Fname) !== tDoc.getField(Fname).defaultValue;
		var Frtf = tDoc.getField(Fname).type === "text" && tDoc.getField(Fname).richText;
		var Fcalc = (/Bonus$/i).test(Fname) || tDoc.getField(Fname).calcOrderIndex === -1;
		if (!Frtf && Fvalue && Fcalc && notExport.indexOf(Fname) === -1 && Fname.indexOf("Limited Feature") === -1 && Fname.indexOf("SpellSlots") === -1 && !(/^(Comp.Use.)?Attack.\d.(?!Weapon Selection)|^Feat Description \d$|^Tool \d$|^Language \d$|^(bonus |re)?action \d$|^HD\d (Used|Level|Die|Con Mod)$|Wildshape.\d.|^Resistance Damage Type \d$|^Extra.Exhaustion Level \d$|^Extra.Condition \d+$|^Template\.extras.+$|spells\..*\.\d+|spellshead|spellsdiv|spellsgloss/i).test(Fname)) {
			tempArray.push(Fname);
		}
	}
	return tempArray.length > 0 ? tempArray : "";
}

//Export only the parts of the sheet that are unaffected by automation
function MakeEquipmentExportArray() {
	var toExport = [
		"Platinum Pieces",
		"Gold Pieces",
		"Electrum Pieces",
		"Silver Pieces",
		"Copper Pieces",
		"Lifestyle",
		"Extra.Other Holdings"
	];
	for (var i = 1; i <= FieldNumbers.gear; i++) {
		toExport.push("Adventuring Gear Row " + i);
		toExport.push("Adventuring Gear Location.Row " + i);
		toExport.push("Adventuring Gear Amount " + i);
		toExport.push("Adventuring Gear Weight " + i);
		if (!typePF && i <= 4) toExport.push("Valuables" + i);
		if (i <= FieldNumbers.magicitems) {
			toExport.push("Extra.Magic Item " + i);
			toExport.push("Extra.Magic Item Attuned " + i);
			toExport.push("Extra.Magic Item Description " + i);
			toExport.push("Extra.Magic Item Weight " + i);
		}
		if (i <= FieldNumbers.extragear) {
			toExport.push("Extra.Gear Row " + i);
			toExport.push("Extra.Gear Location.Row " + i);
			toExport.push("Extra.Gear Amount " + i);
			toExport.push("Extra.Gear Weight " + i);
		}
	}
	var tempArray = [];
	for (var F = 0; F < toExport.length; F++) {
		if (tDoc.getField(toExport[F]).type !== "checkbox" && What(toExport[F]) !== tDoc.getField(toExport[F]).defaultValue) {
			tempArray.push(toExport[F]);
		} else if (tDoc.getField(toExport[F]).type === "checkbox" && tDoc.getField(toExport[F]).isBoxChecked(0)) {
			tempArray.push(toExport[F]);
		}
	}
	return tempArray.length > 0 ? tempArray : "";
}

//Export only the parts of the sheet that are unaffected by automation
function MakeDescriptionExportArray() {
	var toExport = [
		"PC Name",
		"Player Name",
		"Height",
		"Weight",
		"Sex",
		"Hair colour",
		"Eyes colour",
		"Skin colour",
		"Age",
		"Alignment",
		"Faith/Deity",
		"Personality Trait",
		"Ideal",
		"Bond",
		"Flaw",
		"Background_History",
		"Background_Appearance",
		"Background_Enemies",
		"Background_Organisation",
		"Background_Faction.Text",
		"Background_FactionRank.Text",
		"Background_Renown.Text",
		"Comp.Desc.Name",
		"Comp.Desc.Sex",
		"Comp.Desc.Age",
		"Comp.Desc.Height",
		"Comp.Desc.Weight",
		"Comp.Desc.Alignment",
		"Notes.Left",
		"Notes.Right"
	];
	var tempArray = [];
	for (var F = 0; F < toExport.length; F++) {
		if (tDoc.getField(toExport[F]).type !== "checkbox" && What(toExport[F]) !== tDoc.getField(toExport[F]).defaultValue) {
			tempArray.push(toExport[F]);
		} else if (tDoc.getField(toExport[F]).type === "checkbox" && tDoc.getField(toExport[F]).isBoxChecked(0)) {
			tempArray.push(toExport[F]);
		}
	}
	return tempArray.length > 0 ? tempArray : "";
}

function MakeXFDFExport(partial) {
	if (partial !== "all") { // if given the command to only partially export
		MakeSkillsMenu_SkillsOptions(["go", "alphabeta"]); // first make sure the skills are sorted alphabetically
		var theArray = partial === "equipment" ? MakeEquipmentExportArray() : (partial === "description" ? MakeDescriptionExportArray() : MakeExportArray());
		if (!theArray) {
			app.alert("Nothing was found that was worthy to export. None of the fields that are not auto-filled seem to have anything but there default values in them. If you still want to export the settings, try exporting all field values.", 0, 0, "Nothing to Export");
			return; // stop the function, because no fields were found that are exportable
		}
		var theSettings = {aFields: theArray};
	} else {
		var theSettings = {bAllFields: true};
	}
	try {
		tDoc.exportAsXFDF(theSettings);
	} catch (err) {
		var toExport = tDoc.exportAsXFDFStr(theSettings);

		var explainTXT = "This is a work-around for Acrobat Reader. It requires a little bit more work, but otherwise you will have to get Acrobat Pro in order to do this more easily. You will be able to import the file you create into MPMB's Character Sheet version 10.2 or later.\nThe field below contains all the exported data in a XML format. All you have to do is copy this data and save it as an .xfdf file with UTF-8 encoding.";
		var explainTXT2 = app.platform === "WIN" ? "If you don't know how to do this, just follow the steps below:\n\nOn Windows:\n  1 - Open Notepad and copy the complete content of the field below into it;\n  2 - On the Notepad menu bar, select File -- Save;\n  3 - Change the file name to anything you like, as long as it ends with \".xfdf\" (instead of \".txt\");\n  4 - At Encoding, choose \"UTF-8\";\n  5 - Press Save." : " If you don't know how to do this, just follow the steps below:\n\nOn Mac:\n  1 - Open TextEdit and copy the complete content of the field below into it;\n  2 - On the TextEdit menu bar, select Format -- Make Plain Text;\n  3 - Then, on the TextEdit menu bar, select File -- Save As;\n  4 - Change the file name to anything you like, as long as it ends with \".xfdf\" (instead of \".txt\");\n  5 - At Plain Text Encoding, choose \"UTF-8\";\n  6 - Press Save.";

		var DisplayExport_dialog = {

			initialize: function(dialog) {
				dialog.load({
					"expo": toExport
				});
			},

			description : {
				name : "Create a .xfdf file from the text below",
				elements : [{
					type : "view",
					elements : [{
						type : "view",
						elements : [{
							type : "static_text",
							item_id : "head",
							alignment : "align_fill",
							font : "heading",
							bold : true,
							height : 21,
							char_width : 39,
							name : "Create a .xfdf file from the text below"
						}, {
							type : "static_text",
							item_id : "txt0",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							char_width : 55,
							name : explainTXT
						}, {
							type : "static_text",
							item_id : "txt1",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							char_width : 55,
							name : explainTXT2
						}, {
							type : "edit_text",
							item_id : "expo",
							alignment : "align_fill",
							multiline: true,
							char_height : 35,
							char_width : 55
						}, {
							type : "gap",
							height : 5
						}, ]
					}, {
						type : "ok"
					}, ]
				}, ]
			}
		}
		app.execDialog(DisplayExport_dialog);
	}
};

//add a script to be run upon start of the sheet
function AddUserScript(retResDia) {
	var theUserScripts = What("User Script").match(/(.|\r){1,65500}/g);
	if (!theUserScripts) theUserScripts = [];
	var defaultTxt = toUni("The JavaScript") + " you paste into the field below will be run now and whenever the sheet is opened, using eval(). If that script results in an error you will be informed immediately and the script will not be added to the sheet.\n" + toUni("This overwrites") + " whatever code you have previously added to the sheet using this dialogue.\n" + toUni("Resetting the sheet is recommended") + " before you enter any custom content into it.";
	var defaultTxt2 = "Be warned, things you do here can break the sheet! You can ask MorePurpleMoreBetter for help using the contact bookmarks.";
	var extraTxt = toUni("A character limit of 65642") + " applies to the area below. You can add longer scripts with the \"Open Another Dialogue\" button. When you press \"Add Script to Sheet\", the code of all dialogues will be joined together (with no characters put inbetween!), is subsequently run/tested and added to the sheet as a whole.";
	var extraTxt2 = "An error will result in all content being lost, so please save it somewhere else before exiting this dialogue!";
	var getTxt = toUni("Pre-Written Scripts") + " can be found using the \"Get Content\" buttons.\n- MPMB has scripts for 3rd-party materials, including Matt Mercer's Blood Hunter, Gunslinger, and College of the Maestro.\n- The community has created scripts for more content, including links to all those made by MPMB.";
	var getTxt2 = toUni("Using the proper JavaScript syntax") + ", you can add homebrew classes, races, weapons, feats, spells, backgrounds, creatures, etc. etc.\nSection 3 of the " + toUni("FAQ") + " has information and links to resources about creating your own additions, as does the \"I don't get it?\" button.";
	var getTxt3 = toUni("Use the JavaScript Console") + " to better determine errors in your script (with the \"JavaScript Console\" button).";
	var diaIteration = 1;

	var tries = 0;
	var selBoxHeight = 340;
	do {
		try {
			var mons = app.monitors.primary();
			var resHigh = mons && mons[0] && mons[0].rect ? mons[0].rect[3] : false;
			if (resHigh && resHigh < 900) selBoxHeight = Math.max(100, 340 - (900 - resHigh));
			tries = 100;
		} catch (e) {
			tries += 1;
		}
	} while (tries < 5);

	var getDialog = function() {
		var diaMax = Math.max(theUserScripts.length, diaIteration);
		var moreDialogues = diaMax > diaIteration;
		var AddUserScript_dialog = {
			initScripts : theUserScripts,
			iteration : diaIteration,
			diaMax : diaMax,
			script: theUserScripts.length >= diaIteration ? theUserScripts[diaIteration - 1] : "",

			initialize: function(dialog) {
				dialog.load({
					"img1" : allIcons.import,
					"jscr" : this.script,
					"head" : "Manually add custom JavaScript that is run on startup (dialogue " + this.iteration + "/" + this.diaMax + ")"
				});
				dialog.enable({
					bPre : this.iteration > 1
				});
				dialog.setForeColorRed("txtB");
				dialog.setForeColorRed("txtF");
			},
			commit: function(dialog) { // called when OK pressed
				var results = dialog.store();
				this.script = results["jscr"];
			},
			other: function(dialog) { // called when OTHER pressed
				var results = dialog.store();
				this.script = results["jscr"];
				dialog.end("next");
			},
			bFAQ: function(dialog) {
				if (getFAQ(false, true)) {
					dialog.end("bfaq");
					var results = dialog.store();
					this.script = results["jscr"];
				}
			},
			bPre: function(dialog) {
				var results = dialog.store();
				this.script = results["jscr"];
				dialog.end("bpre");
			},
			bWhy: function(dialog) { contactMPMB("additions"); },
			bCoC: function(dialog) { contactMPMB("subreddit"); },
			bCoM: function(dialog) { contactMPMB("additionsGit"); },
			bCon: function(dialog) {
				var results = dialog.store();
				this.script = results["jscr"];
				dialog.end("bcon");
			},
			description : {
				name : "Add your custom JavaScript that has to run on startup",
				first_tab : "OKbt",
				elements : [{
					type : "view",
					align_children : "align_left",
					elements : [{
						type : "view",
						elements : [{
							type : "view",
							align_children : "align_row",
							elements : [{
								type : "image",
								item_id : "img1",
								alignment : "align_bottom",
								height : 20,
								width : 20
							}, {
								type : "static_text",
								item_id : "head",
								alignment : "align_fill",
								font : "heading",
								bold : true,
								height : 21,
								width : 720
							}]
						}, {
							type : "static_text",
							item_id : "txtD",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : diaIteration === 1,
							char_height : -1,
							width : 750,
							name : diaIteration !== 1 ? "" : defaultTxt
						}, {
							type : "static_text",
							item_id : "txtB",
							alignment : "align_fill",
							font : "dialog",
							bold : true,
							wrap_name : diaIteration === 1,
							char_height : -1,
							width : 750,
							name : diaIteration !== 1 ? "" : defaultTxt2
 						}, {
							type : "cluster",
							width : 750,
							font : "heading",
							bold : true,
							name : "How to get/make the JavaScript script to enter here?",
							elements : [{
								type : "view",
								align_children : "align_distribute",
								elements : [{
									type : "button",
									item_id : "bCoC",
									name : "Get Content: Community",
									font : "dialog",
									bold : true
								}, {
									type : "button",
									item_id : "bCoM",
									name : "Get Content: MPMB",
									font : "dialog",
									bold : true
								}, {
									type : "button",
									item_id : "bWhy",
									name : "I don't get it?",
									font : "dialog",
									bold : true
								}, {
									type : "button",
									item_id : "bFAQ",
									name : "Open the FAQ",
									font : "dialog",
									bold : true
								}, {
									type : "button",
									item_id : "bCon",
									name : "JavaScript Console",
									font : "dialog",
									bold : true
								}]
							}, {
								type : "static_text",
								item_id : "txtG",
								alignment : "align_fill",
								font : "dialog",
								wrap_name : true,
								width : 720,
								name : getTxt
							}, {
								type : "static_text",
								item_id : "txtH",
								alignment : "align_fill",
								font : "dialog",
								wrap_name : true,
								width : 720,
								name : getTxt2
							}, {
								type : "static_text",
								item_id : "txtI",
								alignment : "align_fill",
								font : "dialog",
								wrap_name : true,
								width : 720,
								name : getTxt3
							}]
						}, {
							type : "static_text",
							item_id : "txtE",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							width : 750,
							name : extraTxt
						}, {
							type : "static_text",
							item_id : "txtF",
							alignment : "align_fill",
							font : "dialog",
							bold : true,
							wrap_name : true,
							width : 750,
							name : extraTxt2
						}, {
							type : "edit_text",
							item_id : "jscr",
							alignment : "align_fill",
							multiline: true,
							height : selBoxHeight,
							width : 750
						}, {
							type : "gap",
							height : 5
						}]
					}, {
						type : "view",
						align_children : "align_row",
						alignment : "align_fill",
						elements : [{
							type : "button",
							name : "<< Go to Previous Dialogue",
							item_id : "bPre",
							alignment : "align_left"
						}, {
							type : "ok_cancel_other",
							other_name : "Open Another Dialogue",
							ok_name : "Add Script to Sheet",
							item_id : "OKbt",
							alignment : "align_right"
						}]
					}]
				}]
			}
		};
 		if (moreDialogues) {
			setDialogName(AddUserScript_dialog, "OKbt", "type", "ok_cancel");
			setDialogName(AddUserScript_dialog, "OKbt", "ok_name", "Go to Next Dialogue >>");
		};
		var theDialog = app.execDialog(AddUserScript_dialog);
		theUserScripts[diaIteration - 1] = AddUserScript_dialog.script;
		if (clean(AddUserScript_dialog.script, [" ", "\t"]).slice(-1) === "}") theUserScripts[diaIteration - 1] += ";\n";
		if (theDialog === "ok" && moreDialogues) theDialog = "next";
		return theDialog;
	};

	do {
		var askForScripts = getDialog();
		if (askForScripts === "bpre") {
			diaIteration -= 1;
		} else if (askForScripts === "bfaq") {
			getFAQ(["faq", "pdf"]);
		} else if (askForScripts === "bcon") {
			console.println("\nYour code has been copied below, but hasn't been commited/saved to the sheet!\nYou can run code here by selecting the appropriate lines and pressing " + (isWindows ? "Ctrl+Enter" : "Command+Enter") + ".\n\n" + theUserScripts.join(""));
			console.show();
		} else {
			diaIteration += 1;
		};
	} while (askForScripts !== "ok" && askForScripts !== "cancel" && askForScripts !== "bcon");

	if (askForScripts === "ok") {
		InitiateLists();
		theUserScripts = theUserScripts.join("");
		if (RunUserScript(false, theUserScripts)) {
			Value("User Script", theUserScripts);
			app.alert({
				cMsg : "Your script has been successfully added/changed in the sheet!\n\nYou will now be returned to the Source Selection Dialogue so that you can choose with more detail how your script interact with the sheet.\n\nNote that once you close the Source Selection Dialogue, all drop-down boxes will be updated so that your changes will be visible on the sheet. This can take some time.",
				nIcon : 3,
				cTitle : "Success!"
			});
			retResDia = "also";
		} else {
			InitiateLists();
			RunUserScript(false, false);
		};
		amendPsionicsToSpellsList();
	};
	if (retResDia) resourceDecisionDialog(false, false, retResDia === "also"); // return to the Dialog for Selecting Resources
};

// Run the custom defined user scripts, if any exist
function RunUserScript(atStartup, manualUserScripts) {
	var ScriptsAtEnd = [];
	var ScriptAtEnd = [];
	var minSheetVersion = 0;
	var RunFunctionAtEnd = function(inFunction) {
		if (inFunction && typeof inFunction === "function") ScriptAtEnd.push(inFunction);
	};
	var runIt = function(aScript, scriptName, isManual) {
		var RequiredSheetVersion = function(inNumber) {
			if (atStartup) return;
			inNumber = semVersToNmbr(inNumber);
			if (!isNaN(inNumber) && inNumber > minSheetVersion) minSheetVersion = inNumber;
		};
		try {
			IsNotUserScript = false;
			ScriptAtEnd = [];
			minSheetVersion = 0;
			eval(aScript);
			IsNotUserScript = true;
			if (ScriptAtEnd.length > 0) ScriptsAtEnd = ScriptsAtEnd.concat(ScriptAtEnd);
			if (minSheetVersion > sheetVersion) {
				var failedTestMsg = {
					cMsg : "The script '" + scriptName + "' reports that is was made for a newer version of the sheet (v" + nmbrToSemanticVersion(minSheetVersion) + "), and might thus not be compatible with this version of the sheet (v" + semVers + ").\n\nDo you want to continue using this script in the sheet? If you select no, the script will be removed.\n\nNote that you can update to the newer version of the sheet with the 'Get the Latest Version' bookmark!",
					nIcon : 2,
					cTitle : "Script was made for newer version!",
					nType : 2
				};
				if (app.alert(failedTestMsg) !== 4) return false;
			};
			return true;
		} catch (e) {
			IsNotUserScript = true;
			app.alert({
				cMsg : isManual ? "The script you entered is faulty, it returns the following error when run:\n\"" + e + "\"\n\nYour script has not been added to the sheet, please try again after fixing the error.\n\nIf you run your code from the console, it will give you a line number for where the error is. You can open this console from inside the \"Add Custom Script\" dialogue." : "The script '" + scriptName + "' is faulty, it returns the following error when run:\n\"" + e + "\"\n\nThe script has been removed from this pdf.\n\nFor a more specific error, that includes the line number of the error, try running the script from the JavaScript console (with the 'JS Console' button).",
				nIcon : 0,
				cTitle : "Error in running user script"
			});
			return false;
		};
	};

	// first run the code added by importing whole file(s)
	var scriptsResult = true;
	var changesInFilesScript = false;
	for (var iScript in CurrentScriptFiles) {
		var runIScript = runIt(CurrentScriptFiles[iScript], iScript);
		if (!runIScript) {
			delete CurrentScriptFiles[iScript];
			changesInFilesScript = true;
			scriptsResult = runIScript;
		};
	};
	if (changesInFilesScript) SetStringifieds("scriptfiles");

	// secondly, run the manually added code
	var manualScript = manualUserScripts ? manualUserScripts : What("User Script");
	if (manualScript) {
		var manualScriptResult = runIt(manualScript, "manually entered using using the text dialogue", manualUserScripts);
		if (!manualScriptResult) {
			if (manualUserScripts) return false;
			tDoc.resetForm(["User Script"]);
		};
	};

	// run the functions that are meant to be saved till the very end of all the scripts
	if (ScriptsAtEnd.length > 0) {
		var functionErrors = [];
		IsNotUserScript = false;
		for (var i = 0; i < ScriptsAtEnd.length; i++) {
			try { ScriptsAtEnd[i](); } catch (err) { functionErrors.push(err); };
		};
		IsNotUserScript = true;
		if (!atStartup && functionErrors.length > 0) {
			app.alert({
				cMsg : "One or more of the script you entered has a 'RunFunctionAtEnd()' statement. One or more of those functions gave an error. The sheet can't tell you which of those gave an error exactly, but it can tell you what the errors are:\n\n" + functionErrors.join("\n\n"),
				nIcon : 0,
				cTitle : "Error in RunFunctionAtEnd() from user script(s)"
			});
		};
	};
	// when run at startup and one of the script fails, update all the dropdowns
	if (atStartup && (!scriptsResult || !manualScriptResult)) {
		UpdateDropdown("resources");
	} else if (!atStartup && manualUserScripts) { // i.e. run to test manual import with RunUserScript(false, Script);
		return manualScriptResult;
	} else if (!atStartup && !manualUserScripts) { // i.e. run to test file import with RunUserScript(false, false);
		return scriptsResult;
	};
};

// Define some custom import script functions as document-level functions so custom scripts including these can still be run from console
function RequiredSheetVersion(versNmbr) {
	var inNumber = semVersToNmbr(versNmbr);
	if (!inNumber || isNaN(inNumber) || inNumber <= sheetVersion) return;
	app.alert({
		cMsg : "The RequiredSheetVersion() function in your script suggests that the script is made for v" + nmbrToSemanticVersion(inNumber) + " of MPMB's Character Record Sheets.\nTake not that you are executing this script in a sheet of v" + semVers + " and might thus not work properly.\nOr perhaps you are using the RequiredSheetVersion() function wrongly.",
		nIcon : 2,
		cTitle : "Script was made for newer version!"
	});
};
function RunFunctionAtEnd(inFunc) {
	if (!inFunc && typeof inFunc !== "function") return;
	var funcstart = inFunc.toString().replace(/function *\([^)]*\) *{(\r\n)*\t*/i,"").substr(0,50);
	app.alert({
		cMsg : "The script you are running from the console contains the function RunFunctionAtEnd(). This function can be exectured from the console, but will be executed immediately after you close this dialogue, and not at the end of all the code you are trying to run from console. When you import this script as a file, or manually paste it into the dialogue for scripts, it will be run at the end of all scripts as intended.\n\nAfter clicking 'OK', the function will be run that starts with the following:\n\t\"" + funcstart + "...\"",
		nIcon : 1,
		cTitle : "RunFunctionAtEnd() works different when executed from the console"
	});
	try {
		inFunc();
	} catch(e) {
		app.alert({
			cMsg : "The function entered in 'RunFunctionAtEnd()', that starts with:\n\t\"" + funcstart + "...\"\nproduces the following error, which might be because it was run from the console:\n\n" + e,
			nIcon : 0,
			cTitle : "Error in RunFunctionAtEnd() from user script(s)"
		});
	};
};

// a way to add a racial variant without conflicts
function AddRacialVariant(race, variantName, variantObj) {
	race = race.toLowerCase();
	variantName = variantName.toLowerCase();
	if (!RaceList[race]) return;
	if (!RaceList[race].variants || !isArray(RaceList[race].variants)) RaceList[race].variants = [];
	var suffix = 1;
	while (RaceList[race].variants.indexOf(variantName) !== -1) {
		suffix += 1;
		variantName += suffix;
	};
	RaceList[race].variants.push(variantName);
	RaceSubList[race + "-" + variantName] = variantObj;
};

// a way to add a subclass without conflicts
function AddSubClass(iClass, subclassName, subclassObj) {
	iClass = iClass.toLowerCase();
	subclassName = subclassName.toLowerCase();
	if (!ClassList[iClass]) return;
	var suffix = 1;
	var fullScNm = iClass + "-" + subclassName;
	while (ClassList[iClass].subclasses[1].indexOf(fullScNm) !== -1 || ClassSubList[fullScNm]) {
		suffix += 1;
		fullScNm += suffix;
	};
	ClassList[iClass].subclasses[1].push(fullScNm);
	ClassSubList[fullScNm] = subclassObj;
	return fullScNm;
};

// a way to add a background variant without conflicts
function AddBackgroundVariant(background, variantName, variantObj) {
	background = background.toLowerCase();
	variantName = variantName.toLowerCase();
	if (!BackgroundList[background]) return;
	if (!BackgroundList[background].variant || !isArray(BackgroundList[background].variant)) BackgroundList[background].variant = [];
	var suffix = 1;
	var fullBvNm = background + "-" + variantName;
	while (BackgroundList[background].variant.indexOf(fullBvNm) !== -1) {
		suffix += 1;
		fullBvNm += suffix;
	};
	BackgroundList[background].variant.push(fullBvNm);
	BackgroundSubList[fullBvNm] = variantObj;
};

// a way to add a warlock invocation without conflicts; invocName is how it will appear in the menu
function AddWarlockInvocation(invocName, invocObj) {
	var warInv = ClassList.warlock.features["eldritch invocations"];
	if (!warInv || (warInv.extrachoices.indexOf(invocName) !== -1 && warInv[invocName.toLowerCase()].source && invocObj.source && warInv[invocName.toLowerCase()].source.toSource() === invocObj.source.toSource())) return; // the exact same thing is being added again, so skip it
	var useName = invocName;
	var suffix = 1;
	while (warInv.extrachoices.indexOf(useName) !== -1) {
		suffix += 1;
		useName = invocName + " [" + suffix + "]";
	};
	warInv.extrachoices.push(useName);
	warInv[useName.toLowerCase()] = invocObj;
};

// a way to add a warlock pact boon without conflicts; boonName is how it will appear in the menu
function AddWarlockPactBoon(boonName, boonObj) {
	var warInv = ClassList.warlock.features["pact boon"];
	if (!warInv || (warInv.choices.indexOf(boonName) !== -1 && warInv[boonName.toLowerCase()].source && boonObj.source && warInv[boonName.toLowerCase()].source.toSource() === boonObj.source.toSource())) return; // the exact same thing is being added again, so skip it
	var useName = boonName;
	var suffix = 1;
	while (warInv.choices.indexOf(useName) !== -1) {
		suffix += 1;
		useName = boonName + " [" + suffix + "]";
	};
	warInv.choices.push(useName);
	warInv[useName.toLowerCase()] = boonObj;
};

// a way to add fighting styles to multiple classes; fsName is how it will appear in the menu
function AddFightingStyle(classArr, fsName, fsObj) {
	var addFSToThis = function(feaObj, feaNm) {
		var FSfeat = feaObj.features[feaNm];
		if (!FSfeat || !FSfeat.choices) return;
		var useName = fsName;
		var suffix = 1;
		while (FSfeat.choices.indexOf(useName) !== -1) {
			suffix += 1;
			useName = fsName + " [" + suffix + "]";
		};
		FSfeat.choices.push(useName);
		FSfeat[useName.toLowerCase()] = fsObj;
	};
	for (var i = 0; i < classArr.length; i++) {
		var aClass = ClassList[classArr[i]];
		var sClass = ClassSubList[classArr[i]];
		if (aClass) {
			addFSToThis(aClass, "fighting style");
			if (classArr[i] === "fighter" && ClassSubList["fighter-champion"]) addFSToThis(ClassSubList["fighter-champion"], "subclassfeature10");
		} else if (sClass) {
			for (var clFea in sClass.features) {
				var sFea = sClass.features[clFea];
				if (sFea.choices && (/^(?=.*fighting)(?=.*style).*$/i).test(sFea.name)) {
					addFSToThis(sClass, clFea);
				}
			}
		}
	};
};

// side-loading a file and adding it to the field for safe-keeping
function ImportUserScriptFile(filePath) {
	// open the dialogue to select the file or URL
	var iFileStream = filePath ? util.readFileIntoStream(filePath) : util.readFileIntoStream();
	if (!iFileStream) return false;
	var iFileCont = util.stringFromStream(iFileStream);
	if ((/<(!DOCTYPE )html/i).test(iFileCont)) { //import is probably a HTML file
		app.alert({
			cTitle : "Please select a JavaScript file",
			cMsg : "The file you imported is a HTML document (a website). Please make sure that the file you select to import is JavaScript.\n\nYou can create a JavaScript file by copying code, pasting it into your favourite plain-text editor (such as Notepad on Windows), and subsequently saving it. You don't necessarily need the .js file extension for the file to be importable into this character sheet." + (!isWindows ? "" : "\n\nNote that you can input an URL into the 'Open file' dialog, but that URL has to point to a JavaScript file. A good example of an URL that points to a JavaScript file is the URL you are send to when you select the 'Raw' option on GitHub: https://raw.githubusercontent.com/") + "\n\nThe file you selected will not be imported.",
			nIcon : 1
		});
		return false;
	};
	var iFileName = (/var iFileName ?= ?"([^"]+)";/).test(iFileCont) ? iFileCont.match(/var iFileName ?= ?"([^"]+)";/)[1] : (/var iFileName ?= ?'([^']+)';/).test(iFileCont) ? iFileCont.match(/var iFileName ?= ?'([^']+)';/)[1] : false;
	var useFileName = iFileName ? util.printd("yyyy/mm/dd", new Date()) + " - " + iFileName : util.printd("yyyy/mm/dd HH:mm", new Date()) + " - " + "no iFileName";
	var iFileNameMatch = false;
	if (iFileName) {
		for (var aFileName in CurrentScriptFiles) {
			var endFileName = aFileName.replace(/\d+\/\d+\/\d+ - /, "");
			if (endFileName.toLowerCase() === iFileName.toLowerCase()) {
				iFileNameMatch = aFileName;
				break;
			};
		};
	};
	if (iFileNameMatch && CurrentScriptFiles[iFileNameMatch]) {
		var askToOverwrite = {
			cMsg : "There is already a file by the name \"" + endFileName + "\", do you want to overwrite it?\n\nIf you select 'No', the file will not be changed.",
			nIcon : 2, //question mark
			cTitle : "File already exists, overwrite it?",
			nType : 2, //Yes-No
		};
		if (app.alert(askToOverwrite) !== 4) return false;
		delete CurrentScriptFiles[iFileNameMatch];
	};
	CurrentScriptFiles[useFileName] = iFileCont;
	SetStringifieds("scriptfiles");
	return true;
};

// Open the dialog for importing whole files with content
function ImportScriptFileDialog(retResDia) {
	var defaultTxt = "Import or delete files that add content and/or custom scripts to the sheet.";
	var defaultTxt2 = "Note that, in modern Operating Systems, you can enter an URL in the 'Open' dialogue directly instead of first downloading a file and then navigating to it.";
	var defaultTxt3 = "Use the \"Get Content\" buttons below to get pre-written files!";
	var getTxt2 = toUni("Using the proper JavaScript syntax") + ", you can add homebrew classes, races, weapons, feats, spells, backgrounds, creatures, etc. etc.\nSection 3 of the " + toUni("FAQ") + " has information and links to resources about creating your own additions, as does the \"I don't get it?\" button.";
	var getTxt = toUni("Pre-Written Scripts") + " can be found using the \"Get Content\" buttons.\n- MPMB has scripts for 3rd-party materials, including Matt Mercer's Blood Hunter, Gunslinger, and College of the Maestro.\n- The community has created scripts for more content, including links to all those made by MPMB.";
	var getTxt3 = toUni("Use the JavaScript Console") + " to better determine errors in your script (with the \"JavaScript Console\" button).";
	var filesScriptRem = What("User_Imported_Files.Stringified");
	var dialogObj = {};
	for (var scriptFile in CurrentScriptFiles) {
		dialogObj[scriptFile] = -1;
	};

	var AddScriptFiles_dialog = {
		initialize: function(dialog) {
			dialog.load({
				"img1" : allIcons.import,
				"scrF" : dialogObj,
				"head" : defaultTxt
			});
			dialog.setForeColorRed("txtB");
		},
		commit: function(dialog) {},
		bFAQ: function(dialog) {
			if (getFAQ(false, true)) {
				dialog.end("bfaq");
				var results = dialog.store();
				this.script = results["jscr"];
			}
		},
		bWhy: function(dialog) { contactMPMB("additions"); },
		bCoC: function(dialog) { contactMPMB("subreddit"); },
		bCoM: function(dialog) { contactMPMB("additionsGit"); },
		bCon: function(dialog) {
			var results = dialog.store();
			this.script = results["jscr"];
			dialog.end("bcon");
		},
		scrF: function(dialog) {
			var allElem = dialog.store()["scrF"];
			var remElem = GetPositiveElement(allElem);
			if (remElem) {
				var remElemNm = "'" + (remElem.length > 50 ? remElem.substr(0,50) + "..." : remElem) + "'";
				dialog.load({ bRem : "Delete file " + remElemNm});
			};
		},
		bAdd: function(dialog) {
			ImportUserScriptFile();
			var dialogObj = {};
			for (var scriptFile in CurrentScriptFiles) {
				dialogObj[scriptFile] = -1;
			};
			dialog.load({ "scrF" : dialogObj });
		},
		bRem: function(dialog) {
			var allElem = dialog.store()["scrF"];
			var remElem = GetPositiveElement(allElem);
			if (remElem) {
				if (CurrentScriptFiles[remElem]) {
					delete CurrentScriptFiles[remElem];
					SetStringifieds("scriptfiles");
				} else {
					app.alert("The name '" + remElem + "' in the dialogue was not found in any of the scripts the sheet. It will be removed from the dialogue, but nothing in the sheet will change.");
				};
				delete allElem[remElem];
				dialog.load({ scrF : allElem });
			};
		},
		description : {
			name : "Add JavaScript files that are run on startup",
			first_tab : "OKbt",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					align_children : "align_left",
					elements : [{
						type : "view",
						align_children : "align_row",
						elements : [{
							type : "image",
							item_id : "img1",
							alignment : "align_bottom",
							width : 20,
							height : 20
						}, {
							type : "static_text",
							item_id : "head",
							alignment : "align_fill",
							font : "heading",
							bold : true,
							height : 21,
							width : 720
						}]
					}, {
						type : "cluster",
						font : "heading",
						bold : true,
						name : "Current files with JavaScript additions",
						align_children : "align_row",
						elements : [{
							width : 300,
							height : 110,
							type : "hier_list_box",
							item_id : "scrF"
						}, {
							type : "view",
							elements : [{
								type : "view",
								align_children : "align_row",
								elements : [{
									type : "button",
									item_id : "bAdd",
									name : "Add file",
									font : "heading",
									bold : true
								}, {
									type : "static_text",
									item_id : "txtT",
									alignment : "align_fill",
									font : "dialog",
									bold : true,
									wrap_name : true,
									width : 300,
									name : defaultTxt2
								}]
							}, {
								type : "button",
								item_id : "bRem",
								name : "Delete selected file",
								width : 380
							}, {
								type : "static_text",
								item_id : "txtB",
								alignment : "align_fill",
								font : "dialog",
								bold : true,
								wrap_name : true,
								width : 380,
								name : defaultTxt3
							}]
						}]
					}, {
						type : "cluster",
						font : "heading",
						bold : true,
						name : "How to get/make the JavaScript files to enter here?",
						elements : [{
							type : "view",
							alignmen : "align_fill",
							align_children : "align_row",
							width : 730,
							elements : [{
								type : "button",
								item_id : "bCoC",
								name : "Get Content: Community",
								font : "dialog",
								bold : true
							}, {
								type : "button",
								item_id : "bCoM",
								name : "Get Content: MPMB",
								font : "dialog",
								bold : true
							}, {
								type : "button",
								item_id : "bWhy",
								name : "I don't get it?",
								font : "dialog",
								bold : true
							}, {
								type : "button",
								item_id : "bFAQ",
								name : "Open the FAQ",
								font : "dialog",
								bold : true
							}, {
								type : "button",
								item_id : "bCon",
								name : "JavaScript Console",
								font : "dialog",
								bold : true
							}]
						}, {
							type : "static_text",
							item_id : "txtC",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							width : 720,
							name : getTxt
						}, {
							type : "static_text",
							item_id : "txtD",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							width : 720,
							name : getTxt2
						}, {
							type : "static_text",
							item_id : "txtE",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							width : 720,
							name : getTxt3
						}]
					}]
				}, {
					item_id : "OKbt",
					type : "ok_cancel",
					ok_name : "Apply changes",
					cancel_name : "Cancel changes"
				}]
			}]
		}
	};


	do {
		var scriptFilesDialog = app.execDialog(AddScriptFiles_dialog);
		if (scriptFilesDialog === "bfaq") {
			getFAQ(["faq", "pdf"]);
		} else if (scriptFilesDialog === "bcon") {
			console.println("\nAny changes you made in the import script files dialogue have not been applied!\nYou can run code here by pasting it in, selecting the appropriate lines and pressing " + (isWindows ? "Ctrl+Enter" : "Command+Enter") + ".");
			console.show();
		};
	} while (scriptFilesDialog !== "ok" && scriptFilesDialog !== "bCon" && scriptFilesDialog !== "cancel");

	if (scriptFilesDialog === "ok") {
		if (filesScriptRem !== What("User_Imported_Files.Stringified")) { // only do something if anything changed!
			InitiateLists();
			var runScriptsTest = RunUserScript(false, false);
			if (!runScriptsTest) { // the scripts failed, so run them again just to be sure that no rogue elements end up in the variables
				InitiateLists();
				RunUserScript(false, false);
			};
			amendPsionicsToSpellsList();
			if (filesScriptRem !== What("User_Imported_Files.Stringified") || runScriptsTest) {
				retResDia = "also";
				app.alert({
					cMsg : (runScriptsTest ? "All" : "Some") + " of the script file(s) have been " + (runScriptsTest ? "successfully " : "") + "changed in the sheet!\n\nYou will now be returned to the Source Selection Dialogue so that you can choose with more detail how your script interact with the sheet.\n\nNote that once you close the Source Selection Dialogue, all drop-down boxes will be updated so that your changes will be visible on the sheet. This can take some time.",
					nIcon : 3,
					cTitle : runScriptsTest ? "Success!" : "Partial success"
				});
			};
		};
	} else {
		Value("User_Imported_Files.Stringified", filesScriptRem);
		CurrentScriptFiles = eval(filesScriptRem);
	};
	if (retResDia) resourceDecisionDialog(false, false, retResDia === "also"); // return to the Dialog for Selecting Resources
};

// Open the menu to import materials
function ImportScriptOptions(input) {
	var MenuSelection = input ? input : getMenu("importscripts");
	if (MenuSelection === undefined || MenuSelection[0] === "nothing") return;
	switch (MenuSelection[2]) {
		case "file" :
			ImportScriptFileDialog(MenuSelection[3]);
			break;
		case "manual" :
			AddUserScript(MenuSelection[3]);
			break;
		case "onlinehelp" :
			contactMPMB("additions");
			break;
		case "subreddit" :
			contactMPMB("subreddit");
			break;
	};
};

// First some global variables that can be set by custom scripts (are otherwise never changed)
var ignorePrereqs = false; // whether or not to consider the prerequisites for class features, feats, and prestige classes
var ignoreSearchLength = false; // whether or not to consider the length of the names for regExpSearch objects. If set to true, the sheet uses only the date of the source
var ignoreDuplicates = false; // whether or not to allow duplicates of feats and magic items

// A function to create/reset the basic lists for the sheet to use. Things can subsequently be added to the created lists using custom scripts.
function InitiateLists() {
	var lists = [
		"BackgroundList",
		"BackgroundSubList",
		"BackgroundFeatureList",
		"ClassList",
		"ClassSubList",
		"CreatureList",
		"FeatsList",
		"MagicItemsList",
		"ArmourList",
		"WeaponsList",
		"AmmoList",
		"PacksList",
		"GearList",
		"ToolsList",
		"RaceList",
		"RaceSubList",
		"SourceList",
		"SpellsList",
		"PsionicsList",
		"spellLevelList",
		"spellSchoolList"
	];
	for (i = 0; i < lists.length; i++) {
		if (tDoc["" + lists[i]]) {
			tDoc[lists[i]] = npmclone(tDoc["" + lists[i]]);
		} else {
			tDoc[lists[i]] = {};
		};
	};
	// now add the armours/weapons/ammunitions added by features
	if (CurrentVars.extraArmour) {
		for (var anArmour in CurrentVars.extraArmour) {
			ArmourList[anArmour] = CurrentVars.extraArmour[anArmour];
		}
	}
	if (CurrentVars.extraWeapons) {
		for (var anWeapon in CurrentVars.extraWeapons) {
			WeaponsList[anWeapon] = CurrentVars.extraWeapons[anWeapon];
		}
	}
	if (CurrentVars.extraAmmo) {
		for (var anAmmo in CurrentVars.extraAmmo) {
			AmmoList[anAmmo] = CurrentVars.extraAmmo[anAmmo];
		}
	}
};

// A function to generate the spell variables after running imported scripts
function spellsAfterUserScripts(reDoAllSpells) {
	if (tDoc.info.AdvLogOnly) return;
	amendPsionicsToSpellsList();
	setSpellVariables(reDoAllSpells);
};

var typePF = (/printer friendly/i).test(tDoc.info.SheetType);
var typeA4 = (/a4/i).test(tDoc.info.SheetType);
var typeLR = (/letter/i).test(tDoc.info.SheetType);
var minVer = tDoc.info.SpellsOnly || tDoc.info.AdvLogOnly;
var sheetVersion = parseFloat(tDoc.info.SheetVersion);
var semVers = nmbrToSemanticVersion(sheetVersion) + (tDoc.info.SheetVersionType ? tDoc.info.SheetVersionType : "");
var isWindows = app.platform === "WIN";
var patreonVersion = tDoc.getField("SaveIMG.Patreon").submitName === "";

var UnitsList = {
	metric : {
		mass : 0.5,
		'length' : 0.3,
		lengthInch : 2.5,
		volume : 0.03,
		surface : 0.1,
		distance : 1.6,
		liquid : 4
	},
	metricExact : {
		mass : 0.45359237,
		'length' : 0.3048,
		lengthInch : 2.54,
		volume : 0.028316846592,
		surface : 0.09290304,
		distance : 1.609344,
		liquid : 3.785411784
	}
}

var AbilityScores = {
	abbreviations : ["Str", "Dex", "Con", "Int", "Wis", "Cha"],
	fields : {str : "Str", dex : "Dex", con : "Con", 'int' : "Int", wis : "Wis", cha : "Cha", hos : "HoS", hon : "HoS", san : "HoS"},
	names : ["Strength", "Dexterity", "Constitution", "Intelligence", "Wisdom", "Charisma"],
	"strength" : {
		index : 0
	},
	"dexterity" : {
		index : 1
	},
	"constitution" : {
		index : 2
	},
	"intelligence" : {
		index : 3
	},
	"wisdom" : {
		index : 4
	},
	"charisma" : {
		index : 5
	},
	"improvements" : {
		"classlvl" : "",
		"classprime" : "",
		"classmulti" : "",
		"racefeats" : ""
	}
};

var Menus = {
	"inventory" : "",
	"background" : "",
	"classfeatures" : "",
	"chooselayers" : "",
	"gear" : "",
	"gearline" : "",
	"magicitems" : "",
	"color" : "",
	"raceoptions" : "",
	"faq" : [{
			cName : "Go to the online FAQ (more up to date)",
			cReturn : "faq#online"
		}, {
			cName : "Open the built-in FAQ.pdf",
			cReturn : "faq#pdf"
		}, {
			cName : "-"
		}, {
			cName : "See the license used for distributing WotC material (SRD)",
			cReturn : "faq#ogl"
		}, {
			cName : "See the license under which this document is distributed",
			cReturn : "faq#gplv3"
		}],
	"importscripts" : [{
			cName : "Import a file with additional material",
			cReturn : "go#script#file"
		}, {
			cName : "Add material manually (copy-paste)",
			cReturn : "go#script#manual"
		}, {
			cName : "-"
		}, {
			cName : "Don't know how this works? Click here to learn more!",
			cReturn : "go#script#onlinehelp"
		}, {
			cName : "Find more content online...",
			cReturn : "go#script#subreddit"
		}],
	"importexport" : [{
			cName : "Add homebrew material (custom script)",
			oSubMenu : []
		}, {
			cName : "-"
		}, {
			cName : "Import a character directly from another MPMB's Character Sheet PDF",
			cReturn : "go#direct"
		}, {
			cName : "-"
		}, {
			cName : "Import/Export using files (depreciated, no longer support)",
			oSubMenu: [{
				cName : "Import .xfdf file",
				cReturn : "go#import#xfdf"
			}, {
				cName : "Export .xfdf file",
				oSubMenu: [{
					cName : "Export .xfdf file of non-calculated fields",
					cReturn : "go#export#partial"
				}, {
					cName : "Export .xfdf file of equipment fields only",
					cReturn : "go#export#equipment"
				}, {
					cName : "Export .xfdf file of description fields only",
					cReturn : "go#export#description"
				}, {
					cName : "-"
				}, {
					cName : "Export .xfdf file of all fields",
					cReturn : "go#export#all"
				}]
			}]
		}],
	"feats" : "",
	"attacks" : "",
	"wildshape" : "",
	"companion" : "",
	"actions" : "",
	"limfea" : "",
	"pages" : "",
	"notes" : "",
	"advlog" : "",
	"icon" : "",
	"spells" : "",
	"spellsLine" : "",
	"glossary" : "",
	"hp" : "",
	"texts" : "",
	"skills" : "",
	"adventureLeague" : "",
	"sources" : "",
	"unicode" : ""
};
Menus.importexport[0].oSubMenu = Menus.importscripts;

var GearMenus = {
	gear : "",
	tools : "",
	packs : ""
}

var classes = {
	field : "",
	parsed : [],
	known : {},
	old : {},
	hd : [],
	hp : 0,
	attacks : 1,
	totallevel : 0, // classes.parsed.reduce(function(acc, val) { return acc + val[1]; }, 0);
	primary : "",
	oldprimary : "",
	spellcastlvl : {default : 0, warlock : 0},
	oldspellcastlvl : {default : 0, warlock : 0}
};

var CurrentUpdates = {types : []};
var CurrentClasses = {};
var CurrentBackground = {};
var CurrentRace = {};
var CurrentCompRace = {};
var CurrentSpells = {};
var CurrentCasters = {};
var CurrentSources = {firstTime : true, globalExcl : []};
var CurrentEvals = {};
var CurrentScriptFiles = {};
var CurrentVars = { manual : {} };
var UpdateSpellSheets = {};
var CurrentFeatureChoices = {};
var CurrentStats = {};

var CurrentArmour = {
	field : "",
	known : "",
	mod : "",
	dex : "",
	magic : 0
};

var CurrentShield = {
	field : "",
	magic : 0
};

var CurrentWeapons = {
	field : [],
	known : [],
	compField : {},
	compKnown : {},
	offHands : []
};

var CurrentFeats = {
	known : [],
	choices : [],
	level : What("Character Level") ? Number(What("Character Level")) : 1
};

var CurrentMagicItems = {
	known : [],
	choices : [],
	level : CurrentFeats.level
};

var CurrentProfs = { // Also change field defaultValue!
	skill : {},
	armour : {},
	weapon : {},
	save : {},
	resistance : {},
	language : {},
	tool : {},
	savetxt : {},
	vision : {},
	speed : {},
	specialarmour : {},
	carryingcapacity : {},
	advantage : {}
};

var thermoCount = [], thermoDur = {};
var calcStartSet = false, thermoStopSet = false, ChangesDialogSkip;
var IsSubclassException = {};
var IsNotReset = true;
var IsNotImport = true;
var IsNotFeatMenu = true;
var IsNotMagicItemMenu = true;
var IsNotWeaponMenu = true;
var IsNotConditionSet = true;
var IsSetDropDowns = false;
var IsNotUserScript = true;
var IsCharLvlVal = false;

var FieldsRemember = [];

var FieldNumbers = {
	actions : typeLR ? 11 : 12,
	trueactions : typePF ? 12 : (typeA4 ? 22 : 20),
	attacks : typeA4 ? 6 : 5,
	feats : typeA4 ? 9 : 8,
	featsD : typeA4 ? 5 : 4,
	langstools : typeA4 ? 8 : 6,
	spells : typePF ? [55, 70] : (typeA4 ? [66, 77] : [61, 72]),
	logs : typePF ? 6 : 7,
	magicitems : typePF ? 12 : (typeA4 ? 15 : 14),
	magicitemsD : typePF ? 5 : 6,
	gear : typePF ? 54 : 46,
	extragear : typePF ? 36 : 42,
	gearMIrow : typePF ? 51 : 43,
	compgear : typePF ? 17 : 24,
	limfea : 16
}

var ExperiencePointsList = ["", 300, 900, 2700, 6500, 14000, 23000, 34000, 48000, 64000, 85000, 100000, 120000, 140000, 165000, 195000, 225000, 265000, 305000, 355000, 1000000000];
var levels = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20];
var ProficiencyBonusList = [2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 4, 5, 5, 5, 5, 6, 6, 6, 6];
var cantripDie = [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4];

var SkillsList = {
	abbreviations : [
		"Acr",
		"Ani",
		"Arc",
		"Ath",
		"Dec",
		"His",
		"Ins",
		"Inti",
		"Inv",
		"Med",
		"Nat",
		"Perc",
		"Perf",
		"Pers",
		"Rel",
		"Sle",
		"Ste",
		"Sur",
		"Init",
		"Too"
	],
	abilityScores : [
		"Dex",
		"Wis",
		"Int",
		"Str",
		"Cha",
		"Int",
		"Wis",
		"Cha",
		"Int",
		"Wis",
		"Int",
		"Wis",
		"Cha",
		"Cha",
		"Int",
		"Dex",
		"Dex",
		"Wis",
		"Dex",
		"Too"
	],
	names : [
		"Acrobatics",
		"Animal Handling",
		"Arcana",
		"Athletics",
		"Deception",
		"History",
		"Insight",
		"Intimidation",
		"Investigation",
		"Medicine",
		"Nature",
		"Perception",
		"Performance",
		"Persuasion",
		"Religion",
		"Sleight of Hand",
		"Stealth",
		"Survival",
		"Initiative",
		"Tool"
	],
	abbreviationsByAS : [
		"Ath",
		"Acr",
		"Sle",
		"Ste",
		"Arc",
		"His",
		"Inv",
		"Nat",
		"Rel",
		"Ani",
		"Ins",
		"Med",
		"Perc",
		"Sur",
		"Dec",
		"Inti",
		"Perf",
		"Pers",
		"Init",
		"Too"
	],
	abilityScoresByAS : [
		"Str",
		"Dex",
		"Dex",
		"Dex",
		"Int",
		"Int",
		"Int",
		"Int",
		"Int",
		"Wis",
		"Wis",
		"Wis",
		"Wis",
		"Wis",
		"Cha",
		"Cha",
		"Cha",
		"Cha",
		"Dex",
		"Too"
	],
	namesByAS : [
		"Athletics",
		"Acrobatics",
		"Sleight of Hand",
		"Stealth",
		"Arcana",
		"History",
		"Investigation",
		"Nature",
		"Religion",
		"Animal Handling",
		"Insight",
		"Medicine",
		"Perception",
		"Survival",
		"Deception",
		"Intimidation",
		"Performance",
		"Persuasion",
		"Initiative",
		"Tool"
	],
	values : {}
};

var DamageTypes = {
	"acid" : {
		index : 1
	},
	"bludgeoning" : {
		index : 2
	},
	"cold" : {
		index : 3
	},
	"fire" : {
		index : 4
	},
	"force" : {
		index : 5
	},
	"lightning" : {
		index : 6
	},
	"necrotic" : {
		index : 7
	},
	"piercing" : {
		index : 8
	},
	"poison" : {
		index : 9
	},
	"psychic" : {
		index : 10
	},
	"radiant" : {
		index : 11
	},
	"slashing" : {
		index : 12
	},
	"thunder" : {
		index : 13
	}
};

var Lifestyles = {
	types : [
		"",
		"wretched",
		"squalid",
		"poor",
		"modest",
		"comfortable",
		"wealthy",
		"aristocratic"
	],
	expenses : [
		"",
		"\u2014",
		"1 sp",
		"2 sp",
		"1 gp",
		"2 gp",
		"4 gp",
		"10 gp min."
	],
	names : [
		"",
		(typePF ? " " : "") + "Wretched",
		(typePF ? "  " : "") + "Squalid",
		(typePF ? "     " : "") + "Poor",
		(typePF ? "   " : "") + "Modest",
		(typePF ? " " : "") + "Comfortable",
		(typePF ? "   " : "") + "Wealthy",
		"Aristocratic",
	]
};

var AmmoIcons = {
	"Arrows" : {
		checks : [".Top", ".Base"],
		display : 20
	},
	"Axes" : {
		checks : [".Top.Axe", ".Base.Axe"],
		display : 8
	},
	"Bullets" : {
		checks : [".Bullet"],
		display : 50
	},
	"Daggers" : {
		checks : [".Top"],
		display : 10
	},
	"Flasks" : {
		checks : [".Top", ".Base"],
		display : 20
	},
	"Hammers" : {
		checks : [".Top.Axe", ".Base.Axe"],
		display : 8
	},
	"Spears" : {
		checks : [".Base"],
		display : 10
	},
	"Vials" : {
		checks : [".Top", ".Base"],
		display : 20
	}
}

//The dialog for setting the pages to print
var SetPrintPages_Dialog = {
	//variables to be set by the calling function
	bCSfront : false,
	bCSback : false,
	bASfront : false,
	bASbackgr : false,
	bAScomp : false,
	bASnotes : false,
	bWSfront : false,
	bALlog : false,
	bSSfront : false,
	bPRsheet : false,
	bASoverflow : false,
	bHide : false,
	bDupl : false,
	bshowPR : false,
	aCSfront : true,
	aCSback : true,
	aASfront : true,
	aASbackgr : true,
	aAScomp : true,
	aASnotes : true,
	aWSfront : true,
	aALlog : true,
	aSSfront : false,
	aPRsheet : false,
	aASoverflow : false,

	//when starting the dialog
	initialize : function (dialog) {
		dialog.load({
			"img1" : allIcons.print,
			"Pag1" : this.bCSfront,
			"Pag2" : this.bCSback,
			"Pag3" : this.bASfront,
			"Pag4" : this.bASbackgr,
			"Pag5" : this.bAScomp,
			"Pag6" : this.bASnotes,
			"Pag7" : this.bWSfront,
			"Pag8" : this.bALlog,
			"Pag9" : this.bSSfront,
			"Pag0" : this.bPRsheet,
			"Pa10" : this.bASoverflow,
			"Hide" : this.bHide
		});

		if (this.bDupl) {
			dialog.load({
				"dupl" : true
			});
		} else {
			dialog.load({
				"sing" : true
			});
		}

		dialog.visible({
			"Pag0" : this.bshowPR
		})

		dialog.enable({
			"Pag1" : this.aCSfront,
			"Pag2" : this.aCSback,
			"Pag3" : this.aASfront,
			"Pag4" : this.aASbackgr,
			"Pag5" : this.aAScomp,
			"Pag6" : this.aASnotes,
			"Pag7" : this.aWSfront,
			"Pag8" : this.aALlog,
			"Pag9" : this.aSSfront,
			"Pag0" : this.aPRsheet,
			"Pa10" : this.aASoverflow
		});
	},

	//when pressing the ok button
	commit : function (dialog) {},

	//when pressing the other button
	other : function (dialog) {
		dialog.end("save");
	},

	//when the dialog is ended in one way or another
	destroy : function (dialog) {
		var oResult = dialog.store();
		this.bCSfront = oResult["Pag1"];
		this.bCSback = oResult["Pag2"];
		this.bASfront = oResult["Pag3"];
		this.bASbackgr = oResult["Pag4"];
		this.bAScomp = oResult["Pag5"];
		this.bASnotes = oResult["Pag6"];
		this.bWSfront = oResult["Pag7"];
		this.bALlog = oResult["Pag8"];
		this.bSSfront = oResult["Pag9"];
		this.bPRsheet = oResult["Pag0"];
		this.bASoverflow = oResult["Pa10"];
		this.bDupl = oResult["dupl"];
	},

	//fun whenever the Hide checkbox is clicked
	Hide : function (dialog) {
		this.bHide = !this.bHide;
		HideShowEverything(this.bHide);
	},

	description : {
		name : "Choose the pages you want to print",
		elements : [{
			type : "view",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					align_children : "align_row",
					elements : [{
						type : "image",
						item_id : "img1",
						alignment : "align_bottom",
						width : 20,
						height : 20
					}, {
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						height : 21,
						char_width : 30,
						name : "Choose the pages you want to print"
					}]
				}, {
					type : "static_text",
					item_id : "txt0",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					char_width : 40,
					name : "Please select the pages you want to print or save for future use.\n\nThe values you enter here will be remembered for the next time you push the \"Print\" button in the \"JavaScript Window\" or bookmarks section.\n\nNote that what you do here will have no effect on 'normal' print commands (i.e. using the file menu or Ctrl+P)."
				}, {
					type : "cluster",
					align_children : "align_distribute",
					elements : [{
						type : "view",
						elements : [{
							type : "check_box",
							item_id : "Pag1",
							name : "Page 1: Essentials"
						}, {
							type : "check_box",
							item_id : "Pag2",
							name : "Page 2: Features/equipment"
						}, {
							type : "check_box",
							item_id : "Pag3",
							name : (typePF ? "Feats" : "Conditions") + "/magic items page"
						}, {
							type : "check_box",
							item_id : "Pa10",
							name : "Overflow page"
						}, {
							type : "check_box",
							item_id : "Pag9",
							name : "Spell Sheet(s)"
						}]
					}, {
						type : "view",
						elements : [{
							type : "check_box",
							item_id : "Pag4",
							name : "Background page"
						}, {
							type : "check_box",
							item_id : "Pag5",
							name : "Companion page(s)"
						}, {
							type : "check_box",
							item_id : "Pag6",
							name : "Notes page(s)"
						}, {
							type : "check_box",
							item_id : "Pag7",
							name : "Wild Shapes page(s)"
						}, {
							type : "check_box",
							item_id : "Pag8",
							name : "Adventurers Logsheet(s)"
						}, {
							type : "check_box",
							item_id : "Pag0",
							name : "Reference sheet"
						}]
					}]
				}, {
					type : "cluster",
					align_children : "align_left",
					elements : [{
						type : "view",
						align_children : "align_distribute",
						elements : [{
							type : "radio",
							item_id : "dupl",
							group_id : "prin",
							name : "Duplex printing (both sides)"
						}, {
							type : "radio",
							item_id : "sing",
							group_id : "prin",
							name : "Simplex printing (single side)"
						}]
					}, {
						type : "view",
						elements : [{
							type : "static_text",
							item_id : "txt1",
							alignment : "align_fill",
							font : "dialog",
							wrap_name : true,
							char_width : 38,
							name : "Note that this cannot be changed in the next dialog, the print pop-up. The selection you make here will always override anything you do in the next dialog or print settings."
						}]
					}]
				},  {
					type : "cluster",
					align_children : "align_distribute",
					elements : [{
						type : "check_box",
						item_id : "Hide",
						name : "Hide all fields as to print a truly empty sheet to fill out by hand"
					}]
				}, {
					type : "gap",
					height : 8
				}]
			}, {
				type : "ok_cancel_other",
				ok_name : "Print",
				other_name : "Remember"
			}]
		}]
	}
};

//The dialog for setting things to be processed manually
var SetToManual_Dialog = {
	//variables to be set by the calling function
	mAtt : false,
	mBac : false,
	mCla : false,
	mFea : false,
	mRac : false,
	mMag : false,

	//when starting the dialog
	initialize : function (dialog) {
		dialog.load({
			"img1" : allIcons.automanual,
			"Atta" : this.mAtt,
			"Back" : this.mBac,
			"Clas" : this.mCla,
			"Feat" : this.mFea,
			"Item" : this.mMag,
			"Race" : this.mRac
		});
	},

	//when pressing the ok button
	commit : function (dialog) {
		var oResult = dialog.store();
		this.mAtt = oResult["Atta"];
		this.mRac = oResult["Race"];
		this.mBac = oResult["Back"];
		this.mCla = oResult["Clas"];
		this.mFea = oResult["Feat"];
		this.mMag = oResult["Item"];
	},

	description : {
		name : "Choose the functions you want to set to manual",
		elements : [{
			type : "view",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					align_children : "align_row",
					elements : [{
						type : "image",
						item_id : "img1",
						alignment : "align_bottom",
						width : 20,
						height : 20
					}, {
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "heading",
						bold : true,
						height : 21,
						char_width : 35,
						name : "Choose the functions you want to set to manual"
					}]
				}, {
					type : "static_text",
					item_id : "text",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					char_width : 40,
					name : "Here you can select the functions of this sheet that you want to be done manually instead of calculated (which is the default setting).\n\nSimply check of any items you want to set to manual and press \"Apply\".\n\nIf some items are already set to manual, simply uncheck the box, press \"Apply\", and that feature will be calculated and added to the sheet immediately."
				}, {
					type : "cluster",
					align_children : "align_distribute",
					elements : [{
						type : "view",
						elements : [{
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Atta",
								name : "Attacks",
								char_width : 12
							}, {
								type : "static_text",
								item_id : "tAtt",
								name : "No drop-down box; to hit and damage are calculated manually"
							}]
						}, {
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Back",
								name : "Background",
								char_width : 12
							}, {
								type : "static_text",
								item_id : "tBac",
								name : "Do nothing when changing the background"
							}]
						}, {
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Clas",
								name : "Class",
								char_width : 12
							}, {
								type : "static_text",
								item_id : "tCla",
								name : "Do nothing when changing the class or level"
							}]
						}, {
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Feat",
								name : "Feats",
								char_width : 12
							}, {
								type : "static_text",
								item_id : "tFea",
								name : "Disable auto-calculation and auto-fill for feats"
							}]
						}, {
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Item",
								name : "Magic Items",
								char_width : 12
							}, {
								type : "static_text",
								item_id : "tFea",
								name : "Disable auto-calculation and auto-fill for magic items"
							}]
						}, {
							type : "view",
							align_children : "align_row",
							char_height : 2,
							char_width : 38,
							elements : [{
								type : "check_box",
								item_id : "Race",
								name : "Race",
								char_width : 12
							},  {
								type : "static_text",
								item_id : "tRac",
								name : "Do nothing when changing the race"
							}]
						}]
					}]
				}, {
					type : "gap",
					height : 8
				}]
			}, {
				type : "ok_cancel",
				ok_name : "Apply"
			}]
		}]
	}
};

var ColorList = {
	aqua : { //wizard
		RGB : ["RGB", 0.1176, 0.4431, 0.7176],
		CMYK : ["CMYK", 0.85, 0.5, 0.01, 0]
	}, //1e71b7
	blue : { //paladin
		RGB : ["RGB", 0, 0.651, 0.8314],
		CMYK : ["CMYK", 0.75, 0.13, 0.09, 0]
	}, //00a6d4
	brown : { //warlock
		RGB : ["RGB", 0.4784, 0.3647, 0.3294],
		CMYK : ["CMYK", 0.38, 0.53, 0.51, 0.4]
	}, //7a5d54
	gray : { //rogue
		RGB : ["RGB", 0.5, 0.5, 0.5],
		CMYK : ["CMYK", 0.5, 0.39, 0.39, 0.21]
	}, //7e7f7f
	green : { //druid
		RGB : ["RGB", 0.0157, 0.4, 0.2],
		CMYK : ["CMYK", 0.9, 0.33, 0.96, 0.27]
	}, //046633
	orange : { //sorcerer
		RGB : ["RGB", 0.9098, 0.3059, 0.0588],
		CMYK : ["CMYK", 0, 0.8, 1, 0]
	}, //e84e0f
	pink : {
		RGB : ["RGB", 0.9098, 0.1961, 0.4863],
		CMYK : ["CMYK", 0, 0.9, 0.15, 0]
	}, //e8327c
	purple : { //bard
		RGB : ["RGB", 0.3922, 0.1412, 0.5059],
		CMYK : ["CMYK", 0.76, 1, 0.03, 0]
	}, //642481
	red : { //fighter
		RGB : ["RGB", 0.7412, 0.0941, 0.1333],
		CMYK : ["CMYK", 0.18, 1, 0.91, 0.08]
	}, //bd1822
	teal : { //ranger
		RGB : ["RGB", 0, 0.6275, 0.6],
		CMYK : ["CMYK", 0.79, 0.12, 0.45, 0]
	}, //00a099
	yellow : { //cleric
		RGB : ["RGB", 0.9529, 0.5725, 0],
		CMYK : ["CMYK", 0, 0.5, 1, 0]
	} //f39200
} //for gradients, add 15% brightness as BHS color

var DarkColorList = {
	aqua : ["CMYK", 0.85, 0.5, 0.01, 0.5], //144671
	blue : ["CMYK", 0.75, 0.13, 0.09, 0.5], //066882
	brown : ["CMYK", 0.38, 0.53, 0.51, 0.9], //291d16
	gray : ["CMYK", 0.7, 0.6, 0.56, 0.67], //303131
	green : ["CMYK", 0.9, 0.33, 0.96, 0.77], //003012
	orange : ["CMYK", 0, 0.8, 1, 0.5], //8d3200
	pink : ["CMYK", 0, 0.9, 0.15, 0.5], //8e204c
	purple : ["CMYK", 0.76, 1, 0.03, 0.5], //401150
	red : ["CMYK", 0.18, 1, 0.91, 0.58], //6e110b
	teal : ["CMYK", 0.79, 0.12, 0.45, 0.5], //00645f
	yellow : ["CMYK", 0, 0.5, 1, 0.5] //935b00
} // +50% black

var LightColorList = {
	aqua : ["CMYK", 0.68, 0.29, 0, 0], //4e9ad9
	blue : ["CMYK", 0.7, 0.06, 0.11, 0], //2bb3d9
	brown : ["CMYK", 0.29, 0.39, 0.38, 0.14], //ad9189
	gray : ["CMYK", 0.33, 0.25, 0.26, 0.04], //b3b3b3
	green : ["CMYK", 0.8, 0.13, 0.78, 0], //219a5e
	orange : ["CMYK", 0, 0.62, 0.7, 0], //f77d4d
	pink : ["CMYK", 0, 0.69, 0.01, 0], //f772a9
	purple : ["CMYK", 0.58, 0.78, 0.01, 0], //844e99
	red : ["CMYK", 0.1, 0.79, 0.55, 0], //db535c
	teal : ["CMYK", 0.7, 0, 0.35, 0], //26bdb8
	yellow : ["CMYK", 0, 0.38, 0.82, 0] //f8ad3c
}

//The dialog for setting the unit system and decimal
var SetUnitDecimals_Dialog = {
	//variables to be set by the calling function
	bSys : "imperial",
	bDec : "dot",

	//when starting the dialog
	initialize : function (dialog) {
		var isImp = this.bSys === "imperial";
		var isDot = this.bDec === "dot";
		dialog.load({
			"img1" : allIcons.unitsystem,
			"SyIm" : isImp,
			"SyMe" : !isImp,
			"DeDo" : isDot,
			"DeCo" : !isDot
		});
	},

	//when pressing the ok button
	commit : function (dialog) {
		var oResult = dialog.store();
		this.bSys = oResult["SyIm"] ? "imperial" : "metric";
		this.bDec = oResult["DeDo"] ? "dot" : "comma";
	},

	description : {
		name : "Choose the unit system and decimal separator",
		elements : [{
			type : "view",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					align_children : "align_row",
					elements : [{
						type : "image",
						item_id : "img1",
						alignment : "align_bottom",
						width : 20,
						height : 20
					}, {
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "title",
						bold : true,
						wrap_name : true,
						width : 480,
						name : "Choose the unit system and decimal separator"
					}]
				}, {
					type : "static_text",
					item_id : "txt0",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					width : 480,
					name : "Any changes you make will be applied immediately to all fields that would logically be impacted by them.\nThe conversion is not completely accurate, as some accuracy is sacrificed for numbers that are easier to use during play."
				}, {
					type : "static_text",
					item_id : "txt1",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					width : 480,
					name : " \u2022 Distances in game mechanics are converted by assuming 1 ft is 30 cm;\n \u2022 Weights used in game mechanics are converted by assuming 2 lb is 1 kg;\n \u2022 Liquid volumes used in game mechanics are converted by assuming 1 gallon is 4 liters;\n \u2022 All converted units used in game mechanics are rounded to the nearest half;\n \u2022 Equipment weight is calculated to three decimals accuracy;\n \u2022 The Character's Height and Weight fields are converted with more accuracy;\n \u2022 Units you added manually might not be converted as not all unit conversions are supported."
				}, {
					type : "static_text",
					item_id : "txt2",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					width : 480,
					name : "Any features that auto-fill will recognize these settings and use them to update the sheet, so you only have to set this once.\nThe Spell Sheet can't be flawlessly changed from one unit system to another on the fly. Changing unit systems is best done before generating a Spell Sheet.\nFields that are never auto-filled by sheet automation, such as the character history or notes, will not be changed."
				}, {
					type : "view",
					align_children : "align_row",
					aligment : "align_center",
					width : 480,
					elements : [{
						type : "cluster",
						align_children : "align_left",
						font : "heading",
						bold : true,
						name : "Unit System",
						elements : [{
							type : "radio",
							item_id : "SyIm",
							group_id : "Syst",
							name : "Imperial"
						}, {
							type : "radio",
							item_id : "SyMe",
							group_id : "Syst",
							name : "Metric"
						}]
					}, {
						type : "gap",
						char_width : 3
					}, {
						type : "cluster",
						align_children : "align_left",
						font : "heading",
						bold : true,
						name : "Decimal Separator",
						elements : [{
							type : "radio",
							item_id : "DeDo",
							group_id : "Deci",
							name : "Dot (and comma as thousands separator)"
						}, {
							type : "radio",
							item_id : "DeCo",
							group_id : "Deci",
							name : "Comma (and dot as thousands separator)"
						}]
					}]
				}, {
					type : "gap",
					height : 8
				}]
			}, {
				type : "ok_cancel"
			}]
		}]
	}
};

//The dialog for setting the text font size and hiding or showing text lines
var SetTextOptions_Dialog = {
	//variables to be set by the calling function
	bSize : 5.74,
	bDefSize : 8.4,
	bDefSizeSheet : 5.74,
	bFont : "SegoePrint",
	bFontsArray : {"SegoeUI" : -1, "SegoeUI-Semibold" : -1},
	fOthTest : false,
	bDefFont : "SegoePrint",

	//when starting the dialog
	initialize : function (dialog) {
		dialog.load({
			"img1" : allIcons.textsize,
			"StSz" : this.bDefSize.toString(),
			"sOSi" : this.bSize.toString(),
			"fAlS" : this.bFontsArray,
			"fStS" : this.bDefFont
		});

		dialog.enable({
			"fStS" : false,
			"StSz" : false
		});

		if (Number(this.bSize) === this.bDefSize) {
			dialog.load({
				"sSta" : true
			});
		} else if (Number(this.bSize) === 0) {
			dialog.load({
				"sAut" : true
			});
		} else {
			dialog.load({
				"sOth" : true
			});
		}

		if (this.bFont === this.bDefFont) {
			dialog.load({
				"fSta" : true
			});
		} else if (this.bFontsArray[this.bFont]) {
			dialog.load({
				"fAlt" : true
			});
		} else {
			dialog.load({
				"fOth" : true,
				"fOtS" : this.bFont
			});
		}
	},

	//when pressing the ok button
	commit : function (dialog) {
		var oResult = dialog.store();

		if (oResult["sSta"]) {
			this.bSize = oResult["StSz"];
		} else if (oResult["sAut"]) {
			this.bSize = 0;
		} else if (oResult["sOth"]) {
			this.bSize = oResult["sOSi"];
		}

		if (oResult["fSta"]) {
			this.bFont = this.bDefFont;
		} else if (oResult["fAlt"]) {
			var elResult = dialog.store()["fAlS"];
			var fResult = this.bDefFont;
			for (var el in elResult) {
				if (elResult[el] > 0) {
					fResult = el;
				}
			}
			this.bFont = fResult;
		} else if (oResult["fOth"]) {
			if (this.fOthTest) {
				this.bFont = oResult["fOtS"];
			} else {
				this.bFont = this.bDefFont;
			}
		}
	},

	//do this whenever a number is entered to make sure it has a dot as decimal separator and not trailing zeroes
	sOSi : function (dialog) {
		var cResult = dialog.store()["sOSi"];
		if (isNaN(cResult) && (/,/).test(cResult)) {
			var Parsed = parseFloat(cResult.replace(/,/, "."));
		} else {
			var Parsed = parseFloat(cResult);
		}

		dialog.load({
			"sOth" : true,
			"sOSi" : Parsed.toString()
		});
	},

	fSta : function (dialog) {
		this.bDefSize = this.bDefSizeSheet;
		dialog.load({
			"StSz" : this.bDefSize.toString()
		});
	},

	fAlt : function (dialog) {
		var fontResult = dialog.store()["fAlS"];
		var cResult = "";
		for (var Fo in fontResult) {
			if (fontResult[Fo] > 0) {
				var cResult = Fo.toString();
			}
		}
		if (testFont(cResult)) {
			this.bDefSize = FontList[cResult];
			dialog.load({
				"fAlt" : true,
				"StSz" : this.bDefSize.toString()
			});
		}
	},

	fAlS : function (dialog) {
		var fontResult = dialog.store()["fAlS"];
		var cResult = "";
		for (var Fo in fontResult) {
			if (fontResult[Fo] > 0) {
				var cResult = Fo.toString();
			}
		}
		if (cResult === "") {
			this.bDefSize = this.bDefSizeSheet;
			dialog.load({
				"StSz" : this.bDefSize.toString()
			});
		} else if (testFont(cResult)) {
			this.bDefSize = FontList[cResult];
			dialog.load({
				"fAlt" : true,
				"StSz" : this.bDefSize.toString()
			});
		} else {
			app.alert({
				cMsg : "The font \"" + cResult + "\" does not appear to be working on your machine.\nEither it isn't spelled in the proper PDSysFont way, or it is not found on your system.\n\nNote that writing a font as a PDSysFont is not straightforward. You can use the names in the drop-down box as a guide (i.e. don't use spaces and pay attention to capitalization).",
				nIcon : 0,
				cTitle : "Error trying to apply the font"
			});
			this.bDefSize = this.bDefSizeSheet;
			dialog.load({
				"fSta" : true,
				"StSz" : this.bDefSize.toString()
			});
		}
	},
	fOth : function (dialog) {
		var cResult = dialog.store()["fOtS"];

		if (cResult === "") {
			this.bDefSize = this.bDefSizeSheet;
			this.fOthTest = false;
			dialog.load({
				"StSz" : this.bDefSize.toString()
			});
		} else if (testFont(cResult)) {
			this.bDefSize = this.bDefSizeSheet;
			this.fOthTest = true;
			dialog.load({
				"StSz" : this.bDefSize.toString()
			});
		} else {
			this.fOthTest = false;
			app.alert({
				cMsg : "The font \"" + cResult + "\" does not appear to be working on your machine.\nEither it isn't spelled in the proper PDSysFont way, or it is not found on your system.\n\nNote that writing a font as a PDSysFont is not straightforward. You can use the names in the drop-down box as a guide (i.e. don't use spaces and pay attention to capitalization).",
				nIcon : 0,
				cTitle : "Error trying to apply the font"
			});
			this.bDefSize = this.bDefSizeSheet;
			dialog.load({
				"fSta" : true,
				"StSz" : this.bDefSize.toString()
			});
		}
	},

	fOtS : function (dialog) {
		var cResult = dialog.store()["fOtS"].replace(/\s+/g, "");

		if (cResult === "") {
			this.bDefSize = this.bDefSizeSheet;
			this.fOthTest = false;
			dialog.load({
				"StSz" : this.bDefSize.toString()
			});
		} else if (testFont(cResult)) {
			this.bDefSize = this.bDefSizeSheet;
			this.fOthTest = true;
			dialog.load({
				"fOth" : true,
				"fOtS" : cResult.toString(),
				"StSz" : this.bDefSize.toString()
			});
		} else {
			this.fOthTest = false;
			app.alert({
				cMsg : "The font \"" + cResult + "\" does not appear to be working on your machine.\nEither it isn't spelled in the proper PDSysFont way, or it is not found on your system.\n\nNote that writing a font as a PDSysFont is not straightforward. You can use the names in the drop-down box as a guide (i.e. don't use spaces and pay attention to capitalization).",
				nIcon : 0,
				cTitle : "Error trying to apply the font"
			});
			this.bDefSize = this.bDefSizeSheet;
			dialog.load({
				"fSta" : true,
				"StSz" : this.bDefSize.toString()
			});
		}
	},

	description : {
		name : "Set the Font, the Font Size, and Hide Text Lines",
		elements : [{
			type : "view",
			elements : [{
				type : "view",
				elements : [{
					type : "view",
					align_children : "align_row",
					elements : [{
						type : "image",
						item_id : "img1",
						alignment : "align_bottom",
						width : 20,
						height : 20
					}, {
						type : "static_text",
						item_id : "head",
						alignment : "align_fill",
						font : "title",
						bold : true,
						height : 21,
						char_width : 40,
						name : "Set the Font and the Font Size"
					}]
				}, {
					type : "static_text",
					item_id : "txt0",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					char_width : 50,
					name : "Below you can set the font size and change the font of all the form fields.\n\nNote that if you use a font of your own choosing (custom font), it might not be possible to align the text properly with the text lines, regardless of the font size you select."
				}, {
					type : "static_text",
					item_id : "txt1",
					alignment : "align_fill",
					font : "dialog",
					wrap_name : true,
					char_width : 50,
					name : "The settings for font size will be applied to all text fields that support multiple lines of text. Fields with a single line of text have a font size of 'auto'.\n\nIf you set the font size to 'auto', the text will resize to the size of the field. You can subsequently make the text smaller by entering more text or by entering line breaks."
				}, {
					type : "cluster",
					align_children : "align_left",
					char_width : 50,
					name : "Select the Font",
					font : "heading",
					bold : true,
					elements : [{
						type : "view",
						align_children : "align_distribute",
						height : 23,
						elements : [{
							type : "radio",
							item_id : "fSta",
							group_id : "Font",
							name : "Default font:",
							height : 22
						}, {
							type : "edit_text",
							item_id : "fStS",
							char_width : 8,
							height : 20,
							font : "dialog",
							bold : true
						}]
					}, {
						type : "view",
						align_children : "align_distribute",
						height : 23,
						elements : [{
							type : "radio",
							item_id : "fAlt",
							group_id : "Font",
							name : "Tested font, can be aligned with the lines in Adobe Acrobat:",
							height : 22
						}, {
							type : "popup",
							item_id : "fAlS",
							char_width : 10
						}]
					}, {
						type : "view",
						align_children : "align_distribute",
						height : 23,
						elements : [{
							type : "radio",
							item_id : "fOth",
							group_id : "Font",
							name : "Custom font (using the PDSysFont font name):",
							height : 22
						}, {
							type : "edit_text",
							item_id : "fOtS",
							char_width : 20,
							height : 20
						}]
					}]
				}, {
					type : "cluster",
					align_children : "align_left",
					char_width : 50,
					name : "Select the Font Size",
					font : "heading",
					bold : true,
					elements : [{
						type : "view",
						align_children : "align_row",
						height : 20,
						elements : [{
							type : "radio",
							item_id : "sSta",
							group_id : "Size",
							name : "Standard font size, tested to align with the lines in Adobe Acrobat:"
						}, {
							type : "edit_text",
							item_id : "StSz",
							char_width : 4,
							height : 20,
							font : "dialog",
							bold : true
						}]
					}, {
						type : "view",
						align_children : "align_left",
						height : 20,
						elements : [{
							type : "radio",
							item_id : "sAut",
							group_id : "Size",
							name : "Auto font size. The text will resize to the size of the field."
						}]
					}, {
						type : "view",
						align_children : "align_distribute",
						height : 20,
						elements : [{
							type : "radio",
							item_id : "sOth",
							group_id : "Size",
							name : "Custom font size (use your system's decimal separator):"
						}, {
							type : "edit_text",
							item_id : "sOSi",
							char_width : 4,
							height : 20,
							SpinEdit : true
						}]
					}]
				}, {
					type : "gap",
					height : 8
				}]
			}, {
				type : "ok_cancel"
			}]
		}]
	}
};

var Highlighting = {
	initialState : app.runtimeHighlight,
	initialColor : app.runtimeHighlightColor,
	rememberState : eval(What("Highlighting")),
	rememberColor : tDoc.getField("Highlighting").fillColor
};

var defaultSpellTable = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 0, 0, 0, 0, 0, 0, 0, 0],
	[3, 0, 0, 0, 0, 0, 0, 0, 0],
	[4, 2, 0, 0, 0, 0, 0, 0, 0],
	[4, 3, 0, 0, 0, 0, 0, 0, 0],
	[4, 3, 2, 0, 0, 0, 0, 0, 0],
	[4, 3, 3, 0, 0, 0, 0, 0, 0],
	[4, 3, 3, 1, 0, 0, 0, 0, 0],
	[4, 3, 3, 2, 0, 0, 0, 0, 0],
	[4, 3, 3, 3, 1, 0, 0, 0, 0],
	[4, 3, 3, 3, 2, 0, 0, 0, 0],
	[4, 3, 3, 3, 2, 1, 0, 0, 0],
	[4, 3, 3, 3, 2, 1, 0, 0, 0],
	[4, 3, 3, 3, 2, 1, 1, 0, 0],
	[4, 3, 3, 3, 2, 1, 1, 0, 0],
	[4, 3, 3, 3, 2, 1, 1, 1, 0],
	[4, 3, 3, 3, 2, 1, 1, 1, 0],
	[4, 3, 3, 3, 2, 1, 1, 1, 1],
	[4, 3, 3, 3, 3, 1, 1, 1, 1],
	[4, 3, 3, 3, 3, 2, 1, 1, 1],
	[4, 3, 3, 3, 3, 2, 2, 1, 1]
]

var warlockSpellTable = [
	[0, 0, 0, 0, 0, 0, 0, 0, 0],
	[1, 0, 0, 0, 0, 0, 0, 0, 0],
	[2, 0, 0, 0, 0, 0, 0, 0, 0],
	[0, 2, 0, 0, 0, 0, 0, 0, 0],
	[0, 2, 0, 0, 0, 0, 0, 0, 0],
	[0, 0, 2, 0, 0, 0, 0, 0, 0],
	[0, 0, 2, 0, 0, 0, 0, 0, 0],
	[0, 0, 0, 2, 0, 0, 0, 0, 0],
	[0, 0, 0, 2, 0, 0, 0, 0, 0],
	[0, 0, 0, 0, 2, 0, 0, 0, 0],
	[0, 0, 0, 0, 2, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 3, 0, 0, 0, 0],
	[0, 0, 0, 0, 4, 0, 0, 0, 0],
	[0, 0, 0, 0, 4, 0, 0, 0, 0],
	[0, 0, 0, 0, 4, 0, 0, 0, 0],
	[0, 0, 0, 0, 4, 0, 0, 0, 0],
]

var SpellPointsTable = [0, 4, 6, 14, 17, 27, 32, 38, 44, 57, 64, 73, 73, 83, 83, 94 ,94, 107, 114, 123, 133];

var compString = {
	mount : {
		featurestring : "\u25C6 Find Steed: If dropped to 0 HP, the steed disappears, leaving behind no physical form",
		string : "Find Steed (2nd-level conjuration spell, PHB 240):" +
				"\n\u2022 " + "Summon a spirit in the form of a steed, appearing in an unoccupied space within 30 ft" +
				"\n   " + "It assumes a chosen form: warhorse, pony, camel, elk, or mastiff (DM can allow more forms)" +
				"\n   " + "The steed has the statistics of the chosen form, though its type is celestial, fey, or fiend" +
				"\n   " + "If it has an Intelligence of 5 or less, its Intelligence becomes 6 " +
				"\n   " + "It gains the ability to understand one language that I, the caster, can speak" +
				"\n   " + "When the steed drops to 0 hit points, it disappears, leaving behind no physical form" +
				"\n\u2022 " + "The steed serves me as a mount. I have a bond with it that allows us to fight as a seamless unit" +
				"\n\u2022 " + "While mounted on my steed, I can make any spell I cast that targets only me also target it" +
				"\n\u2022 " + "While my steed is within 1 mile of me, we can communicate with each other telepathically" +
				"\n\u2022 " + "I can dismiss my steed at any time as an action, causing it to disappear" +
				"\n\u2022 " + "Casting this spell again summons the same steed, restored to its max HP, without conditions" +
				"\n\u2022 " + "I can't have more than one steed bonded at a time; as an action, I can release it from its bond",
		actions : [["action", "Find Steed (dismiss)"]],
		actionTooltip : "the Find Steed spell"
	},
	steed : {
		featurestring : "\u25C6 Find Greater Steed: If dropped to 0 HP, the steed disappears, leaving behind no physical form",
		string : "Find Greater Steed (4th-level conjuration spell, XGtE 156):" +
				"\n\u2022 " + "Summon a spirit in the form of a steed, appearing in an unoccupied space within 30 ft" +
				"\n   " + "It has the chosen form: griffon, pegasus, peryton, dire wolf, rhinoceros, or saber-toothed tiger" +
				"\n   " + "The steed has the statistics of the chosen form, though its type is celestial, fey, or fiend" +
				"\n   " + "If it has an Intelligence of 5 or less, its Intelligence becomes 6 " +
				"\n   " + "It gains the ability to understand one language that I, the caster, can speak" +
				"\n   " + "When the steed drops to 0 hit points, it disappears, leaving behind no physical form" +
				"\n\u2022 " + "The steed serves me as a mount. I have a bond with it that allows us to fight as a seamless unit" +
				"\n\u2022 " + "While mounted on my steed, I can make any spell I cast that targets only me also target it" +
				"\n\u2022 " + "While my steed is within 1 mile of me, I can communicate with it telepathically" +
				"\n\u2022 " + "I can dismiss my steed at any time as an action, causing it to disappear" +
				"\n\u2022 " + "Casting this spell again summons the same steed, restored to its max HP, without conditions" +
				"\n\u2022 " + "I can't have more than one steed bonded at a time; as an action, I can release it from its bond",
		actions : [["action", "Find Greater Steed (dismiss)"]],
		actionTooltip : "the Find Greater Steed spell"
	},
	familiar : {
		featurestring : "\u25C6 Find Familiar: If dropped to 0 HP, the familiar disappears, leaving behind no physical form. The familiar must obey all commands of the master",
		string : "Find Familiar (1st-level conjuration [ritual] spell, PHB 240):" +
			"\n\u2022 " + "Summon a spirit that serves as a familiar, appearing in an unoccupied space within 10 ft" +
			"\n   " + "It assumes a chosen form (can change at every casting): bat, cat, crab, frog (toad), hawk," +
			"\n   " + "lizard, octopus, owl, poisonous snake, fish (quipper), rat, raven, sea horse, spider, or weasel." +
			"\n   " + "It has the chosen form's statistics, but its type changes from beast to celestial, fey, or fiend" +
			"\n   " + "When the familiar drops to 0 hit points, it disappears, leaving behind no physical form" +
			"\n   " + "It reappears when I cast this spell again (in a new form if so desired)" +
			"\n\u2022 " + "The familiar acts independently of me, but it always obeys my commands" +
			"\n   " + "In combat, it rolls its own initiative and acts on its own turn, but it can't attack" +
			"\n\u2022 " + "While it is within 100 ft of me, I can communicate with it telepathically" +
			"\n\u2022 " + "As an action, I see/hear what it does (but not with my senses) until the start of my next turn" +
			"\n\u2022 " + "As an action, I can temporarily dismiss it, having it disappears into a pocket dimension" +
			"\n\u2022 " + "As an action, while it is temporarily dismissed, I can cause it to reappear within 30 ft" +
			"\n\u2022 " + "I can't have more than one familiar bonded at a time; as an action, I can dismiss it forever" +
			"\n\u2022 " + "When I cast a spell with a range of touch, my familiar can deliver the spell" +
			"\n   " + "It must be within 100 ft of me and it must use its reaction to deliver the spell when I cast it" +
			"\n   " + "It acts as if it cast the spell, but it can use my modifiers for any attack rolls the spell requires",
		actions : [["action", "Find Familiar (dismiss/reappear)"], ["action", "Use familiar's senses"]],
		actionTooltip : "the Find Familiar spell"
	},
	pact_of_the_chain : {
		featurestring : "\u25C6 Pact of the Chain: If dropped to 0 HP, the familiar disappears, leaving behind no physical form. It must obey all commands of the master",
		string : "Pact of the Chain (variant of the Find Familiar 1st-level conjuration [ritual] spell, PHB 240):" +
			"\n\u2022 " + "Summon a spirit that serves as a familiar, appearing in an unoccupied space within 10 ft" +
			"\n   " + "It assumes a chosen form (can change at every casting): bat, cat, crab, frog (toad), hawk," +
			"\n   " + "lizard, octopus, owl, poisonous snake, fish (quipper), rat, raven, sea horse, spider, weasel," +
			"\n   " + "or one of the special forms: imp, pseudodragon, quasit, or sprite." +
			"\n   " + "It has the chosen form's statistics, but its type changes from beast to celestial, fey, or fiend" +
			"\n   " + "When the familiar drops to 0 hit points, it disappears, leaving behind no physical form" +
			"\n   " + "It reappears when I cast this spell again (in a new form if so desired)" +
			"\n\u2022 " + "The familiar acts independently of me, but it always obeys my commands" +
			"\n   " + "In combat, it rolls its own initiative and acts on its own turn, but it can't attack on its turn" +
			"\n\u2022 " + "While it is within 100 ft of me, I can communicate with it telepathically" +
			"\n\u2022 " + "With my Attack action, I can forgo one attacks to have the familiar make one with its reaction" +
			"\n\u2022 " + "As an action, I see/hear what it does (but not with my senses) until the start of my next turn" +
			"\n\u2022 " + "As an action, I can temporarily dismiss it, having it disappears into a pocket dimension" +
			"\n\u2022 " + "As an action, while it is temporarily dismissed, I can cause it to reappear within 30 ft" +
			"\n\u2022 " + "I can't have more than one familiar bonded at a time; as an action, I can dismiss it forever" +
			"\n\u2022 " + "When I cast a spell with a range of touch, my familiar can deliver the spell" +
			"\n   " + "It must be within 100 ft of me and it must use its reaction to deliver the spell when I cast it" +
			"\n   " + "It acts as if it cast the spells, but it can use my modifiers for any attack rolls the spell requires",
		actions : [["action", "Have familiar attack (part of my Attack action)"], ["action", "Familiar (dismiss/reappear)"], ["action", "Use familiar's senses"]],
		actionTooltip : "Warlock (Pact of the Chain)"
	},
	companion : {
		featurestring : "",
		string : "Ranger's Companion (PHB 93):" +
			"\n\u2022 " + "A beast no larger than medium of challenge rating 1/4 or lower" +
			"\n\u2022 " + "If the beast dies, I can spend 8 hours magically bonding with another that isn't hostile to me" +
			"\n\u2022 " + "When moving in favored terrain with only the beast, I can move stealthily at a normal pace" +
			"\n\u2022 " + "The beast adds my proficiency bonus to its AC, attack rolls, damage rolls," +
			"\n   " + "as well as to any saving throws and skills it is proficient with." +
			"\n\u2022 " + "The beast's Hit Point maximum equals four times my ranger level if higher than its normal HP" +
			"\n\u2022 " + "The beast takes its turn on my initiative" +
			"\n\u2022 " + "I can verbally command the beast where to move (no action)" +
			"\n\u2022 " + "As an action, I can have the beast do an Attack, Dash, Disengage, or Help action on its turn" +
			"\n\u2022 " + "If I don't command it to take an action, it takes the Dodge action instead",
		actions : []
	},
	companionrr : {
		featurestring : "",
		string : "Ranger's Animal Companion (UA:RR 5):" +
			"\n\u2022 " + "Call forth and bond with an animal from the wilderness by spending 8 hours and 50 gp" +
			"\n\u2022 " + "The animal can be an ape, black bear, boar, giant badger, giant weasel, mule, panther, or wolf" +
			"\n\u2022 " + "I can have one companion at a time; If it dies, I can spend 8 hours and 25 gp to bring it back" +
			"\n\u2022 " + "My companion uses my Proficiency Bonus instead of its own and also adds it to AC & damage" +
			"\n\u2022 " + "My companion gains a Hit Dice for every ranger level I gain after 3rd" +
			"\n\u2022 " + "My companion can divide 2 points among its ability scores (to max 20) whenever I gain an ASI" +
			"\n\u2022 " + "My companion is proficient in two skills of my choice, as well as all saving throws" +
			"\n\u2022 " + "My companion obeys my commands as best it can, or act on its own if I can't command it" +
			"\n\u2022 " + "My companion rolls for initiative and takes actions as normal, but can't use Multiattack" +
			"\n\u2022 " + "When moving stealthily together with only my companion, we can move at a normal pace" +
			"\n\u2022 " + "My companion gains a bonus on damage rolls against my favored enemies just like me",
		actions : []
	},
	mechanicalserv : {
		featurestring : "",
		string : "Artificer's Mechanical Servant (UA:A 4):" +
			"\n\u2022 " + "The mechanical servant has the statistics of a chosen large beast of challenge rating 2 or lower" +
			"\n  " + "It has the Construct type, understands any language that I know, and has 60 ft Darkvision" +
			"\n  " + "In addition, it is immune to poison damage, being poisoned, and being charmed" +
			"\n\u2022 " + "I can have one servant at a time; If it dies, I can repair it or create a new one" +
			"\n  " + "I can repair the servant over the course of a long rest, which restores it to 1 HP" +
			"\n  " + "I can build a new servant by spending 8 hours a day for 7 days and 1000 gp of materials" +
			"\n\u2022 " + "The servant rolls initiative and takes actions as normal, obeying my commands as best it can" +
			"\n\u2022 " + "As a reaction when I am attacked in melee and my mechanical servant is within 5 ft of me," +
			"\n  I can command the servant to use its reaction to make a melee attack against the attacker",
		actions : [["reaction", "Mechanical Servant (if attacked)"]]
	}
};

//list of recommended fonts and there size to use
var FontList = {
	"SegoePrint" : !typePF ? 5.74 : 6.3,
	"SegoeUI" : !typePF ? 6.35 : 7,
	"SegoeUI-Semibold" : !typePF ? 6.3 : 6.9,
	"Garamond" : !typePF ? 7.7 : 8.45,
	"TimesNewRoman" : !typePF ? 7.4 : 8.1,
	"Calibri" : !typePF ? 7.47 : 8.2
};

//list of field names that correspond to the name of the bookmark
var BookMarkList = {
	"CSfront" : "Show Buttons",
	"CSback" : "Background Menu",
	"ASfront" : !typePF ? "Text.Header.Status" : "Extra.Notes",
	"ASoverflow" : "Extra.Magic Item " + (FieldNumbers.magicitemsD + 1),
	"ASbackgr" : !typePF ? "Text.Header.Background2" : "Sex",
	"AScomp" : "Comp.Desc.Name",
	"ASnotes" : "Notes.Left",
	"WSfront" : "Wildshapes.Settings",
	"ALlog" : "AdvLog.Options",
	"SSfront" : "spells.name.0",
	"SSmore" : "spells.name.0",
	"PRsheet" : "PRsheet.toFocus",

	"CSfront_Bookmarks" : tDoc.bookmarkRoot.children[0].children[0],
	"CSback_Bookmarks" : tDoc.bookmarkRoot.children[0].children[1],
	"ASfront_Bookmarks" : tDoc.bookmarkRoot.children[0].children[2],
	"ASoverflow_Bookmarks" : tDoc.bookmarkRoot.children[0].children[3],
	"ASbackgr_Bookmarks" : tDoc.bookmarkRoot.children[0].children[4],
	"AScomp_Bookmarks" : tDoc.bookmarkRoot.children[0].children[5],
	"ASnotes_Bookmarks" : tDoc.bookmarkRoot.children[0].children[6],
	"WSfront_Bookmarks" : tDoc.bookmarkRoot.children[0].children[7],
	"SSfront_Bookmarks" : tDoc.bookmarkRoot.children[0].children[8],
	"SSmore_Bookmarks" : tDoc.bookmarkRoot.children[0].children[8],
	"ALlog_Bookmarks" : tDoc.bookmarkRoot.children[0].children[9],
	"PRsheet_Bookmarks" : tDoc.bookmarkRoot.children[0].children[10],

	"Character sheet front" : !typePF ? "Text.Level" : "Show Buttons",
	"Level / Character Attributes" : "Character Level",
	"Character Information" : "PC Name.0",
	"Abilities " : "Str",
	"Saving Throws" : "Saving Throw advantages / disadvantages",
	"HP / Proficiency Bonus / AC" : "HP Max",
	"Armor" : "AC Armor Description",
	"Saving Throw Advantages / Disadvantages" : "Saving Throw advantages / disadvantages",
	"Ability save DC" : "Spell save DC 1",
	"Proficiency Bonus / Inspiration" : "Proficiency Bonus",
	"Proficiencies " : "Language 1",
	"Senses" : "Vision",
	"Limited Features" : "Limited Feature 1",
	"Skills " : "Acr",
	"Combat" : "Text.Header.Combat",
	"Initiative / Speed" : "Initiative bonus",
	"Defense / Health" : "HP Current",
	"Attacks / Actions" : "Attack.1.Weapon Selection",
	"Actions" : "Action 1",
	"Attacks " : "Attack.1.Weapon Selection",

	"Character sheet back" : !typePF ? "Text.Header.Features" : "Background Menu",
	"Features " : "Text.Header.Features",
	"Racial Traits" : "Racial Traits",
	"Class Features" : "Class Features",
	"Background Feature" : "Background Feature",
	"Proficiencies" : "Text.Header.Proficiencies",
	"Background " : "Text.Header.Background",
	"Background Traits" : "Background Menu",
	"Personality Trait" : "Personality Trait",
	"Ideal" : "Ideal",
	"Bond" : "Bond",
	"Flaw" : "Flaw",
	"Feats" : !typePF ? "Feat Name 1" : "Feat Name 1.1",
	"Equipment" : "Adventuring Gear Row 1",
	"Coins, Gems, and other Valuables" : "Valuables1",

	"Additional sheet" : !typePF ? "Text.Header.Status.1" : "Extra.Notes.1",
	"Additional sheet_template" : "ASfront",
	"Status" : "Text.Header.Status.1",
	"Exhaustion" : "Extra.Exhaustion Level 1.1",
	"Conditions" : "Extra.Condition 1.1",
	"Combat Rules / Notes" : "Extra.Notes.1",
	"Notes  " : "Extra.Notes.1",
	"Possessions" : "Text.Header.Possessions.1",
	"Magic Items" : "Extra.Magic Item 1.1",
	"Extra Equipment" : "Extra.Gear Row 1.1",
	"Other Holdings" : "Extra.Other Holdings.1",

	"Overflow sheet" : "Extra.Magic Item " + (FieldNumbers.magicitemsD + 1) + ".1",
	"Overflow sheet_template" : "ASoverflow",
	"Magic Items " : "Extra.Magic Item " + (FieldNumbers.magicitemsD + 1) + ".1",
	"Feats " : "Feat Name " + (FieldNumbers.feats - 3) + ".1",
	"Limited Features " : "Limited Feature 9.1",
	"Actions " : "Action " + (FieldNumbers.trueactions - 5) + ".1",
	"Proficiencies " : "MoreProficiencies.1",

	"Background sheet" :  !typePF ? "Text.Header.Background2.1" : "Sex.1",
	"Background sheet_template" : "ASbackgr",
	"Character Description" : "Sex.1",
	"Background" : "Text.Header.Background2.1",
	"Character History" : "Background_History.1",
	"Character Portrait" : "Portrait.1",
	"Appearance" : "Background_Appearance.1",
	"Enemies" : "Background_Enemies.1",
	"Allies & Organizations" :  !typePF ? "Symbol.1" : "Background_Organisation.Left.1",
	"Organization Symbol" : "Symbol.1",
	"Lifestyle" : "Lifestyle.1",

	"Companion sheet" : "Companion.Options",
	"Companion sheet_template" : "AScomp",
	"Descriptive Header" : "Comp.Type",
	"Abilities" : "Comp.Use.Ability.Str.Score",
	"Skills" : "Comp.Use.Skills.Acr.Mod",
	"Attacks" : "Comp.Use.Attack.1.Weapon Selection",
	"Initiative" : "Comp.Use.Combat.Init.Mod",
	"Initiative / Speed / HD" : "Comp.Use.Combat.Init.Mod",
	"Speed" : "Comp.Use.Speed",
	"AC / Prof Bonus / HP" : "Comp.Use.AC",
	"Defense" : "Comp.Use.AC",
	"Health" : "Comp.Use.HP.Current",
	"Features" : "Comp.Use.Features",
	"Proficiency Bonus" : "Comp.Use.Proficiency Bonus",
	"Traits" : "Comp.Use.Traits",
	"Notes " : "Cnote.Left",

	"Notes sheet" : "Notes.Left",
	"Notes sheet_template" : "ASnotes",
	"Notes" : "Notes.Left",

	"Wild Shapes" : "Wildshapes.Settings",
	"Wild Shapes_template" : "WSfront",
	"Wild Shape 1" : "Wildshape.Race.1",
	"Wild Shape 2" : "Wildshape.Race.2",
	"Wild Shape 3" : "Wildshape.Race.3",
	"Wild Shape 4" : "Wildshape.Race.4",

	"Spell Sheets" : "spells.name.0",
	"Spell Sheets_template" : "SSfront",

	"Adventurers Logsheet" : "AdvLog.Options",
	"Adventurers Logsheet_template" : "ALlog",
	"Logsheet Entry 1" : "Text.AdvLog.1",
	"Logsheet Entry 2" : "Text.AdvLog.2",
	"Logsheet Entry 3" : "Text.AdvLog.3",
	"Logsheet Entry 4" : "Text.AdvLog.4",
	"Logsheet Entry 5" : "Text.AdvLog.5",
	"Logsheet Entry 6" : "Text.AdvLog.6",
	"Logsheet Entry 7" : "Text.AdvLog.7",

	"Reference Sheet" : "PRsheet.toFocus.1",
	"Reference Sheet_template" : "PRsheet"
};

var TemplateNames = {
	"CSfront" : "Character sheet front",
	"CSback" : "Character sheet back",
	"ASfront" : (!typePF ? "Conditions / Magic Items" : "Feats / Magic Items") + " sheet (3rd page)",
	"ASoverflow" : "Overflow (magic items, feats, actions, etc.) sheet",
	"ASbackgr" : "Background and Organization sheet",
	"AScomp" : "Companion sheet",
	"ASnotes" : "Notes sheet",
	"WSfront" : "Wild Shapes sheet",
	"ALlog" : "Adventurers Logsheet",
	"SSfront" : "Spell sheet",
	"SSmore" : "Spell sheet",
	"PRsheet" : "Rules Reference sheet"
};

var TemplatesWithExtras = ["AScomp", "ASnotes", "WSfront", "SSfront", "SSmore", "ALlog"];

var TemplateDep = {
	"ASfront" : [],
	"ASoverflow" : ["ASfront"],
	"ASbackgr" : ["ASoverflow", "ASfront"],
	"AScomp" : ["ASbackgr", "ASoverflow", "ASfront"],
	"ASnotes" : ["AScomp", "ASbackgr", "ASoverflow", "ASfront"],
	"WSfront" : ["ASnotes", "AScomp", "ASbackgr", "ASoverflow", "ASfront"],
	"SSfront" : ["WSfront", "ASnotes", "AScomp", "ASbackgr", "ASoverflow", "ASfront"],
	"SSmore" : ["SSfront", "WSfront", "ASnotes", "AScomp", "ASbackgr", "ASoverflow", "ASfront"],
	"ALlog" : ["SSmore", "SSfront", "WSfront", "ASnotes", "AScomp", "ASbackgr", "ASoverflow", "ASfront"],
	"PRsheet" : ["ALlog", "SSmore", "SSfront", "WSfront", "ASnotes", "AScomp", "ASbackgr", "ASoverflow", "ASfront"]
};

var TemplateResetRanges = {
	"AScomp" : ["Comp", "Text.Comp", "Companion", "Cnote", "BlueText.Comp"],
	"ASnotes" : ["Notes"],
	"WSfront" : ["Wildshape.Race"],
	"ALlog" : ["AdvLog", "Text.AdvLog"]
};

var factions = {
	"emeraldenclave" : {
		name : "The Emerald Enclave",
		type : "Forgotten Realms",
		ranks : [
			"Springwarden (rank 1)",
			"Summerstrider (rank 2)",
			"Autumnreaver (rank 3)",
			"Winterstalker (rank 4)",
			"Master of the Wild (rank 5)"
		]
	},
	"harpers" : {
		name : "The Harpers",
		type : "Forgotten Realms",
		ranks : [
			"Watcher (rank 1)",
			"Harpshadow (rank 2)",
			"Brightcandle (rank 3)",
			"Wise Owl (rank 4)",
			"High Harper (rank 5)"
		]
	},
	"lordsalliance" : {
		name : "The Lords' Alliance",
		type : "Forgotten Realms",
		ranks : [
			"Cloak (rank 1)",
			"Redknife (rank 2)",
			"Stingblade (rank 3)",
			"Warduke (rank 4)",
			"Lioncrown (rank 5)"
		]
	},
	"ordergauntlet" : {
		name : "The Order of the Gauntlet",
		type : "Forgotten Realms",
		ranks : [
			"Chevall (rank 1)",
			"Marcheon (rank 2)",
			"Whitehawk (rank 3)",
			"Vindicator (rank 4)",
			"Righteous Hand (rank 5)"
		]
	},
	"zhentarim" : {
		name : "The Zhentarim",
		type : "Forgotten Realms",
		ranks : [
			"Fang (rank 1)",
			"Wolf (rank 2)",
			"Viper (rank 3)",
			"Ardragon (rank 4)",
			"Dread Lord (rank 5)"
		]
	},
	"azorius" : {
		name : "Azorius Senate",
		type : "Ravnica",
		ranks : [
			"Official (rank 1)",
			"Authority (rank 2)",
			"Minister, Judge, or Senator (rank 3)",
			"Arbiter (rank 4)"
		]
	},
	"boros" : {
		name : "Boros Legion",
		type : "Ravnica",
		ranks : [
			"Sergeant (rank 1)",
			"Skyknight (special)",
			"Wojek (special)",
			"Brigadier (rank 2)",
			"Sunhome Guard (special)",
			"Captain (rank 3)",
			"Commander (rank 4)"
		]
	},
	"dimir" : {
		name : "House Dimir",
		type : "Ravnica",
		ranks : [
			"Independent Agent",
			"Collector of Secrets",
			"Inner Circle",
			"Guildmaster's Confidant"
		]
	},
	"golgari" : {
		name : "Golgari Swarm",
		type : "Ravnica",
		ranks : [
			"Agent",
			"Monstrous Favors",
			"Ochran (special)",
			"Adviser",
			"High Chancellor",
			"Matka (special)"
		]
	},
	"gruul" : {
		name : "Gruul Clans",
		type : "Ravnica",
		ranks : [
			"Proven",
			"Beast-Friend",
			"Celebrated",
			"Chieftan"
		]
	},
	"izzet" : {
		name : "Izzet League",
		type : "Ravnica",
		ranks : [
			"Researcher (rank 1)",
			"Scorchbringer (special)",
			"Supervisor (rank 2)",
			"Independent Researcher (special)",
			"Director (rank 3)",
			"Advisor (rank 4)"
		]
	},
	"orzhov" : {
		name : "Orzhov Syndicate",
		type : "Ravnica",
		ranks : [
			"Syndic (rank 1)",
			"Knight (rank 2)",
			"Ministrant (rank 3)",
			"Pontiff (rank 4)"
		]
	},
	"rakdos" : {
		name : "Cult of Rakdos",
		type : "Ravnica",
		ranks : [
			"Extra",
			"Sideshow Act",
			"Blood Witch (special)",
			"Star Performer",
			"Ringmaster"
		]
	},
	"selesnya" : {
		name : "Selesnya Conclave",
		type : "Ravnica",
		ranks : [
			"Evangel (special)",
			"Votary (special)",
			"Sagittar (special)",
			"Selesnya Charm",
			"Equenaut (special)",
			"Hierarch (special)",
			"Ledev Guardian (special)",
			"Dignitary (special)"
		]
	},
	"simic" : {
		name : "Simic Combine",
		type : "Ravnica",
		ranks : [
			"Technician (rank 1)",
			"Researcher (rank 2)",
			"Luminary (special)",
			"Project Leader (rank 3)",
			"Clade Leader (rank 4)",
			"Speaker (special)"
		]
	}
}

var LinksLatest = {
	advlog : {
		PF : "http://www.dmsguild.com/product/194068",
		CF : "http://www.dmsguild.com/product/194069"
	},
	character : {
		PF : "https://flapkan.com/printer_friendly_character_sheet",
		CF : "https://flapkan.com/colourful_character_sheet"
	},
	patreon : "https://www.patreon.com/posts/mpmbs-character-14927098"
};

// A backwards compatible way to call the field content of those that are now part of the CurrentVars object
var BackwardsCompatible = {
	'MakeMobileReady Remember' : "!CurrentVars.mobileset ? '' : CurrentVars.mobileset.active ? true : '';",
	'WhiteoutRemember' : "CurrentVars.whiteout",
	'FontSize Remember' : "CurrentVars.fontsize",
	'Extra.Layers Remember' : 'CurrentVars.vislayers.toString()',
	'BlueTextRemember' : "CurrentVars.bluetxt ? 'Yes' : 'No';",
	'Class Features Remember' : "classFeaChoiceBackwardsComp();",
	'Manual Attack Remember' : "CurrentVars.manual.attacks ? 'No' : 'Yes';",
	'Manual Background Remember' : "CurrentVars.manual.background ? 'No' : 'Yes';",
	'Manual Class Remember' : "CurrentVars.manual.classes ? 'No' : 'Yes';",
	'Manual Feat Remember' : "CurrentVars.manual.feats ? 'No' : 'Yes';",
	'Manual Race Remember' : "CurrentVars.manual.race ? 'No' : 'Yes';"
}

// Define this here (as well) so that it can be used by the ClassList
var spellLevelList = ["Cantrips (0-level)", "1st-level", "2nd-level", "3rd-level", "4th-level", "5th-level", "6th-level", "7th-level", "8th-level", "9th-level", "Talents", "Disciplines"];

var licenseOGL = [
  "OPEN GAME LICENSE Version 1.0a",
  'The following text is the property of Wizards of the Coast, Inc. and is Copyright 2000 Wizards of the Coast, Inc ("Wizards"). All Rights Reserved.',
  '1. Definitions:' + desc(['(a) "Contributors" means the copyright and/or trademark owners who have contributed Open Game Content;',
  '(b) "Derivative Material" means copyrighted material including derivative works and translations (including into other computer languages), potation, modification, correction, addition, extension, upgrade, improvement, compilation, abridgment or other form in which an existing work may be recast, transformed or adapted;',
  '(c) "Distribute" means to reproduce, license, rent, lease, sell, broadcast, publicly display, transmit or otherwise distribute;',
  '(d) "Open Game Content" means the game mechanic and includes the methods, procedures, processes and routines to the extent such content does not embody the Product Identity and is an enhancement over the prior art and any additional content clearly identified as Open Game Content by the Contributor, and means any work covered by this License, including translations and derivative works under copyright law, but specifically excludes Product Identity.',
  '(e) "Product Identity" means product and product line names, logos and identifying marks including trade dress; artifacts; creatures characters; stories, storylines, plots, thematic elements, dialogue, incidents, language, artwork, symbols, designs, depictions, likenesses, formats, poses, concepts, themes and graphic, photographic and other visual or audio representations; names and descriptions of characters, spells, enchantments, personalities, teams, personas, likenesses and special abilities; places, locations, environments, creatures, equipment, magical or supernatural abilities or effects, logos, symbols, or graphic designs; and any other trademark or registered trademark clearly identified as Product identity by the owner of the Product Identity, and which specifically excludes the Open Game Content;',
  '(f) "Trademark" means the logos, names, mark, sign, motto, designs that are used by a Contributor to identify itself or its products or the associated products contributed to the Open Game License by the Contributor',
  '(g) "Use", "Used" or "Using" means to use, Distribute, copy, edit, format, modify, translate and otherwise create Derivative Material of Open Game Content.',
  '(h) "You" or "Your" means the licensee in terms of this agreement.']),
  "2. The License: This License applies to any Open Game Content that contains a notice indicating that the Open Game Content may only be Used under and in terms of this License. You must affix such a notice to any Open Game Content that you Use. No terms may be added to or subtracted from this License except as described by the License itself. No other terms or conditions may be applied to any Open Game Content distributed using this License.",
  "3.Offer and Acceptance: By Using the Open Game Content You indicate Your acceptance of the terms of this License.",
  "4. Grant and Consideration: In consideration for agreeing to use this License, the Contributors grant You a perpetual, worldwide, royalty-free, non-exclusive license with the exact terms of this License to Use, the Open Game Content.",
  "5.Representation of Authority to Contribute: If You are contributing original material as Open Game Content, You represent that Your Contributions are Your original creation and/or You have sufficient rights to grant the rights conveyed by this License.",
  "6.Notice of License Copyright: You must update the COPYRIGHT NOTICE portion of this License to include the exact text of the COPYRIGHT NOTICE of any Open Game Content You are copying, modifying or distributing, and You must add the title, the copyright date, and the copyright holder's name to the COPYRIGHT NOTICE of any original Open Game Content you Distribute.",
  "7. Use of Product Identity: You agree not to Use any Product Identity, including as an indication as to compatibility, except as expressly licensed in another, independent Agreement with the owner of each element of that Product Identity. You agree not to indicate compatibility or co-adaptability with any Trademark or Registered Trademark in conjunction with a work containing Open Game Content except as expressly licensed in another, independent Agreement with the owner of such Trademark or Registered Trademark. The use of any Product Identity in Open Game Content does not constitute a challenge to the ownership of that Product Identity. The owner of any Product Identity used in Open Game Content shall retain all rights, title and interest in and to that Product Identity.",
  "8. Identification: If you distribute Open Game Content You must clearly indicate which portions of the work that you are distributing are Open Game Content.",
  "9. Updating the License: Wizards or its designated Agents may publish updated versions of this License. You may use any authorized version of this License to copy, modify and distribute any Open Game Content originally distributed under any version of this License.",
  "10 Copy of this License: You MUST include a copy of this License with every copy of the Open Game Content You Distribute.",
  "11. Use of Contributor Credits: You may not market or advertise the Open Game Content using the name of any Contributor unless You have written permission from the Contributor to do so.",
  "12 Inability to Comply: If it is impossible for You to comply with any of the terms of this License with respect to some or all of the Open Game Content due to statute, judicial order, or governmental regulation then You may not Use any Open Game Material so affected.",
  "13 Termination: This License will terminate automatically if You fail to comply with all terms herein and fail to cure such breach within 30 days of becoming aware of the breach. All sublicenses shall survive the termination of this License.",
  "14 Reformation: If any provision of this License is held to be unenforceable, such provision shall be reformed only to the extent necessary to make it enforceable.",
  "15 COPYRIGHT NOTICE Open Game License v 1.0 Copyright 2000, Wizards of the Coast, Inc.",
  "System Reference Document 5.1 Copyright 2016, Wizards of the Coast, Inc.; Authors Mike Mearls, Jeremy Crawford, Chris Perkins, Rodney Thompson, Peter Lee, James Wyatt, Robert J. Schwalb, Bruce R. Cordell, Chris Sims, and Steve Townshend, based on original material by E. Gary Gygax and Dave Arneson.",
  "MPMB's Character Record Sheet© Copyright 2014, Joost Wijnen; Flapkan Productions.",
  "END OF LICENSE"
];

var licenseGPLV3 = [
	'GNU General Public License Version 3',
	'The following text is Copyright (C) 2007 Free Software Foundation, Inc. Everyone is permitted to copy and distribute verbatim copies of this license document, but changing it is not allowed.',
	"PREAMBLE\nThe GNU General Public License is a free, copyleft license for software and other kinds of works.\nThe licenses for most software and other practical works are designed to take away your freedom to share and change the works. By contrast, the GNU General Public License is intended to guarantee your freedom to share and change all versions of a program--to make sure it remains free software for all its users. We, the Free Software Foundation, use the GNU General Public License for most of our software; it applies also to any other work released this way by its authors. You can apply it to your programs, too.\nWhen we speak of free software, we are referring to freedom, not price. Our General Public Licenses are designed to make sure that you have the freedom to distribute copies of free software (and charge for them if you wish), that you receive source code or can get it if you want it, that you can change the software or use pieces of it in new free programs, and that you know you can do these things.\nTo protect your rights, we need to prevent others from denying you these rights or asking you to surrender the rights. Therefore, you have certain responsibilities if you distribute copies of the software, or if you modify it: responsibilities to respect the freedom of others.\nFor example, if you distribute copies of such a program, whether gratis or for a fee, you must pass on to the recipients the same freedoms that you received. You must make sure that they, too, receive or can get the source code. And you must show them these terms so they know their rights.\nDevelopers that use the GNU GPL protect your rights with two steps: (1) assert copyright on the software, and (2) offer you this License giving you legal permission to copy, distribute and/or modify it.\nFor the developers' and authors' protection, the GPL clearly explains that there is no warranty for this free software. For both users' and authors' sake, the GPL requires that modified versions be marked as changed, so that their problems will not be attributed erroneously to authors of previous versions.\nSome devices are designed to deny users access to install or run modified versions of the software inside them, although the manufacturer can do so. This is fundamentally incompatible with the aim of protecting users' freedom to change the software. The systematic pattern of such abuse occurs in the area of products for individuals to use, which is precisely where it is most unacceptable. Therefore, we have designed this version of the GPL to prohibit the practice for those products. If such problems arise substantially in other domains, we stand ready to extend this provision to those domains in future versions of the GPL, as needed to protect the freedom of users.\nFinally, every program is threatened constantly by software patents. States should not allow patents to restrict development and use of software on general-purpose computers, but in those that do, we wish to avoid the special danger that patents applied to a free program could make it effectively proprietary. To prevent this, the GPL assures that patents cannot be used to render the program non-free.\nThe precise terms and conditions for copying, distribution and modification follow.",
	"TERMS AND CONDITIONS",
	'0. Definitions:\n"This License" refers to version 3 of the GNU General Public License.\n"Copyright" also means copyright-like laws that apply to other kinds of works, such as semiconductor masks.\n"The Program" refers to any copyrightable work licensed under this License. Each licensee is addressed as "you". "Licensees" and "recipients" may be individuals or organizations.\nTo "modify" a work means to copy from or adapt all or part of the work in a fashion requiring copyright permission, other than the making of an exact copy. The resulting work is called a "modified version" of the earlier work or a work "based on" the earlier work.\nA "covered work" means either the unmodified Program or a work based on the Program.\nTo "propagate" a work means to do anything with it that, without permission, would make you directly or secondarily liable for infringement under applicable copyright law, except executing it on a computer or modifying a private copy. Propagation includes copying, distribution (with or without modification), making available to the public, and in some countries other activities as well.\nTo "convey" a work means any kind of propagation that enables other parties to make or receive copies. Mere interaction with a user through a computer network, with no transfer of a copy, is not conveying.\nAn interactive user interface displays "Appropriate Legal Notices" to the extent that it includes a convenient and prominently visible feature that (1) displays an appropriate copyright notice, and (2) tells the user that there is no warranty for the work (except to the extent that warranties are provided), that licensees may convey the work under this License, and how to view a copy of this License. If the interface presents a list of user commands or options, such as a menu, a prominent item in the list meets this criterion.',
	'1. Source Code.\nThe "source code" for a work means the preferred form of the work for making modifications to it. "Object code" means any non-source form of a work.\nA "Standard Interface" means an interface that either is an official standard defined by a recognized standards body, or, in the case of interfaces specified for a particular programming language, one that is widely used among developers working in that language.\nThe "System Libraries" of an executable work include anything, other than the work as a whole, that (a) is included in the normal form of packaging a Major Component, but which is not part of that Major Component, and (b) serves only to enable use of the work with that Major Component, or to implement a Standard Interface for which an implementation is available to the public in source code form. A "Major Component", in this context, means a major essential component (kernel, window system, and so on) of the specific operating system (if any) on which the executable work runs, or a compiler used to produce the work, or an object code interpreter used to run it.\nThe "Corresponding Source" for a work in object code form means all the source code needed to generate, install, and (for an executable work) run the object code and to modify the work, including scripts to control those activities. However, it does not include the work\'s System Libraries, or general-purpose tools or generally available free programs which are used unmodified in performing those activities but which are not part of the work. For example, Corresponding Source includes interface definition files associated with source files for the work, and the source code for shared libraries and dynamically linked subprograms that the work is specifically designed to require, such as by intimate data communication or control flow between those subprograms and other parts of the work.\nThe Corresponding Source need not include anything that users can regenerate automatically from other parts of the Corresponding Source.\nThe Corresponding Source for a work in source code form is that same work.',
	'2. Basic Permissions.\nAll rights granted under this License are granted for the term of copyright on the Program, and are irrevocable provided the stated conditions are met. This License explicitly affirms your unlimited permission to run the unmodified Program. The output from running a covered work is covered by this License only if the output, given its content, constitutes a covered work. This License acknowledges your rights of fair use or other equivalent, as provided by copyright law.\nYou may make, run and propagate covered works that you do not convey, without conditions so long as your license otherwise remains in force. You may convey covered works to others for the sole purpose of having them make modifications exclusively for you, or provide you with facilities for running those works, provided that you comply with the terms of this License in conveying all material for which you do not control copyright. Those thus making or running the covered works for you must do so exclusively on your behalf, under your direction and control, on terms that prohibit them from making any copies of your copyrighted material outside their relationship with you.\nConveying under any other circumstances is permitted solely under the conditions stated below. Sublicensing is not allowed; section 10 makes it unnecessary.',
	"3. Protecting Users' Legal Rights From Anti-Circumvention Law.\nNo covered work shall be deemed part of an effective technological measure under any applicable law fulfilling obligations under article 11 of the WIPO copyright treaty adopted on 20 December 1996, or similar laws prohibiting or restricting circumvention of such measures.\nWhen you convey a covered work, you waive any legal power to forbid circumvention of technological measures to the extent such circumvention is effected by exercising rights under this License with respect to the covered work, and you disclaim any intention to limit operation or modification of the work as a means of enforcing, against the work's users, your or third parties' legal rights to forbid circumvention of technological measures.",
	"4. Conveying Verbatim Copies.\nYou may convey verbatim copies of the Program's source code as you receive it, in any medium, provided that you conspicuously and appropriately publish on each copy an appropriate copyright notice; keep intact all notices stating that this License and any non-permissive terms added in accord with section 7 apply to the code; keep intact all notices of the absence of any warranty; and give all recipients a copy of this License along with the Program.\nYou may charge any price or no price for each copy that you convey, and you may offer support or warranty protection for a fee.",
	'5. Conveying Modified Source Versions.\nYou may convey a work based on the Program, or the modifications to produce it from the Program, in the form of source code under the terms of section 4, provided that you also meet all of these conditions:' + desc([
		'(a) The work must carry prominent notices stating that you modified it, and giving a relevant date.',
		'(b) The work must carry prominent notices stating that it is released under this License and any conditions added under section 7. This requirement modifies the requirement in section 4 to "keep intact all notices".',
		'(c) You must license the entire work, as a whole, under this License to anyone who comes into possession of a copy. This License will therefore apply, along with any applicable section 7 additional terms, to the whole of the work, and all its parts, regardless of how they are packaged. This License gives no permission to license the work in any other way, but it does not invalidate such permission if you have separately received it.',
		'(d) If the work has interactive user interfaces, each must display Appropriate Legal Notices; however, if the Program has interactive interfaces that do not display Appropriate Legal Notices, your work need not make them do so.'
	]) + '\nA compilation of a covered work with other separate and independent works, which are not by their nature extensions of the covered work, and which are not combined with it such as to form a larger program, in or on a volume of a storage or distribution medium, is called an "aggregate" if the compilation and its resulting copyright are not used to limit the access or legal rights of the compilation\'s users beyond what the individual works permit. Inclusion of a covered work in an aggregate does not cause this License to apply to the other parts of the aggregate.',
	'6. Conveying Non-Source Forms.\nYou may convey a covered work in object code form under the terms of sections 4 and 5, provided that you also convey the machine-readable Corresponding Source under the terms of this License, in one of these ways:' + desc([
		'(a) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by the Corresponding Source fixed on a durable physical medium customarily used for software interchange.',
		'(b) Convey the object code in, or embodied in, a physical product (including a physical distribution medium), accompanied by a written offer, valid for at least three years and valid for as long as you offer spare parts or customer support for that product model, to give anyone who possesses the object code either (1) a copy of the Corresponding Source for all the software in the product that is covered by this License, on a durable physical medium customarily used for software interchange, for a price no more than your reasonable cost of physically performing this conveying of source, or (2) access to copy the Corresponding Source from a network server at no charge.',
		'(c) Convey individual copies of the object code with a copy of the written offer to provide the Corresponding Source. This alternative is allowed only occasionally and noncommercially, and only if you received the object code with such an offer, in accord with subsection 6b.',
		'(d) Convey the object code by offering access from a designated place (gratis or for a charge), and offer equivalent access to the Corresponding Source in the same way through the same place at no further charge. You need not require recipients to copy the Corresponding Source along with the object code. If the place to copy the object code is a network server, the Corresponding Source may be on a different server (operated by you or a third party) that supports equivalent copying facilities, provided you maintain clear directions next to the object code saying where to find the Corresponding Source. Regardless of what server hosts the Corresponding Source, you remain obligated to ensure that it is available for as long as needed to satisfy these requirements.',
		'(e) Convey the object code using peer-to-peer transmission, provided you inform other peers where the object code and Corresponding Source of the work are being offered to the general public at no charge under subsection 6d.'
	]) + '\nA separable portion of the object code, whose source code is excluded from the Corresponding Source as a System Library, need not be included in conveying the object code work.\nA "User Product" is either (1) a "consumer product", which means any tangible personal property which is normally used for personal, family, or household purposes, or (2) anything designed or sold for incorporation into a dwelling. In determining whether a product is a consumer product, doubtful cases shall be resolved in favor of coverage. For a particular product received by a particular user, "normally used" refers to a typical or common use of that class of product, regardless of the status of the particular user or of the way in which the particular user actually uses, or expects or is expected to use, the product. A product is a consumer product regardless of whether the product has substantial commercial, industrial or non-consumer uses, unless such uses represent the only significant mode of use of the product.\n"Installation Information" for a User Product means any methods, procedures, authorization keys, or other information required to install and execute modified versions of a covered work in that User Product from a modified version of its Corresponding Source. The information must suffice to ensure that the continued functioning of the modified object code is in no case prevented or interfered with solely because modification has been made.\nIf you convey an object code work under this section in, or with, or specifically for use in, a User Product, and the conveying occurs as part of a transaction in which the right of possession and use of the User Product is transferred to the recipient in perpetuity or for a fixed term (regardless of how the transaction is characterized), the Corresponding Source conveyed under this section must be accompanied by the Installation Information. But this requirement does not apply if neither you nor any third party retains the ability to install modified object code on the User Product (for example, the work has been installed in ROM).\nThe requirement to provide Installation Information does not include a requirement to continue to provide support service, warranty, or updates for a work that has been modified or installed by the recipient, or for the User Product in which it has been modified or installed. Access to a network may be denied when the modification itself materially and adversely affects the operation of the network or violates the rules and protocols for communication across the network.\nCorresponding Source conveyed, and Installation Information provided, in accord with this section must be in a format that is publicly documented (and with an implementation available to the public in source code form), and must require no special password or key for unpacking, reading or copying.',
	'7. Additional Terms.\n"Additional permissions" are terms that supplement the terms of this License by making exceptions from one or more of its conditions. Additional permissions that are applicable to the entire Program shall be treated as though they were included in this License, to the extent that they are valid under applicable law. If additional permissions apply only to part of the Program, that part may be used separately under those permissions, but the entire Program remains governed by this License without regard to the additional permissions.\nWhen you convey a copy of a covered work, you may at your option remove any additional permissions from that copy, or from any part of it. (Additional permissions may be written to require their own removal in certain cases when you modify the work.) You may place additional permissions on material, added by you to a covered work, for which you have or can give appropriate copyright permission.\nNotwithstanding any other provision of this License, for material you add to a covered work, you may (if authorized by the copyright holders of that material) supplement the terms of this License with terms:' + desc([
		'(a) Disclaiming warranty or limiting liability differently from the terms of sections 15 and 16 of this License; or',
		'(b) Requiring preservation of specified reasonable legal notices or author attributions in that material or in the Appropriate Legal Notices displayed by works containing it; or',
		'(c) Prohibiting misrepresentation of the origin of that material, or requiring that modified versions of such material be marked in reasonable ways as different from the original version; or',
		'(d) Limiting the use for publicity purposes of names of licensors or authors of the material; or',
		'(e) Declining to grant rights under trademark law for use of some trade names, trademarks, or service marks; or',
		'(f) Requiring indemnification of licensors and authors of that material by anyone who conveys the material (or modified versions of it) with contractual assumptions of liability to the recipient, for any liability that these contractual assumptions directly impose on those licensors and authors.'
	]) + 'All other non-permissive additional terms are considered "further restrictions" within the meaning of section 10. If the Program as you received it, or any part of it, contains a notice stating that it is governed by this License along with a term that is a further restriction, you may remove that term. If a license document contains a further restriction but permits relicensing or conveying under this License, you may add to a covered work material governed by the terms of that license document, provided that the further restriction does not survive such relicensing or conveying.\nIf you add terms to a covered work in accord with this section, you must place, in the relevant source files, a statement of the additional terms that apply to those files, or a notice indicating where to find the applicable terms.\nAdditional terms, permissive or non-permissive, may be stated in the form of a separately written license, or stated as exceptions; the above requirements apply either way.',
	'8. Termination.\nYou may not propagate or modify a covered work except as expressly provided under this License. Any attempt otherwise to propagate or modify it is void, and will automatically terminate your rights under this License (including any patent licenses granted under the third paragraph of section 11).\nHowever, if you cease all violation of this License, then your license from a particular copyright holder is reinstated (a) provisionally, unless and until the copyright holder explicitly and finally terminates your license, and (b) permanently, if the copyright holder fails to notify you of the violation by some reasonable means prior to 60 days after the cessation.\nMoreover, your license from a particular copyright holder is reinstated permanently if the copyright holder notifies you of the violation by some reasonable means, this is the first time you have received notice of violation of this License (for any work) from that copyright holder, and you cure the violation prior to 30 days after your receipt of the notice.\nTermination of your rights under this section does not terminate the licenses of parties who have received copies or rights from you under this License. If your rights have been terminated and not permanently reinstated, you do not qualify to receive new licenses for the same material under section 10.',
	'9. Acceptance Not Required for Having Copies.\nYou are not required to accept this License in order to receive or run a copy of the Program. Ancillary propagation of a covered work occurring solely as a consequence of using peer-to-peer transmission to receive a copy likewise does not require acceptance. However, nothing other than this License grants you permission to propagate or modify any covered work. These actions infringe copyright if you do not accept this License. Therefore, by modifying or propagating a covered work, you indicate your acceptance of this License to do so.',
	'10. Automatic Licensing of Downstream Recipients.\nEach time you convey a covered work, the recipient automatically receives a license from the original licensors, to run, modify and propagate that work, subject to this License. You are not responsible for enforcing compliance by third parties with this License.\nAn "entity transaction" is a transaction transferring control of an organization, or substantially all assets of one, or subdividing an organization, or merging organizations. If propagation of a covered work results from an entity transaction, each party to that transaction who receives a copy of the work also receives whatever licenses to the work the party\'s predecessor in interest had or could give under the previous paragraph, plus a right to possession of the Corresponding Source of the work from the predecessor in interest, if the predecessor has it or can get it with reasonable efforts.\nYou may not impose any further restrictions on the exercise of the rights granted or affirmed under this License. For example, you may not impose a license fee, royalty, or other charge for exercise of rights granted under this License, and you may not initiate litigation (including a cross-claim or counterclaim in a lawsuit) alleging that any patent claim is infringed by making, using, selling, offering for sale, or importing the Program or any portion of it.',
	'11. Patents.\nA "contributor" is a copyright holder who authorizes use under this License of the Program or a work on which the Program is based. The work thus licensed is called the contributor\'s "contributor version".\nA contributor\'s "essential patent claims" are all patent claims owned or controlled by the contributor, whether already acquired or hereafter acquired, that would be infringed by some manner, permitted by this License, of making, using, or selling its contributor version, but do not include claims that would be infringed only as a consequence of further modification of the contributor version. For purposes of this definition, "control" includes the right to grant patent sublicenses in a manner consistent with the requirements of this License.\nEach contributor grants you a non-exclusive, worldwide, royalty-free patent license under the contributor\'s essential patent claims, to make, use, sell, offer for sale, import and otherwise run, modify and propagate the contents of its contributor version.\nIn the following three paragraphs, a "patent license" is any express agreement or commitment, however denominated, not to enforce a patent (such as an express permission to practice a patent or covenant not to sue for patent infringement). To "grant" such a patent license to a party means to make such an agreement or commitment not to enforce a patent against the party.\nIf you convey a covered work, knowingly relying on a patent license, and the Corresponding Source of the work is not available for anyone to copy, free of charge and under the terms of this License, through a publicly available network server or other readily accessible means, then you must either (1) cause the Corresponding Source to be so available, or (2) arrange to deprive yourself of the benefit of the patent license for this particular work, or (3) arrange, in a manner consistent with the requirements of this License, to extend the patent license to downstream recipients. "Knowingly relying" means you have actual knowledge that, but for the patent license, your conveying the covered work in a country, or your recipient\'s use of the covered work in a country, would infringe one or more identifiable patents in that country that you have reason to believe are valid.\nIf, pursuant to or in connection with a single transaction or arrangement, you convey, or propagate by procuring conveyance of, a covered work, and grant a patent license to some of the parties receiving the covered work authorizing them to use, propagate, modify or convey a specific copy of the covered work, then the patent license you grant is automatically extended to all recipients of the covered work and works based on it.\nA patent license is "discriminatory" if it does not include within the scope of its coverage, prohibits the exercise of, or is conditioned on the non-exercise of one or more of the rights that are specifically granted under this License. You may not convey a covered work if you are a party to an arrangement with a third party that is in the business of distributing software, under which you make payment to the third party based on the extent of your activity of conveying the work, and under which the third party grants, to any of the parties who would receive the covered work from you, a discriminatory patent license (a) in connection with copies of the covered work conveyed by you (or copies made from those copies), or (b) primarily for and in connection with specific products or compilations that contain the covered work, unless you entered into that arrangement, or that patent license was granted, prior to 28 March 2007.\nNothing in this License shall be construed as excluding or limiting any implied license or other defenses to infringement that may otherwise be available to you under applicable patent law.',
	"12. No Surrender of Others' Freedom.\nIf conditions are imposed on you (whether by court order, agreement or otherwise) that contradict the conditions of this License, they do not excuse you from the conditions of this License. If you cannot convey a covered work so as to satisfy simultaneously your obligations under this License and any other pertinent obligations, then as a consequence you may not convey it at all. For example, if you agree to terms that obligate you to collect a royalty for further conveying from those to whom you convey the Program, the only way you could satisfy both those terms and this License would be to refrain entirely from conveying the Program.",
	'13. Use with the GNU Affero General Public License.\nNotwithstanding any other provision of this License, you have permission to link or combine any covered work with a work licensed under version 3 of the GNU Affero General Public License into a single combined work, and to convey the resulting work. The terms of this License will continue to apply to the part which is the covered work, but the special requirements of the GNU Affero General Public License, section 13, concerning interaction through a network will apply to the combination as such.',
	'14. Revised Versions of this License.\nThe Free Software Foundation may publish revised and/or new versions of the GNU General Public License from time to time. Such new versions will be similar in spirit to the present version, but may differ in detail to address new problems or concerns.\nEach version is given a distinguishing version number. If the Program specifies that a certain numbered version of the GNU General Public License "or any later version" applies to it, you have the option of following the terms and conditions either of that numbered version or of any later version published by the Free Software Foundation. If the Program does not specify a version number of the GNU General Public License, you may choose any version ever published by the Free Software Foundation.\nIf the Program specifies that a proxy can decide which future versions of the GNU General Public License can be used, that proxy\'s public statement of acceptance of a version permanently authorizes you to choose that version for the Program.\nLater license versions may give you additional or different permissions. However, no additional obligations are imposed on any author or copyright holder as a result of your choosing to follow a later version.',
	'15. Disclaimer of Warranty.\nTHERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW. EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU. SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.',
	'16. Limitation of Liability.\nIN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES.',
	'17. Interpretation of Sections 15 and 16.\nIf the disclaimer of warranty and limitation of liability provided above cannot be given local legal effect according to their terms, reviewing courts shall apply local law that most closely approximates an absolute waiver of all civil liability in connection with the Program, unless a warranty or assumption of liability accompanies a copy of the Program in return for a fee.',
	'END OF TERMS AND CONDITIONS'
];

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Background Feature (BackgroundFeatureList)
 *  - Background Variant (BackgroundSubList)
 *  - Background (BackgroundList) 
 **/
var BackgroundList = {
	"acolyte" : {
		regExpSearch : /acolyte/i,
		name : "Acolyte",
		source : [["SRD", 60], ["P", 127], ["ALbackground", 0]],
		skills : ["Insight", "Religion"],
		gold : 15,
		equipleft : [
			["Prayer book/wheel", "", 5],
			["Incense, sticks of", 5, ""],
			["Vestments", "", 4]
		],
		equipright : [
			["Common clothes", "", 3],
			["Holy symbol (type)", "", 1],
			["Belt pouch (with coins)", "", 1]
		],
		feature : "Shelter of the Faithful",
		trait : [
			"I venerate a distinct hero of my faith, and persistently reference that individual's accomplishments and lessons.",
			"I can find universal ground between the most vehement enemies, sympathizing with them and always moving toward unity.",
			"I see portents in all things. The gods attempt to communicate to us, we just need to pay attention.",
			"Nothing can rattle my positive attitude.",
			"I quote (or misquote) holy scripture and aphorisms in nearly all circumstances.",
			"I am accepting (or unaccepting) of other faiths and honor (or dishonor) the devotion to other deities.",
			"I've enjoyed exquisite food, drink, and aristocracy among my faith's most elite. Rougher lifestyles chafe me.",
			"I've spent so much time in the confines of the temple that I have few functional skills interacting with individuals in the rest of the world."
		],
		ideal : [
			["Tradition",
				"Tradition: The age-old institutions of devotion and forfeiture must be sustained and maintained. (Lawful)"
			],
			["Charity",
				"Charity: I always attempt to assist those in need, regardless of the personal cost. (Good)"
			],
			["Change",
				"Change: We must help induce the developments the gods are continually cultivating in the world. (Chaotic)"
			],
			["Power",
				"Power: I aspire to someday ascend to the elite of my faith's highest echelon. (Lawful)"
			],
			["Faith",
				"Faith: I believe that my deity will direct my work. I have confidence that if I work diligently, my work will be rewarded. (Lawful)"
			],
			["Aspiration",
				"Aspiration: I aim to demonstrate myself worth my deity's favor by paralleling my actions against their instruction. (Any)"
			]
		],
		bond : [
			"I would sacrifice anything to recover a long lost ancient relic of my temple (or faith).",
			"I will get revenge on my temple's corrupted hierarchy that branded me a heretic.",
			"I can never repay what I owe to the priest that took me in as an orphan.",
			"Everything I do is for those less fortunate.",
			"I will do whatever is necessary to keep my temple safe.",
			"I safeguard holy scripture that some claim is heretical and seek to destroy."
		],
		flaw : [
			"I hold others to a high standard, and myself even higher.",
			"I place too much faith in those most powerful within my temple's hierarchy.",
			"My religiosity can lead me to naively trust those that claim faith in my deity.",
			"I am very stubborn in my thinking.",
			"I am pessimistic and distrustful of strangers.",
			"Once I choose an objective, I become so single minded that the rest of my life fades into the background."
		],
		languageProfs : [2],
		lifestyle : "modest"
	}
};

var BackgroundSubList = {};

var BackgroundFeatureList = {
	"shelter of the faithful" : {
		description : "I command the respect of those who share my faith. I can perform the religious ceremonies of my faith. My companions and I can expect free healing and care at an establishment of my faith, though I must provide any material components needed for spells. Those who share my religion will support me at a modest lifestyle.",
		source : [["SRD", 61], ["P", 127], ["ALbackground", 0]]
	}
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Fighting Style (FightingStyles)
 *  - Class (ClassList)
 *  - Subclass (ClassSubList) 
 **/
var FightingStyles = {
	archery : {
		name : "Archery Fighting Style",
		description : "\n   " + "+2 bonus to attack rolls I make with ranged weapons",
		calcChanges : {
			atkCalc : [
				function (fields, v, output) {
					if (v.isRangedWeapon) output.extraHit += 2;
				},
				"My ranged weapons get a +2 bonus on the To Hit."
			]
		}
	},
	defense : {
		name : "Defense Fighting Style",
		description : "\n   " + "+1 bonus to AC when I'm wearing armor",
		extraAC : {
			mod : 1,
			text : "I gain a +1 bonus to AC while wearing armor.",
			stopeval : function (v) { return !v.wearingArmor; }
		}
	},
	dueling : {
		name : "Dueling Fighting Style",
		description : "\n   " + "+2 to damage rolls when wielding a melee weapon in one hand and no other weapons",
		calcChanges : {
			atkCalc : [
				function (fields, v, output) {
					for (var i = 1; i <= FieldNumbers.actions; i++) {
						if ((/off.hand.attack/i).test(What('Bonus Action ' + i))) return;
					};
					if (v.isMeleeWeapon && !v.isNaturalWeapon && !(/\b(2|two).?hand(ed)?s?\b/i).test(v.theWea.description)) output.extraDmg += 2;
				},
				"When I'm wielding a melee weapon in one hand and no weapon in my other hand, I do +2 damage with that melee weapon. This condition will always be false if the bonus action 'Off-hand Attack' exists."
			]
		}
	},
	great_weapon : {
		name : "Great Weapon Fighting Style",
		description : "\n   " + "Reroll 1 or 2 on damage if wielding two-handed/versatile melee weapon in both hands",
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (v.isMeleeWeapon && (/\b(versatile|(2|two).?hand(ed)?s?)\b/i).test(v.theWea.description)) {
						fields.Description += (fields.Description ? '; ' : '') + 'Re-roll 1 or 2 on damage die' + ((/versatile/i).test(fields.Description) ? ' when two-handed' : '');
					}
				},
				"While wielding a two-handed or versatile melee weapon in two hands, I can re-roll a 1 or 2 on any damage die once."
			]
		}
	},
	protection : {
		name : "Protection Fighting Style",
		description : "\n   " + "As a reaction, I can give disadv. on an attack made vs. someone within 5 ft of me" + "\n   " + "I need to be wielding a shield and be able to see the attacker to do this",
		action : ["reaction", ""]
	},
	two_weapon : {
		name : "Two-Weapon Fighting Style",
		description : "\n   " + "I can add my ability modifier to the damage of my off-hand attacks",
		calcChanges : {
			atkCalc : [
				function (fields, v, output) {
					if (v.isOffHand) output.modToDmg = true;
				},
				"When engaging in two-weapon fighting, I can add my ability modifier to the damage of my off-hand attacks. If a melee weapon includes 'off-hand' or 'secondary' in its name or description, it is considered an off-hand attack."
			]
		}
	}
};

var ClassList = {
	"barbarian" : {
		regExpSearch : /^((?=.*(marauder|barbarian|viking|(norse|tribes?|clans?)(wo)?m(a|e)n))|((?=.*(warrior|fighter))(?=.*(feral|tribal)))).*$/i,
		name : "Barbarian",
		source : [["SRD", 8], ["P", 46]],
		primaryAbility : "Strength",
		prereqs : "Strength 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 12,
		saves : ["Str", "Con"],
		skillstxt : {
			primary : "Choose two from Animal Handling, Athletics, Intimidation, Nature, Perception, and Survival"
		},
		armorProfs : {
			primary : [true, true, false, true],
			secondary : [false, false, false, true]
		},
		weaponProfs : {
			primary : [true, true],
			secondary : [true, true]
		},
		equipment : "Barbarian starting equipment:" +
			"\n \u2022 A greataxe -or- any martial melee weapon;" +
			"\n \u2022 Two handaxes -or- any simple weapon;" +
			"\n \u2022 An explorer's pack and four javelins." +
			"\n\nAlternatively, choose 2d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Primal Path", ["barbarian-berserker"]],
		attacks : [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		features : {
			"rage" : {
				name : "Rage",
				source : [["SRD", 8], ["P", 48]],
				minlevel : 1,
				description : "\n   " + "Start/end as bonus action; add damage to melee weapons that use Str; lasts 1 min" + "\n   " + "Adv. on Strength checks/saves (not attacks); resistance to bludgeoning/piercing/slashing" + "\n   " + "Stops if I end turn without attacking or taking damage since last turn, or unconscious",
				additional : levels.map(function (n) {
					return "+" + (n < 9 ? 2 : n < 16 ? 3 : 4) + " melee damage";
				}),
				usages : [2, 2, 3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 6, 6, 6, "\u221E\u00D7 per "],
				recovery : "long rest",
				action : ["bonus action", " (start/end)"],
				dmgres : [["Bludgeoning", "Bludgeon. (in rage)"], ["Piercing", "Piercing (in rage)"], ["Slashing", "Slashing (in rage)"]],
				savetxt : { text : ["Adv. on Str saves in rage"] },
				calcChanges : {
					atkCalc : [
						function (fields, v, output) {
							if (v.isMeleeWeapon && classes.known.barbarian && classes.known.barbarian.level && (/\brage\b/i).test(v.WeaponText)) {
								output.extraDmg += classes.known.barbarian.level < 9 ? 2 : classes.known.barbarian.level < 16 ? 3 : 4;
							}
						},
						"If I include the word 'Rage' in a melee weapon's name or description, the calculation will add my Rage's bonus damage to it."
					]
				}
			},
			"unarmored defense" : {
				name : "Unarmored Defense",
				source : [["SRD", 8], ["P", 48]],
				minlevel : 1,
				description : "\n   " + "Without armor, my AC is 10 + Dexterity modifier + Constitution modifier + shield",
				armorOptions : {
					regExpSearch : /justToAddToDropDown/,
					name : "Unarmored Defense (Con)",
					source : [["SRD", 8], ["P", 48]],
					ac : 10,
					addMod : true
				},
				armorAdd : "Unarmored Defense (Con)"
			},
			"reckless attack" : {
				name : "Reckless Attack",
				source : [["SRD", 9], ["P", 48]],
				minlevel : 2,
				description : "\n   " + "Adv. on melee weapon attacks during my turn, but attacks vs. me adv. until next turn"
			},
			"danger sense" : {
				name : "Danger Sense",
				source : [["SRD", 9], ["P", 48]],
				minlevel : 2,
				description : "\n   " + "Adv. on Dexterity saves against seen effects (not blinded/deafened/incapacitated)",
				savetxt : { text : ["Adv. on Dex saves vs. seen effects"] }
			},
			"subclassfeature3" : {
				name : "Primal Path",
				source : [["SRD", 9], ["P", 48]],
				minlevel : 3,
				description : "\n   " + "Choose a Primal Path that shapes the nature of your rage and put it in the \"Class\" field" + "\n   " + "Choose either the Path of the Battlerager, Berserker, or Totem Warrior"
			},
			"fast movement" : {
				name : "Fast Movement",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 5,
				description : "\n   " + "I gain +10 ft speed when I'm not wearing heavy armor",
				speed : { allModes : "+10" }
			},
			"feral instinct" : {
				name : "Feral Instinct",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 7,
				description : "\n   " + "Adv. on Initiative; I can enter rage to act normally on the first turn when surprised",
				advantages : [["Initiative", true]]
			},
			"brutal critical" : {
				name : "Brutal Critical",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 9,
				description : "\n   " + "I can roll additional dice for the extra damage on a critical hit with a melee attack",
				additional : levels.map(function (n) {
					return n < 9 ? "" : (n < 13 ? 1 : n < 17 ? 2 : 3) + " additional di" + (n < 13 ? "" : "c") + "e"
				}),
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.isMeleeWeapon && classes.known.barbarian && classes.known.barbarian.level > 8 && (/d\d+/).test(fields.Damage_Die)) {
								var pExtraCritM = classes.known.barbarian.level < 13 ? 1 : classes.known.barbarian.level < 17 ? 2 : 3;
								if (v.extraCritM) {
									v.extraCritM += pExtraCritM;
									var extraCritRegex = /\d+(d\d+ extra on a crit(ical)?( hit)? in melee)/i;
									fields.Description = fields.Description.replace(extraCritRegex, v.extraCritM + '$1');
								} else {
									v.extraCritM = pExtraCritM;
									fields.Description += (fields.Description ? '; ' : '') + v.extraCritM + fields.Damage_Die.replace(/.*(d\d+).*/, '$1') + ' extra on a crit in melee';
								}
							}
						},
						"My melee attacks roll additional dice on a critical hit."
					]
				}
			},
			"relentless rage" : {
				name : "Relentless Rage",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 11,
				description : " [DC 10 + 5 per try, per short rest]" + "\n   " + "If I drop to 0 HP while raging, I can make a DC 10 Constitution save to stay at 1 HP" + "\n   " + "The DC increases by 5 for every attempt until I finish a short or long rest",
				recovery : "short rest",
				usages : "",
				usagescalc : "var FieldNmbr = parseFloat(event.target.name.slice(-2)); var usages = What('Limited Feature Used ' + FieldNmbr); var DCmod = Number(usages) * 5; event.value = (isNaN(Number(usages)) || usages === '') ? 'DC\u2003\u2003' : 'DC ' + Number(10 + DCmod);"
			},
			"persistent rage" : {
				name : "Persistent Rage",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 15,
				description : "\n   " + "My rage only lasts less than 1 minute if I fall unconscious or I choose to end it"
			},
			"indomitable might" : {
				name : "Indomitable Might",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 18,
				description : "\n   " + "If a Strength check is lower than my Strength score, I can use my Strength score instead"
			},
			"primal champion" : {
				name : "Primal Champion",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 20,
				description : "\n   " + "I add +4 to both my Strength and Constitution, and their maximums increase to 24",
				scores : [4,0,4,0,0,0],
				scoresMaximum : [24,0,24,0,0,0]
			}
		}
	},

	"bard" : {
		regExpSearch : /(bard|minstrel|troubadour|jongleur)/i,
		name : "Bard",
		source : [["SRD", 11], ["P", 51]],
		primaryAbility : "Charisma",
		abilitySave : 6,
		prereqs : "Charisma 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 8,
		saves : ["Dex", "Cha"],
		skillstxt : {
			primary : "Choose any three skills",
			secondary : "Choose any one skill"
		},
		toolProfs : {
			primary : [["Musical instrument", 3]],
			secondary : [["Musical instrument", 1]]
		},
		armorProfs : {
			primary : [true, false, false, false],
			secondary : [true, false, false, false]
		},
		weaponProfs : {
			primary : [true, false, ["hand crossbow", "longsword", "rapier", "shortsword"]]
		},
		equipment : "Bard starting equipment:" +
			"\n \u2022 A rapier -or- a longsword -or- any simple weapon;" +
			"\n \u2022 A diplomat's pack -or- an entertainer's pack;" +
			"\n \u2022 A lute -or- any other musical instrument;" +
			"\n \u2022 Leather armor and a dagger." +
			"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Bard College", ["bard-college of lore"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : 1,
		spellcastingKnown : {
			cantrips : [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
			spells : [4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 16, 16, 16, 16]
		},
		features : {
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 11], ["P", 52]],
				minlevel : 1,
				description : "\n   " + "I can cast bard cantrips/spells that I know, using Charisma as my spellcasting ability" + "\n   " + "I can use a musical instrument as a spellcasting focus" + "\n   " + "I can cast my known bard spells as rituals if they have the ritual tag",
				additional : levels.map(function (n, idx) {
					var cantr = [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4][idx];
					var splls = [4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 15, 15, 16, 16, 19, 19, 20, 20, 22, 22][idx];
					return cantr + " cantrips \u0026 " + splls + " spells known";
				})
			},
			"bardic inspiration" : {
				name : "Bardic Inspiration",
				source : [["SRD", 12], ["P", 53]],
				minlevel : 1,
				description : desc([
					"As a bonus action, I give a creature in 60 ft that can hear me an inspiration die (max 1)",
					"For 10 min, the recipient can add it to one ability check, attack roll, or saving throw",
					"This addition can be done after seeing the d20 roll, but before knowing the outcome"
				]),
				additional : ["d6", "d6", "d6", "d6", "d8", "d8", "d8", "d8", "d8", "d10", "d10", "d10", "d10", "d10", "d12", "d12", "d12", "d12", "d12", "d12"],
				usages : "Charisma modifier per ",
				usagescalc : "event.value = Math.max(1, What('Cha Mod'));",
				recovery : levels.map(function (n) {
					return n < 5 ? "long rest" : "short rest";
				}),
				action : ["bonus action", ""]
			},
			"jack of all trades" : {
				name : "Jack of All Trades",
				source : [["SRD", 12], ["P", 54]],
				minlevel : 2,
				description : "\n   " + "I can add half my proficiency bonus to any ability check that doesn't already include it",
				eval : function() { Checkbox('Jack of All Trades', true); },
				removeeval : function() { Checkbox('Jack of All Trades', false); }
			},
			"song of rest" : {
				name : "Song of Rest",
				source : [["SRD", 12], ["P", 54]],
				minlevel : 2,
				description : "\n   " + "Those that use HD and can hear my performance during a short rest get extra healing",
				additional : ["", "d6", "d6", "d6", "d6", "d6", "d6", "d6", "d8", "d8", "d8", "d8", "d10", "d10", "d10", "d10", "d12", "d12", "d12", "d12"]
			},
			"subclassfeature3" : {
				name : "Bard College",
				source : [["SRD", 12], ["P", 54]],
				minlevel : 3,
				description : "\n   " + "Choose a College that reflects your personality and put it in the \"Class\" field " + "\n   " + "Choose either the College of Lore or the College of Valor"
			},
			"expertise" : {
				name : "Expertise",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 3,
				description : "\n   " + "I gain expertise with two skills I am proficient with; two more at 10th level",
				skillstxt : "Expertise with any two skill proficiencies, and two more at 10th level",
				additional : levels.map(function (n) {
					return n < 3 ? "" : "with " + (n < 10 ? 2 : 4) + " skills";
				}),
				extraname : "Expertise",
				extrachoices : ["Acrobatics", "Animal Handling", "Arcana", "Athletics", "Deception", "History", "Insight", "Intimidation", "Investigation", "Medicine", "Nature", "Perception", "Performance", "Persuasion", "Religion", "Sleight of Hand", "Stealth", "Survival"],
				extraTimes : levels.map(function (n) { return n < 3 ? 0 : n < 10 ? 2 : 4; }),
				"acrobatics" : {
					name : "Acrobatics Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Acrobatics") !== -1; },
					skills : [["Acrobatics", "only"]]
				},
				"animal handling" : {
					name : "Animal Handling Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Animal Handling") !== -1; },
					skills : [["Animal Handling", "only"]]
				},
				"arcana" : {
					name : "Arcana Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Arcana") !== -1; },
					skills : [["Arcana", "only"]]
				},
				"athletics" : {
					name : "Athletics Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Athletics") !== -1; },
					skills : [["Athletics", "only"]]
				},
				"deception" : {
					name : "Deception Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Deception") !== -1; },
					skills : [["Deception", "only"]]
				},
				"history" : {
					name : "History Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("History") !== -1; },
					skills : [["History", "only"]]
				},
				"insight" : {
					name : "Insight Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Insight") !== -1; },
					skills : [["Insight", "only"]]
				},
				"intimidation" : {
					name : "Intimidation Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Intimidation") !== -1; },
					skills : [["Intimidation", "only"]]
				},
				"investigation" : {
					name : "Investigation Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Investigation") !== -1; },
					skills : [["Investigation", "only"]]
				},
				"medicine" : {
					name : "Medicine Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Medicine") !== -1; },
					skills : [["Medicine", "only"]]
				},
				"nature" : {
					name : "Nature Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Nature") !== -1; },
					skills : [["Nature", "only"]]
				},
				"perception" : {
					name : "Perception Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Perception") !== -1; },
					skills : [["Perception", "only"]]
				},
				"performance" : {
					name : "Performance Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Performance") !== -1; },
					skills : [["Performance", "only"]]
				},
				"persuasion" : {
					name : "Persuasion Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Persuasion") !== -1; },
					skills : [["Persuasion", "only"]]
				},
				"religion" : {
					name : "Religion Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Religion") !== -1; },
					skills : [["Religion", "only"]]
				},
				"sleight of hand" : {
					name : "Sleight of Hand Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Sleight of Hand") !== -1; },
					skills : [["Sleight of Hand", "only"]]
				},
				"stealth" : {
					name : "Stealth Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Stealth") !== -1; },
					skills : [["Stealth", "only"]]
				},
				"survival" : {
					name : "Survival Expertise", description : "",
					source : [["SRD", 13], ["P", 54]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Survival") !== -1; },
					skills : [["Survival", "only"]]
				}
			},
			"font of inspiration" : {
				name : "Font of Inspiration",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 5,
				description : "\n   " + "I can now also recover my expended Bardic Inspiration uses after a short rest"
			},
			"countercharm" : {
				name : "Countercharm",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 6,
				description : "\n   " + "As an action, I can do a performance that lasts until the end of my next turn" + "\n   " + "While it lasts, any friend in earshot \u0026 30 ft has adv. on saves vs. frightened/charmed",
				action : ["action", ""]
			},
			"magical secrets" : {
				name : "Magical Secrets",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 10,
				description : "\n   " + "I can add two spells/cantrips from any class to my spells known; +2 at level 14 \u0026 18",
				additional : levels.map(function (n) {
					return n < 10 ? "" : (n < 14 ? 2 : n < 18 ? 4 : 6) + " spells/cantrips";
				}),
				spellcastingBonus : {
					name : "Magical Secret",
					"class" : "any",
					times : levels.map(function (n) {
						return n < 10 ? 0 : n < 14 ? 2 : n < 18 ? 4 : 6;
					})
				}
			},
			"superior inspiration" : {
				name : "Superior Inspiration",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 20,
				description : "\n   " + "I regain one use of Bardic Inspiration if I have no more remaining when I roll initiative"
			}
		}
	},

	"cleric" : {
		regExpSearch : /(cleric|priest|clergy|acolyte)/i,
		name : "Cleric",
		source : [["SRD", 15], ["P", 56]],
		primaryAbility : "Wisdom",
		abilitySave : 5,
		prereqs : "Wisdom 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 8,
		saves : ["Wis", "Cha"],
		skillstxt : {
			primary : "Choose two from History, Insight, Medicine, Persuasion, and Religion"
		},
		armorProfs : {
			primary : [true, true, false, true],
			secondary : [true, true, false, true]
		},
		weaponProfs : {
			primary : [true, false]
		},
		equipment : "Cleric starting equipment:" +
			"\n \u2022 A mace -or- a warhammer (if proficient);" +
			"\n \u2022 Scale mail -or- leather armor -or- chain mail (if proficient);" +
			"\n \u2022 A light crossbow and 20 bolts -or- any simple weapon;" +
			"\n \u2022 A priest's pack -or- an explorer's pack;" +
			"\n \u2022 A shield and a holy symbol." +
			"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Divine Domain", ["cleric-life domain"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : 1,
		spellcastingKnown : {
			cantrips : [3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
			spells : "list",
			prepared : true
		},
		features : {
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 15], ["P", 58]],
				minlevel : 1,
				description : "\n   " + "I can cast prepared cleric cantrips/spells, using Wisdom as my spellcasting ability" + "\n   " + "I can use a holy symbol as a spellcasting focus" + "\n   " + "I can cast my prepared cleric spells as rituals if they have the ritual tag",
				additional : levels.map(function (n, idx) {
					return [3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5][idx] + " cantrips known";
				})
			},
			"subclassfeature1" : {
				name : "Divine Domain",
				source : [["SRD", 16], ["P", 58]],
				minlevel : 1,
				description : "\n   " + "Choose a Domain related to your deity and put it in the \"Class\" field on the first page" + "\n   " + "Choose either Arcana, Death, Life, Light, Nature, Tempest, Trickery, or War Domain"
			},
			"channel divinity" : {
				name : "Channel Divinity",
				source : [["SRD", 16], ["P", 58]],
				minlevel : 2,
				description : "\n   " + "I can channel divine energy to cause an effect; the save for this is my cleric spell DC",
				usages : [0, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3],
				recovery : "short rest"
			},
			"turn undead" : {
				name : "Channel Divinity: Turn Undead",
				source : [["SRD", 16], ["P", 59]],
				minlevel : 2,
				description : desc([
					"As an action, all undead within 30 ft that can see/hear me must make a Wisdom save",
					"If an undead fails this save, it is turned for 1 minute or until it takes any damage",
					"Turned: move away, never within 30 ft of me, no reactions or actions other than Dash",
					"Turned: may Dodge instead of Dash when nowhere to move and unable to escape bonds"
				]),
				action : ["action", ""]
			},
			"destroy undead" : {
				name : "Destroy Undead",
				source : [["SRD", 17], ["P", 59]],
				minlevel : 5,
				additional : ["", "", "", "", "CR \u00BD or lower", "CR \u00BD or lower", "CR \u00BD or lower", "CR 1 or lower", "CR 1 or lower", "CR 1 or lower", "CR 2 or lower", "CR 2 or lower", "CR 2 or lower", "CR 3 or lower", "CR 3 or lower", "CR 3 or lower", "CR 4 or lower", "CR 4 or lower", "CR 4 or lower", "CR 4 or lower"],
				description : "\n   " + "An undead up to the CR above that fails its save when I use Turn Undead is destroyed"
			},
			"divine intervention" : {
				name : "Divine Intervention",
				source : [["SRD", 17], ["P", 59]],
				minlevel : 10,
				additional : ["", "", "", "", "", "", "", "", "", "10% chance", "11% chance", "12% chance", "13% chance", "14% chance", "15% chance", "16% chance", "17% chance", "18% chance", "19% chance", "100% chance"],
				usages : 1,
				recovery : "long rest",
				description : "\n   " + "As an action, I can implore my deity for help; the DM determines the form of help" + "\n   " + "Without intervention, I can retry after a long rest; otherwise, I have to wait a week",
				action : ["action", ""]
			}
		}
	},

	"druid" : {
		regExpSearch : /(druid|shaman)/i,
		name : "Druid",
		source : [["SRD", 19], ["P", 61]],
		primaryAbility : "Wisdom",
		abilitySave : 5,
		prereqs : "Wisdom 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 8,
		saves : ["Wis", "Int"],
		skillstxt : {
			primary : "Choose two from Arcana, Animal Handling, Insight, Medicine, Nature, Perception, Religion, and Survival"
		},
		toolProfs : {
			primary : ["Herbalism kit"]
		},
		armorProfs : {
			primary : [true, true, false, true],
			secondary : [true, true, false, true]
		},
		weaponProfs : {
			primary : [false, false, ["club", "dagger", "dart", "javelin", "mace", "quarterstaff", "scimitar", "sickle", "sling", "spear"]]
		},
		equipment : "Druid starting equipment:" +
			"\n \u2022 A wooden shield -or- any simple weapon;" +
			"\n \u2022 A scimitar -or- any simple melee weapon;" +
			"\n \u2022 Leather armor, an explorer's pack, and a druidic focus." +
			"\n\nAlternatively, choose 2d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Druid Circle", ["druid-circle of the land"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : 1,
		spellcastingKnown : {
			cantrips : [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
			spells : "list",
			prepared : true
		},
		features : {
			"druidic" : {
				name : "Druidic",
				source : [["SRD", 19], ["P", 66]],
				minlevel : 1,
				description : "\n   " + "I know Druidic; Hidden messages with it can only be understood by who know Druidic",
				languageProfs : ["Druidic"]
			},
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 19], ["P", 66]],
				minlevel : 1,
				description : "\n   " + "I can cast prepared druid cantrips/spells, using Wisdom as my spellcasting ability" + "\n   " + "I can use a druidic focus as a spellcasting focus" + "\n   " + "I can cast my prepared druid spells as rituals if they have the ritual tag",
				additional : levels.map(function (n, idx) {
					return [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4][idx] + " cantrips known";
				})
			},
			"subclassfeature2" : {
				name : "Druid Circle",
				source : [["SRD", 21], ["P", 67]],
				minlevel : 2,
				description : "\n   " + "Choose a Circle you can identify with and put it in the \"Class\" field on the first page" + "\n   " + "Choose either the Circle of the Land or the Circle of the Moon"
			},
			"subclassfeature2.wild shape" : {
				name : "Wild Shape",
				source : [["SRD", 20], ["P", 66]],
				minlevel : 2,
				description : "\n   " + "As an action, I assume the shape of a beast I have seen before with the following rules:" + "\n    - " + "I gain all its game statistics except Intelligence, Wisdom, or Charisma" + "\n    - " + "I get its skill/saving throw prof. while keeping my own, using whichever is higher" + "\n    - " + "I assume the beast's HP and HD; I get mine back when I revert back" + "\n    - " + "I can't cast spells in beast form, but transforming doesn't break concentration" + "\n    - " + "I retain features from class, race, etc., but I don't retain special senses" + "\n    - " + "I can choose whether equipment falls to the ground, merges, or stays worn" + "\n    - " + "I revert if out of time or unconscious; if KOd by damage, excess damage carries over",
				usages : [0, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, "\u221E\u00D7 per "],
				recovery : "short rest",
				additional : ["", "CR 1/4, no fly/swim; 1 hour", "CR 1/4, no fly/swim; 1 hour", "CR 1/2, no fly; 2 hours", "CR 1/2, no fly; 2 hours", "CR 1/2, no fly; 3 hours", "CR 1/2, no fly; 3 hours", "CR 1; 4 hours", "CR 1; 4 hours", "CR 1; 5 hours", "CR 1; 5 hours", "CR 1; 6 hours", "CR 1; 6 hours", "CR 1; 7 hours", "CR 1; 7 hours", "CR 1; 8 hours", "CR 1; 8 hours", "CR 1; 9 hours", "CR 1; 9 hours", "CR 1; 10 hours"],
				action : [["action", " (start)"], ["bonus action", " (end)"]]
			},
			"timeless body" : {
				name : "Timeless Body",
				source : [["SRD", 21], ["P", 67]],
				minlevel : 18,
				description : "\n   " + "I age more slowly, only 1 year for every 10 years that pass"
			},
			"beast spells" : {
				name : "Beast Spells",
				source : [["SRD", 21], ["P", 67]],
				minlevel : 18,
				description : "\n   " + "I can perform the somatic and verbal components of druid spells while in a beast shape"
			},
			"archdruid" : {
				name : "Archdruid",
				source : [["SRD", 21], ["P", 67]],
				minlevel : 20,
				description : "\n   " + "I can use Wild Shape an unlimited number of times" + "\n   " + "My druid spells don't require verbal, somatic, or free material components"
			},
			calcChanges : {
				spellAdd : [
					function (spellKey, spellObj, spName) {
						if (spName == "druid") {
							if (spellObj.compMaterial && !(/M[\u0192\u2020]/i).test(spellObj.components)) spellObj.compMaterial = "";
							spellObj.components = spellObj.components.replace(/V,?|S,?|M$/ig, '');
							return true;
						};
					},
					"My druid spells don't require verbal, somatic, or material components."
				]
			}
		}
	},

	"fighter" : {
		regExpSearch : /^(?!.*(dark|green|fey|horned|totem|spiritual|exalted|sacred|holy|divine|nature|odin|thor|nature|natural|green))(?=.*(fighter|warrior|militant|warlord|phalanx|gladiator|trooper)).*$/i,
		name : "Fighter",
		source : [["SRD", 24], ["P", 70]],
		primaryAbility : "Strength or Dexterity",
		prereqs : "Strength 13 or Dexterity 13",
		die : 10,
		improvements : [0, 0, 0, 1, 1, 2, 2, 3, 3, 3, 3, 4, 4, 5, 5, 6, 6, 6, 7, 7],
		saves : ["Str", "Con"],
		skillstxt : {
			primary : "Choose two from Acrobatics, Animal Handling, Athletics, History, Insight, Intimidation, Perception, and Survival"
		},
		armorProfs : {
			primary : [true, true, true, true],
			secondary : [true, true, false, true]
		},
		weaponProfs : {
			primary : [true, true],
			secondary : [true, true]
		},
		equipment : "Fighter starting equipment:" +
			"\n \u2022 Chain mail -or- leather armor, a longbow, and 20 arrows;" +
			"\n \u2022 A martial weapon and a shield -or- two martial weapons;" +
			"\n \u2022 A light crossbow and 20 bolts -or- two handaxes;" +
			"\n \u2022 A dungeoneer's pack -or- an explorer's pack." +
			"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Martial Archetype", ["fighter-champion"]],
		attacks : [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4],
		features : {
			"fighting style" : {
				name : "Fighting Style",
				source : [["SRD", 24], ["P", 72]],
				minlevel : 1,
				description : "\n   " + "Choose a Fighting Style for the fighter using the \"Choose Feature\" button above",
				choices : ["Archery", "Defense", "Dueling", "Great Weapon Fighting", "Protection", "Two-Weapon Fighting"],
				"archery" : FightingStyles.archery,
				"defense" : FightingStyles.defense,
				"dueling" : FightingStyles.dueling,
				"great weapon fighting" : FightingStyles.great_weapon,
				"protection" : FightingStyles.protection,
				"two-weapon fighting" : FightingStyles.two_weapon
			},
			"second wind" : {
				name : "Second Wind",
				source : [["SRD", 24], ["P", 72]],
				minlevel : 1,
				description : "\n   " + "As a bonus action, I regain 1d10 + fighter level HP; I can use this once per short rest",
				additional : levels.map(function (n) {
					return "1d10+" + n;
				}),
				usages : 1,
				recovery : "short rest",
				action : ["bonus action", ""]
			},
			"action surge" : {
				name : "Action Surge",
				source : [["SRD", 25], ["P", 72]],
				minlevel : 2,
				description : "\n   " + "I can take one additional action on my turn on top of my normally allowed actions",
				usages : [0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2],
				recovery : "short rest"
			},
			"subclassfeature3" : {
				name : "Martial Archetype",
				source : [["SRD", 25], ["P", 72]],
				minlevel : 3,
				description : "\n   " + "Choose a Martial Archetype you strive to emulate and put it in the \"Class\" field" + "\n   " + "Choose either Champion, Battle Master, Eldritch Knight, or Purple Dragon Knight"
			},
			"indomitable" : {
				name : "Indomitable",
				source : [["SRD", 25], ["P", 72]],
				minlevel : 9,
				description : "\n   " + "I can reroll a failed saving throw, but must keep the new result",
				usages : [0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3],
				recovery : "long rest"
			}
		}
	},

	"monk" : {
		regExpSearch : /^((?=.*(monk|monastic))|(((?=.*martial)(?=.*(artist|arts)))|((?=.*spiritual)(?=.*warrior)))).*$/i,
		name : "Monk",
		source : [["SRD", 26], ["P", 76]],
		primaryAbility : "Dexterity and Wisdom",
		abilitySave : 5,
		prereqs : "Dexterity 13 and Wisdom 13",
		die : 8,
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		saves : ["Str", "Dex"],
		toolProfs : {
			primary : [["Artisan's tool or musical instrument", 1]]
		},
		skillstxt : {
			primary : "Choose two from Acrobatics, Athletics, History, Insight, Religion, and Stealth"
		},
		armorProfs : {
			primary : [false, false, false, false]
		},
		weaponProfs : {
			primary : [true, false, ["shortsword"]],
			secondary : [true, false, ["shortsword"]]
		},
		equipment : "Monk starting equipment:" +
			"\n \u2022 A shortsword -or- any simple weapon;" +
			"\n \u2022 A dungeoneer's pack -or- an explorer's pack;" +
			"\n \u2022 10 darts." +
			"\n\nAlternatively, choose 5d4 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Monastic Tradition", ["monk-way of the open hand"]],
		attacks : [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		features : {
			"unarmored defense" : {
				name : "Unarmored Defense",
				source : [["SRD", 26], ["P", 78]],
				minlevel : 1,
				description : "\n   " + "Without armor and no shield, my AC is 10 + Dexterity modifier + Wisdom modifier",
				armorOptions : {
					regExpSearch : /justToAddToDropDown/,
					name : "Unarmored Defense (Wis)",
					source : [["SRD", 26], ["P", 78]],
					ac : 10,
					addMod : true
				},
				armorAdd : "Unarmored Defense (Wis)"
			},
			"martial arts" : {
				name : "Martial Arts",
				source : [["SRD", 26], ["P", 78]],
				minlevel : 1,
				description : desc([
					"Monk weapons: any simple melee (not two-handed/heavy), unarmed strike, shortsword",
					"With monk weapons, I can use Dex instead of Str and use the Martial Arts damage die",
					"When taking an Attack action with these, I get one unarmed strike as a bonus action"
				]),
				additional : levels.map(function (n) {
					return "1d" + (n < 5 ? 4 : n < 11 ? 6 : n < 17 ? 8 : 10);
				}),
				action : ["bonus action", " (with Attack action)"],
				eval : function() {
					AddString('Extra.Notes', 'Monk features:\n\u25C6 Lose Unarmored Defense, Martial Arts, and Unarmored Movement with armor/shields', true);
				},
				removeeval : function() {
					RemoveString('Extra.Notes', 'Monk features:\n\u25C6 Lose Unarmored Defense, Martial Arts, and Unarmored Movement with armor/shields', true);
				},
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (classes.known.monk && classes.known.monk.level && (v.theWea.monkweapon || v.baseWeaponName == "unarmed strike" || v.baseWeaponName == "shortsword" || (v.isMeleeWeapon && (/simple/i).test(v.theWea.type) && !(/\b(heavy|(2|two).?hand(ed)?s?)\b/i).test(v.theWea.description)))) {
								var aMonkDie = function (n) { return n < 5 ? 4 : n < 11 ? 6 : n < 17 ? 8 : 10; }(classes.known.monk.level);
								try {
									var curDie = eval(fields.Damage_Die.replace('d', '*'));
								} catch (e) {
									var curDie = 'x';
								};
								if (isNaN(curDie) || curDie < aMonkDie) {
									fields.Damage_Die = '1d' + aMonkDie;
								};
								fields.Mod = v.StrDex;
							};
						},
						"I can use either Strength or Dexterity and my Martial Arts damage die in place of the normal damage die for any 'Monk Weapons', which include unarmed strike, shortsword, and any simple melee weapon that is not two-handed or heavy."
					]
				}
			},
			"ki" : {
				name : "Ki",
				source : [["SRD", 27], ["P", 78]],
				minlevel : 2,
				description : "\n   " + "I can spend ki to fuel special actions (see third page)" + "\n   " + "I need to meditate for at least 30 min of a short rest for that short rest to restore ki",
				usages : ["", 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
				recovery : "short rest",
				extraname : "Ki Feature",
				"flurry of blows" : {
					name : "Flurry of Blows",
					source : [["SRD", 27], ["P", 78]],
					description : " [1 ki point]" + "\n   " + "After taking the Attack action, I can make 2 unarmed attacks as a bonus action",
					action : ["bonus action", " (after Attack action)"]
				},
				"patient defense" : {
					name : "Patient Defense",
					source : [["SRD", 27], ["P", 78]],
					description : " [1 ki point]" + "\n   " + "As a bonus action, I can take the Dodge action",
					action : ["bonus action", ""]
				},
				"step of the wind" : {
					name : "Step of the Wind",
					source : [["SRD", 27], ["P", 78]],
					description : " [1 ki point]" + "\n   " + "As a bonus action, I can either Dash or Disengage; My jump distance doubles when I do so",
					action : ["bonus action", ""]
				},
				"stunning strike" : {
					name : "Stunning Strike",
					source : [["SRD", 27], ["P", 79]],
					description : " [1 ki point]" + "\n   " + "After I hit a creature with a melee weapon attack, I can spend a ki point to try to stun it" + "\n   " + "It has to succeed on a Con save or be stunned until the end of my next turn"
				},
				autoSelectExtrachoices : [{
					extrachoice : "flurry of blows"
				}, {
					extrachoice : "patient defense"
				}, {
					extrachoice : "step of the wind"
				}, {
					extrachoice : "stunning strike",
					minlevel : 5
				}]
			},
			"unarmored movement" : {
				name : "Unarmored Movement",
				source : [["SRD", 27], ["P", 78]],
				minlevel : 2,
				description : "\n   " + "Speed increases and eventually lets me traverse some surfaces without falling as I move",
				additional : levels.map(function (n) {
					if (n < 2) return "";
					var spd = "+" + (n < 6 ? 10 : n < 10 ? 15 : n < 14 ? 20 : n < 18 ? 25 : 30) + " ft";
					var xtr = n < 9 ? "" : "; Vertical surfaces and liquids";
					return spd + xtr;
				}),
				changeeval : function (v) {
					var monkSpd = '+' + (v[1] < 2 ? 0 : v[1] < 6 ? 10 : v[1] < 10 ? 15 : v[1] < 14 ? 20 : v[1] < 18 ? 25 : 30);
					SetProf('speed', monkSpd !== '+0', {allModes : monkSpd}, "Monk: Unarmored Movement");
				}
			},
			"subclassfeature3" : {
				name : "Monastic Tradition",
				source : [["SRD", 27], ["P", 78]],
				minlevel : 3,
				description : "\n   " + "Choose a Monastic Tradition to commit to and put it in the \"Class\" field on page 1" + "\n   " + "Choose either Way of the Four Elements, Long Death, Open Hand, Shadow, or Sun Soul"
			},
			"deflect missiles" : {
				name : "Deflect Missiles",
				source : [["SRD", 27], ["P", 78]],
				minlevel : 3,
				description : "\n   " + "As a reaction, I can reduce ranged weapon attack damage done to me" + "\n   " + "If the damage is negated, I catch and may throw it back (20/60 ft) as a monk weapon",
				action : ["reaction", ""],
				additional : levels.map(function (n) {
					return n < 3 ? "" : "1d10 + " + n + " + Dexterity modifier; 1 ki to throw";
				})
			},
			"slow fall" : {
				name : "Slow Fall",
				source : [["SRD", 27], ["P", 78]],
				minlevel : 4,
				description : "\n   " + "As a reaction, I can reduce any falling damage I take by five times my monk level",
				additional : levels.map(function (n) { return n < 4 ? "" : (n*5) + " less falling damage" }),
				action : ["reaction", ""]
			},
			"ki-empowered strikes" : {
				name : "Ki-Empowered Strikes",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 6,
				description : "\n   " + "My unarmed strikes count as magical for overcoming resistances and immunities",
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.baseWeaponName == "unarmed strike" && !v.thisWeapon[1] && !v.theWea.isMagicWeapon && !(/counts as( a)? magical/i).test(fields.Description)) {
								fields.Description += (fields.Description ? '; ' : '') + 'Counts as magical';
							};
						},
						"My unarmed strikes count as magical for overcoming resistances and immunities."
					]
				}
			},
			"evasion" : {
				name : "Evasion",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 7,
				description : "\n   " + "My Dexterity saves vs. areas of effect negate damage on success and halve it on failure",
				savetxt : { text : ["Dex save vs. area effects: fail \u2015 half dmg, success \u2015 no dmg"] }
			},
			"stillness of mind" : {
				name : "Stillness of Mind",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 7,
				description : "\n   " + "As an action, I can end one effect on me that causes me to be charmed or frightened",
				action : ["action", ""]
			},
			"purity of body" : {
				name : "Purity of Body",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 10,
				description : typeA4 ? "\n   " + "My mastery of the ki flowing through me makes me immune to poison and disease" : " [" + "I am immune to poison and disease" + "]",
				savetxt : { immune : ["poison", "disease"] } //both immune to poison damage and the poisoned condition (see sage advice)
			},
			"tongue of the sun and moon" : {
				name : "Tongue of the Sun and Moon",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 13,
				description : "\n   " + "I can understand all spoken languages and all creatures with a language understand me"
			},
			"diamond soul" : {
				name : "Diamond Soul",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 14,
				description : "\n   " + "I am proficient with all saves; I can reroll a failed save once by spending 1 ki point",
				additional : "1 ki point to reroll failed saving throw",
				saves : ["Str", "Dex", "Con", "Int", "Wis", "Cha"]
			},
			"timeless body" : {
				name : "Timeless Body",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 15,
				description : "\n   " + "I don't require food or water; I don't suffer age penalties and can't be aged magically"
			},
			"empty body" : {
				name : "Empty Body",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 18,
				description : "\n   " + "Be invisible and resist non-force damage for 1 min or cast Astral Projection on self",
				additional : "Invisible: 4 ki point; Astral Projection: 8 ki points",
				action : ["action", ""],
				spellcastingBonus : {
					name : "Empty Body",
					spells : ["astral projection"],
					selection : ["astral projection"],
					firstCol : 8
				},
				spellFirstColTitle : "Ki",
				spellChanges : {
					"astral projection" : {
						components : "V,S",
						compMaterial : "",
						description : "I project myself to the Astral Plane with identical statistics, see book",
						changes : "I can spend 8 ki points to cast Astral Projection without requiring material components, although I can't bring other creatures with me."
					}
				}
			},
			"perfect self" : {
				name : "Perfect Self",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 20,
				description : "\n   " + "I regain 4 ki points if I have no more remaining when I roll initiative"
			}
		}
	},

	"paladin" : {
		regExpSearch : /^((?=.*paladin)|((?=.*(exalted|sacred|holy|divine))(?=.*(knight|fighter|warrior|warlord|trooper)))).*$/i,
		name : "Paladin",
		source : [["SRD", 30], ["P", 82]],
		primaryAbility : "Strength and Charisma",
		abilitySave : 6,
		prereqs : "Strength 13 and Charisma 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 10,
		saves : ["Wis", "Cha"],
		skillstxt : {
			primary : "Choose two from Athletics, Insight, Intimidation, Medicine, Persuasion, and Religion"
		},
		armorProfs : {
			primary : [true, true, true, true],
			secondary : [true, true, false, true]
		},
		weaponProfs : {
			primary : [true, true],
			secondary : [true, true]
		},
		equipment : "Paladin starting equipment:" +
			"\n \u2022 A martial weapon and a shield -or- two martial weapons;" +
			"\n \u2022 Five javelins -or- any simple melee weapon;" +
			"\n \u2022 A priest's pack -or- an explorer's pack;" +
			"\n \u2022 Chain mail and a holy symbol." +
			"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Sacred Oath", ["paladin-oath of devotion"]],
		attacks : [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		spellcastingFactor : 2,
		spellcastingKnown : {
			spells : "list",
			prepared : true
		},
		features : {
			"divine sense" : {
				name : "Divine Sense",
				source : [["SRD", 30], ["P", 84]],
				minlevel : 1,
				description : "\n   " + "As an action, I sense celestials/fiends/undead/consecrated/desecrated within 60 ft" + "\n   " + "Until the end of my next turn, I sense the type/location if it is not behind total cover",
				usages : "1 + Charisma modifier per ",
				usagescalc : "event.value = 1 + What('Cha Mod');",
				recovery : "long rest",
				action : ["action", ""]
			},
			"lay on hands" : {
				name : "Lay on Hands",
				source : [["SRD", 31], ["P", 84]],
				minlevel : 1,
				description : "\n   " + "As an action, I can use points in my pool to heal a touched, living creature's hit points" + "\n   " + "I can neutralize poisons/diseases instead at a cost of 5 points per affliction",
				usages : [5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70, 75, 80, 85, 90, 95, 100],
				recovery : "long rest",
				action : ["action", ""]
			},
			"fighting style" : {
				name : "Fighting Style",
				source : [["SRD", 31], ["P", 84]],
				minlevel : 2,
				description : "\n   " + "Choose a Fighting Style for the paladin using the \"Choose Feature\" button above",
				choices : ["Defense", "Dueling", "Great Weapon Fighting", "Protection"],
				"defense" : FightingStyles.defense,
				"dueling" : FightingStyles.dueling,
				"great weapon fighting" : FightingStyles.great_weapon,
				"protection" : FightingStyles.protection
			},
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 31], ["P", 84]],
				minlevel : 2,
				description : "\n   " + "I can cast prepared paladin spells, using Charisma as my spellcasting ability" + "\n   " + "I can use a holy symbol as a spellcasting focus"
			},
			"divine smite" : {
				name : "Divine Smite",
				source : [["SRD", 31], ["P", 85]],
				minlevel : 2,
				description : desc([
					"When I hit a melee weapon attack, I can expend a spell slot to do +2d8 radiant damage",
					"This increases by +1d8 for each spell slot level above 1st and +1d8 against undead/fiends"
				])
			},
			"subclassfeature3.0" : {
				name : "Channel Divinity",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 3,
				description : "",
				usages : 1,
				recovery : "short rest"
			},
			"subclassfeature3" : {
				name : "Sacred Oath",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 3,
				description : "\n   " + "Choose a Sacred Oath you swear to and put it in the \"Class\" field on the first page" + "\n   " + "Choose Oath of the Ancients, Crown, Devotion, Vengeance, or become an Oathbreaker"
			},
			"divine health" : {
				name : "Divine Health",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 3,
				description : "\n   " + "I am immune to disease, thanks to the power of my faith",
				savetxt : { immune : ["disease"] }
			},
			"aura of protection" : {
				name : "Aura of Protection",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 6,
				description : "\n   " + "While I'm conscious, allies within range and I can add my Cha mod (min 1) to saves",
				additional : ["", "", "", "", "", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "30-foot aura", "30-foot aura", "30-foot aura"],
				addMod : { type : "save", field : "all", mod : "Cha", text : "While I'm conscious I can add my Charisma modifier (min 1) to all my saving throws." }
			},
			"aura of courage" : {
				name : "Aura of Courage",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 10,
				description : "\n   " + "While I'm conscious, allies within range and I can't be frightened",
				additional : ["", "", "", "", "", "", "", "", "", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "30-foot aura", "30-foot aura", "30-foot aura"],
				savetxt : { immune : ["frightened"] }
			},
			"improved divine smite" : {
				name : "Improved Divine Smite",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 11,
				description : "\n   " + "Whenever I hit a creature with a melee weapon, I do an extra 1d8 radiant damage",
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.isMeleeWeapon) fields.Description += (fields.Description ? '; ' : '') + '+1d8 Radiant damage';
						},
						"With my melee weapon attacks I deal an extra 1d8 radiant damage."
					]
				}
			},
			"cleansing touch" : {
				name : "Cleansing Touch",
				source : [["SRD", 32], ["P", 85]],
				minlevel : 14,
				description : "\n   " + "As an action, I can end one spell on me or another willing creature by touch",
				usages : "Charisma modifier per ",
				usagescalc : "event.value = Math.max(1, What('Cha Mod'));",
				recovery : "long rest",
				action : ["action", ""]
			}
		}
	},

	"ranger" : {
		regExpSearch : /^((?=.*(ranger|strider))|((?=.*(nature|natural))(?=.*(knight|fighter|warrior|warlord|trooper)))).*$/i,
		name : "Ranger",
		source : [["SRD", 35], ["P", 89]],
		primaryAbility : "Dexterity and Wisdom",
		abilitySave : 5,
		prereqs : "Dexterity 13 and Wisdom 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 10,
		saves : ["Str", "Dex"],
		skillstxt : {
			primary : "Choose three from Animal Handling, Athletics, Insight, Investigation, Nature, Perception, Stealth, and Survival",
			secondary : "Choose one from Animal Handling, Athletics, Insight, Investigation, Nature, Perception, Stealth, or Survival"
		},
		armorProfs : {
			primary : [true, true, false, true],
			secondary : [true, true, false, true]
		},
		weaponProfs : {
			primary : [true, true],
			secondary : [true, true]
		},
		equipment : "Ranger starting equipment:" +
			"\n \u2022 Scale mail -or- leather armor;" +
			"\n \u2022 Two shortswords -or- two simple melee weapons;" +
			"\n \u2022 A dungeoneer's pack -or- an explorer's pack;" +
			"\n \u2022 A longbow and a quiver of 20 arrows." +
			"\n\nAlternatively, choose 5d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Ranger Archetype", ["ranger-hunter"]],
		attacks : [1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
		spellcastingFactor : 2,
		spellcastingKnown : {
			spells : [0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11]
		},
		features : {
			"favored enemy" : {
				name : "Favored Enemy",
				source : [["SRD", 35], ["P", 91]],
				minlevel : 1,
				description : "\n   " + "Use the \"Choose Feature\" button above to add a favored enemy to the third page" + "\n   " + "When selecting a favored enemy, I also learn one of the languages it speaks" + "\n   " + "I have adv. on Wis (Survival) checks to track and Int checks to recall info about them",
				additional :  levels.map(function (n) {
					return n < 6 ? "1 favored enemy" : (n < 14 ? 2 : 3) + " favored enemies";
				}),
				extraname : "Favored Enemy",
				extrachoices : ["Aberrations", "Beasts", "Celestials", "Constructs", "Dragons", "Elementals", "Fey", "Fiends", "Giants", "Monstrosities", "Oozes", "Plants", "Undead", "Two Races of Humanoids"],
				extraTimes : levels.map(function (n) { return n < 6 ? 1 : n < 14 ? 2 : 3; }),
				"aberrations" : {
					name : "Aberrations",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"beasts" : {
					name : "Beasts",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"celestials" : {
					name : "Celestials",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"constructs" : {
					name : "Constructs",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"dragons" : {
					name : "Dragons",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"elementals" : {
					name : "Elementals",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"fey" : {
					name : "Fey",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"fiends" : {
					name : "Fiends",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"giants" : {
					name : "Giants",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"monstrosities" : {
					name : "Monstrosities",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"oozes" : {
					name : "Oozes",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"plants" : {
					name : "Plants",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"undead" : {
					name : "Undead",
					description : "",
					source : [["SRD", 35], ["P", 91]],
					languageProfs : [1]
				},
				"two races of humanoids" : {
					name : "Two Races of Humanoids",
					description : "",
					source : [["SRD", 35], ["P", 91]]
				}
			},
			"natural explorer" : {
				name : "Natural Explorer",
				source : [["SRD", 36], ["P", 91]],
				minlevel : 1,
				description : "\n   " + "Use the \"Choose Feature\" button above to add a favored terrain to the third page",
				additional :  levels.map(function (n) {
					return n < 6 ? "1 favored terrain" : (n < 10 ? 2 : 3) + " favored terrains";
				}),
				extraname : "Favored Terrain",
				extrachoices : ["Arctic", "Coast", "Desert", "Forest", "Grassland", "Mountain", "Swamp", "Underdark"],
				extraTimes : levels.map(function (n) { return n < 6 ? 1 : n < 10 ? 2 : 3; }),
				"arctic" : {
					name : "Arctic",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning arctic terrain" + "\n   " + "While traveling for an hour or more in arctic terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"coast" : {
					name : "Coast",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning coast terrain" + "\n   " + "While traveling for an hour or more in coast terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"desert" : {
					name : "Desert",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning desert terrain" + "\n   " + "While traveling for an hour or more in desert terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"forest" : {
					name : "Forest",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning forest terrain" + "\n   " + "While traveling for an hour or more in forest terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"grassland" : {
					name : "Grassland",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning grassland terrain" + "\n   " + "While traveling for an hour or more in grassland terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"mountain" : {
					name : "Mountain",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning mountain terrain" + "\n   " + "While traveling for an hour or more in mountain terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"swamp" : {
					name : "Swamp",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning swamp terrain" + "\n   " + "While traveling for an hour or more in swamp terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				},
				"underdark" : {
					name : "Underdark",
					source : [["SRD", 36], ["P", 91]],
					description : "\n   " + "I can double my proficiency bonus for Int/Wis checks concerning underdark terrain" + "\n   " + "While traveling for an hour or more in underdark terrain I gain the following benefits:" + "\n    - " + "My allies and I are not slowed by difficult terrain and can't get lost except by magic" + "\n    - " + "I am alert to danger even when doing something else; I forage twice as much food" + "\n    - " + "If alone (or alone with beast companion), I can move stealthily at my normal pace" + "\n    - " + "When tracking, I also learn the exact number, size, and time since passing"
				}
			},
			"fighting style" : {
				name : "Fighting Style",
				source : [["SRD", 36], ["P", 91]],
				minlevel : 2,
				description : "\n   " + "Choose a Fighting Style for the ranger using the \"Choose Feature\" button above",
				choices : ["Archery", "Defense", "Dueling", "Two-Weapon Fighting"],
				"archery" : FightingStyles.archery,
				"defense" : FightingStyles.defense,
				"dueling" : FightingStyles.dueling,
				"two-weapon fighting" : FightingStyles.two_weapon
			},
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 36], ["P", 91]],
				minlevel : 2,
				description : "\n   " + "I can cast ranger spells that I know, using Wisdom as my spellcasting ability",
				additional : levels.map(function (n, idx) {
					return n < 2 ? "" : [0, 2, 3, 3, 4, 4, 5, 5, 6, 6, 7, 7, 8, 8, 9, 9, 10, 10, 11, 11][idx] + " spells known";
				})
			},
			"subclassfeature3" : {
				name : "Ranger Archetype",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 3,
				description : "\n   " + "Choose a Ranger Archetype you strive to emulate and put it in the \"Class\" field" + "\n   " + "Choose either Beast Master or Hunter"
			},
			"primeval awareness" : {
				name : "Primeval Awareness",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 3,
				description : "\n   " + "As an action, I can use a spell slot to focus my awareness for 1 min per spell slot level" + "\n   " + "Out to 1 mile (6 in favored terrain), I sense if certain types of creatures are present",
				additional : "aber./celest./dragon/elem./fey/fiend/undead",
				action : ["action", ""]
			},
			"land's stride" : {
				name : "Land's Stride",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 8,
				description : "\n   " + "I can travel through nonmagical, difficult terrain without penalty" + "\n   " + "I have advantage on saves vs. plants that impede movement by magical influence",
				savetxt : { adv_vs : ["magical plants that impede movement"] }
			},
			"hide in plain sight" : {
				name : "Hide in Plain Sight",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 10,
				description : "\n   " + "I can hide with +10 to Dex (Stealth) after spending 1 minute creating camouflage" + "\n   " + "Once I move or take an action or a reaction, the benefit is lost"
			},
			"vanish" : {
				name : "Vanish",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 14,
				description : "\n   " + "I can't be nonmagically tracked if I don't want to be and can Hide as a bonus action",
				action : ["bonus action", ""]
			},
			"feral senses" : {
				name : "Feral Senses",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 18,
				description : "\n   " + "When not blinded or deafened, I'm aware of invisible, non-hidden creatures in 30 ft" + "\n   " + "I don't have disadvantage when attacking creatures I am aware of but can't see",
				vision : [["Feral senses", 30]]
			},
			"foe slayer" : {
				name : "Foe Slayer",
				source : [["SRD", 37], ["P", 92]],
				minlevel : 20,
				description : "\n   " + "Once per turn, I can add Wis mod to the attack or damage roll vs. favored enemy"
			}
		}
	},

	"rogue" : {
		regExpSearch : /(rogue|miscreant)/i,
		name : "Rogue",
		source : [["SRD", 39], ["P", 94]],
		primaryAbility : "Rogue: Dexterity",
		prereqs : "Dexterity 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 3, 3, 4, 4, 4, 4, 5, 5, 5, 6, 6],
		die : 8,
		saves : ["Int", "Dex"],
		skillstxt :{
			primary : "Choose four from Acrobatics, Athletics, Deception, Insight, Intimidation, Investigation, Perception, Performance, Persuasion, Sleight of Hand, and Stealth",
			secondary : "Choose one from Acrobatics, Athletics, Deception, Insight, Intimidation, Investigation, Perception, Performance, Persuasion, Sleight of Hand, or Stealth"
		},
		toolProfs : {
			primary : [["Thieves' tools", "Dex"]],
			secondary : [["Thieves' tools", "Dex"]]
		},
		armorProfs : {
			primary : [true, false, false, false],
			secondary : [true, false, false, false]
		},
		weaponProfs : {
			primary : [true, false, ["hand crossbow", "longsword", "rapier", "shortsword"]]
		},
		equipment : "Rogue starting equipment:" +
			"\n \u2022 A rapier -or- a shortsword;" +
			"\n \u2022 A shortbow and a quiver of 20 arrows -or- a shortswords;" +
			"\n \u2022 A burglar's pack -or- dungeoneer's pack -or- an explorer's pack;" +
			"\n \u2022 Leather armor, two daggers, and thieves' tools." +
			"\n\nAlternatively, choose 4d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Roguish Archetype", ["rogue-thief"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		features : {
			"expertise" : {
				name : "Expertise",
				source : [["SRD", 39], ["P", 96]],
				minlevel : 1,
				description : "\n   " + "I gain expertise with two skills/thieves' tools I am proficient with; two more at 6th level",
				skillstxt : "Expertise with any two skill proficiencies and/or thieves' tools, and two more at 6th level",
				additional : levels.map(function (n) {
					return "with " + (n < 6 ? 2 : 4) + " skills";
				}),
				extraname : "Expertise",
				extrachoices : ["Acrobatics", "Animal Handling", "Arcana", "Athletics", "Deception", "History", "Insight", "Intimidation", "Investigation", "Medicine", "Nature", "Perception", "Performance", "Persuasion", "Religion", "Sleight of Hand", "Stealth", "Survival", "Thieves' Tools"],
				extraTimes : levels.map(function (n) { return n < 6 ? 2 : 4; }),
				"acrobatics" : {
					name : "Acrobatics Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Acrobatics") !== -1; },
					skills : [["Acrobatics", "only"]]
				},
				"animal handling" : {
					name : "Animal Handling Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Animal Handling") !== -1; },
					skills : [["Animal Handling", "only"]]
				},
				"arcana" : {
					name : "Arcana Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Arcana") !== -1; },
					skills : [["Arcana", "only"]]
				},
				"athletics" : {
					name : "Athletics Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Athletics") !== -1; },
					skills : [["Athletics", "only"]]
				},
				"deception" : {
					name : "Deception Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Deception") !== -1; },
					skills : [["Deception", "only"]]
				},
				"history" : {
					name : "History Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("History") !== -1; },
					skills : [["History", "only"]]
				},
				"insight" : {
					name : "Insight Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Insight") !== -1; },
					skills : [["Insight", "only"]]
				},
				"intimidation" : {
					name : "Intimidation Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Intimidation") !== -1; },
					skills : [["Intimidation", "only"]]
				},
				"investigation" : {
					name : "Investigation Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Investigation") !== -1; },
					skills : [["Investigation", "only"]]
				},
				"medicine" : {
					name : "Medicine Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Medicine") !== -1; },
					skills : [["Medicine", "only"]]
				},
				"nature" : {
					name : "Nature Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Nature") !== -1; },
					skills : [["Nature", "only"]]
				},
				"perception" : {
					name : "Perception Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Perception") !== -1; },
					skills : [["Perception", "only"]]
				},
				"performance" : {
					name : "Performance Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Performance") !== -1; },
					skills : [["Performance", "only"]]
				},
				"persuasion" : {
					name : "Persuasion Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Persuasion") !== -1; },
					skills : [["Persuasion", "only"]]
				},
				"religion" : {
					name : "Religion Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Religion") !== -1; },
					skills : [["Religion", "only"]]
				},
				"sleight of hand" : {
					name : "Sleight of Hand Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Sleight of Hand") !== -1; },
					skills : [["Sleight of Hand", "only"]]
				},
				"stealth" : {
					name : "Stealth Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Stealth") !== -1; },
					skills : [["Stealth", "only"]]
				},
				"survival" : {
					name : "Survival Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) { return v.skillProfs.indexOf("Survival") !== -1; },
					skills : [["Survival", "only"]]
				},
				"thieves' tools" : {
					name : "Thieves' Tools Expertise", description : "",
					source : [["SRD", 39], ["P", 96]],
					prereqeval : function(v) {
						return CurrentProfs.tool["thieves' tools"] || (/thieve.?s.{1,3}tools/i).test(v.toolProfs.toString());
					},
					eval : function () {
						if ((/thieve.?s.*tools/i).test(What('Too Text'))) {
							Checkbox('Too Exp', true);
						};
					},
					removeeval : function () {
						if ((/thieve.?s.*tools/i).test(What('Too Text'))) {
							Checkbox('Too Exp', false);
						};
					}
				}
			},
			"sneak attack" : {
				name : "Sneak Attack",
				source : [["SRD", 39], ["P", 96]],
				minlevel : 1,
				description : "\n   " + "Once per turn, I can add damage to finesse/ranged attack if I have adv." + "\n   " + "I don't need adv. if a conscious ally is within 5 ft of the target and I don't have disadv.",
				additional : levels.map(function (n) {
					return Math.ceil(n / 2) + "d6";
				}),
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (classes.known.rogue && classes.known.rogue.level && !v.isSpell && !v.isDC && (v.isRangedWeapon || (/\bfinesse\b/i).test(fields.Description))) {
								v.sneakAtk = Math.ceil(classes.known.rogue.level / 2);
								fields.Description += (fields.Description ? '; ' : '') + 'Sneak attack ' + v.sneakAtk + 'd6';
							};
						},
						"Once per turn, when I attack with a ranged or finesse weapon while I have advantage or an conscious ally is within 5 ft of the target, I can add my sneak attack damage to the attack."
					]
				}
			},
			"thieves cant" : {
				name : "Thieves' Cant",
				source : [["SRD", 39], ["P", 96]],
				minlevel : 1,
				description : "\n   " + "I know the secret rogue language that I can use to convey messages inconspicuously",
				languageProfs : ["Thieves' Cant"]
			},
			"cunning action" : {
				name : "Cunning Action",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 2,
				description : "\n   " + "I can use a bonus action to take the Dash, Disengage, or Hide action",
				action : ["bonus action", ""]
			},
			"subclassfeature3" : {
				name : "Roguish Archetype",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 3,
				description : "\n   " + "Choose a Roguish Archetype you strive to emulate and put it in the \"Class\" field" + "\n   " + "Choose either Arcane Trickster, Assassin, Mastermind, Swashbuckler, or Thief"
			},
			"uncanny dodge" : {
				name : "Uncanny Dodge",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 5,
				description : "\n   " + "As a reaction, I halve the damage of an attack from an attacker that I can see",
				action : ["reaction", ""]
			},
			"evasion" : {
				name : "Evasion",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 7,
				description : "\n   " + "My Dexterity saves vs. areas of effect negate damage on success and halve it on failure",
				savetxt : { text : ["Dex save vs. area effects: fail \u2015 half dmg, success \u2015 no dmg"] }
			},
			"reliable talent" : {
				name : "Reliable Talent",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 11,
				description : "\n   " + "If I make an ability check where I add my proficiency bonus, rolls of 9 or lower are 10"
			},
			"blindsense" : {
				name : "Blindsense",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 14,
				description : "\n   " + "With my hearing, I can locate hidden or invisible creatures that are within 10 ft of me",
				vision : [["Blindsense", 10]]
			},
			"slippery mind" : {
				name : "Slippery Mind",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 15,
				description : "\n   " + "I am proficient with Wisdom saving throws",
				saves : ["Wis"]
			},
			"elusive" : {
				name : "Elusive",
				source : [["SRD", 40], ["P", 96]],
				minlevel : 18,
				description : "\n   " + "Attackers do not gain advantage on attacks vs. me, unless I am incapacitated"
			},
			"stroke of luck" : {
				name : "Stroke of Luck",
				source : [["SRD", 40], ["P", 97]],
				minlevel : 20,
				description : "\n   " + "I can turn a missed attack into a hit or a failed ability check into a natural 20",
				recovery : "short rest",
				usages : 1
			}
		}
	},

	"sorcerer" : {
		regExpSearch : /sorcerer|witch/i,
		name : "Sorcerer",
		source : [["SRD", 42], ["P", 99]],
		primaryAbility : "Charisma",
		abilitySave : 6,
		prereqs : "Charisma 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 6,
		saves : ["Con", "Cha"],
		skillstxt : {
			primary : "Choose two from Arcana, Deception, Insight, Intimidation, Persuasion, and Religion"
		},
		weaponProfs : {
			primary : [false, false, ["dagger", "dart", "light crossbow", "quarterstaff", "sling"]]
		},
		equipment : "Sorcerer starting equipment:" +
			"\n \u2022 A light crossbow and 20 bolts -or- any simple weapon;" +
			"\n \u2022 A component pouch -or- an arcane focus;" +
			"\n \u2022 A dungeoneer's pack -or- an explorer's pack;" +
			"\n \u2022 Two daggers." +
			"\n\nAlternatively, choose 3d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Sorcerous Origin", ["sorcerer-draconic bloodline"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : 1,
		spellcastingKnown : {
			cantrips : [4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6],
			spells : [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15]
		},
		features : {
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 43], ["P", 101]],
				minlevel : 1,
				description : "\n   " + "I can cast sorcerer cantrips/spells that I know, using Charisma as my spellcasting ability" + "\n   " + "I can use an arcane focus as a spellcasting focus ",
				additional : levels.map(function (n, idx) {
					var cantr = [4, 4, 4, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6][idx];
					var splls = [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 13, 14, 14, 15, 15, 15, 15][idx];
					return cantr + " cantrips \u0026 " + splls + " spells known";
				})
			},
			"subclassfeature1" : {
				name : "Sorcerous Origin",
				source : [["SRD", 43], ["P", 101]],
				minlevel : 1,
				description : "\n   " + "Choose the Sorcerous Origin for your innate powers and put it in the \"Class\" field" + "\n   " + "Choose either Draconic Bloodline, Storm Sorcery, or Wild Magic"
			},
			"font of magic" : {
				name : "Font of Magic",
				source : [["SRD", 43], ["P", 101]],
				minlevel : 2,
				description : desc([
					"As a bonus action, I can use sorcery points to create spell slots and vice versa",
					"I can convert spell slots to sorcery points at a rate of 1 point per spell slot level",
					"I can convert sorcery points to spell slots, which last until I finish a long rest, as follows:",
					"Level 1 for 2 sorcery points;   level 2 for 3 sorcery points;   level 3 for 5 sorcery points",
					"Level 4 for 6 sorcery points;   level 5 for 7 sorcery points"
				]),
				usages : [0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20],
				recovery : "long rest",
				action : ["bonus action", ""],
				additional : "Sorcery Points"
			},
			"metamagic" : {
				name : "Metamagic",
				source : [["SRD", 44], ["P", 101]],
				minlevel : 3,
				description : "\n   " + "Use the \"Choose Feature\" button above to add a Metamagic option to the third page" + "\n   " + "I can use only 1 Metamagic option on a spell unless otherwise written",
				additional : levels.map(function (n) {
					return n < 3 ? "" : (n < 10 ? 2 : n < 17 ? 3 : 4) + " known";
				}),
				extraname : "Metamagic Option",
				extrachoices : ["Careful Spell", "Distant Spell", "Empowered Spell", "Extended Spell", "Heightened Spell", "Quickened Spell", "Subtle Spell", "Twinned Spell"],
				extraTimes : levels.map(function (n) {
					return n < 3 ? 0 : n < 10 ? 2 : n < 17 ? 3 : 4;
				}),
				"careful spell" : {
					name : "Careful Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point]" + "\n   " + "If the spell allows a saving throw, I can protect Cha modifier number of creatures" + "\n   " + "The selected creatures automatically succeed on their saving throws vs. the spell"
				},
				"distant spell" : {
					name : "Distant Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point]" + "\n   " + "I double the range of the spell or make the range 30 ft if the range was touch"
				},
				"empowered spell" : {
					name : "Empowered Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point]" + "\n   " + "If the spell uses damage dice, I can reroll my Charisma modifier number of damage dice" + "\n   " + "I can Empower a spell even if I use another Metamagic option on it"
				},
				"extended spell" : {
					name : "Extended Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point]" + "\n   " + "If the spell has a duration of at least 1 min, I can double it, up to 24 hours"
				},
				"heightened spell" : {
					name : "Heightened Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [3 sorcery points]" + "\n   " + "If the spell allows a saving throw, I can have one target get disadv. on their first save"
				},
				"quickened spell" : {
					name : "Quickened Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [2 sorcery points]" + "\n   " + "If the spell has a casting time of 1 action, I can cast it as a bonus action",
					action : ["bonus action", ""]
				},
				"subtle spell" : {
					name : "Subtle Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point]" + "\n   " + "I can cast the spell without the need to use somatic or verbal components"
				},
				"twinned spell" : {
					name : "Twinned Spell",
					source : [["SRD", 44], ["P", 102]],
					description : " [1 sorcery point per spell level, minimum 1]" + "\n   " + "If spell/cantrip has a target of one and not self, I can aim it at second target within range"
				}
			},
			"sorcerous restoration" : {
				name : "Sorcerous Restoration",
				source : [["SRD", 44], ["P", 102]],
				minlevel : 20,
				description : "\n   " + "I regain 4 expended sorcery points whenever I finish a short rest"
			}
		}
	},

	"warlock" : {
		regExpSearch : /warlock/i,
		name : "Warlock",
		source : [["SRD", 46], ["P", 105]],
		primaryAbility : "Charisma",
		abilitySave : 6,
		prereqs : "Charisma 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 8,
		saves : ["Wis", "Cha"],
		skillstxt : {
			primary : "Choose two from Arcana, Deception, History, Intimidation, Investigation, Nature, and Religion"
		},
		armorProfs : {
			primary : [true, false, false, false],
			secondary : [true, false, false, false]
		},
		weaponProfs : {
			primary : [true, false],
			secondary : [true, false]
		},
		equipment : "Warlock starting equipment:" +
			"\n \u2022 A light crossbow and 20 bolts -or- any simple weapon;" +
			"\n \u2022 A component pouch -or- an arcane focus;" +
			"\n \u2022 A scholar's pack -or- a dungeoneer's pack;" +
			"\n \u2022 Leather armor, any simple weapon, and two daggers." +
			"\n\nAlternatively, choose 4d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Otherworldly Patron", ["warlock-the fiend"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : "warlock1",
		spellcastingKnown : {
			cantrips : [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4],
			spells : [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15]
		},
		spellcastingList : {
			"class" : "warlock",
			level : [0, 5] //lower and higher limit
		},
		features : {
			"pact magic" : {
				name : "Pact Magic",
				source : [["SRD", 46], ["P", 107]],
				minlevel : 1,
				description : "\n   " + "I can cast warlock cantrips/spells that I know, using Charisma as my spellcasting ability" + "\n   " + "I can use an arcane focus as a spellcasting focus" + "\n   " + "I regain these spell slots on a short rest",
				additional : levels.map(function (n, idx) {
					var cantr = [2, 2, 2, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4][idx];
					var splls = [2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15][idx];
					var slots = n < 2 ? 1 : n < 11 ? 2 : n < 17 ? 3 : 4;
					var sllvl = n < 3 ? 1 : n < 5 ? 2 : n < 7 ? 3 : n < 9 ? 4 : 5;
					return cantr + " cantrips \u0026 " + splls + " spells known; " + slots + "\u00D7 " + spellLevelList[sllvl] + " spell slot";
				})
			},
			"subclassfeature1" : {
				name : "Otherworldly Patron",
				source : [["SRD", 46], ["P", 107]],
				minlevel : 1,
				description : "\n   " + "Choose the Otherworldly Patron you have a bargain with and put it in the \"Class\" field" + "\n   " + "Choose either the Archfey, the Fiend, the Great Old One, or the Undying"
			},
			"eldritch invocations" : {
				name : "Eldritch Invocations",
				source : [["SRD", 47], ["P", 107]],
				minlevel : 2,
				description : "\n   " + "Use the \"Choose Feature\" button above to add Eldritch Invocations to the third page" + "\n   " + "Whenever I gain a warlock level, I can replace an invocation I know with another",
				additional : levels.map(function (n) {
					return n < 2 ? "" : (n < 5 ? 2 : n < 7 ? 3 : n < 9 ? 4 : n < 12 ? 5 : n < 15 ? 6 : n < 18 ? 7 : 8) + " invocations known";
				}),
				extraname : "Eldritch Invocation",
				extrachoices : ["Agonizing Blast (prereq: Eldritch Blast cantrip)", "Armor of Shadows", "Ascendant Step (prereq: level 9 warlock)", "Beast Speech", "Beguiling Influence", "Bewitching Whispers (prereq: level 7 warlock)", "Book of Ancient Secrets (prereq: Pact of the Tome)", "Chains of Carceri (prereq: level 15 warlock, Pact of the Chain)", "Devil's Sight", "Dreadful Word (prereq: level 7 warlock)", "Eldritch Sight", "Eldritch Spear (prereq: Eldritch Blast cantrip)", "Eyes of the Rune Keeper", "Fiendish Vigor", "Gaze of Two Minds", "Lifedrinker (prereq: level 12 warlock, Pact of the Blade)", "Mask of Many Faces", "Master of Myriad Forms (prereq: level 15 warlock)", "Minions of Chaos (prereq: level 9 warlock)", "Mire the Mind (prereq: level 5 warlock)", "Misty Visions", "One with Shadows (prereq: level 5 warlock)", "Otherworldly Leap (prereq: level 9 warlock)", "Repelling Blast (prereq: Eldritch Blast cantrip)", "Sculptor of Flesh (prereq: level 7 warlock)", "Sign of Ill Omen (prereq: level 5 warlock)", "Thief of Five Fates", "Thirsting Blade (prereq: level 5 warlock, Pact of the Blade)", "Visions of Distant Realms (prereq: level 15 warlock)", "Voice of the Chain Master (prereq: Pact of the Chain)", "Whispers of the Grave (prereq: level 9 warlock)", "Witch Sight (prereq: level 15 warlock)"],
				extraTimes : levels.map(function (n) {
					return n < 2 ? 0 : n < 5 ? 2 : n < 7 ? 3 : n < 9 ? 4 : n < 12 ? 5 : n < 15 ? 6 : n < 18 ? 7 : 8;
				}),
				"agonizing blast (prereq: eldritch blast cantrip)" : {
					name : "Agonizing Blast",
					description : "\n   " + "I can add my Charisma modifier to every hit with my Eldritch Blast cantrip",
					source : [["SRD", 48], ["P", 110]],
					prereqeval : function(v) { return v.hasEldritchBlast; },
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (v.baseWeaponName == 'eldritch blast') output.extraDmg += What('Cha Mod');
							},
							"I add my Charisma modifier to the damage of every beam of my Eldritch Blast cantrip."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (spellKey == "eldritch blast") {
									spellObj.description = spellObj.description.replace("1d10 Force damage", "1d10+" + What("Cha Mod") + " Force dmg");
									return true;
								};
							},
							"I add my Charisma modifier to the damage of every beam of my Eldritch Blast cantrip."
						]
					}
				},
				"armor of shadows" : {
					name : "Armor of Shadows",
					description : "\n   " + "I can cast Mage Armor on myself at will, without using a spell slot or material components",
					source : [["SRD", 48], ["P", 110]],
					spellcastingBonus : {
						name : "Armor of Shadows",
						spells : ["mage armor"],
						selection : ["mage armor"],
						firstCol : "atwill"
					},
					spellChanges : {
						"mage armor" : {
							range : "Self",
							components : "V,S",
							compMaterial : "",
							description : "If I'm not wearing armor, I gain AC 13 + Dex modifier for the duration; spell ends if I don armor",
							changes : "With the Armor of Shadows invocation I can cast Mage Armor without a material component, but only on myself."
						}
					}
				},
				"ascendant step (prereq: level 9 warlock)" : {
					name : "Ascendant Step",
					description : "\n   " + "I can cast Levitate on myself at will, without using a spell slot or material components",
					source : [["SRD", 48], ["P", 110]],
					spellcastingBonus : {
						name : "Ascendant Step",
						spells : ["levitate"],
						selection : ["levitate"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 9; },
					spellChanges : {
						"levitate" : {
							range : "Self",
							components : "V,S",
							compMaterial : "",
							description : "I rise vertically, up to 20 ft; during my move, I can move up/down up to 20 ft",
							changes : "With the Ascendant Step invocation I can cast Levitate without a material component, but only on myself."
						}
					}
				},
				"beast speech" : {
					name : "Beast Speech",
					description : "\n   " + "I can cast Speak with Animals at will, without using a spell slots",
					source : [["SRD", 48], ["P", 110]],
					spellcastingBonus : {
						name : "Beast Speech",
						spells : ["speak with animals"],
						selection : ["speak with animals"],
						firstCol : "atwill"
					}
				},
				"beguiling influence" : {
					name : "Beguiling Influence",
					description : "\n   " + "I gain proficiencies with the Deception and Persuasion skills",
					source : [["SRD", 48], ["P", 110]],
					skills : ["Deception", "Persuasion"]
				},
				"bewitching whispers (prereq: level 7 warlock)" : {
					name : "Bewitching Whispers",
					description : "\n   " + "Once per long rest, I can cast Compulsion using a warlock spell slot",
					source : [["SRD", 48], ["P", 110]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Bewitching Whispers",
						spells : ["compulsion"],
						selection : ["compulsion"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 7; }
				},
				"book of ancient secrets (prereq: pact of the tome)" : {
					name : "Book of Ancient Secrets",
					description : desc([
						"I can add any two 1st-level spells that have the ritual tag to my Book of Shadows",
						"If I come across spells with the ritual tag, I can transcribe them into my book, as well",
						"I can cast any of these spells in my Book of Shadows as rituals, but not as normal spells",
						"I can cast my known warlock spells as rituals if they have the ritual tag"
					]),
					source : [["SRD", 48], ["P", 110]],
					eval : function() {
						CurrentSpells['book of ancient secrets'] = {
							name : 'Book of Ancient Secrets',
							ability : 6,
							list : {class : 'any', ritual : true},
							known : {spells : 'book'},
							refType : "feat"
						};
						SetStringifieds('spells'); CurrentUpdates.types.push('spells');
					},
					removeeval : function() {
						delete CurrentSpells['book of ancient secrets'];
						SetStringifieds('spells'); CurrentUpdates.types.push('spells');
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 3 && GetFeatureChoice('class', 'warlock', 'pact boon') == 'pact of the tome'; },
					calcChanges : {
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (spName == "book of ancient secrets") {
									spellObj.firstCol = "(R)";
									if (!(/.*(\d+ ?h\b|special|see b).*/i).test(spellObj.time)) {
										var numMinutes = Number(spellObj.time.replace(/(\d+) ?min.*/, "$1"));
										if (isNaN(numMinutes)) numMinutes = 0;
										spellObj.time = (numMinutes + 10) + " min";
									}
									return true;
								};
							},
							"By the Book of Ancient Secrets invocation, I can cast ritual spells from my Book of Shadows. Ritual spell always have a casting time of 10 minutes or more."
						]
					}
				},
				"chains of carceri (prereq: level 15 warlock, pact of the chain)" : {
					name : "Chains of Carceri",
					description : "\n   " + "I can cast Hold Monster at will if the target is a celestial, fiend, or elemental" + "\n   " + "This uses no spell slots/material comp.; I can only target an individual once per long rest",
					source : [["SRD", 49], ["P", 110]],
					spellcastingBonus : {
						name : "Chains of Carceri",
						spells : ["hold monster"],
						selection : ["hold monster"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 15 && GetFeatureChoice('class', 'warlock', 'pact boon') == 'pact of the chain'; },
					spellChanges : {
						"speak with animals" : {
							components : "V,S",
							compMaterial : "",
							description : "1 celestial, fiend, or elemental, save or paralyzed; extra save at end of each turn",
							changes : "With the Chains of Carceri invocation I can cast Hold Monster without a material component, but only on a celestial, fiend, or elemental."
						}
					}
				},
				"devil's sight" : {
					name : "Devil's Sight",
					description : "\n   " + "I can see in magical and nonmagical darkness out to 120 ft",
					source : [["SRD", 49], ["P", 110]],
					vision : [["Devil's sight", 120]]
				},
				"dreadful word (prereq: level 7 warlock)" : {
					name : "Dreadful Word",
					description : "\n   " + "Once per long rest, I can cast Confusion using a warlock spell slot",
					source : [["SRD", 49], ["P", 110]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Dreadful Word",
						spells : ["confusion"],
						selection : ["confusion"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 7; }
				},
				"eldritch sight" : {
					name : "Eldritch Sight",
					description : "\n   " + "I can cast Detect Magic at will, without using a spell slot",
					source : [["SRD", 49], ["P", 110]],
					spellcastingBonus : {
						name : "Eldritch Sight",
						spells : ["detect magic"],
						selection : ["detect magic"],
						firstCol : "atwill"
					}
				},
				"eldritch spear (prereq: eldritch blast cantrip)" : {
					name : "Eldritch Spear",
					description : "\n   " + "My Eldritch Blast cantrip has a range of 300 ft",
					source : [["SRD", 49], ["P", 111]],
					prereqeval : function(v) { return v.hasEldritchBlast; },
					calcChanges : {
						atkAdd : [
							function (fields, v) {
								if (v.baseWeaponName == 'eldritch blast') fields.Range = 300 * (v.rangeM ? v.rangeM : 1) + ' ft';
							},
							"My Eldritch Blast cantrip has a range of 300 ft."
						]
					},
					spellChanges : {
						"eldritch blast" : {
							range : "300 ft",
							changes : "My Eldritch Blast cantrip has a range of 300 ft."
						}
					}
				},
				"eyes of the rune keeper" : {
					name : "Eyes of the Rune Keeper",
					description : "\n   " + "I can read all writing",
					source : [["SRD", 49], ["P", 111]]
				},
				"fiendish vigor" : {
					name : "Fiendish Vigor",
					description : "\n   " + "I can cast False Life on myself at will, without using a spell slot or material components",
					source : [["SRD", 49], ["P", 111]],
					spellcastingBonus : {
						name : "Fiendish Vigor",
						spells : ["false life"],
						selection : ["false life"],
						firstCol : "atwill"
					},
					spellChanges : {
						"false life" : {
							components : "V,S",
							compMaterial : "",
							description : "I gain 1d4+4 temporary hit points for the duration",
							changes : "With the Fiendish Vigor invocation I can cast False Life without a material component."
						}
					}
				},
				"gaze of two minds" : {
					name : "Gaze of Two Minds",
					description : "\n   " + "As an action, I can touch a willing creature and perceive through its senses (not my own)" + "\n   " + "This lasts until the end of my next turn, but I can use an action to extend the duration",
					source : [["SRD", 49], ["P", 111]]
				},
				"lifedrinker (prereq: level 12 warlock, pact of the blade)" : {
					name : "Lifedrinker",
					description : "\n   " + "My pact weapon does extra necrotic damage equal to my Charisma modifier",
					source : [["SRD", 49], ["P", 111]],
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (v.pactWeapon || ((v.isMeleeWeapon || v.theWea.isMagicWeapon || v.thisWeapon[1]) && (/\bpact\b/i).test(v.WeaponText))) output.extraDmg += What('Cha Mod');
							},
							"If I include the word 'Pact' in a melee or magic weapon's name or description, the calculation will add my Charisma modifier to its damage. However, it won't say that this added damage is of the necrotic type, as it can only display a single damage type."
						]
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 12 && GetFeatureChoice('class', 'warlock', 'pact boon') == 'pact of the blade'; }
				},
				"mask of many faces" : {
					name : "Mask of Many Faces",
					description : "\n   " + "I can cast Disguise Self on myself at will, without using a spell slot",
					source : [["SRD", 49], ["P", 111]],
					spellcastingBonus : {
						name : "Mask of Many Faces",
						spells : ["disguise self"],
						selection : ["disguise self"],
						firstCol : "atwill"
					}
				},
				"master of myriad forms (prereq: level 15 warlock)" : {
					name : "Master of Myriad Forms",
					description : "\n   " + "I can cast Alter Self at will, without using a spell slot",
					source : [["SRD", 49], ["P", 111]],
					spellcastingBonus : {
						name : "Mask of Myriad Forms",
						spells : ["alter self"],
						selection : ["alter self"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 15; }
				},
				"minions of chaos (prereq: level 9 warlock)" : {
					name : "Minions of Chaos",
					description : "\n   " + "Once per long rest, I can cast Conjure Elemental using a warlock spell slot",
					source : [["SRD", 49], ["P", 111]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Minions of Chaos",
						spells : ["conjure elemental"],
						selection : ["conjure elemental"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 9; }
				},
				"mire the mind (prereq: level 5 warlock)" : {
					name : "Mire the Mind",
					description : "\n   " + "Once per long rest, I can cast Slow using a warlock spell slot",
					source : [["SRD", 49], ["P", 111]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Mire the Mind",
						spells : ["slow"],
						selection : ["slow"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 5; }
				},
				"misty visions" : {
					name : "Misty Visions",
					description : "\n   " + "I can cast Silent Image at will, without using a spell slot or material components",
					source : [["SRD", 49], ["P", 111]],
					spellcastingBonus : {
						name : "Misty Visions",
						spells : ["silent image"],
						selection : ["silent image"],
						firstCol : "atwill"
					},
					spellChanges : {
						"silent image" : {
							components : "V,S",
							compMaterial : "",
							changes : "With the Misty Visions invocation I can cast Silent Image without a material component."
						}
					}
				},
				"one with shadows (prereq: level 5 warlock)" : {
					name : "One with Shadows",
					description : "\n   " + "As an action, when I'm in an area of dim light or darkness, I can become invisible" + "\n   " + "I become visible again when I move or take an action or reaction",
					source : [["SRD", 49], ["P", 111]],
					action : ["action", ""],
					prereqeval : function(v) { return classes.known.warlock.level >= 5; }
				},
				"otherworldly leap (prereq: level 9 warlock)" : {
					name : "Otherworldly Leap",
					description : "\n   " + "I can cast Jump on myself at will, without using a spell slot or material components",
					source : [["SRD", 49], ["P", 111]],
					spellcastingBonus : {
						name : "Otherworldly Leap",
						spells : ["jump"],
						selection : ["jump"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 9; },
					spellChanges : {
						"jump" : {
							range : "Self",
							components : "V,S",
							compMaterial : "",
							description : "My jump distance is tripled for the duration",
							changes : "With the Otherworldly Leap invocation I can cast Jump without a material component, but only on myself."
						}
					}
				},
				"repelling blast (prereq: eldritch blast cantrip)" : {
					name : "Repelling Blast",
					description : "\n   " + "I can have creatures hit by my Eldritch Blast cantrip be pushed 10 ft away from me",
					source : [["SRD", 49], ["P", 111]],
					prereqeval : function(v) { return v.hasEldritchBlast; },
					calcChanges : {
						atkAdd : [
							function (fields, v) {
								if (v.baseWeaponName == 'eldritch blast') fields.Description += '; Target pushed back 10 ft';
							},
							"When I hit a creature with my Eldritch Blast cantrip, it is pushed 10 ft away from me."
						]
					},
					spellChanges : {
						"eldritch blast" : {
							description : "Spell attack beam 1d10 Force damage \u0026 push 10 ft; beams can be combined; +1 beam at CL5,11,17",
							changes : "When I hit a creature with my Eldritch Blast cantrip, it is pushed 10 ft away from me."
						}
					}
				},
				"sculptor of flesh (prereq: level 7 warlock)" : {
					name : "Sculptor of Flesh",
					description : "\n   " + "Once per long rest, I can cast Polymorph using a warlock spell slot",
					source : [["SRD", 50], ["P", 111]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Sculptor of Flesh",
						spells : ["polymorph"],
						selection : ["polymorph"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 7; }
				},
				"sign of ill omen (prereq: level 5 warlock)" : {
					name : "Sign of Ill Omen",
					description : "\n   " + "Once per long rest, I can cast Bestow Curse using a warlock spell slot",
					source : [["SRD", 50], ["P", 111]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Sign of Ill Omen",
						spells : ["bestow curse"],
						selection : ["bestow curse"],
						firstCol : "oncelr"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 5; }
				},
				"thief of five fates" : {
					name : "Thief of Five Fates",
					description : "\n   " + "Once per long rest, I can cast Bane using a warlock spell slot",
					source : [["SRD", 50], ["P", 111]],
					usages : 1,
					recovery : "long rest",
					spellcastingBonus : {
						name : "Thief of Five Fates",
						spells : ["bane"],
						selection : ["bane"],
						firstCol : "oncelr"
					}
				},
				"thirsting blade (prereq: level 5 warlock, pact of the blade)" : {
					name : "Thirsting Blade",
					description : "\n   " + "When taking the attack action, I can attack twice with my pact weapon",
					source : [["SRD", 50], ["P", 111]],
					action : ['action', 'Pact Weapon (2 attacks per action)'],
					prereqeval : function(v) { return classes.known.warlock.level >= 5 && GetFeatureChoice('class', 'warlock', 'pact boon') == 'pact of the blade'; }
				},
				"visions of distant realms (prereq: level 15 warlock)" : {
					name : "Visions of Distant Realms",
					description : "\n   " + "I can cast Arcane Eye at will, without using a spell slot",
					source : [["SRD", 50], ["P", 111]],
					spellcastingBonus : {
						name : "Visions of Distant Realms",
						spells : ["arcane eye"],
						selection : ["arcane eye"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 15; }
				},
				"voice of the chain master (prereq: pact of the chain)" : {
					name : "Voice of the Chain Master",
					description : "\n   " + "While on the same plane as my familiar, I can communicate telepathically with it" + "\n   " + "Also, I can perceive through its senses and have it speak with my voice while doing so",
					source : [["SRD", 50], ["P", 111]],
					prereqeval : function(v) { return classes.known.warlock.level >= 3 && GetFeatureChoice('class', 'warlock', 'pact boon') == 'pact of the chain'; }
				},
				"whispers of the grave (prereq: level 9 warlock)" : {
					name : "Whispers of the Grave",
					description : "\n   " + "I can cast Speak with Dead at will, without using a spell slot",
					source : [["SRD", 50], ["P", 111]],
					spellcastingBonus : {
						name : "Whispers of the Grave",
						spells : ["speak with dead"],
						selection : ["speak with dead"],
						firstCol : "atwill"
					},
					prereqeval : function(v) { return classes.known.warlock.level >= 9; }
				},
				"witch sight (prereq: level 15 warlock)" : {
					name : "Witch Sight",
					description : "\n   " + "I can see the true form of creatures (shapechangers/illusions/transmutations) within 30 ft",
					source : [["SRD", 50], ["P", 111]],
					vision : [["Witch sight", 30]],
					prereqeval : function(v) { return classes.known.warlock.level >= 15; }
				}
			},
			"pact boon" : {
				name : "Pact Boon",
				source : [["SRD", 47], ["P", 107]],
				minlevel : 3,
				description : "\n   " + "Choose a Pact Boon (Blade, Chain, or Tome) using the \"Choose Feature\" button above",
				choices : ["Pact of the Blade", "Pact of the Chain", "Pact of the Tome"],
				"pact of the blade" : {
					name : "Pact of the Blade",
					description : desc([
						"As an action, I can create a pact weapon in my empty hand; I'm proficient in its use",
						"I can choose the type of melee weapon every time I create it, and it has those statistics",
						"The weapon disappears if it is more than 5 ft away from me for 1 minute",
						"The weapon counts as magical; I can transform a magic weapon into my pact weapon",
						"This occurs over an hour-long ritual that I can perform during a short rest",
						"I can use an action to re-summon it in any form and can dismiss it as no action"
					]),
					action : ["action", ""],
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (v.theWea.pactWeapon || ((v.isMeleeWeapon || v.theWea.isMagicWeapon || v.thisWeapon[1]) && (/\bpact\b/i).test(v.WeaponText))) {
									v.pactWeapon = true;
								}
							}, ""
						],
						atkAdd : [
							function (fields, v) {
								if (v.pactWeapon || v.theWea.pactWeapon || ((v.isMeleeWeapon || v.theWea.isMagicWeapon || v.thisWeapon[1]) && (/\bpact\b/i).test(v.WeaponText))) {
									v.pactWeapon = true;
									fields.Proficiency = true;
									if (!v.theWea.isMagicWeapon && !v.thisWeapon[1] && !(/counts as( a)? magical/i).test(fields.Description)) fields.Description += (fields.Description ? '; ' : '') + 'Counts as magical';
								};
							},
							"If I include the word 'Pact' in a melee or magic weapon's name, it gets treated as my Pact Weapon."
						]
					}
				},
				"pact of the chain" : {
					name : "Pact of the Chain",
					description : "\n   " + "I can cast Find Familiar as a ritual and it can be a Pseudodragon, Imp, Quasit, or Sprite" + "\n   " + "When taking the attack action, I can forgo 1 attack to have my familiar attack instead" + "\n   " + "It makes this 1 attack by using its reaction",
					spellcastingBonus : {
						name : "Pact of the Chain",
						spells : ["find familiar"],
						selection : ["find familiar"],
						firstCol : "(R)"
					}
				},
				"pact of the tome" : {
					name : "Pact of the Tome",
					source : [["SRD", 48], ["P", 108]],
					description : "\n   " + "I have a Book of Shadows with any three cantrips of my choosing" + "\n   " + "I can cast these cantrips as long as I have the book on my person" + "\n   " + "Regardless of the lists they come from, these count as warlock cantrips to me" + "\n   " + "I can get a replacement book with a 1-hour ceremony during a short or long rest",
					spellcastingBonus : {
						name : "Pact of the Tome",
						"class" : "any",
						level : [0, 0],
						times : 3
					}
				}
			},
			"mystic arcanum" : {
				name : "Mystic Arcanum",
				source : [["SRD", 48], ["P", 108]],
				minlevel : 11,
				description : "\n   " + "I can choose one spell from the warlock spell list of each level mentioned above" + "\n   " + "I can cast these spells each once per long rest without needing to use a spell slot",
				additional : ["", "", "", "", "", "", "", "", "", "", "6th level", "6th level", "6th and 7th level", "6th and 7th level", "6th, 7th, and 8th level", "6th, 7th, and 8th level", "6th, 7th, 8th, and 9th level", "6th, 7th, 8th, and 9th level", "6th, 7th, 8th, and 9th level", "6th, 7th, 8th, and 9th level"],
				spellcastingBonus : [{
					name : "Mystic Arcanum (6)",
					"class" : "warlock",
					level : [6, 6],
					firstCol : "oncelr"
				}, {
					name : "Mystic Arcanum (7)",
					"class" : "warlock",
					level : [7, 7],
					firstCol : "oncelr",
					times : levels.map(function (n) { return n < 13 ? 0 : 1; })
				}, {
					name : "Mystic Arcanum (8)",
					"class" : "warlock",
					level : [8, 8],
					firstCol : "oncelr",
					times : levels.map(function (n) { return n < 15 ? 0 : 1; })
				}, {
					name : "Mystic Arcanum (9)",
					"class" : "warlock",
					level : [9, 9],
					firstCol : "oncelr",
					times : levels.map(function (n) { return n < 17 ? 0 : 1; })
				}]
			},
			"eldritch master" : {
				name : "Eldritch Master",
				source : [["SRD", 48], ["P", 108]],
				minlevel : 20,
				description : "\n   " + "I can regain all used pact magic spells slots by spending 1 minute entreating my patron",
				recovery : "long rest",
				usages : 1
			}
		}
	},

	"wizard" : {
		regExpSearch : /^(?=.*(wizard|mage|magus))(?!.*wild mage).*$/i,
		name : "Wizard",
		source : [["SRD", 52], ["P", 112]],
		primaryAbility : "Intelligence",
		abilitySave : 4,
		prereqs : "Intelligence 13",
		improvements : [0, 0, 0, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 4, 4, 4, 5, 5],
		die : 6,
		saves : ["Int", "Wis"],
		skillstxt : {
			primary : "Choose two from Arcana, History, Insight, Investigation, Medicine, and Religion"
		},
		weaponProfs : {
			primary : [false, false, ["dagger", "dart", "light crossbow", "quarterstaff", "sling"]]
		},
		equipment : "Wizard starting equipment:" +
			"\n \u2022 A quarterstaff -or- a dagger;" +
			"\n \u2022 A component pouch -or- an arcane focus;" +
			"\n \u2022 A scholar's pack -or- an explorer's pack;" +
			"\n \u2022 A spellbook." +
			"\n\nAlternatively, choose 4d4 \xD7 10 gp worth of starting equipment instead of both the class' and the background's starting equipment.",
		subclasses : ["Arcane Tradition", ["wizard-evocation"]],
		attacks : [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
		spellcastingFactor : 1,
		spellcastingKnown : {
			cantrips : [3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5],
			spells : "book",
			prepared : true
		},
		features : {
			"spellcasting" : {
				name : "Spellcasting",
				source : [["SRD", 52], ["P", 114]],
				minlevel : 1,
				description : "\n   " + "I can cast prepared wizard cantrips/spells, using Intelligence as my spellcasting ability" + "\n   " + "I can use an arcane focus as a spellcasting focus" + "\n   " + "I can cast all wizard spells in my spellbook as rituals if they have the ritual tag",
				additional : levels.map(function (n, idx) {
					return [3, 3, 3, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5][idx] + " cantrips known";
				})
			},
			"arcane recovery" : {
				name : "Arcane Recovery",
				source : [["SRD", 53], ["P", 115]],
				minlevel : 1,
				description : "\n   " + "Once per day after a short rest, I can recover a number of 5th-level or lower spell slots",
				additional : levels.map(function (n) {
					var lvls = Math.ceil(n / 2);
					return lvls + " level" + (lvls > 1 ? "s" : "") + " of spell slots";
				}),
				usages : 1,
				recovery : "long rest"
			},
			"subclassfeature2" : {
				name : "Arcane Tradition",
				source : [["SRD", 53], ["P", 115]],
				minlevel : 2,
				description : "\n   " + "Choose the Arcane Tradition you studied and put it in the \"Class\" field" + "\n   " + "Choose either the School of Abjuration, Conjuration, Divination, Enchantment," + "\n   " + "Evocation, Illusion, Necromancy, or Transmutation, or become a Bladesinger"
			},
			"spell mastery" : {
				name : "Spell Mastery",
				source : [["SRD", 53], ["P", 115]],
				minlevel : 18,
				description : "\n   " + "By spending 8 hours in study, I can pick a 1st and 2nd-level spell in my spellbook" + "\n   " + "While prepared, I can cast them at their lowest levels without expending spell slots"
			},
			"signature spell" : {
				name : "Signature Spell",
				source : [["SRD", 54], ["P", 115]],
				minlevel : 20,
				description : "\n   " + "Two 3rd-level spells of my choice in my spellbook will always count as prepared" + "\n   " + "I can cast both at third level once per short rest without expending spell slots",
				recovery : "short rest",
				usages : 2
			}
		}
	}
};

var ClassSubList = {
	"barbarian-berserker" : {
		regExpSearch : /^((?=.*\b(berserker|berserk|berserkr|ulfheoinn|ulfheonar)s?\b)|((?=.*(warrior|fighter))(?=.*(odin|thor)))).*$/i,
		subname : "Path of the Berserker",
		fullname : "Berserker",
		source : [["SRD", 9], ["P", 49]],
		abilitySave : 6,
		features : {
			"subclassfeature3" : {
				name : "Frenzy",
				source : [["SRD", 9], ["P", 49]],
				minlevel : 3,
				description : desc([
					"As a bonus action each turn while raging, I can make a melee attack",
					"After my rage is over, I suffer one level of exhaustion"
				]),
				action : ["bonus action", " attack (while raging)"]
			},
			"subclassfeature6" : {
				name : "Mindless Rage",
				source : [["SRD", 10], ["P", 49]],
				minlevel : 6,
				description : "\n   " + "While raging, I can't be charmed or frightened, and such effects are suspended",
				savetxt : { text : ["Immune to being charmed/frightened in rage"] }
			},
			"subclassfeature10" : {
				name : "Intimidating Presence",
				source : [["SRD", 10], ["P", 49]],
				minlevel : 10,
				description : "\n   " + "As an action, frighten one creature in 30 ft for one turn if it fails a Wisdom save" + "\n   " + "This effect ends if the creature is out of line of sight or more than 60 ft away\n   If a creature succeeds its saving throw, it is immune for 24 hours",
				action : ["action", ""]
			},
			"subclassfeature14" : {
				name : "Retaliation",
				source : [["SRD", 10], ["P", 50]],
				minlevel : 14,
				description : "\n   " + "When an enemy within 5 ft damages me, I can make a melee attack as a reaction",
				action : ["reaction", " (after taking damage)"]
			}
		}
	},
	"bard-college of lore" : {
		regExpSearch : /^(?=.*(college|bard|minstrel|troubadour|jongleur))(?=.*lore).*$/i,
		subname : "College of Lore",
		source : [["SRD", 13], ["P", 54]],
		features : {
			"subclassfeature3" : {
				name : "Bonus Proficiencies",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 3,
				description : "\n   " + "I gain proficiency with three skills of my choice",
				skillstxt : "Choose any three skills"
			},
			"subclassfeature3.1" : {
				name : "Cutting Words",
				source : [["SRD", 13], ["P", 54]],
				minlevel : 3,
				description : "\n   " + "As a reaction, when a foe within earshot & 60 ft rolls ability check, attack or damage," + "\n   " + "I can subtract a Bardic Inspiration die from the result unless the foe can't be charmed",
				action : ["reaction", ""]
			},
			"subclassfeature6" : {
				name : "Additional Magical Secrets",
				source : [["SRD", 13], ["P", 55]],
				minlevel : 6,
				description : "\n   " + "I can add two spells/cantrips from any class to my Spells Known",
				spellcastingBonus : {
					name : "Additional Magical Secret",
					"class" : "any",
					times : 2
				}
			},
			"subclassfeature14" : {
				name : "Peerless Skill",
				source : [["SRD", 14], ["P", 55]],
				minlevel : 14,
				description : "\n   " + "When making an ability check, I can expend a use of Bardic Inspiration to add the die"
			}
		}
	},
	"cleric-life domain" : {
		regExpSearch : /^(?=.*(cleric|priest|clergy|acolyte))(?=.*\b(life|living|healing)\b).*$/i,
		subname : "Life Domain",
		source : [["SRD", 17], ["P", 60]],
		spellcastingExtra : ["bless", "cure wounds", "lesser restoration", "spiritual weapon", "beacon of hope", "revivify", "death ward", "guardian of faith", "mass cure wounds", "raise dead"],
		features : {
			"subclassfeature1" : {
				name : "Bonus Proficiency",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 1,
				description : "\n   " + "I gain proficiency with heavy armor",
				armorProfs : [false, false, true, false]
			},
			"subclassfeature1.1" : {
				name : "Disciple of Life",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 1,
				description : desc([
					"Whenever a 1st-level or higher spell I cast restores HP to a creature, it heals more",
					"The creature regains an additional 2 + spell level (SL) worth of hit points",
					'Note that "X/SL" on the spell page means per spell slot level above the spell\'s normal level'
				]),
				calcChanges : {
					spellAdd : [
						// note that Heroes' Feast is omitted from the below because there is not enough space to amend its short description
						function (spellKey, spellObj, spName) {
							if (spellObj.psionic) return false;
							var startDescr = spellObj.description;
							switch (spellKey) {
								case "death ward" :
								case "harm" :
								case "virtue-uass" :
									return false;
								case "goodberry" :
									spellObj.description = spellObj.description.replace("Create ", "").replace("1 HP", "3+SL HP");
									break;
								case "enervation" :
									spellObj.description = spellObj.description.replace("action to repeat", "1 a to repeat").replace("see book", "see B");
								case "life transference" :
								case "vampiric touch" :
									spellObj.description = spellObj.description.replace(/(heals? (half|twice)( the damage dealt| that)?)( in HP)?/, "$1+2+SL");
									break;
								case "mass heal" :
									spellObj.description = spellObj.description.replace("creatures in range;", "crea in range, each then +11 HP;").replace("cured of", "cures").replace("and all diseases", "diseases");
									break;
								case "regenerate" :
									spellObj.description = spellObj.description.replace("1 HP/rnd", "3+SL HP/rnd");
								default :
									if ((/\bHP o(f|r)\b/).test(spellObj.description)) return false;
									var supremeTestRegex = /(.*?)(\d+d\d+\+?\d*)(\+\d+d?\d*\/\d?SL)?((\+spell(casting)? ability mod(ifier)?|(\+|-)\d+ \(.{3}\))? hp.*)/i;
									if (classes.known.cleric.level > 16 && supremeTestRegex.test(spellObj.description)) return false; // has supreme healer
									var testRegex = /(.*?)([1-9]\d*d?\d*)((\+\d+d?\d*\/\d?SL)?((\+spell(casting)? ability mod(ifier)?|(\+|-)\d+ \(.{3}\))? hp.*))/i;
									var theMatch = spellObj.description.match(testRegex);
									if (!theMatch) return false;
									try {
										var perLvl = theMatch[4] ? theMatch[4].replace(/.*(\/\d?SL).*/i, '$1') : "";
										theMatch[4] = theMatch[4] ? Number(theMatch[4].replace(/\/\d?SL/i, '')) + 1 : NaN;
										var repl2 = spellObj.level > 8 ? "$3" : isNaN(theMatch[4]) ? "+SL$3" : "+" + theMatch[4] + perLvl + "$5";
										var repl1 = isNaN(theMatch[2]) ? "$1$2+2" : isNaN(theMatch[4]) ? "$1" + (Number(theMatch[2]) + 2) : "$1" + (Number(theMatch[2]) + 2 + spellObj.level);
										spellObj.description = spellObj.description.replace(testRegex, repl1 + repl2);
									} catch (err) {
										spellObj.description = startDescr;
									}
							}
							return startDescr !== spellObj.description;
						},
						"When I use a spell that restores hit points, it restores an additional 2 + the level of the spell slot (or spell slot equivalent) used to cast the spell."
					]
				}
			},
			"subclassfeature2" : {
				name : "Channel Divinity: Preserve Life",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 2,
				description : "\n   " + "As an action, I can heal any creature within 30 ft of me up to half their maximum HP" + "\n   " + "I divide the number of hit points among the creatures as I see fit",
				additional : ["", "10 hit points", "15 hit points", "20 hit points", "25 hit points", "30 hit points", "35 hit points", "40 hit points", "45 hit points", "50 hit points", "55 hit points", "60 hit points", "65 hit points", "70 hit points", "75 hit points", "80 hit points", "85 hit points", "90 hit points", "95 hit points", "100 hit points"],
				action : ["action", ""]
			},
			"subclassfeature6" : {
				name : "Blessed Healer",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 6,
				description : "\n   " + "When I restore HP to another with a spell, I regain 2 + the spell (slot) level in HP",
				calcChanges : {
					spellAdd : [
						// note that several healing spells are not present here because they don't restore hp at casting (only later)
						function (spellKey, spellObj, spName) {
							var startDescr = spellObj.description;
							switch (spellKey) {
								case "life transference" :
									spellObj.description = spellObj.description.replace("Necrotic", "Necro").replace(", and", ",") + "; I then regain 2+SL HP";
									break;
								case "mass heal" :
									spellObj.description = "Heal 700 HP, split over crea in range, each then +11 HP; also cures blind, deaf, diseases; I heal +11 HP";
									break;
								case "power word heal" :
									spellObj.description = spellObj.description.replace(/heals all.*/i, "full HP; not charmed, frightened, paralyzed, stunned; can stand up as rea; if other, I heal 2+SL");
									break;
								case "regenerate" :
									spellObj.description = spellObj.description.replace(" for rest of duration", "");
								case "heal" :
									spellObj.description = spellObj.description.replace("all diseases", "diseases");
								case "cure wounds" :
								case "healing word" :
								case "mass cure wounds" :
								case "mass healing word" :
								case "prayer of healing" :
									spellObj.description = spellObj.description.replace(/creatures?/i, "crea").replace("within", "in").replace("spellcasting ability modifier", "spellcasting ability mod") + "; if other, I heal 2+SL";
							}
							return startDescr !== spellObj.description;
						},
						"When I cast a spell that restores hit points to another creature than myself at the moment of casting, I also heal 2 + the level of the spell slot (or spell slot equivalent) hit points."
					]
				}
			},
			"subclassfeature8" : {
				name : "Divine Strike",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 8,
				description : "\n   " + "Once per turn, when I hit a creature with a weapon attack, I can do extra damage",
				additional : levels.map(function (n) {
					if (n < 8) return "";
					return "+" + (n < 14 ? 1 : 2) + "d8 radiant damage";
				}),
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (classes.known.cleric && classes.known.cleric.level > 7 && !v.isSpell) {
								fields.Description += (fields.Description ? '; ' : '') + 'Once per turn +' + (classes.known.cleric.level < 14 ? 1 : 2) + 'd8 radiant damage';
							}
						},
						"Once per turn, I can have one of my weapon attacks that hit do extra radiant damage."
					]
				}
			},
			"subclassfeature17" : {
				name : "Supreme Healing",
				source : [["SRD", 17], ["P", 60]],
				minlevel : 17,
				description : "\n   " + "When I restore HP with a spell, I heal the maximum amount instead of rolling the dice",
				calcChanges : {
					spellAdd : [
						function (spellKey, spellObj, spName) {
							if (spellObj.psionic || (/color spray|sleep/).test(spellKey)) return;
							var startDescr = spellObj.description;
							var testRegex = /(.*?)(\d+d\d+\+?\d*)(\+\d+d?\d*\/\d?SL)?((\+spell(casting)? (ability )?mod(ifier)?|(\+|-)\d+ \(.{3}\))? hp.*)/i;
							var theMatch = spellObj.description.match(testRegex);
							if (!theMatch) return false;
							try {
								var lvl9 = spellObj.level > 8;
								var perLvl = theMatch[3] ? theMatch[3].replace(/.*(\/\d?SL).*/i, '$1') : "";
								theMatch[2] = Number(theMatch[2].replace(/(\d+).*/, '$1')) * Number(theMatch[2].replace(/\d+d(\d+).*/, '$1')) + ((/\d+d\d+\+(\d+)/).test(theMatch[2]) ? Number(theMatch[2].replace(/\d+d\d+\+(\d+)/, '$1')) : 0) + 2 + (perLvl || lvl9 ? spellObj.level : "+SL");
								theMatch[3] = theMatch[3] ? Number(theMatch[3].replace(/\+(\d+).*/, '$1')) * ((/\+\d+d(\d+).*/).test(theMatch[3]) ? Number(theMatch[3].replace(/\+\d+d(\d+).*/, '$1')) : 1) + 1 : NaN;
								var repl = isNaN(theMatch[3]) ? "$1" + theMatch[2] + "$4" : "$1" + theMatch[2] + "+" + theMatch[3] + perLvl + "$4";
								spellObj.description = spellObj.description.replace(testRegex, repl);
							} catch (err) {
								spellObj.description = startDescr;
							}
							return startDescr !== spellObj.description;
						},
						"When I use a spell that restores hit points, it restores the maximum of the dice rolled and an additional 2 + the level of the spell slot (or spell slot equivalent) used to cast the spell."
					]
				}
			}
		}
	},
	"druid-circle of the land" : {
		regExpSearch : /^(?=.*(druid|shaman))(?=.*\b(land|arctic|coast|deserts?|forests?|grasslands?|savannah|steppes?|mountains?|swamps?|underdark)\b).*$/i,
		subname : "Circle of the Land",
		source : [["SRD", 21], ["P", 68]],
		features : {
			"subclassfeature2" : {
				name : "Bonus Cantrip",
				source : [["SRD", 21], ["P", 68]],
				minlevel : 2,
				description : "\n   " + "I know one additional druid cantrip of my choice",
				spellcastingBonus : {
					name : "Bonus Druid Cantrip",
					"class" : "druid",
					level : [0, 0]
				}
			},
			"subclassfeature2.1" : {
				name : "Natural Recovery",
				source : [["SRD", 21], ["P", 68]],
				minlevel : 2,
				description : "\n   " + "After a short rest, I can recover a number of 5th-level or lower spell slots",
				additional : ["1 level spell slots", "1 level spell slots", "2 levels spell slots", "2 levels spell slots", "3 levels spell slots", "3 levels spell slots", "4 levels spell slots", "4 levels spell slots", "5 levels spell slots", "5 levels spell slots", "6 levels spell slots", "6 levels spell slots", "7 levels spell slots", "7 levels spell slots", "8 levels spell slots", "8 levels spell slots", "9 levels spell slots", "9 levels spell slots", "10 levels spell slots", "10 levels spell slots"],
				usages : 1,
				recovery : "long rest"
			},
			"subclassfeature3" : {
				name : "Circle Spells",
				source : [["SRD", 21], ["P", 68]],
				minlevel : 3,
				description : "\n   " + "Choose a terrain that grants you spells using the \"Choose Feature\" button above",
				choices : ["Arctic", "Coast", "Desert", "Forest", "Grassland", "Mountain", "Swamp", "Underdark"],
				"arctic" : {
					name : "Arctic Circle Spells",
					description : "\n   " + "My mystical connection to the arctic infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["hold person", "spike growth", "sleet storm", "slow", "freedom of movement", "ice storm", "commune with nature", "cone of cold"]
				},
				"coast" : {
					name : "Coast Circle Spells",
					description : "\n   " + "My mystical connection to the coast infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["mirror image", "misty step", "water breathing", "water walk", "control water", "freedom of movement", "conjure elemental", "scrying"]
				},
				"desert" : {
					name : "Desert Circle Spells",
					description : "\n   " + "My mystical connection to the desert infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["blur", "silence", "create food and water", "protection from energy", "blight", "hallucinatory terrain", "insect plague", "wall of stone"]
				},
				"forest" : {
					name : "Forest Circle Spells",
					description : "\n   " + "My mystical connection to the forest infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["barkskin", "spider climb", "call lightning", "plant growth", "divination", "freedom of movement", "commune with nature", "tree stride"]
				},
				"grassland" : {
					name : "Grassland Circle Spells",
					description : "\n   " + "My connection to the grassland infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["invisibility", "pass without trace", "daylight", "haste", "divination", "freedom of movement", "dream", "insect plague"]
				},
				"mountain" : {
					name : "Mountain Circle Spells",
					description : "\n   " + "My connection to the mountains infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["spider climb", "spike growth", "lightning bolt", "meld into stone", "stone shape", "stoneskin", "passwall", "wall of stone"]
				},
				"swamp" : {
					name : "Swamp Circle Spells",
					description : "\n   " + "My mystical connection to the swamp infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["darkness", "melf's acid arrow", "water walk", "stinking cloud", "freedom of movement", "locate creature", "insect plague", "scrying"]
				},
				"underdark" : {
					name : "Underdark Circle Spells",
					description : "\n   " + "My connection to the underdark infuses me with the ability to cast certain spells" + "\n   " + "These are always prepared, but don't count against the number of spells I can prepare",
					spellcastingExtra : ["spider climb", "web", "gaseous form", "stinking cloud", "greater invisibility", "stone shape", "cloudkill", "insect plague"]
				}
			},
			"subclassfeature6" : {
				name : "Land's Stride",
				source : [["SRD", 22], ["P", 68]],
				minlevel : 6,
				description : "\n   " + "I can travel through nonmagical, difficult terrain without penalty" + "\n   " + "I have advantage on saves vs. plants that impede movement by magical influence",
				savetxt : { adv_vs : ["magical plants that impede movement"] }
			},
			"subclassfeature10" : {
				name : "Nature's Ward",
				source : [["SRD", 22], ["P", 68]],
				minlevel : 10,
				description : "\n   " + "I am immune to poison/disease and I can't be charmed/frightened by elementals or fey",
				savetxt : { text : ["Immune to being charmed or frightened by elementals or fey"], immune : ["poison", "disease"] }
			},
			"subclassfeature14" : {
				name : "Nature's Sanctuary",
				source : [["SRD", 22], ["P", 68]],
				minlevel : 14,
				description : "\n   " + "When a beast or plant attacks me, it must make a Wis save or pick a different target" + "\n   " + "If it can't, it automatically misses; On a successful save, it is immune for 24 hours"
			}
		}
	},
	"fighter-champion" : {
		regExpSearch : /champion/i,
		subname : "Champion",
		fullname : "Champion",
		source : [["SRD", 25], ["P", 72]],
		features : {
			"subclassfeature3" : {
				name : "Improved Critical",
				source : [["SRD", 25], ["P", 72]],
				minlevel : 3,
				description : "\n   " + "I score a critical hit with my weapon attacks on a roll of 19 and 20",
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (!v.isSpell && !v.CritChance && classes.known.fighter && classes.known.fighter.level < 15) {
								fields.Description += (fields.Description ? '; ' : '') + 'Crit on 19-20';
								v.CritChance = 19;
							};
						},
						"My weapon attacks score a critical on a to hit roll of both 19 and 20."
					]
				}
			},
			"subclassfeature7" : {
				name : "Remarkable Athlete",
				source : [["SRD", 25], ["P", 72]],
				minlevel : 7,
				description : "\n   " + "I add half my proficiency bonus to Str/Dex/Con checks if I would otherwise add none" + "\n   " + "When making running jumps, I add my Strength modifier to the distance in feet",
				eval : function() { Checkbox('Remarkable Athlete', true); },
				removeeval : function() { Checkbox('Remarkable Athlete', false); }
			},
			"subclassfeature10" : function () {
				var FSfea = npmclone(ClassList.fighter.features["fighting style"]);
				FSfea.name = "Additional Fighting Style";
				FSfea.source = [["SRD", 25], ["P", 73]];
				FSfea.minlevel = 10;
				FSfea.description = "\n   " + "Choose an Additional Fighting Style using the \"Choose Feature\" button above ";
				return FSfea;
			}(),
			"subclassfeature15" : {
				name : "Superior Critical",
				source : [["SRD", 25], ["P", 73]],
				minlevel : 15,
				description : "\n   " + "I score a critical hit with my weapon attacks on a roll of 18, 19, and 20",
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.isSpell) return;
							if (v.CritChance && v.CritChance > 18) {
								fields.Description = fields.Description.replace('Crit on ' + CritChance + '-20', 'Crit on 18-20');
								v.CritChance = 18;
							} else if (!v.CritChance) {
								fields.Description += (fields.Description ? '; ' : '') + 'Crit on 18-20';
								v.CritChance = 18;
							};
						},
						"My weapon attacks also score a critical on a to hit roll of 18."
					]
				}
			},
			"subclassfeature18" : {
				name : "Survivor",
				source : [["SRD", 25], ["P", 73]],
				minlevel : 18,
				description : "\n   " + "At the start of my turn, if I'm not above half or at 0 HP, I regain 5 + Con mod HP"
			}
		}
	},
	"monk-way of the open hand" : {
		regExpSearch : /^(?=.*\bopen\b)(?=.*\bhand\b)((?=.*(monk|monastic))|(((?=.*martial)(?=.*(artist|arts)))|((?=.*spiritual)(?=.*warrior)))).*$/i,
		subname : "Way of the Open Hand",
		source : [["SRD", 28], ["P", 79]],
		features : {
			"subclassfeature3" : {
				name : "Hand Technique",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 3,
				description : desc([
					"Whenever I hit a creature with a Flurry of Blows attack I can do one of the following:",
					"\u2022 Have it make a Dexterity save or be knocked prone",
					"\u2022 Have it make a Strength save or be pushed up to 15 ft away from me",
					"\u2022 Stop it from taking reactions until the end of my next turn"
				])
			},
			"subclassfeature6" : {
				name : "Wholeness of Body",
				source : [["SRD", 28], ["P", 79]],
				minlevel : 6,
				description : "\n   " + "As an action, I regain hit points equal to three times my monk level",
				additional : levels.map(function (n) { return n < 6 ? "" : (n*3) + " hit points" }),
				usages : 1,
				recovery : "long rest",
				action : ["action", ""]
			},
			"subclassfeature11" : {
				name : "Tranquility",
				source : [["SRD", 29], ["P", 80]],
				minlevel : 11,
				description : "\n   " + "After a long rest, I gain the effect of a Sanctuary spell until a next long rest",
				extraname : "Way of the Open Hand 17",
				"quivering palm" : {
					name : "Quivering Palm",
					source : [["SRD", 29], ["P", 80]],
					description : " [3 ki points]" + "\n   " + "When I hit a creature with an unarmed strike, I can start imperceptible vibrations" + "\n   " + "Within my monk level in days, I can use an action to have the creature make a Con save" + "\n   " + "If it fails, it is reduced to 0 hit points; If it succeeds, it takes 10d10 necrotic damage"
				},
				autoSelectExtrachoices : [{
					extrachoice : "quivering palm",
					minlevel : 17
				}]
			}
		}
	},
	"paladin-oath of devotion" : {
		regExpSearch : /^(?=.*(devotion|obedience))(((?=.*paladin)|((?=.*(exalted|sacred|holy|divine))(?=.*(knight|fighter|warrior|warlord|trooper))))).*$/i,
		subname : "Oath of Devotion",
		source : [["SRD", 32], ["P", 86]],
		spellcastingExtra : ["protection from evil and good", "sanctuary", "lesser restoration", "zone of truth", "beacon of hope", "dispel magic", "freedom of movement", "guardian of faith", "commune", "flame strike"],
		features : {
			"subclassfeature3" : {
				name : "Channel Divinity: Sacred Weapon",
				source : [["SRD", 33], ["P", 86]],
				minlevel : 3,
				description : "\n   " + "As an action, for 1 minute, I add my Cha modifier to hit for one weapon I'm holding" + "\n   " + "It also counts as magical and emits bright light in a 20-ft radius and equal dim light",
				action : ["action", ""],
				calcChanges : {
					atkCalc : [
						function (fields, v, output) {
							if (classes.known.paladin && classes.known.paladin.level > 2 && !v.isSpell && (/^(?=.*sacred)(?=.*weapon).*$/i).test(v.WeaponText)) {
								output.extraHit += What('Cha Mod');
							};
						},
						"If I include the words 'Sacred Weapon' in the name or description of a weapon, it gets my Charisma modifier added to its To Hit."
					]
				}
			},
			"subclassfeature3.1" : {
				name : "Channel Divinity: Turn the Unholy",
				source : [["SRD", 33], ["P", 86]],
				minlevel : 3,
				description : "\n   " + "As an action, all fiends/undead within 30 ft that can hear me must make a Wis save" + "\n   " + "If one of them fails this save, it is turned for 1 minute or until it takes damage" + "\n   " + "Turned: move away, never within 30 ft of me, no reactions or actions other than Dash" + "\n   " + "Turned: may Dodge instead of Dash when nowhere to move and unable to escape bonds",
				action : ["action", ""]
			},
			"subclassfeature7" : {
				name : "Aura of Devotion",
				source : [["SRD", 33], ["P", 86]],
				minlevel : 7,
				description : "\n   " + "While I'm conscious, allies within range and I can't be charmed",
				additional : ["", "", "", "", "", "", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "10-foot aura", "30-foot aura", "30-foot aura", "30-foot aura"],
				savetxt : { immune : ["charmed"] }
			},
			"subclassfeature15" : {
				name : "Purity of Spirit",
				source : [["SRD", 33], ["P", 86]],
				minlevel : 15,
				description : "\n   " + "I am always under the effect of a Protection from Evil and Good spell"
			},
			"subclassfeature20" : {
				name : "Holy Nimbus",
				source : [["SRD", 33], ["P", 86]],
				minlevel : 20,
				description : "\n   " + "As an action, I shine with a 30-ft radius bright light and equal dim light for 1 minute" + "\n   " + "If an enemy starts its turn in the bright light, it takes 10 radiant damage" + "\n   " + "For the duration, I have advantage on saves vs. spells cast by fiends and undead",
				recovery : "long rest",
				usages : 1,
				action : ["action", ""]
			}
		}
	},
	"ranger-hunter" : {
		regExpSearch : /^(?!.*(monster|barbarian|bard|cleric|druid|fighter|monk|paladin|rogue|sorcerer|warlock|wizard))(?=.*(hunter|huntress|hunts(wo)?m(e|a)n)).*$/i,
		subname : "Hunter",
		fullname : "Hunter",
		source : [["SRD", 37], ["P", 93]],
		features : {
			"subclassfeature3" : {
				name : "Hunter's Prey",
				source : [["SRD", 37], ["P", 93]],
				minlevel : 3,
				description : "\n   " + "Choose Colossus Slayer, Giant Killer, or Horde Breaker with the \"Choose Feature\" button",
				choices : ["Colossus Slayer", "Giant killer", "Horde Breaker"],
				"colossus slayer" : {
					name : "Hunter's Prey: Colossus Slayer",
					description : "\n   " + "Once per turn, when hitting someone that is below max HP, I do an extra 1d8 damage"
				},
				"giant killer" : {
					name : "Hunter's Prey: Giant Killer",
					description : "\n   " + "As a reaction, when a Large or larger enemy in 5 ft attacks me, I can attack it once",
					action : ["reaction", ""]
				},
				"horde breaker" : {
					name : "Hunter's Prey: Horde Breaker",
					description : "\n   " + "Once per turn, when I hit a creature, I can make an attack vs. another within 5 ft of it"
				}
			},
			"subclassfeature7" : {
				name : "Defensive Tactics",
				source : [["SRD", 38], ["P", 93]],
				minlevel : 7,
				description : "\n   " + "\"Choose Feature\" button to choose Escape the Horde, Multiattack Defense, or Steel Will",
				choices : ["Escape the Horde", "Multiattack Defense", "Steel Will"],
				"escape the horde" : {
					name : "Defensive Tactic: Escape the Horde",
					description : "\n   " + "Creatures attacking me with opportunity attacks have disadvantage on the attack rolls"
				},
				"multiattack defense" : {
					name : "Defensive Tactic: Multiattack Defense",
					description : "\n   " + "When a creature hits me, I gain +4 AC against that creature for the rest of the turn"
				},
				"steel will" : {
					name : "Defensive Tactic: Steel Will",
					description : "\n   " + "I have advantage on saves against being frightened",
					savetxt : { adv_vs : ["frightened"] }
				}
			},
			"subclassfeature11" : {
				name : "Multiattack",
				source : [["SRD", 38], ["P", 93]],
				minlevel : 11,
				description : "\n   " + "Choose Volley or Whirlwind Attack using the \"Choose Feature\" button above",
				choices : ["Volley", "Whirlwind Attack"],
				"volley" : {
					name : "Multiattack: Volley",
					description : "\n   " + "As an action, I can make ranged attacks vs. all within a 10-ft radius of a point in range",
					action : ["action", ""]
				},
				"whirlwind attack" : {
					name : "Multiattack: Whirlwind Attack",
					description : "\n   " + "As an action, I can make melee attacks vs. all creatures within 5 ft of me",
					action : ["action", ""]
				}
			},
			"subclassfeature15" : {
				name : "Superior Hunter's Defense",
				source : [["SRD", 38], ["P", 93]],
				minlevel : 15,
				description : "\n   " + "\"Choose Feature\" button to choose Evasion, Stand Against the Tide, or Uncanny Dodge",
				choices : ["Evasion", "Stand Against the Tide", "Uncanny Dodge"],
				"evasion" : {
					name : "Evasion",
					description : "\n   " + "My Dexterity saves vs. areas of effect negate damage on success and halve it on failure",
					savetxt : { text : ["Dex save vs. area effects: fail \u2015 half dmg, success \u2015 no dmg"] }
				},
				"stand against the tide" : {
					name : "Stand Against the Tide",
					description : "\n   " + "When a creature misses me with a melee attack, I can use my reaction on the attack" + "\n   " + "I force the attacker to repeat it vs. another (not attacker) of my choice within range",
					action : ["reaction", ""]
				},
				"uncanny dodge" : {
					name : "Uncanny Dodge",
					description : "\n   " + "As a reaction, I halve the damage of an attack from an attacker that I can see",
					action : ["reaction", ""]
				}
			}
		}
	},
	"rogue-thief" : {
		regExpSearch : /^(?!.*(barbarian|bard|cleric|druid|fighter|monk|paladin|ranger|sorcerer|warlock|wizard))(?=.*(thief|burglar)).*$/i,
		subname : "Thief",
		fullname : "Thief",
		source : [["SRD", 41], ["P", 97]],
		features : {
			"subclassfeature3" : {
				name : "Fast Hands",
				source : [["SRD", 40], ["P", 97]],
				minlevel : 3,
				description : "\n   " + "As a bonus action, I can do one of the following:" + "\n    - " + "Make a Dexterity (Sleight of Hand) check" + "\n    - " + "Use my thieves' tools to disarm a trap or open a lock" + "\n    - " + "Take the Use an Object action",
				action : ["bonus action", ""]
			},
			"subclassfeature3.1" : {
				name : "Second-Story Work",
				source : [["SRD", 41], ["P", 97]],
				minlevel : 3,
				description : "\n   " + "I climb at my normal speed; I add my Dex modifier to the distance of a running jump",
				speed : { climb : { spd : "walk", enc : "walk" } }
			},
			"subclassfeature9" : {
				name : "Supreme Sneak",
				source : [["SRD", 41], ["P", 97]],
				minlevel : 9,
				description : "\n   " + "I have advantage on Dexterity (Stealth) checks when moving no more than half speed"
			},
			"subclassfeature13" : {
				name : "Use Magic Device",
				source : [["SRD", 41], ["P", 97]],
				minlevel : 13,
				description : "\n   " + "I can use magic items even if I don't meet the class, race, and/or level requirements"
			},
			"subclassfeature17" : {
				name : "Thief's Reflexes",
				source : [["SRD", 41], ["P", 97]],
				minlevel : 17,
				description : "\n   " + "Unless surprised, I can take two turns on the first round of any combat" + "\n   " + "The first turn is at my regular initiative, and the second is at my initiative - 10"
			}
		}
	},
	"sorcerer-draconic bloodline" : {
		regExpSearch : /^(?=.*(sorcerer|witch))(?=.*(draconic|dragon)).*$/i,
		subname : "Draconic Bloodline",
		source : [["SRD", 44], ["P", 102]],
		features : {
			"subclassfeature1" : {
				name : "Dragon Ancestor",
				source : [["SRD", 44], ["P", 102]],
				minlevel : 1,
				description : "\n   " + "Choose a Dragon Ancestor using the \"Choose Feature\" button above" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
				choices : ["Black Dragon Ancestor", "Blue Dragon Ancestor", "Brass Dragon Ancestor", "Bronze Dragon Ancestor", "Copper Dragon Ancestor", "Gold Dragon Ancestor", "Green Dragon Ancestor", "Red Dragon Ancestor", "Silver Dragon Ancestor", "White Dragon Ancestor"],
				"black dragon ancestor" : {
					name : "Black Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with black dragons, which are affiliated with acid damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "acid"
				},
				"blue dragon ancestor" : {
					name : "Blue Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with blue dragons, which are affiliated with lightning damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "lightning"
				},
				"brass dragon ancestor" : {
					name : "Brass Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with brass dragons, which are affiliated with fire damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "fire"
				},
				"bronze dragon ancestor" : {
					name : "Bronze Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with bronze dragons, which are affiliated with lightning dmg" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "lightning"
				},
				"copper dragon ancestor" : {
					name : "Copper Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with copper dragons, which are affiliated with acid damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "acid"
				},
				"gold dragon ancestor" : {
					name : "Gold Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with gold dragons, which are affiliated with fire damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "fire"
				},
				"green dragon ancestor" : {
					name : "Green Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with green dragons, which are affiliated with poison damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "poison"
				},
				"red dragon ancestor" : {
					name : "Red Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with red dragons, which are affiliated with fire damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "fire"
				},
				"silver dragon ancestor" : {
					name : "Silver Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with silver dragons, which are affiliated with cold damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "cold"
				},
				"white dragon ancestor" : {
					name : "White Dragon Ancestor",
					description : "\n   " + "I have draconic ancestry with white dragons, which are affiliated with cold damage" + "\n   " + "When interacting with dragons, if I can add my proficiency bonus, I can double it",
					dependentChoices : "cold"
				},
				languageProfs : ["Draconic"],
				choiceDependencies : [{
					feature : "subclassfeature6",
					choiceAttribute : true
				}]
			},
			"subclassfeature1.1" : {
				name : "Draconic Resilience",
				source : [["SRD", 45], ["P", 102]],
				minlevel : 1,
				description : "\n   " + "When I am not wearing armor, my AC is 13 + Dexterity modifier" + "\n   " + "My hit point maximum increases by an amount equal to my sorcerer level",
				calcChanges : {
					hp : function (totalHD) {
						if (classes.known.sorcerer) {
							return [classes.known.sorcerer.level, "Draconic Resilience (sorcerer level)"];
						}
					}
				},
				armorOptions : {
					regExpSearch : /^(?=.*(dragon|draconic))(?=.*(hide|skin|scales|resilience)).*$/i,
					name : "Draconic Resilience",
					source : [["SRD", 45], ["P", 102]],
					ac : 13
				},
				armorAdd : "Draconic Resilience"
			},
			"subclassfeature6" : {
				name : "Elemental Affinity",
				source : [["SRD", 45], ["P", 102]],
				minlevel : 6,
				description : "\n   " + "Choose a Dragon Ancestor using the \"Choose Feature\" button above" + "\n   " + "I add Cha mod for spell damage if matching my dragon ancestor's affiliated type" + "\n   " + "I can spend 1 sorcery point to gain resistance to my dragon ancestor's affiliated type",
				additional : "optional: 1 sorcery point",
				choices : ["acid", "cold", "fire", "lightning", "poison"],
				choicesNotInMenu : true,
				"acid" : {
					name : "Acid Elemental Affinity",
					description : "\n   " + "I add my Charisma modifier to one damage roll of a spell if it does acid damage" + "\n   " + "When I do this, I can spend 1 sorcery point to gain acid resistance for 1 hour",
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (classes.known.sorcerer && classes.known.sorcerer.level > 5 && v.isSpell && (/acid/i).test(fields.Damage_Type)) {
									output.extraDmg += What('Cha Mod');
								};
							},
							"Cantrips and spells that deal acid damage get my Charisma modifier added to their damage."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (!spellObj.psionic) return genericSpellDmgEdit(spellKey, spellObj, "acid", "Cha", true);
							},
							"Cantrips and spells that deal acid damage get my Charisma modifier added to their damage."
						]
					}
				},
				"cold" : {
					name : "Cold Elemental Affinity",
					description : "\n   " + "I add my Charisma modifier to one damage roll of a spell if it does cold damage" + "\n   " + "When I do this, I can spend 1 sorcery point to gain cold resistance for 1 hour",
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (classes.known.sorcerer && classes.known.sorcerer.level > 5 && v.isSpell && (/cold/i).test(fields.Damage_Type)) {
									output.extraDmg += What('Cha Mod');
								};
							},
							"Cantrips and spells that deal cold damage get my Charisma modifier added to their damage."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (!spellObj.psionic) return genericSpellDmgEdit(spellKey, spellObj, "cold", "Cha", true);
							},
							"Cantrips and spells that deal cold damage get my Charisma modifier added to their damage."
						]
					}
				},
				"fire" : {
					name : "Fire Elemental Affinity",
					description : "\n   " + "I add my Charisma modifier to one damage roll of a spell if it does fire damage" + "\n   " + "When I do this, I can spend 1 sorcery point to gain fire resistance for 1 hour",
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (classes.known.sorcerer && classes.known.sorcerer.level > 5 && v.isSpell && (/fire/i).test(fields.Damage_Type)) {
									output.extraDmg += What('Cha Mod');
								};
							},
							"Cantrips and spells that deal fire damage get my Charisma modifier added to their damage."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (!spellObj.psionic) return genericSpellDmgEdit(spellKey, spellObj, "fire", "Cha", true);
							},
							"Cantrips and spells that deal fire damage get my Charisma modifier added to their damage."
						]
					}
				},
				"lightning" : {
					name : "Lightning Elemental Affinity",
					description : "\n   " + "I add my Charisma modifier to one damage roll of a spell if it does lightning damage" + "\n   " + "When I do this, I can spend 1 sorcery point to gain lightning resistance for 1 hour",
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (classes.known.sorcerer && classes.known.sorcerer.level > 5 && v.isSpell && (/lightning/i).test(fields.Damage_Type)) {
									output.extraDmg += What('Cha Mod');
								};
							},
							"Cantrips and spells that deal lightning damage get my Charisma modifier added to their damage."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (!spellObj.psionic) return genericSpellDmgEdit(spellKey, spellObj, "lightn(\.|ing)?", "Cha", true);
							},
							"Cantrips and spells that deal lightning damage get my Charisma modifier added to their damage."
						]
					}
				},
				"poison" : {
					name : "Poison Elemental Affinity",
					description : "\n   " + "I add my Charisma modifier to one damage roll of a spell if it does poison damage" + "\n   " + "When I do this, I can spend 1 sorcery point to gain poison resistance for 1 hour",
					calcChanges : {
						atkCalc : [
							function (fields, v, output) {
								if (classes.known.sorcerer && classes.known.sorcerer.level > 5 && v.isSpell && (/poison/i).test(fields.Damage_Type)) {
									output.extraDmg += What('Cha Mod');
								};
							},
							"Cantrips and spells that deal poison damage get my Charisma modifier added to their damage."
						],
						spellAdd : [
							function (spellKey, spellObj, spName) {
								if (!spellObj.psionic) return genericSpellDmgEdit(spellKey, spellObj, "poison", "Cha", true);
							},
							"Cantrips and spells that deal poison damage get my Charisma modifier added to their damage."
						]
					}
				}
			},
			"subclassfeature14" : {
				name : "Dragon Wings",
				source : [["SRD", 45], ["P", 103]],
				minlevel : 14,
				description : desc([
					"As a bonus action, unless armor is in the way, I can sprout dragon wings from my back",
					"I gain a fly speed equal to my current speed until I dismiss the wings as a bonus action"
				]),
				action : ["bonus action", " (start/stop)"],
				speed : { fly : { spd : "walk", enc : "walk" } }
			},
			"subclassfeature18" : {
				name : "Draconic Presence",
				source : [["SRD", 45], ["P", 103]],
				minlevel : 18,
				description : "\n   " + "As an action, I create 60-ft radius aura of awe/fear for concentration up to 1 minute" + "\n   " + "All hostiles in this aura must make a Wis save or be charmed (awe) or frightened (fear)" + "\n   " + "They make their saves at the beginning of their turns" + "\n   " + "A creature that succeeds on the save is immune to my aura for 24 hours",
				additional : "5 sorcery points",
				action : ["action", ""]
			}
		}
	},
	"warlock-the fiend" : {
		regExpSearch : /^(?=.*(fiend|devil|demon|daemon|hell|abyss))(?=.*warlock).*$/i,
		subname : "the Fiend",
		source : [["SRD", 50], ["P", 109]],
		spellcastingExtra : ["burning hands", "command", "blindness/deafness", "scorching ray", "fireball", "stinking cloud", "fire shield", "wall of fire", "flame strike", "hallow"],
		features : {
			"subclassfeature1" : {
				name : "Dark One's Blessing",
				source : [["SRD", 50], ["P", 109]],
				minlevel : 1,
				description : "\n   " + "When I reduce a hostile to 0 HP, I gain Cha mod + warlock level temporary HP (min 1)"
			},
			"subclassfeature6" : {
				name : "Dark One's Own Luck",
				source : [["SRD", 50], ["P", 109]],
				minlevel : 6,
				description : "\n   " + "When I make an ability check or saving throw, I can add 1d10 after rolling the d20",
				recovery : "short rest",
				usages : 1
			},
			"subclassfeature10" : {
				name : "Fiendish Resilience",
				source : [["SRD", 51], ["P", 109]],
				minlevel : 10,
				description : "\n   " + "After a short or long rest, I can choose one damage type to become resistance to" + "\n   " + "This lasts until I choose another type; Magical and silver weapons ignore this resistance"
			},
			"subclassfeature14" : {
				name : "Hurl Through Hell",
				source : [["SRD", 51], ["P", 109]],
				minlevel : 14,
				description : "\n   " + "When I hit a creature with an attack, I can instantly transport it through lower planes" + "\n   " + "It returns at the end of my next turn and takes 10d10 psychic damage if not a fiend",
				recovery : "long rest",
				usages : 1
			}
		}
	},
	"wizard-evocation" : {
		regExpSearch : /(evocation|evocer|evoker)/i,
		subname : "School of Evocation",
		fullname : "Evoker",
		source : [["SRD", 54], ["P", 117]],
		features : {
			"subclassfeature2" : {
				name : "Evocation Savant",
				source : [["SRD", 54], ["P", 117]],
				minlevel : 2,
				description : "\n   " + "I halve the gp and time needed to copy evocation spells into my spellbook"
			},
			"subclassfeature2.1" : {
				name : "Sculpt Spells",
				source : [["SRD", 54], ["P", 117]],
				minlevel : 2,
				description : "\n   " + "If I cast an evocation spell affecting others I can see, I can protect 1 + the spell's level" + "\n   " + "The chosen automatically succeed on their saving throws vs. the spell" + "\n   " + "They also take no damage if the spell would normally deal half damage on a save"
			},
			"subclassfeature6" : {
				name : "Potent Cantrip",
				source : [["SRD", 54], ["P", 117]],
				minlevel : 6,
				description : "\n   " + "Any cantrips I cast still deal half damage on a successful save",
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.isSpell && v.isDC && v.thisWeapon[3] && SpellsList[v.thisWeapon[3]].save) {
								fields.Description = fields.Description.replace(/ success - no( damage|thing)/ , "success - half damage");
							};
						},
						"My cantrips still do half damage on a successful saving throw, but none of their other effects."
					],
					spellAdd : [
						function (spellKey, spellObj, spName) {
							if (spellObj.psionic || spellObj.level || !spellObj.save || !(/\d+d\d+/).test(spellObj.description)) return;
							var startDescr = spellObj.description;
							spellObj.description = spellObj.description.replace("at CL 5, 11, and 17", "CL 5, 11, 17").replace(/damage/ig, "dmg").replace(/creatures?/ig, "crea").replace("save or ", "").replace("at casting or entering", "at cast/enter").replace(/(; \+\d+d\d+.*$|$)/, "; save: half dmg only$1");
							switch (spellKey) {
								case "lightning lure" :
									spellObj.description = spellObj.description.replace(/(Lightn|pull)(ing|ed)/gi, "$1");
									break;
								case "create bonfire" :
									spellObj.description = spellObj.description.replace("half dmg only", "half dmg");
									break;
							}
							return startDescr !== spellObj.description;
						},
						"My cantrips still do half damage on a successful saving throw, but none of their other effects."
					]
				}
			},
			"subclassfeature10" : {
				name : "Empowered Evocation",
				source : [["SRD", 54], ["P", 117]],
				minlevel : 10,
				description : "\n   " + "I can add my Int modifier to a single damage roll of any wizard evocation spell I cast",
				calcChanges : {
					atkCalc : [
						function (fields, v, output) {
							if (v.thisWeapon[4].indexOf("wizard") !== -1) {
								output.extraDmg += What('Int Mod');
							};
						},
						"I add my Intelligence modifier to a single damage roll of any wizard evocation spell I cast."
					],
					spellAdd : [
						function (spellKey, spellObj, spName) {
							if (spName != "wizard" || !What("Int Mod") || Number(What("Int Mod")) <= 0) return;
							var lookForDie;
							switch (spellKey) {
								case "fire shield" :
									spellObj.description = spellObj.description.replace(/ gives| and/ig, ";").replace("the same dmg", "same");
								case "flame blade" :
									spellObj.description = spellObj.description.replace("to make a ", ":");
								case "mordenkainen's sword" :
									spellObj.description = spellObj.description.replace(" makes melee spell attacks", ", melee spell atk");
								case "melf's minute meteors" :
									spellObj.description = spellObj.description.replace("casting/bns a send up to two", "cast/bns send 1-2");
								case "crusader's mantle" :
								case "magic missile" :
								case "scorching ray" :
									spellObj.description += "; +" + What("Int Mod") + " dmg once";
									return true;
								case "wall of light" :
								case "wrath of nature" :
									spellObj.description = spellObj.description.replace(/ dmg|; see B/gi, "") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "witch bolt" :
									spellObj.description = spellObj.description.replace("Spell attack", "Spell atk").replace("Lightning", "Lightn.") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "maelstrom" :
									spellObj.description = spellObj.description.replace("starting turn in save or", "starting save").replace(" and", ",") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "wall of fire" :
									spellObj.description = spellObj.description.replace("and", "\u0026").replace("save halves; see B", "save half") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "whirlwind" :
									spellObj.description = spellObj.description.replace("see book", "see B") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "crown of stars" :
									spellObj.description = spellObj.description.replace("bonus action", "bns") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "dawn" :
									spellObj.description = spellObj.description.replace("bns a move it", "bns move") + "; 1\xD7 +" + What("Int Mod") + " dmg";
									return true;
								case "maddening darkness" :
									spellObj.description = spellObj.description.replace("save halves", "save half") + "; 1\xD7+" + What("Int Mod") + " dmg";
									return true;
								case "sickening radiance" :
									spellObj.description = spellObj.description.replace("1 level of exhaustion", "1 lvl exhaust.") + "; 1\xD7+" + What("Int Mod") + " dmg";
									return true;
								case "blade barrier" : // doesn't fit...
									return true;
								case "chaos bolt-uass" :
									spellObj.description = spellObj.description.replace(" of target", "");
								case "chromatic orb" :
								case "chaos bolt-xgte" :
									lookForDie = "d8";
									break;
								case "melf's acid arrow" :
								case "vitriolic sphere" :
									lookForDie = "d4";
									break;
								case "holy weapon" :
									lookForDie = "4d8";
									break;
								case "destructive wave" :
									lookForDie = "5d6";
									break;
							}
							if (lookForDie) {
								spellObj.description = spellObj.description.replace(lookForDie, lookForDie + "+" + What("Int Mod"));
								return true;
							}
							if (!spellObj.psionic && spellObj.school == "Evoc") return genericSpellDmgEdit(spellKey, spellObj, "\\w+\\.?", "Int", true);
						},
						"I add my Intelligence modifier to a single damage roll of any wizard evocation spell I cast."
					]
				}
			},
			"subclassfeature14" : {
				name : "Overchannel",
				source : [["SRD", 54], ["P", 118]],
				minlevel : 14,
				description : "\n   " + "When I cast a 5th-level or lower wizard spell that damages, it can deal max damage" + "\n   " + "Except the first time I do this after a long rest, I suffer 2d12 necrotic dmg per spell lvl" + "\n   " + "Every time I do it after that, before a long rest, I take another 1d12 necrotic damage" + "\n   " + "This necrotic damage surpasses my resistances/immunities; I can't overchannel cantrips",
				recovery : "long rest",
				usagescalc : "event.value = '1 + \u221E';"
			}
		}
	}
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Creature Type (CreatureList)
 **/
var CreatureList = {
	// The four elementals (for Druid Wild Shape)
	"air elemental" : {
		name : "Air Elemental",
		source : [["SRD", 305], ["M", 124]],
		size : 2, //Large
		type : "Elemental",
		subtype : "",
		alignment : "Neutral",
		ac : 15,
		hp : 90,
		hd : [12, 10],
		speed : "fly 90 ft (hover)",
		scores : [14, 20, 14, 6, 10, 6],
		saves : ["", "", "", "", "", ""],
		damage_resistances : "lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "poison",
		condition_immunities : "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "Auran",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Slam",
			ability : 2,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Two slam attacks as an Attack action"
		}, {
			name : "Whirlwind (Recharge 4-6)",
			ability : 1,
			damage : [3, 8, "bludgeoning"],
			range : "All in shared area",
			dc : true,
			description : "Str save; fail\u2015 flung 20 ft random direction, prone; success\u2015 half damage",
			tooltip : "Each creature in the elemental's space that fails its saving throw is flung up to 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone."
		}],
		traits : [{
			name : "Air Form",
			description : "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing."
		}],
		actions : [{
			name : "Whirlwind (Recharge 4-6)",
			description : "See Attack. Each creature in the elemental's space that fails its saving throw is flung up to 20 feet away from the elemental in a random direction and knocked prone. If a thrown target strikes an object, such as a wall or floor, the target takes 3 (1d6) bludgeoning damage for every 10 feet it was thrown. If the target is thrown at another creature, that creature must succeed on a DC 13 Dexterity saving throw or take the same damage and be knocked prone.\nIf the saving throw is successful, the target takes half the bludgeoning damage and isn't flung away or knocked prone."
		}],
		wildshapeString : "Darkvision 60 ft| Knows Auran| Resistant to: lightning, thunder, and bludgeoning, piercing, and slashing from nonmagical weapons| Immune to: poison, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious| Air Form: can move through 1 inch wide space without squeezing and can move through and stop in space of hostiles| Whirlwind: see Monster Manual page 124"
	},
	"earth elemental" : {
		name : "Earth Elemental",
		source : [["SRD", 306], ["M", 124]],
		size : 2, //Large
		type : "Elemental",
		subtype : "",
		alignment : "Neutral",
		ac : 17,
		hp : 126,
		hd : [12, 10],
		speed : "30 ft, burrow 30 ft",
		scores : [20, 8, 20, 5, 10, 5],
		saves : ["", "", "", "", "", ""],
		damage_vulnerabilities : "thunder",
		damage_resistances : "bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "poison",
		condition_immunities : "exhaustion, paralyzed, petrified, poisoned, unconscious",
		senses : "Darkvision 60 ft; Tremorsense 60 ft",
		passivePerception : 10,
		languages : "Terran",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Slam",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "Two slam attacks as an Attack action"
		}],
		traits : [{
			name : "Earth Glide",
			description : "The elemental can burrow through nonmagical, unworked earth and stone. While doing so, the elemental doesn't disturb the material it moves through."
		}, {
			name : "Siege Monster",
			description : "The elemental deals double damage to objects and structures."
		}],
		wildshapeString : "Darkvision 60 ft; Tremorsense 60 ft| Knows Terran| Vulnerable to: thunder| Resistant to: bludgeoning, piercing, and slashing from nonmagical weapons| Immune to: poison, exhaustion, paralyzed, petrified, poisoned, unconscious| Earth Glide: can burrow through nonmagical, unworked earth and stone without disturbing the material| Siege Monster: does double damage to objects and structures"
	},
	"fire elemental" : {
		name : "Fire Elemental",
		source : [["SRD", 306], ["M", 124]],
		size : 2, //Large
		type : "Elemental",
		subtype : "",
		alignment : "Neutral",
		ac : 13,
		hp : 102,
		hd : [12, 10],
		speed : "50 ft",
		scores : [10, 17, 16, 6, 10, 7],
		saves : ["", "", "", "", "", ""],
		damage_resistances : "bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "fire, poison",
		condition_immunities : "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "Ignan",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Touch",
			ability : 2,
			damage : [2, 6, "fire"],
			range : "Melee (5 ft)",
			description : "2 per Attack; Ignites flammable; Until action to douse, target 1d10 fire damage at start of its turn"
		}],
		traits : [{
			name : "Fire Form",
			description : "The elemental can move through a space as narrow as 1 inch wide without squeezing. A creature that touches the elemental or hits it with a melee attack while within 5 ft of it takes 5 (1d10) fire damage. In addition, the elemental can enter a hostile creature's space and stop there. The first time it enters a creature's space on a turn, that creature takes 5 (1d10) fire damage and catches fire; until someone takes an action to douse the fire, the creature takes 5 (1d10) fire damage at the start of each of its turns."
		}, {
			name : "Illumination",
			description : "The elemental sheds bright light in a 30-foot radius and dim light in an additional 30 ft."
		}, {
			name : "Water Susceptibility",
			description : "For every 5 ft the elemental moves in water, or for every gallon of water splashed on it, it takes 1 cold damage."
		}],
		wildshapeString : "Darkvision 60 ft| Knows Ignan| Resistant to: bludg./ piercing/slashing from nonmagical weapons| Immune to: fire/poison/exhaustion/grappled/paralyzed/petrified/ poisoned/prone/restrained/unconscious| Sheds 30-ft bright/dim light| 1 cold dmg per gallon of or 5ft moved through water| Fire Form: pass through 1\" space no squeezing; move through/stop in another's space; do 1d10 fire dmg to melee attackers; MM, p125"
	},
	"water elemental" : {
		name : "Water Elemental",
		source : [["SRD", 307], ["M", 124]],
		size : 2, //Large
		type : "Elemental",
		subtype : "",
		alignment : "Neutral",
		ac : 14,
		hp : 114,
		hd : [12, 10],
		speed : "30 ft, swim 90 ft",
		scores : [18, 14, 18, 5, 10, 8],
		saves : ["", "", "", "", "", ""],
		damage_resistances : "acid; bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "poison",
		condition_immunities : "exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "Aquan",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Slam",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Two slam attacks as an Attack action"
		}, {
			name : "Whelm (Recharge 4-6)",
			ability : 1,
			dc : true,
			damage : [2, 8, "bludgeoning"],
			range : "All in shared area",
			description : "Str save; fail\u2015 dmg/grappled/restrained/can't breathe until grapple ends (escape DC 14); success\u2015 no dmg/pushed out",
			tooltip : "Each creature in the elemental's space that is Large or smaller, is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength check and succeeding."
		}],
		features : [{
			name : "Freeze",
			description : "If the elemental takes cold damage, it partially freezes; its speed is reduced by 20 ft until the end of its next turn."
		}],
		traits : [{
			name : "Water Form",
			description : "The elemental can enter a hostile creature's space and stop there. It can move through a space as narrow as 1 inch wide without squeezing."
		}],
		actions : [{
			name : "Whelm (Recharge 4-6)",
			description : "See attack. Each creature in the elemental's space that is Large or smaller, is also grappled (escape DC 14). Until this grapple ends, the target is restrained and unable to breathe unless it can breathe water. If the saving throw is successful, the target is pushed out of the elemental's space.\nThe elemental can grapple one Large creature or up to two Medium or smaller creatures at one time. At the start of each of the elemental's turns, each target grappled by it takes 13 (2d8 + 4) bludgeoning damage. A creature within 5 feet of the elemental can pull a creature or object out of it by taking an action to make a DC 14 Strength check and succeeding."
		}],
		wildshapeString : "Darkvision 60 ft| Knows Aquan| Resistant to: acid, and bludg./piercing/slashing from nonmagical weapons| Immune to: poison, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious|  Water Form: pass through 1\" space without squeezing; move through and stop in another's space| Freeze: if taken cold damage, speed reduced to 20 ft until end of next turn| Whelm: see Monster Manual page 125"
	},
	// Dinosaurs (which are beasts for Druid Wild Shape)
	"plesiosaurus" : {
		name : "Plesiosaurus",
		source : [["SRD", 279], ["M", 79]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 68,
		hd : [8, 10],
		speed : "20 ft, swim 40 ft",
		scores : [18, 15, 16, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "",
		passivePerception : 13,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [3, 6, "piercing"],
			range : "Melee (10 ft)",
			description : ""
		}],
		traits : [{
			name : "Hold Breath",
			description : "The plesiosaurus can hold its breath for 1 hour."
		}]
	},
	"triceratops" : {
		name : "Triceratops",
		source : [["SRD", 279], ["M", 79]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 95,
		hd : [10, 12],
		speed : "50 ft",
		scores : [22, 9, 17, 2, 11, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 1,
		attacks : [{
			name : "Gore",
			ability : 1,
			damage : [4, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Trampling Charge trait"
		}, {
			name : "Stomp",
			ability : 1,
			damage : [3, 10, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Can only be used on prone creatures (also see Trampling Charge trait)"
		}],
		traits : [{
			name : "Trampling Charge",
			description : "If the triceratops moves at least 20 ft straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the triceratops can make one stomp attack against it as a bonus action."
		}]
	},
	"tyrannosaurus rex" : {
		name : "Tyrannosaurus Rex",
		source : [["SRD", 279], ["M", 79]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 136,
		hd : [13, 12],
		speed : "50 ft",
		scores : [25, 10, 19, 2, 12, 9],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "",
		passivePerception : 14,
		languages : "",
		challengeRating : "8",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [4, 12, "piercing"],
			range : "Melee (10 ft)",
			description : "Medium or smaller target is grappled and restrained (escape DC 17); Can't use bite again until grapple ends"
		}, {
			name : "Tail",
			ability : 1,
			damage : [3, 8, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "One bite and one tail attack to different targets as an Attack action"
		}],
		traits : [{
			name : "Multiattack",
			description : "The tyrannosaurus makes two attacks: one with its bite and one with its tail. It can't make both attacks against the same target."
		}]
	},
	// Exotic mounts and pets
	"griffon" : {
		name : "Griffon",
		source : [["SRD", 318], ["M", 174]],
		size : 2, //Large
		type : "Monstrosity",
		subtype : "",
		companion : "steed",
		alignment : "Unaligned",
		ac : 12,
		hp : 59,
		hd : [7, 10],
		speed : "30 ft, fly 80 ft",
		scores : [18, 15, 16, 2, 13, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 5
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using sight",
		passivePerception : 15,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "One beak and one claws attack as an Attack action"
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One claws and one beak attack as an Attack action"
		}],
		traits : [{
			name : "Keen Sight",
			description : "The griffon has advantage on Wisdom (Perception) checks that rely on sight."
		}]
	},
	"hippogriff" : {
		name : "Hippogriff",
		source : [["SRD", 322], ["M", 184]],
		size : 2, //Large
		type : "Monstrosity",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 10],
		speed : "40 ft, fly 60 ft",
		scores : [17, 13, 13, 2, 12, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 5
		},
		senses : "Adv. on Wis (Perception) checks using sight",
		passivePerception : 15,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "One beak and one claws attack as an Attack action"
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One claws and one beak attack as an Attack action"
		}],
		traits : [{
			name : "Keen Sight",
			description : "The hippogriff has advantage on Wisdom (Perception) checks that rely on sight."
		}]
	},
	"nightmare" : {
		name : "Nightmare",
		source : [["SRD", 336], ["M", 235]],
		size : 2, //Large
		type : "Fiend",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 13,
		hp : 68,
		hd : [8, 10],
		speed : "60 ft, fly 90 ft",
		scores : [18, 15, 16, 10, 13, 15],
		saves : ["", "", "", "", "", ""],
		damage_immunities : "fire",
		senses : "",
		passivePerception : 11,
		languages : "understands Abyssal, Common, and Infernal but can't speak",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target also takes 2d6 fire damage upon a hit"
		}],
		traits : [{
			name : "Confer Fire Resistance",
			description : "The nightmare can grant resistance to fire damage to anyone riding it."
		}, {
			name : "Illumination",
			description : "The nightmare sheds bright light in a 10-foot radius and dim light for an additional 10 feet."
		}],
		actions : [{
			name : "Ethereal Stride",
			description : "As an action, the nightmare and up to three willing creatures within 5 feet of it magically enter the Ethereal Plane from the Material Plane, or vice versa."
		}]
	},
	"owlbear" : {
		name : "Owlbear",
		source : [["SRD", 339], ["M", 249]],
		size : 2, //Large
		type : "Monstrosity",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 59,
		hd : [7, 10],
		speed : "40 ft",
		scores : [20, 12, 17, 3, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using sight/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "One beak and one claws attack as an Attack action"
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 8, "slashing"],
			range : "Melee (5 ft)",
			description : "One claws and one beak attack as an Attack action"
		}],
		traits : [{
			name : "Keen Sight and Smell",
			description : "The owlbear has advantage on Wisdom (Perception) checks that rely on sight or smell."
		}]
	},
	"pegasus" : {
		name : "Pegasus",
		source : [["SRD", 340], ["M", 250]],
		size : 2, //Large
		type : "Celestial",
		subtype : "",
		companion : "steed",
		alignment : "Chaotic Good",
		ac : 12,
		hp : 59,
		hd : [7, 10],
		speed : "60 ft, fly 90 ft",
		scores : [18, 15, 16, 10, 15, 13],
		saves : ["", 4, "", "", 4, 3],
		skills : {
			"perception" : 6
		},
		senses : "",
		passivePerception : 16,
		languages : "understands Celestial, Common, Elvish, and Sylvan but can't speak",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	// Special familiars (find familiar, pact of the chain, DM's rulings)
	"homunculus" : { // Contains contributions by SoilentBrad
		name : "Homunculus",
		source : [["SRD", 322], ["M", 188]],
		size : 5,
		type : "Construct",
		subtype : "",
		alignment : "Neutral",
		ac : 13,
		hp : 5,
		hd : [2, 4],
		speed : "20 ft, fly 40 ft",
		scores : [4, 15, 11, 10, 10, 7],
		saves : ["", "", "", "", "", ""],
		damage_immunities : "poison",
		condition_immunities : "charmed, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "understands the languages of its creator but can't speak",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "DC 10 Con save or poisoned for 1 min; Fail by 5 or more: poisoned and unconscious for 1d10 min",
			tooltip : "A target of the homunculus' bite attack must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way."
		}],
		features : [{
			name : "Telepathic Bond",
			description : "While the homunculus is on the same plane of existence as its master, it can magically convey what it senses to its master, and the two can communicate telepathically."
		}, {
			name : "Bite",
			description : "A target of the homunculus' bite attack must succeed on a DC 10 Constitution saving throw or be poisoned for 1 minute. If the saving throw fails by 5 or more, the target is instead poisoned for 5 (1d10) minutes and unconscious while poisoned in this way."
		}]
	},
	"imp" : {
		name : "Imp",
		source : [["SRD", 277], ["M", 76]],
		size : 5, //Tiny
		type : "Fiend",
		subtype : "devil",
		companion : "pact_of_the_chain",
		alignment : "Lawful Evil",
		ac : 13,
		hp : 10,
		hd : [3, 4],
		speed : "20 ft, fly 40 ft",
		scores : [6, 17, 13, 11, 12, 14],
		saves : ["", "", "", "", "", ""],
		skills : {
			"deception" : 4,
			"insight" : 3,
			"persuasion" : 4,
			"stealth" : 5
		},
		damage_resistances : "cold; bludgeoning, piercing, and slashing from nonmagical attacks that aren't silver weapons",
		damage_immunities : "fire, poison",
		condition_immunities : "poisoned",
		senses : "Darkvision 120 ft; Devil's Sight (Magical darkness doesn't impede the imp's Darkvision)",
		passivePerception : 11,
		languages : "Infernal, Common",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Sting (Bite in Beast Form)",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 3d6 poison damage, half on a DC 11 Constitution saving throw"
		}],
		traits : [{
			name : "Shapechanger",
			description : "The imp can use its action to polymorph into a beast form that resembles a rat (speed 20 ft), a raven (20 ft, fly 60 ft), or a spider (20 ft, climb 20 ft), or back into its true form. Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed. It reverts to its true form if it dies."
		}, {
			name : "Magic Resistance",
			description : "The imp has advantage on saving throws against spells and other magical effects."
		}],
		variant : [{
			name : "Variant: Familiar",
			description : "The imp can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the imp senses as long as they are within 1 mile of each other. While the imp is within 10 feet of its master, the master shares the imp's Magic Resistance trait. At any time and for any reason, the imp can end its service as a familiar, ending the telepathic bond."
		}],
		actions : [{
			name : "Invisibility",
			description : "As an action, the imp magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the imp wears or carries is invisible with it."
		}]
	},
	"pseudodragon" : {
		name : "Pseudodragon",
		source : [["SRD", 340], ["M", 254]],
		size : 5, //Tiny
		type : "Dragon",
		subtype : "",
		companion : "pact_of_the_chain",
		alignment : "Neutral Good",
		ac : 13,
		hp : 7,
		hd : [2, 4],
		speed : "15 ft, fly 60 ft",
		scores : [6, 15, 13, 10, 12, 10],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "Blindsight 10 ft; Darkvision 60 ft; Adv. on Wis (Perception) checks using hearing/sight/smell",
		passivePerception : 13,
		languages : "understands Common and Draconic but can't speak",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}, {
			name : "Sting",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "DC 11 Con save or poisoned 1 hour; fail by 5 or more: unconscious 1 hour, until damaged or awakened",
			tooltip : "The target hit must succeed on a DC 11 Constitution saving throw or become poisoned for 1 hour. If the saving throw fails by 5 or more, the target falls unconscious for the same duration, or until it takes damage or another creature uses an action to shake it awake."
		}],
		traits : [{
			name : "Keen Senses",
			description : "The pseudodragon has advantage on Wisdom (Perception) checks that rely on sight, hearing, or smell."
		}, {
			name : "Magic Resistance",
			description : "The pseudodragon has advantage on saving throws against spells and other magical effects."
		}, {
			name : "Limited Telepathy",
			description : "The pseudodragon can magically communicate simple ideas, emotions, and images telepathically with any creature within 100 ft of it that can understand a language."
		}],
		variant : [{
			name : "Variant: Familiar",
			description : "The pseudodragon can serve another creature as a familiar, forming a magic, telepathic bond with that willing companion. While the two are bonded, the companion can sense what the pseudodragon senses as long as they are within 1 mile of each other. While the pseudodragon is within 10 feet of its companion, the companion shares the pseudodragon's Magic Resistance trait. At any time and for any reason, the pseudodragon can end its service as a familiar, ending the telepathic bond."
		}]
	},
	"quasit" : {
		name : "Quasit",
		source : [["SRD", 273], ["M", 63]],
		size : 5, //Tiny
		type : "Fiend",
		subtype : "demon",
		companion : "pact_of_the_chain",
		alignment : "Chaotic Evil",
		ac : 13,
		hp : 7,
		hd : [3, 4],
		speed : "40 ft",
		scores : [5, 17, 10, 7, 10, 10],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 5
		},
		damage_resistances : "cold; fire; lightning; bludgeoning, piercing, and slashing from nonmagical attacks",
		damage_immunities : "poison",
		condition_immunities : "poisoned",
		senses : "Darkvision 120 ft",
		passivePerception : 10,
		languages : "Abyssal, Common",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claws (Bite in Beast Form)",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "Target makes DC 10 Con save or takes 2d4 poison damage and poisoned for 1 min (can save each turn)",
			modifiers : [-1, "", ""]
		}, {
			name : "Scare (1/day)",
			ability : 6,
			damage : ["Frightened", "", ""],
			range : "20 ft",
			description : "Wis save or frightened for 1 min (can save at end of each turn, disadv. if quasit is in sight)",
			modifiers : ["", "", false],
			dc : true
		}],
		traits : [{
			name : "Shapechanger",
			description : "The quasit can use its action to polymorph into a beast form that resembles a bat (speed 10 ft, fly 40 ft), a centipede (40 ft, climb 40 ft), or a toad (40 ft, swim 40 ft), or back into its true form . Its statistics are the same in each form, except for the speed changes noted. Any equipment it is wearing or carrying isn't transformed . It reverts to its true form if it dies."
		}, {
			name : "Magic Resistance",
			description : "The quasit has advantage on saving throws against spells and other magical effects."
		}],
		variant : [{
			name : "Variant: Familiar",
			description : "The quasit can serve another creature as a familiar, forming a telepathic bond with its willing master. While the two are bonded, the master can sense what the quasit senses as long as they are within 1 mile of each other. While the quasit is within 10 feet of its master, the master shares the quasit's Magic Resistance trait. At any time and for any reason, the quasit can end its service as a familiar, ending the telepathic bond."
		}],
		actions : [{
			name : "Invisibility",
			description : "As an action, the quasit magically turns invisible until it attacks, or until its concentration ends (as if concentrating on a spell). Any equipment the quasit wears or carries is invisible with it."
		}]
	},
	"shield guardian" : {
		name : "Shield Guardian",
		source : [["SRD", 345], ["M", 271]],
		size : 2, //Large
		type : "Construct",
		subtype : "",
		alignment : "Unaligned",
		ac : 17,
		hp : 142,
		hd : [15, 10],
		speed : "30 ft",
		scores : [18, 8, 18, 7, 10, 3],
		saves : ["", "", "", "", "", ""],
		damage_immunities : "poison",
		condition_immunities : "charmed, exhaustion, frightened, paralyzed, poisoned",
		senses : "Blindsight 10 ft; Darkvision 60 ft",
		passivePerception : 10,
		languages : "understands commands given in any language but can't speak",
		challengeRating : "7",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Fist",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Two fist attacks as an Attack action"
		}],
		traits : [{
			name : "Regeneration",
			description : "The guardian regains 10 HP at the start of its turn if it has at least 1 HP."
		}, {
			name : "Spell Storing",
			description : "A spellcaster who wears the shield guardian's amulet can cause the guardian to store one spell of 4th level or lower. To do so, the wearer must cast the spell on the guardian. The spell has no effect but is stored within the guardian. When commanded to do so by the wearer or when a situation arises that was predefined by the spellcaster, the guardian casts the stored spell with any parameters set by the original caster, requiring no components. When the spell is cast or a new spell is stored, any previously stored spell is lost."
		}],
		features : [{
			name : "Bound",
			description : "The shield guardian is magically bound to an amulet. As long as the guardian and its amulet are on the same plane of existence, the amulet's wearer can telepathically call the guardian to travel to it, and the guardian knows the distance and direction to the amulet. If the guardian is within 60 feet of the amulet's wearer, half of any damage the wearer takes (rounded up) is transferred to the guardian."
		}],
		actions : [{
			name : "Shield",
			description : "As a reaction, when a creature makes an attack against the wearer of the guardian's amulet, the guardian grants a +2 bonus to the wearer's AC if the guardian is within 5 feet of the wearer."
		}]
	},
	"sprite" : {
		name : "Sprite",
		source : [["SRD", 348], ["M", 283]],
		size : 5, //Tiny
		type : "Fey",
		subtype : "",
		companion : "pact_of_the_chain",
		alignment : "Neutral Good",
		ac : 15,
		hp : 2,
		hd : [1, 4],
		speed : "10 ft, fly 40 ft",
		scores : [3, 18, 10, 14, 13, 11],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 8
		},
		senses : "",
		passivePerception : 13,
		languages : "Common, Elvish, Sylvan",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Longsword",
			ability : 2,
			damage : [1, "", "slashing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["Str", "", false]
		}, {
			name : "Shortbow",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "40/160 ft",
			description : "",
			modifiers : ["", "", false],
			description : "DC 10 Con save or poisoned 1 min; fail by 5 or more: also unconscious 1 min, until damaged or awakened",
			tooltip : "The target hit must succeed on a DC 10 Constitution saving throw or become poisoned for 1 minute. If its saving throw result is 5 or lower, the poisoned target falls unconscious for the same duration, or until it takes damage or another creature takes an action to shake it awake."
		}, {
			name : "Heart Sight",
			ability : 6,
			damage : ["Reveal", "", ""],
			range : "Touch (5 ft)",
			description : "Cha save or sprite knows emotional state and alignment (celestial/fiend/undead auto fail the save)",
			modifiers : ["", "", false],
			dc : true
		}],
		actions : [{
			name : "Invisibility",
			description : "As an action, the sprite magically turns invisible until it attacks or casts a spell, or until its concentration ends (as if concentrating on a spell). Any equipment the sprite wears or carries is invisible with it."
		}]
	},
	// Undead minions
	"ghast" : {
		name : "Ghast",
		source : [["SRD", 311], ["M", 148]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Chaotic Evil",
		ac : 12,
		hp : 36,
		hd : [5, 8],
		speed : "30 ft",
		scores : [16, 17, 10, 11, 10, 8],
		saves : ["", "", "", "", "", ""],
		damage_resistances : "necrotic",
		damage_immunities : "poison",
		condition_immunities : "charmed, exhaustion, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "Common",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [2, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : [-2, "", ""]
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "DC 10 Con save or 1 min paralyzed; Save end of each turn (elf/undead immune)",
			tooltip : "If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success."
		}],
		traits : [{
			name : "Stench",
			description : "Any creature that starts its turn within 5 ft of the ghast must succeed on a DC 10 Constitution saving throw or be poisoned until the start of its next turn. On a successful saving throw, the creature is immune to the ghast's Stench for 24 hours."
		}, {
			name : "Turn Defiance",
			description : "The ghast and any ghouls within 30 ft of it have advantage on saving throws against effects that turn undead."
		}]
	},
	"ghoul" : {
		name : "Ghoul",
		source : [["SRD", 312], ["M", 148]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Chaotic Evil",
		ac : 12,
		hp : 22,
		hd : [5, 8],
		speed : "30 ft",
		scores : [13, 15, 10, 7, 10, 6],
		saves : ["", "", "", "", "", ""],
		damage_immunities : "poison",
		condition_immunities : "charmed, exhaustion, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "Common",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [2, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : [-2, "", ""]
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 4, "slashing"],
			range : "Melee (5 ft)",
			description : "DC 10 Con save or 1 min paralyzed; Save end of each turn (elf/undead immune)",
			tooltip : "If the target is a creature other than an elf or undead, it must succeed on a DC 10 Constitution saving throw or be paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success."
		}]
	},
	"mummy" : {
		name : "Mummy",
		source : [["SRD", 333], ["M", 228]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Lawful Evil",
		ac : 11,
		hp : 58,
		hd : [9, 8],
		speed : "20 ft",
		scores : [16, 8, 15, 6, 10, 12],
		saves : ["", "", "", "", 2, ""],
		damage_vulnerabilities : "fire",
		damage_resistances : "bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "necrotic, poison",
		condition_immunities : "charmed, exhaustion, frightened, paralyzed, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "all languages it knew in life",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Rotting Fist",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "+3d6 necrotic damage; DC 12 Constitution save or cursed with Mummy Rot",
			tooltip : "Multiattack\nAs part of one Attack action, the mummy can use its Dreadful Glare and makes one attack with its rotting fist.\n\nRotting Fist\nIf the target is a creature, it must succeed on a DC 12 Constitution saving throw or be cursed with mummy rot. The cursed target can't regain hit points, and its hit point maximum decreases by 10 (3d6) for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic."
		}, {
			name : "Dreadful Glare",
			ability : 6,
			damage : ["Frightened", "", ""],
			range : "60 ft",
			description : "Wis save or frightened for 1 round; If failed by 5 or more, paralyzed as well",
			tooltip : "Multiattack\nAs part of one Attack action, the mummy can use its Dreadful Glare and makes one attack with its rotting fist.\n\nDreadful Glare\nThe mummy targets one creature it can see within 60 ft of it. If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours.",
			modifiers : ["", "", false],
			dc : true
		}],
		traits : [{
			name : "Multiattack",
			description : "With one Attack action, do both Dreadful Glare and a Rotting Fist attack."
		}, {
			name : "Mummy Rot",
			description : "A cursed creature can't regain hit points, and its hit point maximum decreases by 3d6 for every 24 hours that elapse. If the curse reduces the target's hit point maximum to 0, the target dies, and its body turns to dust. The curse lasts until removed by the remove curse spell or other magic."
		}, {
			name : "Dreadful Glare",
			description : "If the target can see the mummy, it must succeed on a DC 11 Wisdom saving throw against this magic or become frightened until the end of the mummy's next turn. If the target fails the saving throw by 5 or more, it is also paralyzed for the same duration. A target that succeeds on the saving throw is immune to the Dreadful Glare of all mummies (but not mummy lords) for the next 24 hours."
		}]
	},
	"shadow" : {
		name : "Shadow",
		source : [["SRD", 344], ["M", 269]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "chaotic evil",
		ac : 12,
		hp : 16,
		hd : [3, 8],
		speed : "40 ft",
		scores : [6, 14, 13, 6, 10, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 4,
		},
		damage_vulnerabilities : "radiant",
		damage_resistances : "acid; cold; fire; lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "necrotic, poison",
		condition_immunities : "exhaustion, frightened, grappled, paralyzed, petrified, poisoned, prone, restrained",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Strength Drain",
			ability : 2,
			damage : [2, 6, "necrotic"],
			range : "Melee (5 ft)",
			description : "Reduces Str by 1d4 till target's next short rest; If Str goes to 0, the target dies and forms a new shadow",
			tooltip : "A target of the shadows' strength drain has its Strength score reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later."
		}],
		traits : [{
			name : "Amorphous",
			description : "The shadow can move through a space as narrow as 1 inch wide without squeezing."
		}, {
			name : "Shadow Stealth",
			description : "While in dim light or darkness, the shadow can take the Hide action as a bonus action and adds an extra +2 on Stealth checks."
		}, {
			name : "Sunlight Weakness",
			description : "While in sunlight, the shadow has disadvantage on attack rolls, ability checks, and saving throws."
		}, {
			name : "Strength Drain",
			description : "A target of the shadows' strength drain has its Strength score reduced by 1d4. The target dies if this reduces its Strength to 0. Otherwise, the reduction lasts until the target finishes a short or long rest.\nIf a non-evil humanoid dies from this attack, a new shadow rises from the corpse 1d4 hours later."
		}],
	},
	"skeleton" : { // "Skeleton (humanoid)" entry so that just "skeleton" also matches this entry
		name : "Skeleton (humanoid)",
		source : [["SRD", 346], ["M", 272]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "lawful evil",
		ac : 13,
		hp : 13,
		hd : [2, 8],
		speed : "30 ft",
		scores : [10, 14, 15, 6, 8, 5],
		saves : ["", "", "", "", "", ""],
		damage_vulnerabilities : "bludgeoning",
		damage_immunities : "poison",
		condition_immunities : "exhaustion, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 9,
		languages : "understands all languages it knew in life but can't speak",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Shortsword",
			ability : 2,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Finesse, light"
		}, {
			name : "Shortbow",
			ability : 2,
			damage : [1, 6, "piercing"],
			range : "80/320 ft",
			description : "Ammunition, two-handed"
		}]
	},
	"warhorse skeleton" : {
		name : "Warhorse Skeleton",
		source : [["SRD", 346], ["M", 273]],
		size : 2, //Large
		type : "Undead",
		subtype : "",
		alignment : "Lawful Evil",
		ac : 13,
		hp : 22,
		hd : [3, 10],
		speed : "60 ft",
		scores : [18, 12, 15, 2, 8, 5],
		saves : ["", "", "", "", "", ""],
		damage_vulnerabilities : "bludgeoning",
		damage_immunities : "poison",
		condition_immunities : "exhaustion, poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"specter" : {
		name : "Specter",
		source : [["SRD", 346], ["M", 279]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Chaotic Evil",
		ac : 12,
		hp : 22,
		hd : [5, 8],
		speed : "fly 50 ft (hover)",
		scores : [1, 14, 11, 10, 10, 12],
		saves : ["", "", "", "", "", ""],
		damage_resistances : "acid; cold; fire; lightning; thunder; bludgeoning, piercing, and slashing from nonmagical weapons",
		damage_immunities : "necrotic, poison",
		condition_immunities : "charmed, exhaustion, grappled, paralyzed, petrified, poisoned, prone, restrained, unconscious",
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "all languages it knew in life, but can't speak",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Life Drain",
			ability : 2,
			damage : [3, 6, "necrotic"],
			range : "Melee (5 ft)",
			description : "DC 10 Con save or HP max reduced by same as damage taken until a long rest",
			modifiers : ["", "", false],
			tooltip : "A target of the specter's life drain must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0."
		}],
		traits : [{
			name : "Incorporeal Movement",
			description : "The specter can move through other creatures and objects as if they were difficult terrain. It takes 5 (1d10) force damage if it ends its turn inside an object."
		}, {
			name : "Sunlight Sensitivity",
			description : "While in sunlight, the specter has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight."
		}, {
			name : "Life Drain",
			description : "A target of the specter's life drain must succeed on a DC 10 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the creature finishes a long rest. The target dies if this effect reduces its hit point maximum to 0."
		}]
	},
	"wight" : {
		name : "Wight",
		source : [["SRD", 354], ["M", 300]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 14,
		hp : 45,
		hd : [6, 8],
		speed : "30 ft",
		scores : [15, 14, 16, 10, 13, 15],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "Darkvision 60 ft; While in sunlight, disadv. on Wis (Perception) checks using sight",
		passivePerception : 13,
		languages : "all languages it knew in life",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Life Drain",
			ability : 1,
			damage : [1, 6, "necrotic"],
			range : "Melee (5 ft)",
			description : "DC 13 Con save or HP max reduced by damage amount until long rest",
			tooltip : "The target must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\nA humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time."
		}, {
			name : "Longsword",
			ability : 1,
			damage : [1, 8, "slashing"],
			range : "Melee (5 ft)",
			description : "Versatile (1d10)"
		}, {
			name : "Longbow",
			ability : 2,
			damage : [1, 8, "piercing"],
			range : "150/600 ft",
			description : "Ammunition, heavy, two-handed)"
		}],
		traits : [{
			name : "Sunlight Sensitivity",
			description : "While in sunlight, the wight has disadvantage on attack rolls, as well as on Wisdom (Perception) checks that rely on sight."
		}, {
			name : "Life Drain",
			description : "A target of the wight's life drain attack must succeed on a DC 13 Constitution saving throw or its hit point maximum is reduced by an amount equal to the damage taken. This reduction lasts until the target finishes a long rest. The target dies if this effect reduces its hit point maximum to 0.\n   A humanoid slain by this attack rises 24 hours later as a zombie under the wight's control, unless the humanoid is restored to life or its body is destroyed. The wight can have no more than twelve zombies under its control at one time."
		}]
	},
	"zombie" : {
		name : "Zombie",
		source : [["SRD", 356], ["M", 316]],
		size : 3, //Medium
		type : "Undead",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 8,
		hp : 22,
		hd : [3, 8],
		speed : "20 ft",
		scores : [13, 6, 16, 3, 6, 5],
		saves : ["", "", "", "", 0, ""],
		damage_immunities : "poison",
		condition_immunities : "poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 8,
		languages : "understands all languages it knew in life but can't speak",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Slam",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Undead Fortitude",
			description : "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5 + the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead."
		}]
	},
	"ogre zombie" : {
		name : "Ogre Zombie",
		source : [["SRD", 357], ["M", 316]],
		size : 2, //Large
		type : "Undead",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 8,
		hp : 85,
		hd : [9, 10],
		speed : "30 ft",
		scores : [19, 6, 18, 3, 6, 5],
		saves : ["", "", "", "", 0, ""],
		damage_immunities : "poison",
		condition_immunities : "poisoned",
		senses : "Darkvision 60 ft",
		passivePerception : 8,
		languages : "understands Command and Giant but can't speak",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Morningstar",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Undead Fortitude",
			description : "If damage reduces the zombie to 0 hit points, it must make a Constitution saving throw with a DC of 5 + the damage taken, unless the damage is radiant or from a critical hit. On a success, the zombie drops to 1 hit point instead."
		}]
	},
	// Fungi
	"shrieker" : {
		name : "Shrieker",
		source : [["SRD", 309], ["M", 138]],
		size : 3, //Medium
		type : "Plant",
		subtype : "",
		alignment : "Unaligned",
		ac : 5,
		hp : 13,
		hd : [3, 8],
		speed : "0 ft",
		scores : [1, 1, 10, 1, 3, 1],
		saves : ["", "", "", "", "", ""],
		condition_immunities : "blinded, deafened, frightened",
		senses : "Blindsight 30 ft (blind beyond this radius).",
		passivePerception : 6,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 0,
		attacks : [],
		traits : [{
			name : "False Appearance",
			description : "While the shrieker remains motionless, it is indistinguishable from an ordinary fungus."
		}],
		actions : [{
			name : "Shriek",
			description : "As a reaction when bright light or a creature is within 30 feet of the shrieker, it emits a shriek audible within 300 feet of it. The shrieker continues to shriek until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward."
		}],
		wildshapeString : "\u25C6 Senses: blindsight 30 ft (blind beyond this radius).\n\u25C6 Condition Immunities: blinded, deafened, frightened.\n\u25C6 Shriek: As a reaction when bright light or a creature is within 30 ft of the shrieker, emits a shriek audible out to 300 ft. This continues until the disturbance moves out of range and for 1d4 of the shrieker's turns afterward.\n\u25C6 False Appearance: While motionless, the shrieker is indistinguishable from an ordinary fungus."
	},
	"violet fungus" : {
		name : "Violet Fungus",
		source : [["SRD", 309], ["M", 138]],
		size : 3, //Medium
		type : "Plant",
		subtype : "",
		alignment : "Unaligned",
		ac : 5,
		hp : 18,
		hd : [4, 8],
		speed : "5 ft",
		scores : [3, 1, 10, 1, 3, 1],
		saves : ["", "", "", "", "", ""],
		condition_immunities : "blinded, deafened, frightened",
		senses : "Blindsight 30 ft (blind beyond this radius).",
		passivePerception : 6,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : "1",
		attacks : [{
			name : "Rotting Touch",
			ability : 3,
			damage : [1, 8, "necrotic"],
			range : "Melee (10 ft)",
			description : "1d4 rotting touch attacks as an Attack action"
		}],
		traits : [{
			name : "False Appearance",
			description : "While the violet fungus remains motionless, it is indistinguishable from an ordinary fungus."
		}]
	},
	// Beasts (familiars, Ranger and general animal companions, and Druid Wild Shapes) [Miscellaneous Creatures Section]
	"ape" : {
		name : "Ape",
		source : [["SRD", 366], ["M", 317]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 12,
		hp : 19,
		hd : [3, 8],
		speed : "30 ft, climb 30 ft",
		scores : [16, 14, 14, 6, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"athletics" : 5,
			"perception" : 3
		},
		senses : "",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Fist",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Two fist attacks as an Attack action"
		}, {
			name : "Rock",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "25/50 ft",
			description : "One rock attack as an Attack action"
		}]
	},
	"axe beak" : {
		name : "Axe Beak",
		source : [["SRD", 366], ["M", 317]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 10],
		speed : "50 ft",
		scores : [14, 12, 12, 2, 10, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [1, 8, "slashing"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"baboon" : {
		name : "Baboon",
		source : [["SRD", 367], ["M", 318]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 3,
		hd : [1, 6],
		speed : "30 ft, climb 30 ft",
		scores : [8, 14, 11, 4, 12, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 11,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Pack Tactics",
			description : "The baboon has advantage on an attack roll against a creature if at least one of the baboon's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"badger" : {
		name : "Badger",
		source : [["SRD", 367], ["M", 318]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 10,
		hp : 3,
		hd : [1, 4],
		speed : "20 ft, burrow 5 ft",
		scores : [4, 11, 12, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 11,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Smell",
			description : "The badger has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"bat" : {
		name : "Bat",
		source : [["SRD", 367], ["M", 318]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 12,
		hp : 1,
		hd : [1, 4],
		speed : "5 ft, fly 30 ft",
		scores : [2, 15, 8, 2, 12, 4],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 60 ft; Adv. on Wis (Perception) checks using hearing",
		passivePerception : 11,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["Str", "", false]
		}],
		traits : [{
			name : "Echolocation",
			description : "The bat can't use its Blindsight while deafened."
		}, {
			name : "Keen Hearing",
			description : "The bat has advantage on Wisdom (Perception) checks that rely on hearing."
		}]
	},
	"black bear" : {
		name : "Black Bear",
		source : [["SRD", 367], ["M", 318]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 8],
		speed : "40 ft, climb 30 ft",
		scores : [15, 10, 14, 2, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "One bite and one claw attack as an Attack action"
		}, {
			name : "Claw",
			ability : 1,
			damage : [2, 4, "slashing"],
			range : "Melee (5 ft)",
			description : "One claw and one bite attack as an Attack action"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The bear has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"blink dog" : {
		name : "Blink Dog",
		source : [["SRD", 368], ["M", 318]],
		size : 3, //Medium
		type : "Fey",
		subtype : "",
		alignment : "Lawful Good",
		ac : 13,
		hp : 22,
		hd : [4, 8],
		speed : "40 ft",
		scores : [12, 17, 12, 10, 13, 11],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 5
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "Blink Dog, understands Sylvan but can't speak it",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The dog has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}],
		actions : [{
			name : "Teleport (Recharge 4-6)",
			description : "As an action, the dog magically teleports, along with any equipment it is wearing or carrying, up to 40 ft to an unoccupied space it can see. Before or after teleporting, the dog can make one bite attack."
		}]
	},
	"blood hawk" : {
		name : "Blood Hawk",
		source : [["SRD", 368], ["M", 319]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 7,
		hd : [2, 6],
		speed : "10 ft, fly 60 ft",
		scores : [6, 14, 10, 3, 14, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "Adv. on Wis (Perception) checks using sight",
		passivePerception : 14,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Beak",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Sight",
			description : "The hawk has advantage on Wisdom (Perception) checks that rely on sight."
		}, {
			name : "Pack Tactics",
			description : "The hawk has advantage on an attack roll against a creature if at least one of the hawk's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"boar" : {
		name : "Boar",
		source : [["SRD", 368], ["M", 319]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 11,
		hp : 11,
		hd : [2, 8],
		speed : "40 ft",
		scores : [13, 11, 12, 2, 9, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 9,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Tusk",
			ability : 1,
			damage : [1, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the boar moves at least 20 ft straight toward a target and then hits it with a tusk attack on the same turn, the target takes an extra 3 (1d6) slashing damage. A targeted creature must succeed on a DC 11 Strength saving throw or be knocked prone."
		}, {
			name : "Relentless (Recharges after a Short or Long Rest)",
			description : "If the boar takes 7 damage or less that would reduce it to 0 HP, it is reduced to 1 HP instead."
		}]
	},
	"brown bear" : {
		name : "Brown Bear",
		source : [["SRD", 369], ["M", 319]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 34,
		hd : [4, 10],
		speed : "40 ft, climb 30 ft",
		scores : [19, 10, 16, 2, 13, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "One bite and one claw attack as an Attack action"
		}, {
			name : "Claw",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One claw and one bite attack as an Attack action"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The bear has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"camel" : {
		name : "Camel",
		source : [["SRD", 369], ["M", 320]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "mount",
		alignment : "Unaligned",
		ac : 9,
		hp : 15,
		hd : [2, 10],
		speed : "50 ft",
		scores : [16, 8, 14, 2, 8, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 9,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}]
	},
	"cat" : {
		name : "Cat",
		source : [["SRD", 369], ["M", 320]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 12,
		hp : 2,
		hd : [1, 4],
		speed : "40 ft, climb 30 ft",
		scores : [3, 15, 10, 3, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claws",
			ability : 2,
			damage : [1, "", "slashing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["Str", "", false]
		}],
		traits : [{
			name : "Keen Smell",
			description : "The cat has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"cave bear" : {
		name : "Cave Bear",
		source : [["SRD", 369], ["M", 334]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 42,
		hd : [5, 10],
		speed : "40 ft, swim 30 ft",
		scores : [20, 10, 16, 2, 13, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "One bite and one claw attack as an Attack action"
		}, {
			name : "Claw",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One claw and one bite attack as an Attack action"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The bear has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"constrictor snake" : {
		name : "Constrictor Snake",
		source : [["SRD", 369], ["M", 320]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 13,
		hd : [2, 10],
		speed : "30 ft, swim 30 ft",
		scores : [15, 14, 12, 1, 10, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 10 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		},{
			name : "Constrict",
			ability : 1,
			damage : [1, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target is grappled and restrained (escape DC 14); Can't use constrict again until grapple ends"
		}]
	},
	"crab" : {
		name : "Crab",
		source : [["SRD", 370], ["M", 320]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 11,
		hp : 2,
		hd : [1, 4],
		speed : "20 ft, swim 20 ft",
		scores : [2, 11, 10, 1, 8, 2],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 2
		},
		senses : "Blindsight 30 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, "", "bludgeoning"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : [2, "", false]
		}],
		traits : [{
			name : "Amphibious",
			description : "The crab can breathe air and water."
		}]
	},
	"crocodile" : {
		name : "Crocodile",
		source : [["SRD", 370], ["M", 320]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 19,
		hd : [3, 10],
		speed : "20 ft, swim 20 ft",
		scores : [15, 10, 13, 2, 10, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 2
		},
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "Target is grappled and restrained (escape DC 12); Can't use bite again until grapple ends"
		}],
		traits : [{
			name : "Hold Breath",
			description : "The crocodile can hold its breath for 15 minutes."
		}]
	},
	"death dog" : {
		name : "Death Dog",
		source : [["SRD", 370], ["M", 321]],
		size : 3, //Medium
		type : "Monstrosity",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 39,
		hd : [6, 8],
		speed : "40 ft",
		scores : [15, 14, 14, 3, 13, 6],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 5,
			"stealth" : 4
		},
		senses : "Darkvision 120 ft; Adv. on Wis (Perception) checks",
		passivePerception : 15,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Two bite attacks as an Attack action; Target DC 12 Con save or diseased and poisoned",
			tooltip : "If the target of the death dog's bite attack is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0."
		}],
		traits : [{
			name : "Two-Headed",
			description : "The death dog has advantage on Wisdom (Perception) checks and on saving throws against being blinded, charmed, deafened, frightened, stunned, or knocked unconscious."
		}, {
			name : "Bite attack",
			description : "If the target of the death dog's bite attack is a creature, it must succeed on a DC 12 Constitution saving throw against disease or become poisoned until the disease is cured. Every 24 hours that elapse, the creature must repeat the saving throw, reducing its hit point maximum by 5 (1d10) on a failure. This reduction lasts until the disease is cured. The creature dies if the disease reduces its hit point maximum to 0."
		}]
	},
	"deer" : {
		name : "Deer",
		source : [["SRD", 370], ["M", 321]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 4,
		hd : [1, 8],
		speed : "50 ft",
		scores : [11, 16, 11, 2, 14, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 12,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"dire wolf" : {
		name : "Dire Wolf",
		source : [["SRD", 371], ["M", 321]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "steed",
		alignment : "Unaligned",
		ac : 14,
		hp : 37,
		hd : [5, 10],
		speed : "50 ft",
		scores : [17, 15, 15, 3, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [2, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 13 Strength saving throw or be knocked prone"
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}, {
			name : "Pack Tactics",
			description : "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"draft horse" : {
		name : "Draft Horse",
		source : [["SRD", 371], ["M", 321]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 10,
		hp : 19,
		hd : [3, 10],
		speed : "40 ft",
		scores : [18, 10, 12, 2, 11, 7],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"eagle" : {
		name : "Eagle",
		source : [["SRD", 371], ["M", 322]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 3,
		hd : [1, 6],
		speed : "10 ft, fly 60 ft",
		scores : [6, 15, 10, 2, 14, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "Adv. on Wis (Perception) checks using sight",
		passivePerception : 14,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Talons",
			ability : 2,
			damage : [1, 4, "slashing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Sight",
			description : "The eagle has advantage on Wisdom (Perception) checks that rely on sight."
		}]
	},
	"elephant" : {
		name : "Elephant",
		source : [["SRD", 371], ["M", 322]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 76,
		hd : [8, 12],
		speed : "40 ft",
		scores : [22, 9, 17, 3, 11, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Gore",
			ability : 1,
			damage : [3, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Trampling Charge trait"
		}, {
			name : "Stomp",
			ability : 1,
			damage : [3, 10, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Can only be used on prone creatures (also see Trampling Charge trait)"
		}],
		traits : [{
			name : "Trampling Charge",
			description : "If the elephant moves at least 20 ft straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the elephant can make one stomp attack against it as a bonus action."
		}]
	},
	"elk" : {
		name : "Elk",
		source : [["SRD", 372], ["M", 322]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "mount",
		alignment : "Unaligned",
		ac : 10,
		hp : 13,
		hd : [2, 10],
		speed : "50 ft",
		scores : [16, 10, 12, 2, 10, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Ram",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}, {
			name : "Hooves",
			ability : 1,
			damage : [2, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Can only be used on prone creatures"
		}],
		traits : [{
			name : "Charge",
			description : "If the elk moves at least 20 ft straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone."
		}]
	},
	"flying snake" : {
		name : "Flying Snake",
		source : [["SRD", 372], ["M", 322]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 14,
		hp : 5,
		hd : [2, 4],
		speed : "30 ft, fly 60 ft, swim 30 ft",
		scores : [4, 18, 11, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 10 ft",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 3d4 poison damage",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Flyby",
			description : "The snake doesn't provoke opportunity attacks when it flies out of an enemy's reach."
		}]
	},
	"frog" : {
		name : "Frog",
		source : [["SRD", 372], ["M", 322]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 11,
		hp : 1,
		hd : [1, 4],
		speed : "20 ft, swim 20 ft",
		scores : [1, 13, 8, 1, 8, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 1,
			"stealth" : 3
		},
		senses : "Darkvision 30 ft",
		passivePerception : 11,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [],
		traits : [{
			name : "Amphibious",
			description : "The frog can breathe air and water"
		}, {
			name : "Standing Leap",
			description : "The frog's long jump is up to 10 ft and its high jump is up to 5 ft, with or without a running start."
		}]
	},
	"giant ape" : {
		name : "Giant Ape",
		source : [["SRD", 373], ["M", 323]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 157,
		hd : [15, 12],
		speed : "40 ft, climb 40 ft",
		scores : [23, 14, 18, 7, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"athletics" : 9,
			"perception" : 4
		},
		senses : "",
		passivePerception : 14,
		languages : "",
		challengeRating : "7",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Fist",
			ability : 1,
			damage : [3, 10, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "Two fist attacks as an Attack action"
		}, {
			name : "Rock",
			ability : 1,
			damage : [7, 6, "bludgeoning"],
			range : "50/100 ft",
			description : "One rock attack as an Attack action"
		}]
	},
	"giant badger" : {
		name : "Giant Badger",
		source : [["SRD", 373], ["M", 323]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 10,
		hp : 13,
		hd : [2, 8],
		speed : "30 ft, burrow 10 ft",
		scores : [13, 10, 15, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "One bite and one claws attack as an Attack action"
		}, {
			name : "Claws",
			ability : 1,
			damage : [2, 4, "slashing"],
			range : "Melee (5 ft)",
			description : "One claws and one bite attack as an Attack action"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The badger has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"giant bat" : {
		name : "Giant Bat",
		source : [["SRD", 373], ["M", 323]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 22,
		hd : [4, 10],
		speed : "10 ft, fly 60 ft",
		scores : [15, 16, 11, 2, 12, 6],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 60 ft; Adv. on Wis (Perception) checks using hearing",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Echolocation",
			description : "The bat can't use its Blindsight while deafened."
		}, {
			name : "Keen Hearing",
			description : "The bat has advantage on Wisdom (Perception) checks that rely on hearing."
		}]
	},
	"giant boar" : {
		name : "Giant Boar",
		source : [["SRD", 373], ["M", 323]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 42,
		hd : [5, 10],
		speed : "40 ft",
		scores : [17, 10, 16, 2, 7, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 8,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Tusk",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the boar hits with a tusk attack after moving at least 20 ft straight toward a target on the same turn, the target takes an extra 2d6 slashing damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone."
		}, {
			name : "Relentless (Recharges after a Short or Long Rest)",
			description : "If the boar takes 10 damage or less that would reduce it to 0 HP, it is reduced to 1 HP instead."
		}]
	},
	"giant centipede" : {
		name : "Giant Centipede",
		source : [["SRD", 374], ["M", 323]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 4,
		hd : [1, 6],
		speed : "30 ft, climb 30 ft",
		scores : [5, 14, 12, 1, 7, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 30 ft",
		passivePerception : 8,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 11 Constitution saving throw or take 3d6 poison damage"
		}],
		traits : [{
			name : "Bite",
			description : "If the poison damage from the centipede's bite attack reduces the target to 0 HP, the target is stable but poisoned for 1 hour, even after regaining HP, and is paralyzed while poisoned in this way."
		}]
	},
	"giant constrictor snake" : {
		name : "Giant Constrictor Snake",
		source : [["SRD", 374], ["M", 324]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 60,
		hd : [8, 12],
		speed : "30 ft, swim 30 ft",
		scores : [19, 14, 12, 1, 10, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2
		},
		senses : "Blindsight 10 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [2, 6, "piercing"],
			range : "Melee (10 ft)",
			description : ""
		},{
			name : "Constrict",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target is grappled and restrained (escape DC 16); Can't use constrict again until grapple ends"
		}]
	},
	"giant crab" : {
		name : "Giant Crab",
		source : [["SRD", 374], ["M", 324]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 15,
		hp : 13,
		hd : [3, 8],
		speed : "30 ft, swim 30 ft",
		scores : [13, 15, 11, 1, 9, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 4
		},
		senses : "Blindsight 30 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target is grappled (escape DC 11); Can't use a claw again until grapple ends"
		}],
		traits : [{
			name : "Amphibious",
			description : "The crab can breathe air and water."
		}]
	},
	"giant crocodile" : {
		name : "Giant Crocodile",
		source : [["SRD", 374], ["M", 324]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 14,
		hp : 85,
		hd : [9, 12],
		speed : "30 ft, swim 50 ft",
		scores : [21, 9, 17, 2, 10, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 5
		},
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [3, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "Target is grappled and restrained (escape DC 16); Can't use bite again until grapple ends"
		}, {
			name : "Tail",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "Target must succeed on a DC 16 Strength saving throw or be knocked prone"
		}],
		traits : [{
			name : "Hold Breath",
			description : "The crocodile can hold its breath for 30 minutes."
		}, {
			name : "Multiattack",
			description : "The crocodile makes two attacks: one with its bite and one with its tail (to a target it is not grappling)."
		}]
	},
	"giant eagle" : {
		name : "Giant Eagle",
		source : [["SRD", 375], ["M", 324]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Neutral Good",
		ac : 13,
		hp : 26,
		hd : [4, 10],
		speed : "10 ft, fly 80 ft",
		scores : [16, 17, 13, 8, 14, 10],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "Adv. on Wis (Perception) checks using sight",
		passivePerception : 14,
		languages : "Giant Eagle, understands Common and Auran but can't speak",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "One beak and one talons attack as an Attack action"
		}, {
			name : "Talons",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One talons and one beak attack as an Attack action"
		}],
		traits : [{
			name : "Keen Sight",
			description : "The eagle has advantage on Wisdom (Perception) checks that rely on sight."
		}]
	},
	"giant elk" : {
		name : "Giant Elk",
		source : [["SRD", 375], ["M", 325]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 15,
		hp : 42,
		hd : [5, 12],
		speed : "60 ft",
		scores : [19, 16, 14, 7, 14, 10],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "",
		passivePerception : 14,
		languages : "Giant Elk, understands Common, Elvish, and Sylvan but can't speak",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Ram",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}, {
			name : "Hooves",
			ability : 1,
			damage : [4, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Can only be used on prone creatures"
		}],
		traits : [{
			name : "Charge",
			description : "If the elk moves at least 20 ft straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) damage. If the target is a creature, it must succeed on a DC 14 Strength saving throw or be knocked prone."
		}]
	},
	"giant fly" : {
		name : "Giant Fly",
		source : [["SRD", 222], ["D", 169]],
		size : 2,
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 10],
		speed : "30 ft, fly 60 ft",
		scores : [14, 13, 13, 2, 10, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 0,
		attacks : []
	},
	"giant fire beetle" : {
		name : "Giant Fire Beetle",
		source : [["SRD", 375], ["M", 325]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 4,
		hd : [1, 6],
		speed : "30 ft",
		scores : [8, 10, 12, 1, 7, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 30 ft",
		passivePerception : 8,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "slashing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Illumination",
			description : "The beetle sheds bright light in a 10-foot radius and dim light for an additional 10 ft."
		}]
	},
	"giant frog" : {
		name : "Giant Frog",
		source : [["SRD", 376], ["M", 325]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 18,
		hd : [4, 8],
		speed : "30 ft, swim 30 ft",
		scores : [12, 13, 11, 2, 10, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2,
			"stealth" : 3
		},
		senses : "Darkvision 30 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target is grappled and restrained (escape DC 11); Can't use bite again until grapple ends"
		}],
		traits : [{
			name : "Amphibious",
			description : "The frog can breathe air and water"
		}, {
			name : "Standing Leap",
			description : "The frog's long jump is up to 20 ft and its high jump is up to 10 ft, with or without a running start."
		}, {
			name : "Swallow",
			description : "The frog makes one bite attack against a Small or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the frog, and it takes 5 (2d4) acid damage at the start of each of the frog's turns. The frog can have only one target swallowed at a time. If the frog dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 ft of movement, exiting prone."
		}],
		wildshapeString : "Darkvision 30 ft| Amphibious: can breathe air and water| Standing Leap: can long jump up to 20 ft and high jump up to 10 ft, with or without a running start| Swallow: if a bite attack hits a Small or smaller target it is grappling, it is swallowed, ending the grapple. Swallowed: blinded, restrained, total cover, takes 2d4 acid damage at the start of each of the frog's turns; can have only 1 swallowed at a time."
	},
	"giant goat" : {
		name : "Giant Goat",
		source : [["SRD", 376], ["M", 326]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 10],
		speed : "40 ft",
		scores : [17, 11, 12, 3, 12, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Ram",
			ability : 1,
			damage : [2, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the goat hits with a ram attack after moving at least 20 ft straight toward a target on the same turn, the target takes an extra 2d4 bludgeoning damage. If the target is a creature, it must succeed on a DC 13 Strength saving throw or be knocked prone."
		}, {
			name : "Sure-Footed",
			description : "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone."
		}]
	},
	"giant hyena" : {
		name : "Giant Hyena",
		source : [["SRD", 376], ["M", 326]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 45,
		hd : [6, 10],
		speed : "50 ft",
		scores : [16, 14, 14, 2, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "",
		passivePerception : 13,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [2, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "After reducing opponent to 0 HP, take bonus action to move and attack (see Rampage trait)"
		}],
		traits : [{
			name : "Rampage",
			description : "When the hyena reduces a creature to 0 HP with a melee attack on its turn, the hyena can take a bonus action to move up to half its speed and make a bite attack."
		}]
	},
	"giant lizard" : {
		name : "Giant Lizard",
		source : [["SRD", 377], ["M", 326]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 19,
		hd : [3, 10],
		speed : "30 ft, climb 30 ft",
		scores : [15, 12, 13, 2, 10, 5],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Variant: Hold Breath",
			description : "The lizard can hold its breath for 15 minutes. (A lizard that has this trait also has a swimming speed of 30 feet.)"
		}, {
			name : "Variant: Spider Climb",
			description : "The lizard can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check."
		}]
	},
	"giant octopus" : {
		name : "Giant Octopus",
		source : [["SRD", 377], ["M", 326]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 52,
		hd : [8, 10],
		speed : "10 ft, swim 60 ft",
		scores : [17, 13, 13, 4, 10, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4,
			"stealth" : 5
		},
		senses : "Darkvision 60 ft",
		passivePerception : 14,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Tentacles",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (15 ft)",
			description : "Target is grappled and restrained (escape DC 16); Can't use tentacles again until grapple ends"
		}],
		traits : [{
			name : "Hold Breath",
			description : "While out of water, the octopus can hold its breath for 1 hour."
		}, {
			name : "Underwater Camouflage",
			description : "The octopus has advantage on Dexterity (Stealth) checks made while underwater."
		}, {
			name : "Water Breathing",
			description : "The octopus can breathe only underwater."
		}],
		actions : [{
			name : "Ink Cloud (Recharges after a Short or Long Rest)",
			description : "As an action, a 20-foot-radius cloud of ink extends all around the octopus if it is underwater. The area is heavily obscured for 1 minute, although a significant current can disperse the ink. After releasing the ink, the octopus can use the Dash action as a bonus action."
		}],
		wildshapeString : "Darkvision 60 ft| Water Breathing: can breathe only underwater| Hold Breath: can hold its breath for 1 hourout of water| Underwater Camouflage: advantage on Dexterity (Stealth) checks made while underwater| Ink Cloud (Recharges after a Short or Long Rest): if underwater, 20-ft radius cloud of ink around octopus, heavily obscures for 1 minute, can be dispersed. After releasing, can use the Dash action as a bonus action"
	},
	"giant owl" : {
		name : "Giant Owl",
		source : [["SRD", 377], ["M", 327]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Neutral",
		ac : 12,
		hp : 19,
		hd : [3, 10],
		speed : "5 ft, fly 60 ft",
		scores : [13, 15, 12, 8, 13, 10],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 5,
			"stealth" : 4
		},
		senses : "Darkvision 120 ft; Adv. on Wis (Perception) checks using hearing/sight",
		passivePerception : 15,
		languages : "Giant Owl, understands Common, Elvish, and Sylvan but can't speak",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Talons",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Flyby",
			description : "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach."
		}, {
			name : "Keen Hearing and Sight",
			description : "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight."
		}]
	},
	"giant poisonous snake" : {
		name : "Giant Poisonous Snake",
		source : [["SRD", 378], ["M", 327]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 14,
		hp : 11,
		hd : [2, 8],
		speed : "30 ft, swim 30 ft",
		scores : [10, 18, 13, 2, 10, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2
		},
		senses : "Blindsight 10 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (10 ft)",
			description : "Target also takes 3d6 poison damage, half on a DC 11 Constitution saving throw"
		}]
	},
	"giant rat" : {
		name : "Giant Rat",
		source : [["SRD", 378], ["M", 327]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 7,
		hd : [2, 6],
		speed : "30 ft",
		scores : [7, 15, 11, 2, 10, 4],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Smell",
			description : "The rat has advantage on Wisdom (Perception) checks that rely on smell."
		}, {
			name : "Pack Tactics",
			description : "The rat has advantage on an attack roll against a creature if at least one of the rat's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"giant rat (diseased)" : {
		name : "Giant Rat (Diseased)",
		source : [["SRD", 378], ["M", 327]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 7,
		hd : [2, 6],
		speed : "30 ft",
		scores : [7, 15, 11, 2, 10, 4],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 60 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 10 Constitution saving throw or contract a disease"
		}],
		traits : [{
			name : "Disease",
			description : "A target that contracted the disease by the bite attack of the diseased giant rat has it until the disease is cured. It can't regain HP except by magical means, and the it's HP maximum decreases by 3 (1d6) every 24 hours. If the target's HP maximum drops to 0 as a result of this disease, the target dies."
		}]
	},
	"giant scorpion" : {
		name : "Giant Scorpion",
		source : [["SRD", 378], ["M", 327]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 15,
		hp : 52,
		hd : [7, 10],
		speed : "40 ft",
		scores : [15, 13, 15, 1, 9, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 60 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 3,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target is grappled (escape DC 12); Can't use a claw again until grapple ends"
		}, {
			name : "Sting",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 4d10 poison damage, half on a DC 12 Constitution saving throw"
		}],
		traits : [{
			name : "Multiattack",
			description : "The scorpion makes three attacks: two with its claws and one with its sting."
		}]
	},
	"giant sea horse" : {
		name : "Giant Sea Horse",
		source : [["SRD", 378], ["M", 328]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 16,
		hd : [3, 10],
		speed : "swim 40 ft",
		scores : [12, 15, 11, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Ram",
			ability : 1,
			damage : [1, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the sea horse moves at least 20 ft straight toward a target and then hits it with a ram attack on the same turn, the target takes an extra 7 (2d6) bludgeoning damage. If the target is a creature, it must succeed on a DC 11 Strength saving throw or be knocked prone."
		}, {
			name : "Water Breathing",
			description : "The sea horse can breathe only underwater."
		}]
	},
	"giant shark" : {
		name : "Giant Shark",
		source : [["SRD", 379], ["M", 328]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 126,
		hd : [11, 12],
		speed : "swim 50 ft",
		scores : [23, 11, 21, 1, 10, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Blindsight 60 ft",
		passivePerception : 13,
		languages : "",
		challengeRating : "5",
		proficiencyBonus : 3,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [3, 10, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Blood Frenzy",
			description : "The shark has advantage on melee attack rolls against any creature that doesn't have all its HP."
		}, {
			name : "Water Breathing",
			description : "The shark can breathe only underwater."
		}]
	},
	"giant spider" : {
		name : "Giant Spider",
		source : [["SRD", 379], ["M", 328]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 14,
		hp : 26,
		hd : [4, 10],
		speed : "30 ft, climb 30 ft",
		scores : [14, 16, 12, 2, 11, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 7
		},
		senses : "Blindsight 10 ft; Darkvision 60 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 2d8 poison damage, half on a DC 11 Constitution saving throw"
		}, {
			name : "Web (Recharge 5-6)",
			ability : 2,
			damage : ["Restrained", "", ""],
			range : "30/60 ft",
			description : "Target can escape as an action with a DC 12 Strength check, or by destroying the webbing (AC 10; 5 HP)",
			modifiers : ["", "", false],
			tooltip : "On a hit, the target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage)."
		}],
		traits : [{
			name : "Bite",
			description : "If the poison damage from the spider's bite attack reduces the target to 0 HP, the target is stable but poisoned for 1 hour, even after regaining HP, and is paralyzed while poisoned in this way."
		}, {
			name : "Spider Climb",
			description : "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check."
		}, {
			name : "Web Sense",
			description : "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web."
		}, {
			name : "Web Walker",
			description : "The spider ignores movement restrictions caused by webbing."
		}],
		actions : [{
			name : "Web (Recharge 5-6)",
			description : "See attack. On a hit, the target is restrained by webbing. As an action, the restrained target can make a DC 12 Strength check, bursting the webbing on a success. The webbing can also be attacked and destroyed (AC 10; hp 5; vulnerability to fire damage; immunity to bludgeoning, poison, and psychic damage)."
		}],
		wildshapeString : "Blindsight 10 ft; Darkvision 60 ft| If the bite's poison damage reduces the target to 0 HP, the target is stable but poisoned and paralyzed for 1 hour, even after regaining HP| Spider Climb: climb difficult surfaces, including upside down, without an ability check| Web Sense: knows the exact location of any other creature in contact with the same web| Web Walker: ignores movement restrictions from webbing"
	},
	"giant toad" : {
		name : "Giant Toad",
		source : [["SRD", 380], ["M", 329]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 39,
		hd : [6, 10],
		speed : "20 ft, swim 40 ft",
		scores : [15, 13, 13, 2, 10, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "+1d10 poison damage; target is grappled and restrained (escape DC 13); Can't use bite again until grapple ends"
		}],
		traits : [{
			name : "Amphibious",
			description : "The toad can breathe air and water"
		}, {
			name : "Standing Leap",
			description : "The toad's long jump is up to 20 ft and its high jump is up to 10 ft, with or without a running start."
		}, {
			name : "Swallow",
			description : "The toad makes one bite attack against a Medium or smaller target it is grappling. If the attack hits, the target is swallowed, and the grapple ends. The swallowed target is blinded and restrained, it has total cover against attacks and other effects outside the toad, and it takes 10 (3d6) acid damage at the start of each of the toad's turns. The toad can have only one target swallowed at a time.\nIf the toad dies, a swallowed creature is no longer restrained by it and can escape from the corpse using 5 feet of movement, exiting prone."
		}],
		wildshapeString : "Darkvision 30 ft| Amphibious: can breathe air and water| Standing Leap: can long jump up to 20 ft and high jump up to 10 ft, with or without a running start| Swallow: if a bite attack hits a Medium or smaller target that it is grappling, it is swallowed, ending the grapple. Swallowed: blinded, restrained, total cover, takes 3d6 acid damage at the start of each of the toad's turns; can have only 1 swallowed at a time."
	},
	"giant vulture" : {
		name : "Giant Vulture",
		source : [["SRD", 380], ["M", 329]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 10,
		hp : 22,
		hd : [3, 10],
		speed : "10 ft, fly 60 ft",
		scores : [15, 10, 15, 6, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using sight/smell",
		passivePerception : 13,
		languages : "understands Common but can't speak",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Beak",
			ability : 1,
			damage : [2, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "One beak and one talons attack as an Attack action",
			modifiers : [-1, "", ""]
		}, {
			name : "Talons",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One talons and one beak attack as an Attack action",
			modifiers : [-1, "", ""]
		}],
		traits : [{
			name : "Keen Sight and Smell",
			description : "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell."
		}, {
			name : "Pack Tactics",
			description : "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"giant wasp" : {
		name : "Giant Wasp",
		source : [["SRD", 380], ["M", 329]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 13,
		hd : [3, 8],
		speed : "10 ft, fly 50 ft, swim 50 ft",
		scores : [10, 14, 10, 1, 10, 3],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Sting",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 3d6 poison damage, half on a DC 11 Constitution saving throw"
		}],
		traits : [{
			name : "Sting",
			description : "If the poison damage from the giant wasp's sting attack reduces the target to 0 HP, the target is stable but poisoned for 1 hour, even after regaining HP, and is paralyzed while poisoned in this way."
		}]
	},
	"giant weasel" : {
		name : "Giant Weasel",
		source : [["SRD", 381], ["M", 329]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 13,
		hp : 9,
		hd : [2, 8],
		speed : "40 ft",
		scores : [11, 16, 10, 4, 12, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 5
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}]
	},
	"giant wolf spider" : {
		name : "Giant Wolf Spider",
		source : [["SRD", 381], ["M", 330]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 11,
		hd : [2, 8],
		speed : "40 ft, climb 40 ft",
		scores : [12, 16, 13, 3, 12, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 7
		},
		senses : "Blindsight 10 ft; Darkvision 60 ft",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 2d6 poison damage, half on a DC 11 Constitution saving throw"
		}],
		traits : [{
			name : "Bite",
			description : "If the poison damage from the spider's bite attack reduces the target to 0 HP, the target is stable but poisoned for 1 hour, even after regaining HP, and is paralyzed while poisoned in this way."
		}, {
			name : "Spider Climb",
			description : "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check."
		}, {
			name : "Web Sense",
			description : "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web."
		}, {
			name : "Web Walker",
			description : "The spider ignores movement restrictions caused by webbing."
		}],
		wildshapeString : "Blindsight 10 ft; Darkvision 60 ft| If the bite's poison damage reduces the target to 0 HP, the target is stable but poisoned and paralyzed for 1 hour, even after regaining HP| Spider Climb: climb difficult surfaces, including upside down, without an ability check| Web Sense: knows the exact location of any other creature in contact with the same web| Web Walker: ignores movement restrictions from webbing"
	},
	"goat" : {
		name : "Goat",
		source : [["SRD", 381], ["M", 330]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 10,
		hp : 4,
		hd : [1, 8],
		speed : "40 ft",
		scores : [12, 10, 11, 2, 10, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Ram",
			ability : 1,
			damage : [1, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the goat hits with a ram attack after moving at least 20 ft straight toward a target on the same turn, the target takes an extra 1d4 bludgeoning damage. If the target is a creature, it must succeed on a DC 10 Strength saving throw or be knocked prone."
		}, {
			name : "Sure-Footed",
			description : "The goat has advantage on Strength and Dexterity saving throws made against effects that would knock it prone."
		}]
	},
	"hawk" : {
		name : "Hawk",
		source : [["SRD", 382], ["M", 330]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 13,
		hp : 1,
		hd : [1, 4],
		speed : "10 ft, fly 60 ft",
		scores : [5, 16, 8, 2, 14, 6],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "Adv. on Wis (Perception) checks using sight",
		passivePerception : 14,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Talons",
			ability : 2,
			damage : [1, "", "slashing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Keen Sight",
			description : "The hawk has advantage on Wisdom (Perception) checks that rely on sight."
		}]
	},
	"hunter shark" : {
		name : "Hunter Shark",
		source : [["SRD", 382], ["M", 330]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 45,
		hd : [6, 10],
		speed : "swim 40 ft",
		scores : [18, 13, 15, 1, 10, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2
		},
		senses : "Darkvision 30 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [2, 8, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Blood Frenzy",
			description : "The shark has advantage on melee attack rolls against any creature that doesn't have all its HP."
		}, {
			name : "Water Breathing",
			description : "The shark can breathe only underwater."
		}]
	},
	"hyena" : {
		name : "Hyena",
		source : [["SRD", 382], ["M", 331]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 5,
		hd : [1, 8],
		speed : "50 ft",
		scores : [11, 13, 12, 2, 12, 5],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Pack Tactics",
			description : "The hyena has advantage on an attack roll against a creature if at least one of the hyena's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"jackal" : {
		name : "Jackal",
		source : [["SRD", 382], ["M", 331]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 3,
		hd : [1, 6],
		speed : "40 ft",
		scores : [8, 15, 11, 3, 12, 6],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The jackal has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}, {
			name : "Pack Tactics",
			description : "The jackal has advantage on an attack roll against a creature if at least one of the jackal's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"killer whale" : {
		name : "Killer Whale",
		source : [["SRD", 383], ["M", 331]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 90,
		hd : [12, 12],
		speed : "swim 60 ft",
		scores : [19, 10, 13, 3, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Blindsight 120 ft; Adv. on Wis (Perception) checks using hearing",
		passivePerception : 13,
		languages : "",
		challengeRating : "3",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [5, 6, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Echolocation",
			description : "The whale can't use its Blindsight while deafened."
		}, {
			name : "Hold Breath",
			description : "The whale can hold its breath for 30 minutes."
		}, {
			name : "Keen Hearing",
			description : "The whale has advantage on Wisdom (Perception) checks that rely on hearing."
		}]
	},
	"lion" : {
		name : "Lion",
		source : [["SRD", 383], ["M", 331]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 26,
		hd : [4, 10],
		speed : "50 ft",
		scores : [17, 15, 13, 3, 12, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 6
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Pounce trait"
		}, {
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "Can be used in combination with claw while pouncing (see Pounce trait)"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The lion has advantage on Wisdom (Perception) checks that rely on smell."
		}, {
			name : "Pack Tactics",
			description : "The lion has advantage on an attack roll against a creature if at least one of the lion's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}, {
			name : "Pounce",
			description : "If the lion moves at least 20 ft straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the lion can make one bite attack against it as a bonus action."
		}, {
			name : "Running Leap",
			description : "With a 10-foot running start, the lion can long jump up to 25 ft."
		}],
		wildshapeString : "Keen Smell: advantage on Wis (Perception) checks that rely on smell| Pack Tactics: advantage on attack rolls if at least one capable ally is within 5 ft of the target| Pounce: if target is hit with a claw attack after the lion moved at least 20 ft straight on the same turn, DC 13 Str save or knocked prone and the lion can make one bite attack against it as a bonus action| Running Leap: long jump up to 25 ft with a 10-foot running start"
	},
	"lizard" : {
		name : "Lizard",
		source : [["SRD", 383], ["M", 332]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 10,
		hp : 2,
		hd : [1, 4],
		speed : "20 ft, climb 20 ft",
		scores : [2, 11, 10, 1, 8, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : [-2, "", false]
		}]
	},
	"mammoth" : {
		name : "Mammoth",
		source : [["SRD", 384], ["M", 332]],
		size : 1, //Huge
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 13,
		hp : 126,
		hd : [11, 12],
		speed : "40 ft",
		scores : [24, 9, 21, 3, 11, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "6",
		proficiencyBonus : 3,
		attacksAction : 1,
		attacks : [{
			name : "Gore",
			ability : 1,
			damage : [4, 8, "bludgeoning"],
			range : "Melee (10 ft)",
			description : "If used after moving 20 ft straight in the same round, see Trampling Charge trait"
		}, {
			name : "Stomp",
			ability : 1,
			damage : [4, 10, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Can only be used on prone creatures (also see Trampling Charge trait)"
		}],
		traits : [{
			name : "Trampling Charge",
			description : "If the mammoth moves at least 20 ft straight toward a creature and then hits it with a gore attack on the same turn, that target must succeed on a DC 18 Strength saving throw or be knocked prone. If the target is prone, the mammoth can make one stomp attack against it as a bonus action."
		}]
	},
	"mastiff" : {
		name : "Mastiff",
		source : [["SRD", 384], ["M", 332]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "mount",
		alignment : "Unaligned",
		ac : 12,
		hp : 5,
		hd : [1, 8],
		speed : "40 ft",
		scores : [13, 14, 12, 3, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 11 Strength saving throw or be knocked prone"
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The mastiff has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}]
	},
	"mule" : {
		name : "Mule",
		source : [["SRD", 384], ["M", 333]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 10,
		hp : 11,
		hd : [2, 8],
		speed : "40 ft",
		scores : [14, 10, 13, 2, 10, 5],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [1, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Beast of Burden",
			description : "The mule is considered to be a Large animal for the purpose of determining its carrying capacity."
		}, {
			name : "Sure-Footed",
			description : "The mule has advantage on Strength and Dexterity saving throws made against effects that would knock it prone."
		}]
	},
	"octopus" : {
		name : "Octopus",
		source : [["SRD", 384], ["M", 333]],
		size : 4, //Small
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 12,
		hp : 3,
		hd : [1, 6],
		speed : "5 ft, swim 30 ft",
		scores : [4, 15, 11, 3, 10, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2,
			"stealth" : 4
		},
		senses : "Darkvision 30 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Tentacles",
			ability : 2,
			damage : [1, "", "bludgeoning"],
			range : "Melee (5 ft)",
			description : "Target is grappled (escape DC 10); Can't use tentacles again until grapple ends",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Hold Breath",
			description : "While out of water, the octopus can hold its breath for 30 minutes."
		}, {
			name : "Underwater Camouflage",
			description : "The octopus has advantage on Dexterity (Stealth) checks made while underwater."
		}, {
			name : "Water Breathing",
			description : "The octopus can breathe only underwater."
		}],
		wildshapeString : "Darkvision 30 ft| Water Breathing: can breathe only underwater| Hold Breath: can hold its breath for 30 minutes out of water| Underwater Camouflage: advantage on Dex (Stealth) checks while underwater| Ink Cloud (Recharges after a Short or Long Rest): if underwater, 5-ft radius cloud of ink around octopus, heavily obscures for 1 minute, can be dispersed. After releasing, can use the Dash action as a bonus action"
	},
	"owl" : {
		name : "Owl",
		source : [["SRD", 385], ["M", 333]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 11,
		hp : 1,
		hd : [1, 4],
		speed : "5 ft, fly 60 ft",
		scores : [3, 13, 8, 2, 12, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 3
		},
		senses : "Darkvision 120 ft; Adv. on Wis (Perception) checks using hearing/sight",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Talons",
			ability : 2,
			damage : [1, "", "slashing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Flyby",
			description : "The owl doesn't provoke opportunity attacks when it flies out of an enemy's reach."
		}, {
			name : "Keen Hearing and Sight",
			description : "The owl has advantage on Wisdom (Perception) checks that rely on hearing or sight."
		}]
	},
	"panther" : {
		name : "Panther",
		source : [["SRD", 385], ["M", 333]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 12,
		hp : 13,
		hd : [3, 8],
		speed : "50 ft, climb 40 ft",
		scores : [14, 15, 10, 3, 14, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4,
			"stealth" : 6
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 14,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, 4, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Pounce trait"
		}, {
			name : "Bite",
			ability : 1,
			damage : [1, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Can be used in combination with claw while pouncing (see Pounce trait)"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The panther has advantage on Wisdom (Perception) checks that rely on smell."
		}, {
			name : "Pounce",
			description : "If the panther moves at least 20 ft straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 12 Strength saving throw or be knocked prone. If the target is prone, the panther can make one bite attack against it as a bonus action."
		}]
	},
	"poisonous snake" : {
		name : "Poisonous Snake",
		source : [["SRD", 386], ["M", 334]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 13,
		hp : 2,
		hd : [1, 4],
		speed : "30 ft, swim 30 ft",
		scores : [2, 16, 11, 1, 10, 3],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 10 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 2d4 poison damage, half on a DC 10 Constitution saving throw",
			modifiers : ["", "", false]
		}]
	},
	"polar bear" : {
		name : "Polar Bear",
		source : [["SRD", 386], ["M", 334]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 42,
		hd : [5, 10],
		speed : "40 ft, swim 30 ft",
		scores : [20, 10, 16, 2, 13, 7],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 2,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : "One bite and one claw attack as an Attack action"
		}, {
			name : "Claw",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "One claw and one bite attack as an Attack action"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The bear has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"pony" : {
		name : "Pony",
		source : [["SRD", 386], ["M", 335]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "mount",
		alignment : "Unaligned",
		ac : 10,
		hp : 11,
		hd : [2, 8],
		speed : "40 ft",
		scores : [15, 10, 13, 2, 11, 7],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"quipper" : {
		name : "Quipper",
		source : [["SRD", 387], ["M", 335]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 13,
		hp : 1,
		hd : [1, 4],
		speed : "swim 40 ft",
		scores : [2, 16, 9, 1, 7, 2],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 60 ft",
		passivePerception : 8,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Blood Frenzy",
			description : "The quipper has advantage on melee attack rolls against any creature that doesn't have all its HP."
		}, {
			name : "Water Breathing",
			description : "The quipper can breathe only underwater."
		}]
	},
	"rat" : {
		name : "Rat",
		source : [["SRD", 387], ["M", 335]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 10,
		hp : 1,
		hd : [1, 4],
		speed : "20 ft",
		scores : [2, 11, 9, 2, 10, 4],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 30 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 10,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : [-2, "", false]
		}],
		traits : [{
			name : "Keen Smell",
			description : "The rat has advantage on Wisdom (Perception) checks that rely on smell."
		}]
	},
	"raven" : {
		name : "Raven",
		source : [["SRD", 387], ["M", 335]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 12,
		hp : 1,
		hd : [1, 4],
		speed : "10 ft, fly 50 ft",
		scores : [2, 14, 8, 2, 12, 6],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Beak",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Mimicry",
			description : "The raven can mimic simple sounds it has heard, such as a person whispering, a baby crying, or an animal chittering. A creature that hears the sounds can tell they are imitations with a successful DC 10 Wisdom (Insight) check."
		}]
	},
	"reef shark" : {
		name : "Reef Shark",
		source : [["SRD", 387], ["M", 336]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 22,
		hd : [4, 8],
		speed : "swim 40 ft",
		scores : [14, 13, 13, 1, 10, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 2
		},
		senses : "Blindsight 30 ft",
		passivePerception : 12,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [1, 8, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Pack Tactics",
			description : "The shark has advantage on an attack roll against a creature if at least one of the shark's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}, {
			name : "Water Breathing",
			description : "The shark can breathe only underwater."
		}]
	},
	"rhinoceros" : {
		name : "Rhinoceros",
		source : [["SRD", 388], ["M", 336]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "steed",
		alignment : "Unaligned",
		ac : 11,
		hp : 45,
		hd : [6, 10],
		speed : "40 ft",
		scores : [21, 8, 15, 2, 12, 6],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 11,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Gore",
			ability : 1,
			damage : [2, 8, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Charge trait"
		}],
		traits : [{
			name : "Charge",
			description : "If the rhinoceros moves at least 20 ft straight toward a target and then hits it with a gore attack on the same turn, the target takes an extra 9 (2d8) bludgeoning damage. If the target is a creature, it must succeed on a DC 15 Strength saving throw or be knocked prone."
		}]
	},
	"horse" : { // "Riding Horse" entry, so that both "horse" and "riding horse" match this creature
		name : "Riding Horse",
		source : [["SRD", 388], ["M", 336]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 10,
		hp : 13,
		hd : [2, 10],
		speed : "60 ft",
		scores : [16, 10, 12, 2, 11, 7],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 4, "bludgeoning"],
			range : "Melee (5 ft)",
			description : ""
		}]
	},
	"saber-toothed tiger" : {
		name : "Saber-Toothed Tiger",
		source : [["SRD", 388], ["M", 336]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "steed",
		alignment : "Unaligned",
		ac : 12,
		hp : 52,
		hd : [7, 10],
		speed : "40 ft",
		scores : [18, 14, 15, 3, 12, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 6
		},
		senses : "Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [2, 6, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Pounce trait",
			modifiers : ["", 1, ""]
		}, {
			name : "Bite",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "Can be used in combination with claw while pouncing (see Pounce trait)",
			modifiers : ["", 1, ""]
		}],
		traits : [{
			name : "Keen Smell",
			description : "The tiger has advantage on Wisdom (Perception) checks that rely on smell."
		}, {
			name : "Pounce",
			description : "If the tiger moves at least 20 ft straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action."
		}]
	},
	"scorpion" : {
		name : "Scorpion",
		source : [["SRD", 388], ["M", 337]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 11,
		hp : 1,
		hd : [1, 4],
		speed : "10 ft",
		scores : [2, 11, 8, 1, 8, 2],
		saves : ["", "", "", "", "", ""],
		senses : "Blindsight 10 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Sting",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 1d8 poison damage, half on a DC 9 Constitution saving throw"
		}]
	},
	"sea horse" : {
		name : "Sea Horse",
		source : [["SRD", 389], ["M", 337]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 11,
		hp : 1,
		hd : [1, 4],
		speed : "swim 20 ft",
		scores : [1, 12, 8, 1, 10, 2],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 10,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [],
		traits : [{
			name : "Water Breathing",
			description : "The sea horse can breathe only underwater."
		}]
	},
	"spider" : {
		name : "Spider",
		source : [["SRD", 389], ["M", 337]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 12,
		hp : 1,
		hd : [1, 4],
		speed : "20 ft, climb 20 ft",
		scores : [2, 14, 8, 1, 10, 2],
		saves : ["", "", "", "", "", ""],
		skills : {
			"stealth" : 4
		},
		senses : "Darkvision 30 ft",
		passivePerception : 10,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "Target also takes 1d4 poison damage, half on a DC 9 Constitution saving throw",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Spider Climb",
			description : "The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check."
		}, {
			name : "Web Sense",
			description : "While in contact with a web, the spider knows the exact location of any other creature in contact with the same web."
		}, {
			name : "Web Walker",
			description : "The spider ignores movement restrictions caused by webbing."
		}],
		wildshapeString : "\u25C6 Senses: Darkvision 30 ft | \u25C6 Spider Climb: The spider can climb difficult surfaces, including upside down on ceilings, without needing to make an ability check.\n\u25C6 Web Sense: While in contact with a web, the spider knows the exact location of any other creature in contact with the same web.\n\u25C6 Web Walker: The spider ignores movement restrictions caused by webbing."
	},
	"stirge" : {
		name : "Stirge",
		source : [["SRD", 349], ["M", 284]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 14,
		hp : 2,
		hd : [1, 4],
		speed : "10 ft, fly 40 ft",
		scores : [4, 16, 11, 2, 8, 6],
		saves : ["", "", "", "", "", ""],
		senses : "Darkvision 60 ft",
		passivePerception : 9,
		languages : "",
		challengeRating : "1/8",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Blood Drain",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "The stirge attaches itself to the target, see Blood Drain trait"
		}],
		traits : [{
			name : "Blood Drain",
			description : "While attached, the stirge doesn't attack. Instead, at the start of each of the stirge's turns, the target loses 5 (1d4 + 3) HP due to blood loss. The stirge can detach itself by spending 5 feet of its movement. It does so after it drains 10 HP of blood from the target or the target dies. A creature, including the target, can use its action to detach the stirge."
		}]
	},
	"tiger" : {
		name : "Tiger",
		source : [["SRD", 391], ["M", 339]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 12,
		hp : 37,
		hd : [5, 10],
		speed : "40 ft",
		scores : [17, 15, 14, 3, 12, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 6
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Claw",
			ability : 1,
			damage : [1, 8, "slashing"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Pounce trait"
		}, {
			name : "Bite",
			ability : 1,
			damage : [1, 10, "piercing"],
			range : "Melee (5 ft)",
			description : "Can be used in combination with claw while pouncing (see Pounce trait)"
		}],
		traits : [{
			name : "Keen Smell",
			description : "The tiger has advantage on Wisdom (Perception) checks that rely on smell."
		}, {
			name : "Pounce",
			description : "If the tiger moves at least 20 ft straight toward a creature and then hits it with a claw attack on the same turn, that target must succeed on a DC 13 Strength saving throw or be knocked prone. If the target is prone, the tiger can make one bite attack against it as a bonus action."
		}]
	},
	"vulture" : {
		name : "Vulture",
		source : [["SRD", 392], ["M", 339]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		alignment : "Unaligned",
		ac : 10,
		hp : 5,
		hd : [1, 8],
		speed : "10 ft, fly 50 ft",
		scores : [7, 10, 13, 2, 12, 4],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3
		},
		senses : "Adv. on Wis (Perception) checks using sight/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Beak",
			ability : 2,
			damage : [1, 4, "piercing"],
			range : "Melee (5 ft)",
			description : ""
		}],
		traits : [{
			name : "Keen Sight and Smell",
			description : "The vulture has advantage on Wisdom (Perception) checks that rely on sight or smell."
		}, {
			name : "Pack Tactics",
			description : "The vulture has advantage on an attack roll against a creature if at least one of the vulture's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"warhorse" : {
		name : "Warhorse",
		source : [["SRD", 392], ["M", 340]],
		size : 2, //Large
		type : "Beast",
		subtype : "",
		companion : "mount",
		alignment : "Unaligned",
		ac : 11,
		hp : 19,
		hd : [3, 10],
		speed : "60 ft",
		scores : [18, 12, 13, 2, 12, 7],
		saves : ["", "", "", "", "", ""],
		senses : "",
		passivePerception : 11,
		languages : "",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Hooves",
			ability : 1,
			damage : [2, 6, "bludgeoning"],
			range : "Melee (5 ft)",
			description : "If used after moving 20 ft straight in the same round, see Trampling Charge trait"
		}],
		traits : [{
			name : "Trampling Charge",
			description : "If the horse moves at least 20 ft straight toward a creature and then hits it with a hooves attack on the same turn, that target must succeed on a DC 14 Strength saving throw or be knocked prone. If the target is prone, the horse can make another attack with its hooves against it as a bonus action."
		}]
	},
	"weasel" : {
		name : "Weasel",
		source : [["SRD", 392], ["M", 340]],
		size : 5, //Tiny
		type : "Beast",
		subtype : "",
		companion : "familiar",
		alignment : "Unaligned",
		ac : 13,
		hp : 1,
		hd : [1, 4],
		speed : "30 ft",
		scores : [3, 16, 8, 2, 12, 3],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 5
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "0",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [1, "", "piercing"],
			range : "Melee (5 ft)",
			description : "",
			modifiers : ["", "", false]
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The weasel has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}]
	},
	"wolf" : {
		name : "Wolf",
		source : [["SRD", 393], ["M", 341]],
		size : 3, //Medium
		type : "Beast",
		subtype : "",
		companion : "companion",
		alignment : "Unaligned",
		ac : 13,
		hp : 11,
		hd : [2, 8],
		speed : "40 ft",
		scores : [12, 15, 12, 3, 12, 6],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 3,
			"stealth" : 4
		},
		senses : "Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 13,
		languages : "",
		challengeRating : "1/4",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 2,
			damage : [2, 4, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 11 Strength saving throw or be knocked prone"
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The wolf has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}, {
			name : "Pack Tactics",
			description : "The wolf has advantage on an attack roll against a creature if at least one of the wolf's allies is within 5 ft of the creature and the ally isn't incapacitated."
		}]
	},
	"worg" : {
		name : "Worg",
		source : [["SRD", 393], ["M", 341]],
		size : 2, //Large
		type : "Monstrosity",
		subtype : "",
		alignment : "Neutral Evil",
		ac : 13,
		hp : 26,
		hd : [4, 10],
		speed : "50 ft",
		scores : [16, 13, 13, 7, 11, 8],
		saves : ["", "", "", "", "", ""],
		skills : {
			"perception" : 4
		},
		senses : "Darkvision 60 ft; Adv. on Wis (Perception) checks using hearing/smell",
		passivePerception : 14,
		languages : "Goblin, Worg",
		challengeRating : "1/2",
		proficiencyBonus : 2,
		attacksAction : 1,
		attacks : [{
			name : "Bite",
			ability : 1,
			damage : [2, 6, "piercing"],
			range : "Melee (5 ft)",
			description : "Target must succeed on a DC 13 Strength saving throw or be knocked prone"
		}],
		traits : [{
			name : "Keen Hearing and Smell",
			description : "The worg has advantage on Wisdom (Perception) checks that rely on hearing or smell."
		}]
	}
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Feats (FeatsList)
 **/
var FeatsList = {
	"grappler" : {
		name : "Grappler",
		source : [["SRD", 75], ["P", 167]],
		description : "I have advantage on attack rolls against a creature I am grappling. As an action, I can try to pin a creature grappled by me. If I succeed on a grapple check, both the creature and I are restrained until the grapple ends.",
		descriptionFull : "You've developed the skills necessary to hold your own in close-quarters grappling. You gain the following benefits:\n \u2022 You have advantage on attack rolls against a creature you are grappling.\n \u2022 You can use your action to try to pin a creature grappled by you. To do so, make another grapple check. If you succeed, you and the creature are both restrained until the grapple ends.",
		prerequisite : "Strength 13 or higher",
		prereqeval : function(v) { return What('Str') >= 13; },
		action : ["action", "Pin Grappled"]
	}
};
/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Armor (ArmourList)
 *  - Weapon (WeaponsList)
 *  - Ammo (AmmoList) 
 *  - Packs (PacksList)
 *  - Gear (GearList)
 *  - Tools (ToolsList)
 **/
var ArmourList = {
	"unarmored" : {
		regExpSearch : /(unarmou?red|naked|nothing|bare|no.?armou?r)/i,
		name : "Unarmored",
		source : [["SRD", 62], ["P", 14]],
		ac : 10,
		addMod : true,
		list : "firstlist"
	},
	"mage armor" : {
		regExpSearch : /^(?=.*(mage|magic))(?=.*armou?r).*$/i,
		name : "Mage armor",
		source : [["SRD", 160], ["P", 256]],
		ac : 13,
		list : "magic"
	},
	"padded" : {
		regExpSearch : /^(?!.*(plate|hide))(?=.*(padding|padded)).*$/i,
		name : "Padded",
		source : [["SRD", 63], ["P", 145]],
		type : "light",
		ac : 11,
		stealthdis : true,
		weight : 8,
		strReq : 0,
		invName : "Padded armor"
	},
	"leather" : {
		regExpSearch : /^(?!.*(padding|padded|studded|studs))(?=.*leather).*$/i,
		name : "Leather",
		source : [["SRD", 63], ["P", 145]],
		type : "light",
		ac : 11,
		weight : 10,
		invName : "Leather armor"
	},
	"studded leather" : {
		regExpSearch : /^(?=.*(studded|studs))(?=.*leather).*$/i,
		name : "Studded Leather",
		source : [["SRD", 63], ["P", 145]],
		type : "light",
		ac : 12,
		weight : 13,
		invName : "Studded leather armor"
	},
	"hide" : {
		regExpSearch : /^(?!.*(dragon|draconic))(?=.*(hide|skin)).*$/i,
		name : "Hide",
		source : [["SRD", 63], ["P", 145]],
		type : "medium",
		ac : 12,
		weight : 12,
		invName : "Hide armor"
	},
	"chain shirt" : {
		regExpSearch : /^(?=.*chain)(?=.*shirt).*$/i,
		name : "Chain shirt",
		source : [["SRD", 63], ["P", 145]],
		type : "medium",
		ac : 13,
		weight : 20
	},
	"scale mail" : {
		regExpSearch : /^(?=.*scale)(?=.*mail).*$/i,
		name : "Scale mail",
		source : [["SRD", 63], ["P", 145]],
		type : "medium",
		ac : 14,
		stealthdis : true,
		weight : 45
	},
	"breastplate" : {
		regExpSearch : /^(?=.*breast)(?=.*plate).*$/i,
		name : "Breastplate",
		source : [["SRD", 63], ["P", 145]],
		type : "medium",
		ac : 14,
		weight : 20
	},
	"half plate" : {
		regExpSearch : /^(?=.*half)(?=.*plate).*$/i,
		name : "Half plate",
		source : [["SRD", 63], ["P", 145]],
		type : "medium",
		ac : 15,
		stealthdis : true,
		weight : 40
	},
	"ring mail" : {
		regExpSearch : /^(?=.*ring)(?=.*mail).*$/i,
		name : "Ring mail",
		source : [["SRD", 63], ["P", 145]],
		type : "heavy",
		ac : 14,
		stealthdis : true,
		weight : 40
	},
	"chain mail" : {
		regExpSearch : /^(?!.*(scale|plate|ring|shirt))(?=.*chain)(?=.*mail).*$/i,
		name : "Chain mail",
		source : [["SRD", 63], ["P", 145]],
		type : "heavy",
		ac : 16,
		stealthdis : true,
		weight : 55,
		strReq : 13
	},
	"splint" : {
		regExpSearch : /splint/i,
		name : "Splint",
		source : [["SRD", 63], ["P", 145]],
		type : "heavy",
		ac : 17,
		stealthdis : true,
		weight : 60,
		strReq : 15,
		invName : "Splint armor"
	},
	"plate" : {
		regExpSearch : /^(?!.*(half|breast))(?=.*plate).*$/i,
		name : "Plate",
		source : [["SRD", 63], ["P", 145]],
		type : "heavy",
		ac : 18,
		stealthdis : true,
		weight : 65,
		strReq : 15,
		invName : "Plate armor"
	}
};

var WeaponsList = {
	// Basic weapons
	"unarmed strike" : {
		regExpSearch : /\b(fists?|arms?|legs?|foot|feet|claws?|talons?)\b|^(?=.*unarmed)(?=.*strike).*$|^(?=.*martial)(?=.*arts).*$|^(?=.*tavern)(?=.*brawler).*$/i,
		name : "Unarmed strike",
		source : [["SRD", 66], ["P", 149]],
		ability : 1,
		type : "Natural",
		damage : [1, "", "bludgeoning"],
		range : "Melee",
		description : "",
		monkweapon : true,
		abilitytodamage : true
	},
	"club" : {
		regExpSearch : /^(?!.*(great|heavy|big))(?=.*\b(club|bian|tonfa)s?\b).*$/i,
		name : "Club",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 4, "bludgeoning"],
		range : "Melee",
		weight : 2,
		description : "Light",
		abilitytodamage : true,
		monkweapon : true
	},
	"dagger" : {
		regExpSearch : /dagger|bishou|\btamos?\b|kozuka|\btantos?\b/i,
		name : "Dagger",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 4, "piercing"],
		range : "Melee, 20/60 ft",
		weight : 1,
		description : "Finesse, light, thrown",
		abilitytodamage : true,
		monkweapon : true
	},
	"greatclub" : {
		regExpSearch : /^(?=.*(great|heavy|big|weida))(?=.*(club|bian|tonfa)s?\b).*$|tetsubo/i,
		name : "Greatclub",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 8, "bludgeoning"],
		range : "Melee",
		weight : 10,
		description : "Two-handed",
		abilitytodamage : true
	},
	"handaxe" : {
		regExpSearch : /^(?=.*(light|hand|short|small|throw))(?=.*(axe|\bfu)s?\b).*$|\bonos?\b/i,
		name : "Handaxe",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 6, "slashing"],
		range : "Melee, 20/60 ft",
		weight : 2,
		description : "Light, thrown",
		abilitytodamage : true,
		monkweapon : true
	},
	"javelin" : {
		regExpSearch : /javelin|\bmaus?\b|uchi-ne/i,
		name : "Javelin",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 6, "piercing"],
		range : "Melee, 30/120 ft",
		weight : 2,
		description : "Thrown",
		abilitytodamage : true,
		monkweapon : true
	},
	"light hammer" : {
		regExpSearch : /^(?=.*(light|hand|short|small|throw))(?=.*hammer).*$/i,
		name : "Light hammer",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 4, "bludgeoning"],
		range : "Melee, 20/60 ft",
		weight : 2,
		description : "Light, thrown",
		abilitytodamage : true,
		monkweapon : true
	},
	"mace" : {
		regExpSearch : /maces?\b|\bchuis?\b|kanabo/i,
		name : "Mace",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 6, "bludgeoning"],
		range : "Melee",
		weight : 4,
		description : "",
		monkweapon : true,
		abilitytodamage : true
	},
	"quarterstaff" : {
		regExpSearch : /quarterstaff|\bstaffs?\b|\bbos?\b|^gun(.?(\+|-)\d+)?$/i,
		name : "Quarterstaff",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 6, "bludgeoning"],
		range : "Melee",
		weight : 4,
		description : "Versatile (1d8)",
		monkweapon : true,
		abilitytodamage : true
	},
	"sickle" : {
		regExpSearch : /sickle|\bkamas?\b/i,
		name : "Sickle",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 4, "slashing"],
		range : "Melee",
		weight : 2,
		description : "Light",
		monkweapon : true,
		abilitytodamage : true
	},
	"spear" : {
		regExpSearch : /^(?!.*agonizing)(?!.*eldritch)(?=.*(spear|qiang|\byaris?\b)).*$/i,
		name : "Spear",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Simple",
		damage : [1, 6, "piercing"],
		range : "Melee, 20/60 ft",
		weight : 3,
		description : "Thrown, versatile (1d8)",
		monkweapon : true,
		abilitytodamage : true
	},
	"light crossbow" : {
		regExpSearch : /^(((?=.*light)(?=.*crossbow))|((?!.*(hand|short|great|heavy|bolt))(?=.*\bcrossbows?\b))).*$/i,
		name : "Light crossbow",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Simple",
		damage : [1, 8, "piercing"],
		range : "80/320 ft",
		weight : 5,
		description : "Ammunition, loading, two-handed",
		abilitytodamage : true,
		ammo : "bolt"
	},
	"dart" : {
		regExpSearch : /dart|shuriken/i,
		name : "Dart",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Simple",
		damage : [1, 4, "piercing"],
		range : "20/60 ft",
		weight : 0.25,
		description : "Finesse, thrown",
		abilitytodamage : true
	},
	"shortbow" : {
		regExpSearch : /^(?!.*crossbow)(((?=.*short)(?=.*bow))|((?!.*(moon|long))(?=.*\bbows?\b))).*$|hankyus?/i,
		name : "Shortbow",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Simple",
		damage : [1, 6, "piercing"],
		range : "80/320 ft",
		weight : 2,
		description : "Ammunition, two-handed",
		abilitytodamage : true,
		ammo : "arrow"
	},
	"sling" : {
		regExpSearch : /sling/i,
		name : "Sling",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Simple",
		damage : [1, 4, "bludgeoning"],
		range : "30/120 ft",
		weight : 0.001,
		description : "Ammunition",
		abilitytodamage : true,
		ammo : "bullet"
	},
	"battleaxe" : {
		regExpSearch : /^(((?=.*battle)(?=.*(axe|\bono|\bfu)s?\b))|((?!.*(light|hand|short|small|great|heavy|throw))(?=.*\b(axe|fu|masakari)s?\b))).*$/i,
		name : "Battleaxe",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "slashing"],
		range : "Melee",
		weight : 4,
		description : "Versatile (1d10)",
		abilitytodamage : true
	},
	"flail" : {
		regExpSearch : /flail|nunchaku/i,
		name : "Flail",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "bludgeoning"],
		range : "Melee",
		weight : 2,
		description : "",
		abilitytodamage : true
	},
	"glaive" : {
		regExpSearch : /glaive|guandao|bisento|naginata/i,
		name : "Glaive",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 10, "slashing"],
		range : "Melee",
		weight : 6,
		description : "Heavy, reach, two-handed",
		abilitytodamage : true
	},
	"greataxe" : {
		regExpSearch : /^(?=.*(great|heavy|weida))(?=.*(axe|\bono|\bfu|masakari)s?\b).*$/i,
		name : "Greataxe",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 12, "slashing"],
		range : "Melee",
		weight : 7,
		description : "Heavy, two-handed",
		abilitytodamage : true
	},
	"greatsword" : {
		regExpSearch : /^(?=.*(great|heavy))(?=.*sword).*$|changdao|nodachi/i,
		name : "Greatsword",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [2, 6, "slashing"],
		range : "Melee",
		weight : 6,
		description : "Heavy, two-handed",
		abilitytodamage : true
	},
	"halberd" : {
		regExpSearch : /halberd|\bjis?\b|kamayari/i,
		name : "Halberd",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 10, "slashing"],
		range : "Melee",
		weight : 6,
		description : "Heavy, reach, two-handed",
		abilitytodamage : true
	},
	"lance" : {
		regExpSearch : /lance|umayari/i,
		name : "Lance",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 12, "piercing"],
		range : "Melee",
		weight : 6,
		description : "Reach, disadvantage to attack within 5 ft, two-handed when not mounted",
		abilitytodamage : true
	},
	"longsword" : {
		regExpSearch : /katana|\bjians?\b|^(((?=.*long)(?=.*sword))|((?!.*(burst|light|hand|short|small|great|heavy))(?=.*\bswords?\b))).*$/i,
		name : "Longsword",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "slashing"],
		range : "Melee",
		weight : 3,
		description : "Versatile (1d10)",
		abilitytodamage : true
	},
	"maul" : {
		regExpSearch : /^((?=.*maul)|((?=.*(great|heavy))(?=.*hammer))).*$/i,
		name : "Maul",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [2, 6, "bludgeoning"],
		range : "Melee",
		weight : 10,
		description : "Heavy, two-handed",
		abilitytodamage : true
	},
	"morningstar" : {
		regExpSearch : /morningstar/i,
		name : "Morningstar",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "piercing"],
		range : "Melee",
		weight : 4,
		description : "",
		abilitytodamage : true
	},
	"pike" : {
		regExpSearch : /^(?!.*armou?r)(?!.*\bspike)(?=.*(pike|\bmaos?\b|nagaeyari)).*$/i,
		name : "Pike",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 10, "piercing"],
		range : "Melee",
		weight : 18,
		description : "Heavy, reach, two-handed",
		abilitytodamage : true
	},
	"rapier" : {
		regExpSearch : /rapier/i,
		name : "Rapier",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "piercing"],
		range : "Melee",
		weight : 2,
		description : "Finesse",
		abilitytodamage : true
	},
	"scimitar" : {
		regExpSearch : /scimitar|liuyedao|wakizashi/i,
		name : "Scimitar",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 6, "slashing"],
		range : "Melee",
		weight : 3,
		description : "Finesse, light",
		abilitytodamage : true
	},
	"shortsword" : {
		regExpSearch : /^(?=.*short)(?=.*sword).*$|shuangdao/i,
		name : "Shortsword",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 6, "piercing"],
		range : "Melee",
		weight : 2,
		description : "Finesse, light",
		abilitytodamage : true,
		monkweapon : true
	},
	"trident" : {
		regExpSearch : /trident|\bchas?\b|magariyari/i,
		name : "Trident",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 6, "piercing"],
		range : "Melee, 20/60 ft",
		weight : 4,
		description : "Thrown, versatile (1d8)",
		abilitytodamage : true
	},
	"war pick" : {
		regExpSearch : /^(((?=.*pick)(?=.*war))|((?!.*(heavy|great|light))(?=.*\bpicks?\b))).*$|\bkuwas?\b/i,
		name : "War pick",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "piercing"],
		range : "Melee",
		weight : 2,
		description : "",
		abilitytodamage : true
	},
	"warhammer" : {
		regExpSearch : /^(((?=.*hammer)(?=.*war))|((?!.*(light|hand|short|small|great|heavy|throw|maul))(?=.*\bhammers?\b))).*$/i,
		name : "Warhammer",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 8, "bludgeoning"],
		range : "Melee",
		weight : 2,
		description : "Versatile (1d10)",
		abilitytodamage : true
	},
	"whip" : {
		regExpSearch : /^(?!.*thorn)(?=.*whip).*$/i,
		name : "Whip",
		source : [["SRD", 66], ["P", 149]],
		list : "melee",
		ability : 1,
		type : "Martial",
		damage : [1, 4, "slashing"],
		range : "Melee",
		weight : 3,
		description : "Finesse, reach",
		abilitytodamage : true
	},
	"blowgun" : {
		regExpSearch : /blowgun/i,
		name : "Blowgun",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Martial",
		damage : [1, "", "piercing"],
		range : "25/100 ft",
		weight : 1,
		description : "Ammunition, loading",
		abilitytodamage : true,
		ammo : "needle"
	},
	"hand crossbow" : {
		regExpSearch : /^(?=.*hand)(?=.*crossbow).*$/i,
		name : "Hand crossbow",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Martial",
		damage : [1, 6, "piercing"],
		range : "30/120 ft",
		weight : 3,
		description : "Ammunition, light, loading",
		abilitytodamage : true,
		ammo : "bolt"
	},
	"heavy crossbow" : {
		regExpSearch : /^(?=.*(great|heavy))(?=.*crossbow).*$/i,
		name : "Heavy crossbow",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Martial",
		damage : [1, 10, "piercing"],
		range : "100/400 ft",
		weight : 18,
		description : "Ammunition, heavy, loading, two-handed",
		abilitytodamage : true,
		ammo : "bolt"
	},
	"longbow" : {
		regExpSearch : /^(?!.*crossbow)(?=.*long)(?=.*bow).*$|daikyu/i,
		name : "Longbow",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Martial",
		damage : [1, 8, "piercing"],
		range : "150/600 ft",
		weight : 2,
		description : "Ammunition, heavy, two-handed",
		abilitytodamage : true,
		ammo : "arrow"
	},
	"net" : {
		regExpSearch : /\bnet(ting)?s?\b/i,
		name : "Net",
		source : [["SRD", 66], ["P", 149]],
		list : "ranged",
		ability : 2,
		type : "Martial",
		damage : ["\u2015", "", "Restrained"],
		range : "5/15 ft",
		weight : 3,
		description : "Thrown, only 1 attack, up to large creature hit is restrained (PHB 148)",
		abilitytodamage : false
	},
	// Improvised Weapons
	"improvised weapon" : {
		regExpSearch : /improvised/i,
		name : "Improvised weapon",
		source : [["SRD", 65], ["P", 147]],
		ability : 1,
		type : "Improvised Weapons",
		damage : [1, 4, "bludgeoning"],
		range : "Melee, 20/60 ft",
		description : "Damage die, type, range, etc. are at the DM's discretion",
		abilitytodamage : true
	},
	"alchemist fire" : {
		regExpSearch : /^(?=.*alchemist)(?=.*fire).*$/i,
		name : "Alchemist's Fire",
		source : [["SRD", 66], ["P", 148]],
		list : "improvised",
		ability : 2,
		type : "Improvised Weapons",
		damage : [1, 4, "fire"],
		range : "20 ft",
		weight : 1,
		description : "Target +1d4 damage at the start of each of its turn; Can end it as an action with a DC 10 Dex check",
		abilitytodamage : false,
		ammo : "alchemist fire"
	},
	"vials of acid" : {
		regExpSearch : /^(?=.*vial)(?=.*acid).*$/i,
		name : "Vial of Acid",
		source : [["SRD", 66], ["P", 148]],
		list : "improvised",
		ability : 2,
		type : "Improvised Weapons",
		damage : [2, 6, "acid"],
		range : "20 ft",
		weight : 1,
		description : "",
		abilitytodamage : false,
		ammo : "vials of acid"
	},
	"holy water" : {
		regExpSearch : /^(?=.*holy)(?=.*water).*$/i,
		name : "Holy Water",
		source : [["SRD", 67], ["P", 151]],
		list : "improvised",
		ability : 2,
		type : "Improvised Weapons",
		damage : [2, 6, "radiant"],
		range : "20 ft",
		weight : 1,
		description : "Only does damage against fiends and undead; Comes in flasks",
		abilitytodamage : false,
		ammo : "holy water"
	},
	"burning torch" : {
		regExpSearch : /^(?=.*torch)(?=.*burning).*$/i,
		name : "Torch, Burning",
		source : [["SRD", 68], ["P", 153]],
		list : "improvised",
		ability : 1,
		type : "Improvised Weapons",
		damage : [1, "", "fire"],
		range : "Melee",
		weight : 1,
		description : "Only does damage while burning",
		abilitytodamage : false
	},
	// Cantrips
	"spell attack" : {
		regExpSearch : /^(?=.*spell)(?=.*attack).*$/i,
		name : "Spell attack",
		source : [["SRD", 103], ["P", 205]],
		ability : 0,
		type : "Spell",
		damage : ["", "", ""],
		range : "",
		description : "",
		abilitytodamage : false
	},
	"acid splash" : {
		regExpSearch : /^(?=.*acid)(?=.*splash).*$/i,
		name : "Acid Splash",
		source : [["SRD", 114], ["P", 211]],
		list : "spell",
		ability : 4,
		type : "Cantrip",
		damage : ["C", 6, "acid"],
		range : "60 ft",
		description : "Dex save, success - no damage; 1 or 2 creatures within 5 ft of each other (PHB 211)",
		abilitytodamage : false,
		dc : true
	},
	"chill touch" : {
		regExpSearch : /^(?=.*chill)(?=.*touch).*$/i,
		name : "Chill Touch",
		source : [["SRD", 124], ["P", 221]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 8, "necrotic"],
		range : "120 ft",
		description : "Target can't regain HP; Undead dis. on attacks vs. me until my next turn (PHB 221)",
		abilitytodamage : false
	},
	"eldritch blast" : {
		regExpSearch : /(agonizing|eldritch|repelling).(spear|blast)/i,
		name : "Eldritch Blast",
		source : [["SRD", 139], ["P", 237]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C\u00D7" + 1, 10, "force"],
		range : "120 ft",
		description : "Each d10 is a separate beam requiring separate rolls (PHB 237)",
		abilitytodamage : false
	},
	"fire bolt" : {
		regExpSearch : /^(?=.*fire)(?=.*bolt).*$/i,
		name : "Fire Bolt",
		source : [["SRD", 144], ["P", 241]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 10, "fire"],
		range : "120 ft",
		description : "Unattended flammable objects ignite (PHB 241)",
		abilitytodamage : false
	},
	"poison spray" : {
		regExpSearch : /^(?=.*poison)(?=.*spray).*$/i,
		name : "Poison Spray",
		source : [["SRD", 169], ["P", 266]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 12, "poison"],
		range : "10 ft",
		description : "Con save, success - no damage; 1 creature (PHB 266)",
		abilitytodamage : false,
		dc : true
	},
	"produce flame" : {
		regExpSearch : /^(?=.*produce)(?=.*flame).*$/i,
		name : "Produce Flame",
		source : [["SRD", 172], ["P", 269]],
		list : "spell",
		ability : 5,
		type : "Cantrip",
		damage : ["C", 8, "fire"],
		range : "30 ft",
		description : "10-ft radius bright light and 10-ft radius dim light until thrown (PHB 269)",
		abilitytodamage : false
	},
	"ray of frost" : {
		regExpSearch : /^(?=.*ray)(?=.*frost).*$/i,
		name : "Ray of Frost",
		source : [["SRD", 174], ["P", 271]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 8, "cold"],
		range : "60 ft",
		description : "Target -10 ft speed until start of my next turn (PHB 271)",
		abilitytodamage : false
	},
	"sacred flame" : {
		regExpSearch : /^(?=.*sacred)(?=.*flame).*$/i,
		name : "Sacred Flame",
		source : [["SRD", 176], ["P", 272]],
		list : "spell",
		ability : 5,
		type : "Cantrip",
		damage : ["C", 8, "radiant"],
		range : "60 ft",
		description : "Dex save, no bonus from cover, success - no damage; 1 creature (PHB 272)",
		abilitytodamage : false,
		dc : true
	},
	"shillelagh" : {
		baseWeapon : "quarterstaff",
		regExpSearch : /shillelagh/i,
		name : "Shillelagh",
		source : [["SRD", 179], ["P", 275]],
		list : "spell",
		ability : 5,
		type : "Simple",
		damage : [1, 8, "bludgeoning"],
		range : "Melee",
		description : "Imbued club or quarterstaff; Counts as a magical weapon (PHB 275)",
		monkweapon : true,
		abilitytodamage : true
	},
	"shocking grasp" : {
		regExpSearch : /^(?=.*shocking)(?=.*grasp).*$/i,
		name : "Shocking Grasp",
		source : [["SRD", 179], ["P", 275]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 8, "lightning"],
		range : "Melee",
		description : "Advantage if target is wearing metal armor, target cannot take reactions until its next turn (PHB 275)",
		abilitytodamage : false
	},
	"vicious mockery" : {
		regExpSearch : /^(?=.*vicious)(?=.*mockery).*$/i,
		name : "Vicious Mockery",
		source : [["SRD", 189], ["P", 285]],
		list : "spell",
		ability : 6,
		type : "Cantrip",
		damage : ["C", 4, "psychic"],
		range : "60 ft",
		description : "Wis save, success - no damage, fail - also disadv. on next attack roll in next turn; 1 creature (PHB 285)",
		abilitytodamage : false,
		dc : true
	}
};

//A list of all types of 'ammo' for the ammunition section on the first page
var AmmoList = {
	"arrow" : {
		name : "Arrows",
		source : [["SRD", 69], ["P", 150]],
		weight : 0.05,
		icon : "Arrows"
	},
	"bolt" : {
		name : "Bolts",
		weight : 0.075,
		source : [["SRD", 69], ["P", 150]],
		icon : "Arrows",
		invName : "Crossbow bolts"
	},
	"bullet" : {
		name : "Bullets",
		weight : 0.075,
		source : [["SRD", 69], ["P", 150]],
		icon : "Bullets",
		invName : "Sling bullets",
		alternatives : [/^(?=.*bullet)(?=.*sling).*$/i]
	},
	"dagger" : {
		name : "Daggers",
		source : [["SRD", 66], ["P", 149]],
		weight : 1,
		icon : "Daggers"
	},
	"dart" : {
		name : "Darts",
		source : [["SRD", 66], ["P", 149]],
		weight : 0.25,
		icon : "Arrows"
	},
	"flask" : {
		name : "Flasks (1 pint)",
		source : [["SRD", 69], ["P", 150]],
		weight : 1,
		icon : "Flasks"
	},
	"handaxe" : {
		name : "Handaxes",
		source : [["SRD", 66], ["P", 149]],
		weight : 2,
		icon : "Axes",
		alternatives : ["axe"]
	},
	"javelin" : {
		name : "Javelins",
		source : [["SRD", 66], ["P", 149]],
		weight : 2,
		icon : "Spears"
	},
	"light hammer" : {
		name : "Light Hammers",
		source : [["SRD", 66], ["P", 149]],
		weight : 2,
		icon : "Hammers",
		alternatives : ["hammer"]
	},
	"needle" : {
		name : "Needles",
		source : [["SRD", 66], ["P", 149]],
		weight : 0.02,
		icon : "Bullets",
		invName : "Blowgun needles"
	},
	"spear" : {
		name : "Spears",
		source : [["SRD", 66], ["P", 149]],
		weight : 3,
		icon : "Spears"
	},
	"trident" : {
		name : "Tridents",
		source : [["SRD", 66], ["P", 149]],
		weight : 4,
		icon : "Spears"
	},
	"vial" : {
		name : "Vials (4 ounces)",
		source : [["SRD", 69], ["P", 150]],
		weight : 0.25,
		icon : "Vials"
	},
	"alchemist fire" : {
		name : "Alchemist's Fire, flasks",
		source : [["SRD", 66], ["P", 148]],
		weight : 1,
		icon : "Flasks",
		invName : "Alchemist's fire, flasks of",
		alternatives : [/^(?=.*alchemist)(?=.*fire).*$/i]
	},
	"vials of acid" : {
		name : "Vials of Acid",
		source : [["SRD", 66], ["P", 148]],
		weight : 1,
		icon : "Vials",
		invName : "Acid, vials of",
		alternatives : [/^(?=.*acid)(?=.*vial).*$/i]
	},
	"holy water" : {
		name : "Holy Water, flasks",
		source : [["SRD", 67], ["P", 151]],
		weight : 1,
		icon : "Flasks",
		invName : "Holy Water, flasks of",
		alternatives : [/^(?=.*holy)(?=.*water).*$/i]
	}
};

var PacksList = {
	burglar : {
		name : "Burglar's pack (16 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Bag of 1000 ball bearings", 1, 2],
			["String, feet of", 10, ""],
			["Bell", "", ""],
			["Candles", 5, ""],
			["Crowbar", "", 5],
			["Hammer", "", 3],
			["Pitons", 10, .25],
			["Hooded lantern", "", 2],
			["Oil, flasks of", 2, 1],
			["Rations, days of", 5, 2],
			["Tinderbox", "", 1],
			["Waterskin", "", 5],
			["Hempen rope, feet of", 50, 0.2]
		]
	},
	diplomat : {
		name : "Diplomat's pack (39 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Chest, with:", "", 25],
			["Map or scroll case", 2, 1],
			["Fine clothes", "", 6],
			["Ink, 1 ounce bottle of", "", ""],
			["Ink pen", "", ""],
			["Lamp", "", 1],
			["Oil, flasks of", 2, 1],
			["Paper, sheets of", 5, ""],
			["Perfume, vial of", "", ""],
			["Sealing Wax", "", ""],
			["Soap", "", ""]
		]
	},
	dungeoneer : {
		name : "Dungeoneer's pack (12 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Crowbar", "", 5],
			["Hammer", "", 3],
			["Pitons", 10, .25],
			["Torches", 10, 1],
			["Tinderbox", "", 1],
			["Rations, days of", 10, 2],
			["Waterskin", "", 5],
			["Hempen rope, feet of", 50, 0.2]
		]
	},
	entertainer : {
		name : "Entertainer's pack (40 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Bedroll", "", 7],
			["Costumes", 2, 4],
			["Candles", 5, ""],
			["Rations, days of", 5, 2],
			["Waterskin", "", 5],
			["Disguise kit", "", 3]
		]
	},
	explorer : {
		name : "Explorer's pack (10 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Bedroll", "", 7],
			["Mess kit", "", 1],
			["Tinderbox", "", 1],
			["Torches", 10, 1],
			["Rations, days of", 10, 2],
			["Waterskin", "", 5],
			["Hempen rope, feet of", 50, 0.2]
		]
	},
	priest : {
		name : "Priest's pack (19 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Blanket", "", 3],
			["Candles", 10, ""],
			["Tinderbox", "", 1],
			["Alms box", "", 1],
			["Incense, blocks of", 2, ""],
			["Censer", "", 1],
			["Vestments", "", 4],
			["Rations, days of", 2, 2],
			["Waterskin", "", 5]
		]
	},
	scholar : {
		name : "Scholar's pack (40 gp)",
		source : [["SRD", 70], ["P", 151]],
		items : [
			["Backpack, with:", "", 5],
			["Book of lore", "", 5],
			["Ink, 1 ounce bottle of", "", ""],
			["Ink pen", "", ""],
			["Parchment, sheets of", 10, ""],
			["Little bag of sand", "", 1],
			["Small knife", "", 0.25]
		]
	}
};

var GearList = {
	"abacus" : {
		infoname : "Abacus [2 gp]",
		name : "Abacus",
		amount : "",
		weight : 2
	},
	"acid (vial)" : {
		infoname : "Acid (vial) [25 gp]",
		name : "Acid, vials of",
		amount : "",
		weight : 1
	},
	"alchemist's fire (flask)" : {
		infoname : "Alchemist's fire (flask) [50 gp]",
		name : "Alchemist's fire, flasks of",
		amount : "",
		weight : 1
	},
	"arrows (20)" : {
		infoname : "Arrows (20) [1 gp]",
		name : "Arrows",
		amount : 20,
		weight : 0.05,
		type : "ammunition"
	},
	"blowgun needles (50)" : {
		infoname : "Blowgun needles (50) [1 gp]",
		name : "Blowgun needles",
		amount : 50,
		weight : 0.02,
		type : "ammunition"
	},
	"crossbow bolts (20)" : {
		infoname : "Crossbow bolts (20) [1 gp]",
		name : "Crossbow bolts",
		amount : 20,
		weight : 0.075,
		type : "ammunition"
	},
	"sling bullets (20)" : {
		infoname : "Sling bullets (20) [4 cp]",
		name : "Sling bullets",
		amount : 20,
		weight : 0.075,
		type : "ammunition"
	},
	"antitoxin (vial)" : {
		infoname : "Antitoxin (vial) [50 gp]",
		name : "Antitoxin, vials of",
		amount : "",
		weight : ""
	},
	"crystal" : {
		infoname : "Crystal [10 gp]",
		name : "Crystal arcane focus",
		amount : "",
		weight : 1,
		type : "arcane focus"
	},
	"orb" : {
		infoname : "Orb [20 gp]",
		name : "Orb arcane focus",
		amount : "",
		weight : 3,
		type : "arcane focus"
	},
	"rod" : {
		infoname : "Rod [10 gp]",
		name : "Rod arcane focus",
		amount : "",
		weight : 2,
		type : "arcane focus"
	},
	"staff" : {
		infoname : "Staff [5 gp]",
		name : "Staff arcane focus",
		amount : "",
		weight : 4,
		type : "arcane focus"
	},
	"wand" : {
		infoname : "Wand [10 gp]",
		name : "Wand arcane focus",
		amount : "",
		weight : 1,
		type : "arcane focus"
	},
	"backpack" : {
		infoname : "Backpack [2 gp]",
		name : "Backpack",
		amount : "",
		weight : 5
	},
	"ball bearings (bag of 1,000)" : {
		infoname : "Ball bearings (bag of 1,000) [1 gp]",
		name : "Bag of 1000 ball bearings",
		amount : "",
		weight : 2
	},
	"barrel" : {
		infoname : "Barrel [2 gp]",
		name : "Barrel",
		amount : "",
		weight : 70
	},
	"basket" : {
		infoname : "Basket [4 sp]",
		name : "Basket",
		amount : "",
		weight : 2
	},
	"bedroll" : {
		infoname : "Bedroll [1 gp]",
		name : "Bedroll",
		amount : "",
		weight : 7
	},
	"bell" : {
		infoname : "Bell [1 gp]",
		name : "Bell",
		amount : "",
		weight : ""
	},
	"bit and bridle" : {
		infoname : "Bit and bridle [2 gp]",
		name : "Bit and bridle",
		amount : "",
		weight : 1
	},
	"blanket" : {
		infoname : "Blanket [5 sp]",
		name : "Blanket",
		amount : "",
		weight : 3
	},
	"block and tackle" : {
		infoname : "Block and tackle [1 gp]",
		name : "Block and tackle",
		amount : "",
		weight : 5
	},
	"book" : {
		infoname : "Book [25 gp]",
		name : "Book",
		amount : "",
		weight : 5
	},
	"bottle, glass" : {
		infoname : "Bottle, glass [2 gp]",
		name : "Glass bottle",
		amount : "",
		weight : 2
	},
	"bucket" : {
		infoname : "Bucket [5 sp]",
		name : "Bucket",
		amount : "",
		weight : 2
	},
	"caltrops" : {
		infoname : "Caltrops [1 gp]",
		name : "Caltrops",
		amount : 20,
		weight : 0.1
	},
	"candle" : {
		infoname : "Candle [1 cp]",
		name : "Candle",
		amount : "",
		weight : ""
	},
	"case, crossbow bolt" : {
		infoname : "Case, crossbow bolt [1 gp]",
		name : "Crossbow bolt case",
		amount : "",
		weight : 1
	},
	"case, map or scroll" : {
		infoname : "Case, map or scroll [1 gp]",
		name : "Map or scroll case",
		amount : "",
		weight : 1
	},
	"chain (10 feet)" : {
		infoname : "Chain (10 feet) [5 gp]",
		name : "Chain, feet of",
		amount : 10,
		weight : 1
	},
	"chalk (1 piece)" : {
		infoname : "Chalk (1 piece) [1 cp]",
		name : "Chalk, pieces of",
		amount : "",
		weight : ""
	},
	"chest" : {
		infoname : "Chest [5 gp]",
		name : "Chest",
		amount : "",
		weight : 25
	},
	"climber's kit" : {
		infoname : "Climber's kit [25 gp]",
		name : "Climber's kit",
		amount : "",
		weight : 12
	},
	"common" : {
		infoname : "Common [5 sp]",
		name : "Common clothes",
		amount : "",
		weight : 3,
		type : "clothes"
	},
	"costume" : {
		infoname : "Costume [5 gp]",
		name : "Costume clothes",
		amount : "",
		weight : 4,
		type : "clothes"
	},
	"fine" : {
		infoname : "Fine [15 gp]",
		name : "Fine clothes",
		amount : "",
		weight : 6,
		type : "clothes"
	},
	"traveler's" : {
		infoname : "Traveler's [2 gp]",
		name : "Traveler's clothes",
		amount : "",
		weight : 4,
		type : "clothes"
	},
	"component pouch" : {
		infoname : "Component pouch [25 gp]",
		name : "Component pouch",
		amount : "",
		weight : 2
	},
	"crowbar" : {
		infoname : "Crowbar [2 gp]",
		name : "Crowbar",
		amount : "",
		weight : 5
	},
	"sprig of mistletoe" : {
		infoname : "Sprig of mistletoe [1 gp]",
		name : "Sprig of mistletoe druidic focus",
		amount : "",
		weight : "",
		type : "druidic focus"
	},
	"totem" : {
		infoname : "Totem [1 gp]",
		name : "Totem druidic focus",
		amount : "",
		weight : "",
		type : "druidic focus"
	},
	"wooden staff" : {
		infoname : "Wooden staff [5 gp]",
		name : "Wooden staff druidic focus",
		amount : "",
		weight : 4,
		type : "druidic focus"
	},
	"yew wand" : {
		infoname : "Yew wand  [10 gp]",
		name : "Yew wand druidic focus",
		amount : "",
		weight : 1,
		type : "druidic focus"
	},
	"fishing tackle" : {
		infoname : "Fishing tackle [1 gp]",
		name : "Fishing tackle",
		amount : "",
		weight : 4
	},
	"flask or tankard" : {
		infoname : "Flask or tankard [2 cp]",
		name : "Flask or tankard",
		amount : "",
		weight : 1
	},
	"grappling hook" : {
		infoname : "Grappling hook [2 gp]",
		name : "Grappling hook",
		amount : "",
		weight : 4
	},
	"hammer" : {
		infoname : "Hammer [1 gp]",
		name : "Hammer",
		amount : "",
		weight : 3
	},
	"hammer, sledge" : {
		infoname : "Hammer, sledge [2 gp]",
		name : "Sledge hammer",
		amount : "",
		weight : 10
	},
	"healer's kit" : {
		infoname : "Healer's kit [5 gp]",
		name : "Healer's kit",
		amount : "",
		weight : 3
	},
	"amulet" : {
		infoname : "Amulet [5 gp]",
		name : "Amulet holy symbol",
		amount : "",
		weight : 1,
		type : "holy symbol"
	},
	"emblem" : {
		infoname : "Emblem [5 gp]",
		name : "Emblem holy symbol",
		amount : "",
		weight : "",
		type : "holy symbol"
	},
	"reliquary" : {
		infoname : "Reliquary [5 gp]",
		name : "Reliquary holy symbol",
		amount : "",
		weight : 2,
		type : "holy symbol"
	},
	"holy water (flask)" : {
		infoname : "Holy water (flask) [25 gp]",
		name : "Holy water, flasks of",
		amount : "",
		weight : 1
	},
	"hourglass" : {
		infoname : "Hourglass [25 gp]",
		name : "Hourglass",
		amount : "",
		weight : 1
	},
	"hunting trap" : {
		infoname : "Hunting trap [5 gp]",
		name : "Hunting trap",
		amount : "",
		weight : 25
	},
	"ink (1 ounce bottle)" : {
		infoname : "Ink (1 ounce bottle) [10 gp]",
		name : "Ink, 1 ounce bottle of",
		amount : "",
		weight : ""
	},
	"ink pen" : {
		infoname : "Ink pen [2 cp]",
		name : "Ink pen",
		amount : "",
		weight : ""
	},
	"jug or pitcher" : {
		infoname : "Jug or pitcher [2 cp]",
		name : "Jug or pitcher",
		amount : "",
		weight : 4
	},
	"small knife" : {
		infoname : "Small Knife [1 sp]",
		name : "Small Knife",
		amount : "",
		weight : 0.25
	},
	"ladder (10-foot)" : {
		infoname : "Ladder (10-foot) [1 sp]",
		name : "10-foot ladder",
		amount : "",
		weight : 25
	},
	"lamp" : {
		infoname : "Lamp [5 sp]",
		name : "Lamp",
		amount : "",
		weight : 1
	},
	"lantern, bullseye" : {
		infoname : "Lantern, bullseye [10 gp]",
		name : "Bullseye lantern",
		amount : "",
		weight : 2
	},
	"lantern, hooded" : {
		infoname : "Lantern, hooded [5 gp]",
		name : "Hooded lantern",
		amount : "",
		weight : 2
	},
	"lock" : {
		infoname : "Lock [10 gp]",
		name : "Lock",
		amount : "",
		weight : 1
	},
	"magnifying glass" : {
		infoname : "Magnifying glass [100 gp]",
		name : "Magnifying glass",
		amount : "",
		weight : ""
	},
	"manacles" : {
		infoname : "Manacles [2 gp]",
		name : "Manacles",
		amount : "",
		weight : 6
	},
	"mess kit" : {
		infoname : "Mess kit [2 sp]",
		name : "Mess kit",
		amount : "",
		weight : 1
	},
	"mirror, steel" : {
		infoname : "Mirror, steel [5 gp]",
		name : "Steel mirror",
		amount : "",
		weight : 0.5
	},
	"oil (flask)" : {
		infoname : "Oil (flask) [1 sp]",
		name : "Oil, flasks of",
		amount : "",
		weight : 1
	},
	"paper (one sheet)" : {
		infoname : "Paper (one sheet) [2 sp]",
		name : "Paper, sheets of",
		amount : "",
		weight : ""
	},
	"parchment (one sheet)" : {
		infoname : "Parchment (one sheet) [1 sp]",
		name : "Parchment, sheets of",
		amount : "",
		weight : ""
	},
	"perfume (vial)" : {
		infoname : "Perfume (vial) [5 gp]",
		name : "Perfume, vials of",
		amount : "",
		weight : ""
	},
	"pick, miner's" : {
		infoname : "Pick, miner's [2 gp]",
		name : "Miner's pick",
		amount : "",
		weight : 10
	},
	"piton" : {
		infoname : "Piton [5 cp]",
		name : "Piton",
		amount : "",
		weight : 0.25
	},
	"poison, basic (vial)" : {
		infoname : "Poison, basic (vial) [100 gp]",
		name : "Basic poison, vials of",
		amount : "",
		weight : ""
	},
	"pole (10-foot)" : {
		infoname : "Pole (10-foot) [5 cp]",
		name : "10-foot pole",
		amount : "",
		weight : 7
	},
	"pot, iron" : {
		infoname : "Pot, iron [2 gp]",
		name : "Iron pot",
		amount : "",
		weight : 10
	},
	"potion of healing" : {
		infoname : "Potion of healing [50 gp]",
		name : "Potion of healing",
		amount : "",
		weight : 0.5
	},
	"pouch" : {
		infoname : "Pouch [5 sp]",
		name : "Pou\uFEFFch",
		amount : "",
		weight : 1
	},
	"quiver" : {
		infoname : "Quiver [1 gp]",
		name : "Quiver",
		amount : "",
		weight : 1
	},
	"ram, portable" : {
		infoname : "Ram, portable [4 gp]",
		name : "Portable ram",
		amount : "",
		weight : 35
	},
	"rations (1 day)" : {
		infoname : "Rations (1 day) [5 sp]",
		name : "Rations, days of",
		amount : "",
		weight : 2
	},
	"robes" : {
		infoname : "Robes [1 gp]",
		name : "Robes",
		amount : "",
		weight : 4
	},
	"rope, hempen (50 feet)" : {
		infoname : "Rope, hempen (50 feet) [1 gp]",
		name : "Hempen rope, feet of",
		amount : 50,
		weight : 0.2
	},
	"rope, silk (50 feet)" : {
		infoname : "Rope, silk (50 feet) [10 gp]",
		name : "Silk rope, feet of",
		amount : 50,
		weight : 0.1
	},
	"sack" : {
		infoname : "Sack [1 cp]",
		name : "Sack",
		amount : "",
		weight : 0.5
	},
	"exotic" : {
		infoname : "Exotic [60 gp]",
		name : "Exotic saddle",
		amount : "",
		weight : 40,
		type : "saddle"
	},
	"military" : {
		infoname : "Military [20 gp]",
		name : "Military saddle",
		amount : "",
		weight : 30,
		type : "saddle"
	},
	"pack" : {
		infoname : "Pack [5 gp]",
		name : "Pack saddle",
		amount : "",
		weight : 15,
		type : "saddle"
	},
	"riding" : {
		infoname : "Riding [10 gp]",
		name : "Riding saddle",
		amount : "",
		weight : 25,
		type : "saddle"
	},
	"saddlebags" : {
		infoname : "Saddlebags [4 gp]",
		name : "Saddlebags",
		amount : "",
		weight : 8
	},
	"scale, merchant's" : {
		infoname : "Scale, merchant's [5 gp]",
		name : "Merchant's scale",
		amount : "",
		weight : 3
	},
	"sealing wax" : {
		infoname : "Sealing wax [5 cp]",
		name : "Sealing wax",
		amount : "",
		weight : ""
	},
	"shovel" : {
		infoname : "Shovel [2 gp]",
		name : "Shovel",
		amount : "",
		weight : 5
	},
	"signal whistle" : {
		infoname : "Signal whistle [5 cp]",
		name : "Signal whistle",
		amount : "",
		weight : ""
	},
	"signet ring" : {
		infoname : "Signet ring [5 gp]",
		name : "Signet ring",
		amount : "",
		weight : ""
	},
	"soap" : {
		infoname : "Soap [2 cp]",
		name : "Soap",
		amount : "",
		weight : ""
	},
	"spellbook" : {
		infoname : "Spellbook [50 gp]",
		name : "Spellbook",
		amount : "",
		weight : 3
	},
	"spikes, iron (10)" : {
		infoname : "Spikes, iron (10) [1 gp]",
		name : "Iron spike",
		amount : 10,
		weight : 0.5
	},
	"spyglass" : {
		infoname : "Spyglass [1000 gp]",
		name : "Spyglass",
		amount : "",
		weight : 1
	},
	"tent, two-person" : {
		infoname : "Tent, two-person [2 gp]",
		name : "Two-person tent",
		amount : "",
		weight : 20
	},
	"tinderbox" : {
		infoname : "Tinderbox [5 sp]",
		name : "Tinderbox",
		amount : "",
		weight : 1
	},
	"torch" : {
		infoname : "Torch [1 cp]",
		name : "Torch",
		amount : "",
		weight : 1
	},
	"vial" : {
		infoname : "Vial [1 gp]",
		name : "Vial",
		amount : "",
		weight : ""
	},
	"waterskin" : {
		infoname : "Waterskin [2 sp]",
		name : "Waterskin",
		amount : "",
		weight : 5
	},
	"whetstone" : {
		infoname : "Whetstone [1 cp]",
		name : "Whetstone",
		amount : "",
		weight : 1
	}
};

var ToolsList = {
	"alchemist's supplies" : {
		infoname : "Alchemist's supplies [50 gp]",
		name : "Alchemist's supplies",
		amount : "",
		weight : 8,
		type : "artisan's tools"
	},
	"brewer's supplies" : {
		infoname : "Brewer's supplies [20 gp]",
		name : "Brewer's supplies",
		amount : "",
		weight : 9,
		type : "artisan's tools"
	},
	"calligrapher's supplies" : {
		infoname : "Calligrapher's supplies [10 gp]",
		name : "Calligrapher's supplies",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"carpenter's tools" : {
		infoname : "Carpenter's tools [8 gp]",
		name : "Carpenter's tools",
		amount : "",
		weight : 6,
		type : "artisan's tools"
	},
	"cartographer's tools" : {
		infoname : "Cartographer's tools [15 gp]",
		name : "Cartographer's tools",
		amount : "",
		weight : 6,
		type : "artisan's tools"
	},
	"cobbler's tools" : {
		infoname : "Cobbler's tools [5 gp]",
		name : "Cobbler's tools",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"cook's utensils" : {
		infoname : "Cook's utensils [1 gp]",
		name : "Cook's utensils",
		amount : "",
		weight : 8,
		type : "artisan's tools"
	},
	"glassblower's tools" : {
		infoname : "Glassblower's tools [30 gp]",
		name : "Glassblower's tools",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"jeweler's tools" : {
		infoname : "Jeweler's tools [25 gp]",
		name : "Jeweler's tools",
		amount : "",
		weight : 2,
		type : "artisan's tools"
	},
	"leatherworker's tools" : {
		infoname : "Leatherworker's tools [5 gp]",
		name : "Leatherworker's tools",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"mason's tools" : {
		infoname : "Mason's tools [10 gp]",
		name : "Mason's tools",
		amount : "",
		weight : 8,
		type : "artisan's tools"
	},
	"painter's supplies" : {
		infoname : "Painter's supplies [10 gp]",
		name : "Painter's supplies",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"potter's tools" : {
		infoname : "Potter's tools [10 gp]",
		name : "Potter's tools",
		amount : "",
		weight : 3,
		type : "artisan's tools"
	},
	"smith's tools" : {
		infoname : "Smith's tools [20 gp]",
		name : "Smith's tools",
		amount : "",
		weight : 8,
		type : "artisan's tools"
	},
	"tinker's tools" : {
		infoname : "Tinker's tools [50 gp]",
		name : "Tinker's tools",
		amount : "",
		weight : 10,
		type : "artisan's tools"
	},
	"weaver's tools" : {
		infoname : "Weaver's tools [1 gp]",
		name : "Weaver's tools",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"woodcarver's tools" : {
		infoname : "Woodcarver's tools [1 gp]",
		name : "Woodcarver's tools",
		amount : "",
		weight : 5,
		type : "artisan's tools"
	},
	"disguise kit" : {
		infoname : "Disguise kit [25 gp]",
		name : "Disguise kit",
		amount : "",
		weight : 3
	},
	"forgery kit" : {
		infoname : "Forgery kit [15 gp]",
		name : "Forgery kit",
		amount : "",
		weight : 5
	},
	"dice set" : {
		infoname : "Dice set [1 sp]",
		name : "Dice set",
		amount : "",
		weight : "",
		type : "gaming set"
	},
	"dragonchess set" : {
		infoname : "Dragonchess set [1 gp]",
		name : "Dragonchess set",
		amount : "",
		weight : 0.5,
		type : "gaming set"
	},
	"playing card set" : {
		infoname : "Playing card set [5 sp]",
		name : "Playing card set",
		amount : "",
		weight : "",
		type : "gaming set"
	},
	"three-dragon ante set" : {
		infoname : "Three-Dragon Ante set [1 gp]",
		name : "Three-Dragon Ante set",
		amount : "",
		weight : "",
		type : "gaming set"
	},
	"herbalism kit" : {
		infoname : "Herbalism kit [5 gp]",
		name : "Herbalism kit",
		amount : "",
		weight : 3
	},
	"bagpipes" : {
		infoname : "Bagpipes [30 gp]",
		name : "Bagpipes",
		amount : "",
		weight : 6,
		type : "musical instrument"
	},
	"drum" : {
		infoname : "Drum [6 gp]",
		name : "Drum",
		amount : "",
		weight : 3,
		type : "musical instrument"
	},
	"dulcimer" : {
		infoname : "Dulcimer [25 gp]",
		name : "Dulcimer",
		amount : "",
		weight : 10,
		type : "musical instrument"
	},
	"flute" : {
		infoname : "Flute [2 gp]",
		name : "Flute",
		amount : "",
		weight : 1,
		type : "musical instrument"
	},
	"horn" : {
		infoname : "Horn [3 gp]",
		name : "Horn",
		amount : "",
		weight : 2,
		type : "musical instrument"
	},
	"lute" : {
		infoname : "Lute [35 gp]",
		name : "Lute",
		amount : "",
		weight : 2,
		type : "musical instrument"
	},
	"lyre" : {
		infoname : "Lyre [30 gp]",
		name : "Lyre",
		amount : "",
		weight : 2,
		type : "musical instrument"
	},
	"pan flute" : {
		infoname : "Pan flute [12 gp]",
		name : "Pan flute",
		amount : "",
		weight : 2,
		type : "musical instrument"
	},
	"shawm" : {
		infoname : "Shawm [2 gp]",
		name : "Shawm",
		amount : "",
		weight : 1,
		type : "musical instrument"
	},
	"viol" : {
		infoname : "Viol [30 gp]",
		name : "Viol",
		amount : "",
		weight : 1,
		type : "musical instrument"
	},
	"navigator's tools" : {
		infoname : "Navigator's tools [25 gp]",
		name : "Navigator's tools",
		amount : "",
		weight : 2
	},
	"poisoner's kit" : {
		infoname : "Poisoner's kit [50 gp]",
		name : "Poisoner's kit",
		amount : "",
		weight : 2
	},
	"thieves' tools" : {
		infoname : "Thieves' tools [25 gp]",
		name : "Thieves' tools",
		amount : "",
		weight : 1
	}
};
/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Magic Item (MagicItemsList)
 *  - Magic Item Helpers (TreasureCheckpointsTable, AddMagicItemsMenu, sentientItemConflictTxt)
 **/
var TreasureCheckpointsTable = {
	A : { tier : 1, points : 8 },
	B : { tier : 1, points : 8 },
	C : { tier : 1, points : 8 },
	D : { tier : 2, points : 16 },
	E : { tier : 3, points : 16 },
	F : { tier : 1, points : 16 },
	G : { tier : 2, points : 20 },
	H : { tier : 3, points : 20 },
	I : { tier : 3, points : 24 }
};

var AddMagicItemsMenu;

var sentientItemConflictTxt = "\u25C6 Sentient Item Conflict (SRD 252, DMG 216)" + desc([
	"A sentient item has a will of its own, shaped by its personality and alignment. If its wielder acts in a manner opposed to the item's alignment or purpose, conflict can arise. When such a conflict occurs, the item makes a Charisma check contested by the wielder's Charisma check. If the item wins the contest, it makes one or more of the following demands:",
	" \u2022 It insists on being carried or worn at all times.",
	" \u2022 It demands that its wielder dispose of anything it finds repugnant.",
	" \u2022 It demands that its wielder pursue its goals to the exclusion of all other goals.",
	" \u2022 It demands to be given to someone else.",
	"If its wielder refuses to comply with its wishes, it can do any or all of the following:",
	" \u2022 Make it impossible for its wielder to attune to it.",
	" \u2022 Suppress one or more of its activated properties.",
	" \u2022 Attempt to take control of its wielder.",
	"Once per dawn, a sentient item attempts to take control of its wielder, which must make a Charisma save, with a DC equal to 12 + the item's Charisma modifier. If failed, the wielder is charmed by the item for 1d12 hours. While charmed, the wielder must try to follow the item's commands. If the wielder takes damage, it can repeat the save, ending the effect on a success."
]);

var MagicItemsList = {
	"adamantine armor" : {
		name : "Adamantine Armor",
		source : [["SRD", 207], ["D", 150]],
		type : "armor (medium or heavy)",
		rarity : "uncommon",
		description : "This armor is reinforced with adamantine, one of the hardest substances in existence. While I'm wearing it, any critical hit against me becomes a normal hit.",
		descriptionFull : "This suit of armor is reinforced with adamantine, one of the hardest substances in existence. While you're wearing it, any critical hit against you becomes a normal hit.\n\nThere are several magic item tables in the Dungeon Masters Guide where this item appears on. It varies per type of armor and not all types are listed. See below for the table:\n\n" + toUni("Armor Type\tTable") + "\nChain Mail\t  F\nChain Shirt\t  F\nScale Mail  \t  F\nBreastplate\t  G\nSplint Armor\t  G\nHalf Plate Armor\t  H\nPlate Armor\t  H",
		allowDuplicates : true,
		chooseGear : {
			type : "armor",
			prefixOrSuffix : "brackets",
			itemName1stPage : ["suffix", "Adamantine"],
			descriptionChange : ["prefix", "armor"],
			excludeCheck : function (inObjKey, inObj) {
				return !(/medium|heavy/i).test(inObj.type) || (/hide/i).test(inObj.name);
			}
		}
	},
	"ammunition, +1, +2, or +3" : {
		name : "Ammunition, +1, +2, or +3",
		source : [["SRD", 207], ["D", 150]],
		type : "weapon (any ammunition)",
		description : "I have a bonus to attack and damage rolls made with this piece of magic ammunition. The bonus is determined by the rarity of the magic item: uncommon (+1), rare (+2), or very rare (+3). Once it hits a target, the ammunition is no longer magical. Select the bonus using the little square button in this magic item line.",
		descriptionFull : "You have a bonus to attack and damage rolls made with this piece of magic ammunition. The bonus is determined by the rarity of the ammunition: uncommon (+1), rare (+2), or very rare (+3). Once it hits a target, the ammunition is no longer magical.",
		allowDuplicates : true,
		chooseGear : {
			type : "ammo",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "ammunition"]
		},
		choices : ["+1 Ammunition (uncommon)", "+2 Ammunition (rare)", "+3 Ammunition (very rare)"],
		"+1 ammunition (uncommon)" : {
			name : "Ammunition +1",
			nameTest : "+1 Ammunition",
			rarity : "uncommon",
			magicItemTable : "B",
			description : "I have a +1 bonus to attack and damage rolls made with this magic ammunition. Once it hits a target, the ammunition is no longer magical.",
			allowDuplicates : true
		},
		"+2 ammunition (rare)" : {
			name : "Ammunition +2",
			nameTest : "+2 Ammunition",
			rarity : "rare",
			magicItemTable : "C",
			description : "I have a +2 bonus to attack and damage rolls made with this magic ammunition. Once it hits a target, the ammunition is no longer magical.",
			allowDuplicates : true
		},
		"+3 ammunition (very rare)" : {
			name : "Ammunition +3",
			nameTest : "+3 Ammunition",
			rarity : "very rare",
			magicItemTable : "D",
			description : "I have a +3 bonus to attack and damage rolls made with this magic ammunition. Once it hits a target, the ammunition is no longer magical.",
			allowDuplicates : true
		}
	},
	"amulet of health" : {
		name : "Amulet of Health",
		source : [["SRD", 207], ["D", 150]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "My Constitution score is 19 while I'm wearing this amulet, provided that my Constitution is not already 19 or higher.",
		descriptionFull : "Your Constitution score is 19 while you wear this amulet. It has no effect on you if your Constitution score is already 19 or higher without it.",
		attunement : true,
		weight : 1,
		scoresOverride : [0, 0, 19, 0, 0, 0]
	},
	"amulet of proof against detection and location" : {
		name : "Amulet of Proof against Detection and Location",
		source : [["SRD", 207], ["D", 150]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		attunement : true,
		description : "While wearing this amulet, I am hidden from Divination magic. I can't be targeted by such magic or perceived through magical scrying sensors.",
		descriptionFull : "While wearing this amulet, you are hidden from Divination magic. You can't be targeted by such magic or perceived through magical scrying sensors.",
		weight : 1
	},
	"amulet of the planes" : { // contains contributions by Larry Hoy
		name : "Amulet of the Planes",
		source : [["SRD", 207], ["D", 150]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "As an action, I name a location that I am familiar with on another plane of existence and make a DC 15 Int check. On a success, I cast Plane Shift. On a failure, all creatures/objects within 15 ft of me and myself travel to (d100): [1-60] a random location on the named plane, or [61-100] a randomly determined plane.",
		descriptionFull : "While wearing this amulet, you can use an action to name a location that you are familiar with on another plane of existence. Then make a DC 15 Intelligence check. On a successful check, you cast the Plane Shift spell. On a failure, you and each creature and object within 15 feet of you travel to a random destination. Roll a d100. On a 1-60, you travel to a random location on the plane you named. On a 61-100, you travel to a randomly determined plane of existence.",
		attunement : true,
		weight : 1,
		spellcastingAbility : "class",
		spellcastingBonus : {
			name : "DC 15 Int check",
			spells : ["plane shift"],
			selection : ["plane shift"],
			firstCol : "atwill"
		},
		spellChanges : {
			"plane shift" : {
				description : "DC 15 Int to cast; Me + 8 willing transport to other plane, or spell atk + save to move to random plane",
				components : "V,M\u0192",
				changes : "The spell can be cast at will, but requires a DC 15 Intelligence check to do so, with negative consequences on a failure."
			}
		}
	},
	"animated shield" : { // contributed by Larry Hoy
		name : "Animated Shield",
		source : [["SRD", 208], ["D", 183]],
		type : "shield",
		rarity : "very rare",
		magicItemTable : "H",
		description : "As a bonus action, I speak the command word to animate this shield for 1 minute, until I use a bonus action to end this effect (returns to my hand), or until I am incapacitated or die (falls to ground). The shield leaps into the air, hovering in my space to protect me as if I were wielding it, leaving my hands free.",
		descriptionFull : "While holding this shield, you can speak its command word as a bonus action to cause it to animate. The shield leaps into the air and hovers in your space to protect you as if you were wielding it, leaving your hands free. The shield remains animated for 1 minute, until you use a bonus action to end this effect, or until you are incapacitated or die, at which point the shield falls to the ground or into your hand if you have one free.",
		attunement : true,
		weight : 6,
		action : [["bonus action", ""]],
		shieldAdd : "Animated Shield"
	},
	"apparatus of kwalish" : { // contributed by Larry Hoy
		name : "Apparatus of Kwalish",
		nameAlt : "Apparatus of the Crab",
		source : [["SRD", 208], ["D", 151]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description: "A Large 500 lb iron barrel. DC 20 Intelligence (Investigation) check finds a hidden hatch at one end, allowing two Medium creatures inside. Transforms to resemble a giant lobster, which is air-tight (10 hours of breathable air), floats, and can submerge to 900 ft deep. See Notes page for its statistics and operation.",
		descriptionLong: "A Large sealed iron barrel weighing 500 lb. A successful DC 20 Intelligence (Investigation) check finds a hidden catch unlocking a hatch at one end of the barrel, allowing two Medium or smaller creatures to crawl inside. Ten levers are set in a row at the far end, each in a neutral position, able to move either up or down. Certain levers transform the barrel to resemble a giant lobster, which is air-tight (10 hours of breathable air), floats, and submerges to a depth of 900 ft. See Notes page for its statistics and operation.",
		descriptionFull : "This item first appears to be a Large sealed iron barrel weighing 500 pounds. The barrel has a hidden catch, which can be found with a successful DC 20 Intelligence (Investigation) check. Releasing the catch unlocks a hatch at one end of the barrel, allowing two Medium or smaller creatures to crawl inside. Ten levers are set in a row at the far end, each in a neutral position, able to move either up or down. When certain levers are used, the apparatus transforms to resemble a giant lobster.\n   The apparatus of Kwalish is a Large object with the following statistics:\n   Armor Class: 20\n   Hit Points: 200\n   Speed: 30 ft., swim 30 ft. (or 0 ft. for both if the legs and tail aren't extended)\n   Damage Immunities: poison, psychic\n   To be used as a vehicle, the apparatus requires one pilot. While the apparatus's hatch is closed, the compartment is airtight and watertight. The compartment holds enough air for 10 hours of breathing, divided by the number of breathing creatures inside.\n   The apparatus floats on water. It can also go underwater to a depth of 900 feet. Below that, the vehicle takes 2d6 bludgeoning damage per minute from pressure.\n   A creature in the compartment can use an action to move as many as two of the apparatus's levers up or down. After each use, a lever goes back to its neutral position. Each lever, from left to right, functions as shown in the Apparatus of Kwalish Levers table.\n\n" + toUni("Lever\tUp\tDown") + "\n1\tLegs and tail extend, allowing the apparatus to walk and swim.\tLegs and tail retract, reducing the apparatus's speed to 0 and making it unable to benefit from bonuses to speed.\n2\tForward window shutter opens.\tForward window shutter closes.\n3\tSide window shutters open (two per side).\tSide window shutters close (two per side).\n4\tTwo claws extend from the front sides of the apparatus.\tThe claws retract.\n5\tEach extended claw makes the following melee weapon attack: +8 to hit, reach 5 ft., one target. Hit: 7 (2d6) bludgeoning damage.\tEach extended claw makes the following melee weapon attack: +8 to hit, reach 5 ft., one target. Hit: The target is grappled (escape DC 15).\n6\tThe apparatus walks or swims forward.\tThe apparatus walks or swims backward.\n7\tThe apparatus turns 90 degrees left.\tThe apparatus turns 90 degrees right.\n8\tEyelike fixtures emit bright light in a 30-foot radius and dim light for an additional 30 feet.\tThe light turns off.\n9\tThe apparatus sinks as much as 20 feet in liquid.\tThe apparatus rises up to 20 feet in liquid.\n10\tThe rear hatch unseals and opens.\tThe rear hatch closes and seals.",
		weight : 500,
		toNotesPage : [{
			name : "Statistics \u0026 Lever Operation Details",
			popupName : "Apparatus of Kwalish Statistics \u0026 Lever Operation Details",
			note : [
				"This item first appears to be a Large sealed iron barrel weighing 500 pounds. The barrel has a hidden catch, which can be found with a successful DC 20 Intelligence (Investigation) check. Releasing the catch unlocks a hatch at one end of the barrel, allowing two Medium or smaller creatures to crawl inside. Ten levers are set in a row at the far end, each in a neutral position, able to move either up or down. When certain levers are used, the apparatus transforms to resemble a giant lobster.",
				"The apparatus of Kwalish is a Large object with the following statistics:",
				"  \u2022 Armor Class: 20",
				"  \u2022 Hit Points: 200",
				"  \u2022 Speed: 30 ft, swim 30 ft (only with legs & tail extended)",
				"  \u2022 Damage Immunities: poison, psychic",
				"To be used as a vehicle, the apparatus requires one pilot. While the apparatus's hatch is closed, the compartment is airtight and watertight. The compartment holds enough air for 10 hours of breathing, divided by the number of breathing creatures inside.",
				"The apparatus floats on water. It can also go underwater to a depth of 900 feet. Below that, the vehicle takes 2d6 bludgeoning damage per minute from pressure.",
				"A creature in the compartment can use an action to move as many as two of the apparatus's levers up or down. After each use, a lever goes back to its neutral position. Each lever, from left to right, functions as shown in the Apparatus of Kwalish Levers table.\n\nLEVER\tUP\t\t\tDOWN",
				"01\tLegs/tail extend (speeds: 30 ft)\tLegs/tail retract (speeds: 0)",
				"02\tForward shutter opens\t\tForward shutter closes",
				"03\tSide shutters open (two per side)\tSide shutters close",
				"04\tClaws extend from front sides\tClaws retract",
				"05\tClaw: +8, 5 ft, 2d6 bludgeoning\tClaw: +8, 5 ft, DC 15 grapple",
				"06\tWalk or swim forward\t\tWalk or swim backward",
				"07\tTurn 90 degrees left\t\tTurn 90 degrees right",
				"08\tEyes emit 30 ft bright + dim light\tEye lights turn off",
				"09\tSink up to 20 ft in liquid\tRise up to 20 ft in liquid",
				"10\tRear hatch unseals and opens\tRear hatch closes and seals"
			]
		}]
	},
	"armor, +1, +2, or +3" : {
		name : "Armor, +1, +2, or +3",
		source : [["SRD", 208], ["D", 152]],
		type : "armor (light, medium, or heavy)",
		description : "I have a bonus to AC while wearing this armor. The bonus is determined by the rarity of the magic item: rare (+1), very rare (+2), or legendary (+3). Select the bonus using the little square button in this magic item line.",
		descriptionFull : "You have a bonus to AC while wearing this armor. The bonus is determined by its rarity: rare (+1), very rare (+2), or legendary (+3).\n\nThere are several magic item tables in the Dungeon Masters Guide where this item appears on. It varies per type of armor and magic bonus, with not all types of combinations listed. See below for the table per type of armor and bonus:\n\n" + toUni("Table\tBonus\tArmor Types") +
		"\n  G\t  +1\tChain Mail, Chain Shirt, Leather" +
		"\n  G\t  +1\tScale Mail, Spiked Armor" +
		"\n  H\t  +1\tBreastplate, Splint, Studded Leather" +
		"\n  H\t  +2\tChain Mail, Chain Shirt, Leather" +
		"\n  H\t  +2\tScale Mail, Spiked Armor" +
		"\n  I\t  +1\tHalf Plate, Plate, Scale Mail" +
		"\n  I\t  +2\tBreastplate, Half Plate, Plate, Scale Mail" +
		"\n  I\t  +2\tSplint, Studded Leather" +
		"\n  I\t  +3\tBreastplate, Chain Mail, Chain Shirt" +
		"\n  I\t  +3\tHalf Plate, Leather, Plate" +
		"\n  I\t  +3\tSpiked Armor, Splint, Studded Leather",
		allowDuplicates : true,
		chooseGear : {
			type : "armor",
			prefixOrSuffix : "brackets",
			descriptionChange : ["prefix", "armor"]
		},
		choices : ["+1 AC bonus (rare)", "+2 AC bonus (very rare)", "+3 AC bonus (legendary)"],
		"+1 ac bonus (rare)" : {
			name : "Armor +1",
			nameTest : "+1 Armor",
			rarity : "rare",
			description : "I have a +1 bonus to AC while wearing this armor.",
			allowDuplicates : true
		},
		"+2 ac bonus (very rare)" : {
			name : "Armor +2",
			nameTest : "+2 Armor",
			rarity : "very rare",
			description : "I have a +2 bonus to AC while wearing this armor.",
			allowDuplicates : true
		},
		"+3 ac bonus (legendary)" : {
			name : "Armor +3",
			nameTest : "+3 Armor",
			rarity : "legendary",
			description : "I have a +3 bonus to AC while wearing this armor.",
			allowDuplicates : true
		}
	},
	"armor of invulnerability" : { // contains contributions by Larry Hoy
		name : "Armor of Invulnerability",
		source : [["SRD", 208], ["D", 152]],
		type : "armor (plate)",
		rarity : "legendary",
		magicItemTable : "I",
		description : "I have resistance to nonmagical damage while I wear this plate armor. As an action, I can make yourself immune to nonmagical damage for 10 minutes or until I am no longer wearing the armor. Once this special action is used, it can't be used again until the next dawn.",
		descriptionFull : "You have resistance to nonmagical damage while you wear this armor. Additionally, you can use an action to make yourself immune to nonmagical damage for 10 minutes or until you are no longer wearing the armor. Once this special action is used, it can't be used again until the next dawn.",
		attunement : true,
		weight : 65,
		usages: 1,
		recovery: "dawn",
		action : [["action", " (immunity)"]],
		dmgres : [ ["All", "All (nonmagical)"] ],
		armorAdd : "Armor of Invulnerability",
		armorOptions : {
			regExpSearch : /^(?=.*armor)(?=.*invulnerability).*$/i,
			name : "Armor of Invulnerability",
			source: [["SRD", 208], ["D", 152]],
			type : "heavy",
			ac : 18,
			stealthdis : true,
			weight : 65,
			strReq : 15
		}
	},
	"armor of resistance" : {
		name : "Armor of Resistance",
		source : [["SRD", 208], ["D", 152]],
		type : "armor (light, medium, or heavy)",
		rarity : "rare",
		description : "Select the damage type that this armor gives resistance to using the square button in this line. While I'm wearing this armor and attuned to it, I gain resistance to one type of damage.",
		descriptionFull : "You have resistance to one type of damage while you wear this armor. The DM chooses the type or determines it randomly from the options below:\n\n" + toUni("d10\tType\t\td10\tType") + "\n 1\tAcid\t\t 6\tNecrotic\n 2\tCold\t\t 7\tPoison\n 3\tFire\t\t 8\tPsychic\n 4\tForce\t\t 9\tRadiant\n 5\tLightning   \t 10\tThunder\n\nThere are several magic item tables in the Dungeon Masters Guide where this item appears on. It varies per type of armor, and not all types of armor are listed. See below for the table per type of armor or resistance:\n\n" + toUni("Table\tArmor") + "\n G\tChain Mail\n G\tChain Shirt\n G\tLeather\n G\tScale Mail\n H\tBreastplate\n H\tSplint\n H\tStudded Leather\n I\tHalf Plate\n I\tPlate",
		attunement : true,
		allowDuplicates : true,
		chooseGear : {
			type : "armor",
			prefixOrSuffix : "prefix"
		},
		choices : ["Acid", "Cold", "Fire", "Force", "Lightning", "Necrotic", "Poison", "Psychic", "Radiant", "Thunder"],
		"acid" : {
			name : "Armor of Acid Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to acid damage.",
			dmgres : ["Acid"]
		},
		"cold" : {
			name : "Armor of Cold Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to cold damage.",
			dmgres : ["Cold"]
		},
		"fire" : {
			name : "Armor of Fire Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to fire damage.",
			dmgres : ["Fire"]
		},
		"force" : {
			name : "Armor of Force Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to force damage.",
			dmgres : ["Force"]
		},
		"lightning" : {
			name : "Armor of Lightning Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to lightning damage.",
			dmgres : ["Lightning"]
		},
		"necrotic" : {
			name : "Armor of Necrotic Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to necrotic damage.",
			dmgres : ["Necrotic"]
		},
		"poison" : {
			name : "Armor of Poison Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to poison damage.",
			dmgres : ["Poison"]
		},
		"psychic" : {
			name : "Armor of Psychic Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to psychic damage.",
			dmgres : ["Psychic"]
		},
		"radiant" : {
			name : "Armor of Radiant Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to radiant damage.",
			dmgres : ["Radiant"]
		},
		"thunder" : {
			name : "Armor of Thunder Resistance",
			description : "While I'm wearing this armor and I'm attuned to it, I have resistance to thunder damage.",
			dmgres : ["Thunder"]
		}
	},
	"armor of vulnerability" : { // contains contributions by Larry Hoy
		name: "Armor of Vulnerability",
		source: [["SRD", 209], ["D", 152]],
		type : "armor (plate)",
		rarity: "rare",
		magicItemTable : "G",
		description: "While wearing this plate armor, I have resistance to one of the following damage types: bludgeoning, piercing, or slashing; although, unfortunately, I have vulnerability to the other two until I am targeted by a Remove Curse spell.",
		descriptionFull: "While wearing this armor, you have resistance to one of the following damage types: bludgeoning, piercing, or slashing. The DM chooses the type or determines it randomly.\n   " + toUni("Curse") + ". This armor is cursed, a fact that is revealed only when an Identify spell is cast on the armor or you attune to it. Attuning to the armor curses you until you are targeted by the Remove Curse spell or similar magic; removing the armor fails to end the curse. While cursed, you have vulnerability to two of the three damage types associated with the armor (not the one to which it grants resistance).",
		attunement: true,
		allowDuplicates : true,
		weight: 65,
		cursed: true,
		armorAdd : "Armor of Vulnerability",
		armorOptions : {
			regExpSearch : /^(?=.*armor)(?=.*vulnerability).*$/i,
			name : "Armor of Vulnerability",
			source: [["SRD", 209], ["D", 152]],
			type : "heavy",
			ac : 18,
			stealthdis : true,
			weight : 65,
			strReq : 15
		},
		choices : ["Bludgeoning", "Piercing", "Slashing"],
		"bludgeoning" : {
			description: "While wearing this armor, I have resistance to bludgeoning damage. Additionally, I have vulnerability to piercing and slashing damage until I am targeted by a Remove Curse spell.",
			dmgres : ["Bludgeoning"],
			savetxt : { text : ["Vulnerable to piercing \u0026 slashing damage"] },
			descriptionFull: "While wearing this armor, I have resistance to bludgeoning damage.\n   " + toUni("Curse") + ". This armor is cursed, a fact that is revealed only when an Identify spell is cast on the armor or I attune to it. Attuning to the armor curses me until I am targeted by the Remove Curse spell or similar magic; removing the armor fails to end the curse. While cursed, I have vulnerability to piercing and slashing damage."
		},
		"piercing" : {
			description: "While wearing this armor, I have resistance to piercing damage. Additionally, I have vulnerability to bludgeoning and slashing damage until I am targeted by a Remove Curse spell.",
			dmgres : ["Piercing"],
			savetxt : { text : ["Vulnerable to bludgeoning \u0026 slashing damage"] },
			descriptionFull: "While wearing this armor, I have resistance to piercing damage.\n   " + toUni("Curse") + ". This armor is cursed, a fact that is revealed only when an Identify spell is cast on the armor or I attune to it. Attuning to the armor curses me until I am targeted by the Remove Curse spell or similar magic; removing the armor fails to end the curse. While cursed, I have vulnerability to bludgeoning and slashing damage."
		},
		"slashing" : {
			description: "While wearing this armor, I have resistance to slashing damage. Additionally, I have vulnerability to bludgeoning and piercing damage until I am targeted by a Remove Curse spell.",
			dmgres : ["Slashing"],
			savetxt : { text : ["Vulnerable to bludgeoning \u0026 piercing damage"] },
			descriptionFull: "While wearing this armor, I have resistance to slashing damage.\n   " + toUni("Curse") + ". This armor is cursed, a fact that is revealed only when an Identify spell is cast on the armor or I attune to it. Attuning to the armor curses me until I am targeted by the Remove Curse spell or similar magic; removing the armor fails to end the curse. While cursed, I have vulnerability to bludgeoning and piercing damage."
		}
	},
	"arrow-catching shield" : { // contains contributions by Larry Hoy
		name : "Arrow-Catching Shield",
		source : [["SRD", 209], ["D", 152]],
		type : "shield",
		rarity : "rare",
		magicItemTable : "G",
		description : "I gain an additional +2 bonus to AC against ranged attacks while I wield this shield. This is not calculated into the AC on the 1st page. In addition, whenever an attacker makes a ranged attack against a target within 5 feet of me, I can use my reaction to become the target of the attack instead.",
		descriptionFull : "You gain a +2 bonus to AC against ranged attacks while you wield this shield. This bonus is in addition to the shield's normal bonus to AC. In addition, whenever an attacker makes a ranged attack against a target within 5 feet of you, you can use your reaction to become the target of the attack instead.",
		attunement : true,
		weight : 6,
		action : [["reaction", ""]],
		shieldAdd : "Arrow-Catching Shield (+\u200A2 vs. ranged)"
	},
	"arrow of slaying" : {
		name : "Arro\u200Aw of Slaying",
		nameTest : "of Slaying",
		source : [["SRD", 209], ["D", 152]],
		type : "weapon (any ammunition)",
		rarity : "very rare",
		magicItemTable : "E",
		description : "This magic ammunition is meant to hurt a particular race, type, or group of creatures. Its specificity varies. If an associated target is hit by this ammunition, it takes +6d10 piercing damage. It can then make a DC 17 Con save to half this extra damage. After dealing its extra damage, the ammunition becomes nonmagical.",
		descriptionFull : "An arrow of slaying is a magic weapon meant to slay a particular kind of creature. Some are more focused than others; for example, there are both arrows of dragon slaying and arrows of blue dragon slaying. If a creature belonging to the type, race, or group associated with an arrow of slaying takes damage from the arrow, the creature must make a DC 17 Constitution saving throw, taking an extra 6d10 piercing damage on a failed save, or half as much extra damage on a successful one.\n   Once an arrow of slaying deals its extra damage to a creature, it becomes a nonmagical arrow.\n   Other types of magic ammunition of this kind exist, such as bolts of slaying meant for a crossbow, though arrows are most common.",
		allowDuplicates : true,
		chooseGear : {
			type : "ammo",
			prefixOrSuffix : "prefix",
			descriptionChange : ["replace", "ammunition"]
		}
	},
	"bag of beans" : { // contributed by Larry Hoy
		name : "Bag of Beans",
		source : [["SRD", 209], ["D", 152]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "This heavy cloth bag contains 3d4 dry beans. I can dump all on the ground, causing a 10-ft explosion that deals 5d4 fire damage to all in the area, DC 15 Dex save to half, and ignites unattended flammable objects. I can plant and water a bean to get an effect 1 minute later, chosen by the DM, see notes page.",
		descriptionFull : "Inside this heavy cloth bag are 3d4 dry beans. The bag weighs \xBD pound plus \xBC pound for each bean it contains.\n   If you dump the bag's contents out on the ground, they explode in a 10-foot radius, extending from the beans. Each creature in the area, including you, must make a DC 15 Dexterity saving throw, taking 5d4 fire damage on a failed save, or half as much damage on a successful one. The fire ignites flammable objects in the area that aren't being worn or carried.\n   If you remove a bean from the bag, plant it in dirt or sand, and then water it, the bean produces an effect 1 minute later from the ground where it was planted. The DM can choose an effect from the following table, determine it randomly, or create an effect.\n\n" + toUni("d100\tEffect") + "\n01\t5d4 toadstools sprout. If a creature eats a toadstool, roll any die. On an odd roll, the eater must succeed on a DC 15 Constitution saving throw or take 5d6 poison damage and become poisoned for 1 hour. On an even roll, the eater gains 5d6 temporary hit points for 1 hour.\n02-10\tA geyser erupts and spouts water, beer, berry juice, tea, vinegar, wine, or oil (DM's choice) 30 feet into the air for 1d12 rounds.\n11-20\tA treant sprouts. There's a 50% chance that the treant is chaotic evil and attacks.\n21-30\tAn animate, immobile stone statue in your likeness rises. It makes verbal threats against you. If you leave it and others come near, it describes you as the most heinous of villains and directs the newcomers to find and attack you. If you are on the same plane of existence as the statue, it knows where you are. The statue becomes inanimate after 24 hours.\n31-40\tA campfire with blue flames springs forth and burns for 24 hours (or until it is extinguished).\n41-50\t1d6+6 shriekers sprout.\n51-60\t1d4+8 bright pink toads crawl forth. Whenever a toad is touched, it transforms into a Large or smaller monster of the DM's choice. The monster remains for 1 minute, then disappears in a puff of bright pink smoke.\n61-70\tA hungry bulette burrows up and attacks.\n71-80\tA fruit tree grows. It has 1d10+20 fruit, 1d8 of which act as randomly determined magic potions, while one acts as an ingested poison of the DM's choice. The tree vanishes after 1 hour. Picked fruit remains, retaining any magic for 30 days.\n81-90\tA nest of 1d4+3 eggs springs up. Any creature that eats an egg must make a DC 20 Constitution saving throw. On a successful save, a creature permanently increases its lowest ability score by 1, randomly choosing among equally low scores. On a failed save, the creature takes 10d6 force damage from an internal magical explosion.\n91-99\tA pyramid with a 60-foot-square base bursts upward. Inside is a sarcophagus containing a mummy lord. The pyramid is treated as the mummy lord's lair, and its sarcophagus contains treasure of the DM's choice.\n100\tA giant beanstalk sprouts, growing to a height of the DM's choice. The top leads where the DM chooses, such as to a great view, a cloud giant's castle, or a different plane of existence.",
		weight : 0.5,
		toNotesPage : [{
			name : "Planted bean effects",
			note : "\nd100\tEFFECT\n01\t5d4 toadstools sprout. If a creature eats a toadstool, roll any die. On\n\tan odd roll, the eater must succeed on a DC 15 Constitution saving\n\tthrow or take 5d6 poison damage and become poisoned for 1 hour.\n\tOn an even roll, the eater gains 5d6 temporary hit points for 1 hour.\n02-10\tA geyser erupts and spouts water, beer, berry juice, tea, vinegar, wine,\n\tor oil (DM's choice) 30 feet into the air for 1d12 rounds.\n11-20\tA treant sprouts. There's a 50% chance that the treant is chaotic evil\n\tand attacks.\n21-30\tAn animate, immobile stone statue in your likeness rises. It makes" + (typePF ? "\n\t" : " ") + "verbal threats" + (!typePF ? "\n\t" : " ") + "against you. If you leave it and others come near, it" + (typePF ? "\n\t" : " ") + "describes you as the most" + (!typePF ? "\n\t" : " ") + "heinous of villains and directs the" + (typePF ? "\n\t" : " ") + "newcomers to find and attack you." + (!typePF ? "\n\t" : " ") + "If you are on the same plane of" + (typePF ? "\n\t" : " ") + "existence as the statue, it knows where you are." + (!typePF ? "\n\t" : " ") + "The statue" + (typePF ? "\n\t" : " ") + "becomes inanimate after 24 hours.\n31-40\tA campfire with blue flames springs forth and burns for 24 hours (or\n\tuntil it is extinguished).\n41-50\t1d6+6 shriekers sprout.\n51-60\t1d4+8 bright pink toads crawl forth. Whenever a toad is touched, it" + (typePF ? "\n\t" : " ") + "transforms" + (!typePF ? "\n\t" : " ") + "into a Large or smaller monster of the DM's choice." + (typePF ? "\n\t" : " ") + "The monster remains for" + (!typePF ? "\n\t" : " ") + "1 minute, then disappears in a puff of bright" + (typePF ? "\n\t" : " ") + "pink smoke.\n61-70\tA hungry bulette burrows up and attacks.\n71-80\tA fruit tree grows. It has 1d10+20 fruit, 1d8 of which act as randomly\n\tdetermined magic potions, while one acts as an ingested poison of\n\tthe DM's choice. The tree vanishes after 1 hour. Picked fruit remains,\n\tretaining any magic for 30 days.\n81-90\tA nest of 1d4+3 eggs springs up. Any creature that eats an egg must\n\tmake a DC 20 Constitution saving throw. On a successful save, a\n\tcreature permanently increases its lowest ability score by 1, randomly\n\tchoosing among equally low scores. On a failed save, the creature\n\ttakes 10d6 force damage from an internal magical explosion.\n91-99\tA pyramid with a 60-foot-square base bursts upward. Inside is a" + (typePF ? "\n\t" : " ") + "sarcophagus" + (!typePF ? "\n\t" : " ") + "containing a mummy lord. The pyramid is treated as" + (typePF ? "\n\t" : " ") + "the mummy lord's lair," + (!typePF ? "\n\t" : " ") + "and its sarcophagus contains treasure" + (typePF ? "\n\t" : " ") + "of the DM's choice.\n100\tA giant beanstalk sprouts, growing to a height of the DM's choice.\n\tThe top leads where the DM chooses, such as to a great view,\n\ta cloud giant's castle, or a different plane of existence."
		}]
	},
	"bag of devouring" : {
		name : "Bag of Devouring",
		source : [["SRD", 210], ["D", 153]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "D",
		description : "This bag is a feeding orifice for an extradimensional creature, which is closed if it is turned inside out. It devours all editable matter placed inside. Creatures partially inside get pulled in 50% of the time. Escaping (Str DC 15) or pulling another out (Str DC 20) is an action. Creatures starting their turn inside are devoured.",
		descriptionLong : "Resembling a Bag of Holding, this bag is a feeding orifice for an extradimensional creature. The orifice is closed if the bag is turned inside out. It devours all vegetable and animal matter placed inside. Creatures partially inside get pulled in 50% of the time. Escaping (Str DC 15) or pulling another out (Str DC 20) takes an action. Creatures starting their turn inside are devoured, their body destroyed. Up to 1 cu ft of inanimate objects can be stored inside, but once each day they are swallowed by the creature and spat out on a random plane. Of the bag is pierced or torn, it is destroyed and its content lost.",
		descriptionFull : "This bag superficially resembles a bag of holding but is a feeding orifice for a gigantic extradimensional creature. Turning the bag inside out closes the orifice.\n   The extradimensional creature attached to the bag can sense whatever is placed inside the bag. Animal or vegetable matter placed wholly in the bag is devoured and lost forever. When part of a living creature is placed in the bag, as happens when someone reaches inside it, there is a 50% chance that the creature is pulled inside the bag. A creature inside the bag can use its action to try to escape with a successful DC 15 Strength check. Another creature can use its action to reach into the bag to pull a creature out, doing so with a successful DC 20 Strength check (provided it isn't pulled inside the bag first). Any creature that starts its turn inside the bag is devoured, its body destroyed.\n   Inanimate objects can be stored in the bag, which can hold a cubic foot of such material. However, once each day, the bag swallows any objects inside it and spits them out into another plane of existence. The DM determines the time and plane.\n   If the bag is pierced or torn, it is destroyed, and anything contained within it is transported to a random location on the Astral Plane.",
		weight : 0.5
	},
	"bag of holding" : {
		name : "Bag of Holding",
		source : [["SRD", 210], ["D", 153]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : ["A", "B"],
		description : "This bag is 2 ft in diameter at the mouth, 4 ft deep, and 15 lb regardless of content. It can hold up to 500 lb, not exceeding a volume of 64 cu ft. Retrieving an item from it requires an action. If it's overloaded, pierced, or torn, it's destroyed with its contents in the Astral plane. If turned inside out, all its contents spill forth.",
		descriptionLong : "This bag is 2 ft in diameter at the mouth, 4 ft deep, and 15 lb regardless of content. It can hold up to 500 lb, not exceeding a volume of 64 cu ft. Retrieving an item from it requires an action. If it is overloaded, pierced, or torn, it is destroyed, leaving its contents in the Astral plane. If it is turned inside out, all its contents spill forth unharmed. Breathing creatures inside the bag can breath for 10 minutes divided by the number of creatures in it (minimum 1 minute), after which they begin to suffocate. Placing the bag in an other extradimensional space instantly destroys both and opens a gate to the Astral Plane.",
		descriptionFull : "This bag has an interior space considerably larger than its outside dimensions, roughly 2 feet in diameter at the mouth and 4 feet deep. The bag can hold up to 500 pounds, not exceeding a volume of 64 cubic feet. The bag weighs 15 pounds, regardless of its contents. Retrieving an item from the bag requires an action.\n   If the bag is overloaded, pierced, or torn, it ruptures and is destroyed, and its contents are scattered in the Astral Plane. If the bag is turned inside out, its contents spill forth, unharmed, but the bag must be put right before it can be used again. Breathing creatures inside the bag can survive up to a number of minutes equal to 10 divided by the number of creatures (minimum 1 minute), after which time they begin to suffocate.\n   Placing a bag of holding inside an extradimensional space created by a Heward's handy haversack, portable hole, or similar item instantly destroys both items and opens a gate to the Astral Plane. The gate originates where the one item was placed inside the other. Any creature within 10 feet of the gate is sucked through it to a random location on the Astral Plane. The gate then closes. The gate is one-way only and can't be reopened.",
		weight : 15,
		action : [["action", " (retrieve item)"]]
	},
	"bag of tricks" : { // contributed by Larry Hoy
		name: "Bag of Tricks",
		source: [["SRD", 210], ["D", 154]],
		type: "wondrous item",
		rarity: "uncommon",
		magicItemTable : "F",
		description: "This ordinary bag, made from gray, rust, or tan cloth, appears empty. Reaching inside the bag, however, reveals the presence of a small, fuzzy object; which, as an action, I can throw 20 ft, where it transforms into a random creature.",
		descriptionFull: "This ordinary bag, made from gray, rust, or tan cloth, appears empty. Reaching inside the bag, however, reveals the presence of a small, fuzzy object. The bag weighs \u00BD pound.\n   You can use an action to pull the fuzzy object from the bag and throw it up to 20 feet. When the object lands, it transforms into a creature you determine by rolling a d8 and consulting the table that corresponds to the bag's color. The creature vanishes at the next dawn or when it is reduced to 0 hit points.\n   The creature is friendly to you and your companions, and it acts on your turn. You can use a bonus action to command how the creature moves and what action it takes on its next turn, or to give it general orders, such as to attack your enemies. In the absence of such orders, the creature acts in a fashion appropriate to its nature.\n   Once three fuzzy objects have been pulled from the bag, the bag can't be used again until the next dawn.",
		weight: 0.5,
		allowDuplicates : true,
		action : [["action", " (pull)"], ["bonus action", " (command)"]],
		usages : 3,
		recovery : "dawn",
		choices : ["Gray", "Rust", "Tan"],
		"gray" : {
			name: "Gray Bag of Tricks",
			description: "As an action, 3 times per dawn, I can pull an object from this bag and throw it 20 ft. It transforms into a random creature when it lands (d8): 1-weasel, 2-giant rat, 3-badger, 4-boar, 5-panther, 6-giant badger, 7-dire wolf, 8-giant elk. It follows my commands, acts on my turn, and vanishes at dawn or if reduced to 0 HP.",
			descriptionLong: "As an action, I can pull a fuzzy object from this bag and throw it 20 ft. It transforms into a creature when it lands, determined randomly (d8): 1-weasel, 2-giant rat, 3-badger, 4-boar, 5-panther, 6-giant badger, 7-dire wolf, 8-giant elk. The creature is friendly, acts on my turn, and vanishes at the next dawn or when it is reduced to 0 HP. As a bonus action, I can command it how to move and what action to take on its next turn, or give it general orders (e.g. attack my enemies). Without orders, it acts as it normally would. Once three fuzzy objects have been pulled from the bag, it can't be used again until the next dawn.",
			descriptionFull: "This ordinary bag, made from gray cloth, appears empty. Reaching inside the bag, however, reveals the presence of a small, fuzzy object. The bag weighs \u00BD pound.\n   You can use an action to pull the fuzzy object from the bag and throw it up to 20 feet. When the object lands, it transforms into a creature you determine by rolling a d8 and consulting the table. The creature vanishes at the next dawn or when it is reduced to 0 hit points.\n   The creature is friendly to you and your companions, and it acts on your turn. You can use a bonus action to command how the creature moves and what action it takes on its next turn, or to give it general orders, such as to attack your enemies. In the absence of such orders, the creature acts in a fashion appropriate to its nature.\n   Once three fuzzy objects have been pulled from the bag, the bag can't be used again until the next dawn.\n\n" + toUni("d8\tCreature") + "\n 1\tWeasel\n 2\tGiant rat\n 3\tBadger\n 4\tBoar\n 5\tPanther\n 6\tGiant badger\n 7\tDire wolf\n 8\tGiant elk"
		},
		"rust" : {
			name: "Rust Bag of Tricks",
			description: "As an action, 3 times per dawn, I can pull an object from this bag and throw it 20 ft. It transforms into a random creature when it lands (d8): 1-rat, 2-owl, 3-mastiff, 4-goat, 5-giant goat, 6-giant boar, 7-lion, 8-brown bear. It follows my commands, acts on my turn, and vanishes at dawn or if reduced to 0 HP.",
			descriptionLong: "As an action, I can pull a fuzzy object from this bag and throw it 20 ft. It transforms into a creature when it lands, determined randomly (d8): 1-rat, 2-owl, 3-mastiff, 4-goat, 5-giant goat, 6-giant boar, 7-lion, 8-brown bear. The creature is friendly, acts on my turn, and vanishes at the next dawn or when it is reduced to 0 HP. As a bonus action, I can command it how to move and what action to take on its next turn, or give it general orders (e.g. attack my enemies). Without orders, it acts as it normally would. Once three fuzzy objects have been pulled from the bag, it can't be used again until the next dawn.",
			descriptionFull: "This ordinary bag, made from rust-colored cloth, appears empty. Reaching inside the bag, however, reveals the presence of a small, fuzzy object. The bag weighs \u00BD pound.\n   You can use an action to pull the fuzzy object from the bag and throw it up to 20 feet. When the object lands, it transforms into a creature you determine by rolling a d8 and consulting the table. The creature vanishes at the next dawn or when it is reduced to 0 hit points.\n   The creature is friendly to you and your companions, and it acts on your turn. You can use a bonus action to command how the creature moves and what action it takes on its next turn, or to give it general orders, such as to attack your enemies. In the absence of such orders, the creature acts in a fashion appropriate to its nature.\n   Once three fuzzy objects have been pulled from the bag, the bag can't be used again until the next dawn.\n\n" + toUni("d8\tCreature") + "\n 1\tRat\n 2\tOwl\n 3\tMastiff\n 4\tGoat\n 5\tGiant goat\n 6\tGiant boar\n 7\tLion\n 8\tBrown bear"
		},
		"tan" : {
			name: "Tan Bag of Tricks",
			description: "As an action, 3 times per dawn, I can pull an object from this bag and throw it 20 ft. It transforms into a random creature when it lands (d8): 1-jackal, 2-ape, 3-baboon, 4-axe beak, 5-black bear, 6-giant weasel, 7-giant hyena, 8-tiger. It follows my commands, acts on my turn, and vanishes at dawn or if reduced to 0 HP.",
			descriptionLong: "As an action, I can pull a fuzzy object from this bag and throw it 20 ft. It transforms into a creature when it lands, determined randomly (d8): 1-jackal, 2-ape, 3-baboon, 4-axe beak, 5-black bear, 6-giant weasel, 7-giant hyena, 8-tiger. The creature is friendly, acts on my turn, and vanishes at the next dawn or when it is reduced to 0 HP. As a bonus action, I can command it how to move and what action to take on its next turn, or give it general orders (e.g. attack my enemies). Without orders, it acts as it normally would. Once three fuzzy objects have been pulled from the bag, it can't be used again until the next dawn.",
			descriptionFull: "This ordinary bag, made from tan cloth, appears empty. Reaching inside the bag, however, reveals the presence of a small, fuzzy object. The bag weighs \u00BD pound.\n   You can use an action to pull the fuzzy object from the bag and throw it up to 20 feet. When the object lands, it transforms into a creature you determine by rolling a d8 and consulting the table. The creature vanishes at the next dawn or when it is reduced to 0 hit points.\n   The creature is friendly to you and your companions, and it acts on your turn. You can use a bonus action to command how the creature moves and what action it takes on its next turn, or to give it general orders, such as to attack your enemies. In the absence of such orders, the creature acts in a fashion appropriate to its nature.\n   Once three fuzzy objects have been pulled from the bag, the bag can't be used again until the next dawn.\n\n" + toUni("d8\tCreature") + "\n 1\tJackal\n 2\tApe\n 3\tBaboon\n 4\tAxe beak\n 5\tBlack bear\n 6\tGiant weasel\n 7\tGiant hyena\n 8\tTiger"
		}
	},
	"bead of force" : { // contains contributions by Larry Hoy
		name : "Bead of Force",
		source : [["SRD", 211], ["D", 154]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description: "Once as an action, I can throw this sphere 60 ft, creating a 10-ft radius explosion on impact. All creatures within the explosion must make a DC 15 Dex save or take 5d4 force damage and are trapped in a sphere of transparent force that encloses the area for 1 minute. The sphere can be moved from the in- and outside.",
		descriptionLong: "Once as an action, I can throw this 0.75 inch sphere 60 ft, creating a 10-ft radius explosion on impact. All creatures within the area of the explosion must make a DC 15 Dexterity saving throw or take 5d4 force damage and become trapped in a sphere of transparent force that encloses the area for 1 minute. Only breathable air can pass through it. Those that succeed on the save or are only partially in the area are pushed outside of the sphere of force. Enclosed creatures can use their action to push its wall, moving the whole at half their walking speed. The whole sphere of force weighs only 1 lb, regardless of content.",
		descriptionFull : "This small black sphere measures \xBE of an inch in diameter and weighs an ounce. Typically, 1d4 + 4 beads of force are found together.\n   You can use an action to throw the bead up to 60 feet. The bead explodes on impact and is destroyed. Each creature within a 10-foot radius of where the bead landed must succeed on a DC 15 Dexterity saving throw or take 5d4 force damage. A sphere of transparent force then encloses the area for 1 minute. Any creature that failed the save and is completely within the area is trapped inside this sphere. Creatures that succeeded on the save, or are partially within the area, are pushed away from the center of the sphere until they are no longer inside it. Only breathable air can pass through the sphere's wall. No attack or other effect can.\n   An enclosed creature can use its action to push against the sphere's wall, moving the sphere up to half the creature's walking speed. The sphere can be picked up, and its magic causes it to weigh only 1 pound, regardless of the weight of creatures inside.",
		weight : 0.0625
	},
	"belt of dwarvenkind" : {
		name : "Belt of Dwarvenkind",
		source : [["SRD", 212], ["D", 155]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While wearing this belt, my Con increases by 2 (to max 20), I get adv. on Cha (Persuasion) checks to interact with dwarves, adv. on saves vs. poison, resistance to poison damage, darkvision 60 ft, and known Dwarvish. Each day at dawn, there is a 50% chance I grow a full beard or my current beard becomes visibly thicker.",
		descriptionFull : "While wearing this belt, you gain the following benefits:\n \u2022 Your Constitution score increases by 2, to a maximum of 20.\n \u2022 You have advantage on Charisma (Persuasion) checks made to interact with dwarves.\n\nIn addition, while attuned to the belt, you have a 50% chance each day at dawn of growing a full beard if you're capable of growing one, or a visibly thicker beard if you already have one.\n\nIf you aren't a dwarf, you gain the following additional benefits while wearing the belt:\n \u2022 You have advantage on saving throws against poison, and you have resistance against poison damage.\n \u2022 You have darkvision out to a range of 60 feet.\n \u2022 You can speak, read, and write Dwarvish.",
		attunement : true,
		languageProfs : ["Dwarvish"],
		vision : [["Darkvision", 60]],
		savetxt : { adv_vs : ["poison"] },
		dmgres : ["Poison"],
		scores : [0, 0, 2, 0, 0, 0]
	},
	"belt of giant strength" : {
		name : "Belt of Giant Strength",
		source : [["SRD", 211], ["D", 155]],
		type : "wondrous item",
		description : "Set the type of giant using the button in this line. While wearing this belt, my Strength score changes to a certain number depending on the type of giant the belt is associated with, provided that my Strength is not already that amount or higher.",
		descriptionFull : "While wearing this belt, your Strength score changes to a score granted by the belt. If your Strength is already equal to or greater than the belt’s score, the item has no effect on you. Six varieties of this belt exist, corresponding with and having rarity according to the six kinds of true giants. The belt of stone giant strength and the belt of frost giant strength look different, but they have the same effect.\n\n" + toUni("Type\t\tStr\tRarity") + "\nHill giant\t\t21\tRare\nStone/frost giant\t23\tVery rare\nFire giant   \t25\tVery rare\nCloud giant\t27\tLegendary\nStorm giant\t29\tLegendary",
		attunement : true,
		allowDuplicates : true,
		choices : ["Hill (Str 21, rare)", "Frost (Str 23, very rare)", "Stone (Str 23, very rare)", "Fire (Str 25, very rare)", "Cloud (Str 27, legendary)", "Storm (Str 29, legendary)"],
		"hill (str 21, rare)" : {
			name : "Belt of Hill Giant Strength",
			rarity : "rare",
			magicItemTable : "G",
			description : "My Strength score is 21 while I'm wearing this belt, provided that my Strength is not already 21 or higher.",
			scoresOverride : [21, 0, 0, 0, 0, 0]
		},
		"frost (str 23, very rare)" : {
			name : "Belt of Frost Giant Strength",
			rarity : "very rare",
			magicItemTable : "H",
			description : "My Strength score is 23 while I'm wearing this belt, provided that my Strength is not already 23 or higher.",
			scoresOverride : [23, 0, 0, 0, 0, 0]
		},
		"stone (str 23, very rare)" : {
			name : "Belt of Stone Giant Strength",
			rarity : "very rare",
			magicItemTable : "H",
			description : "My Strength score is 23 while I'm wearing this belt, provided that my Strength is not already 23 or higher.",
			scoresOverride : [23, 0, 0, 0, 0, 0]
		},
		"fire (str 25, very rare)" : {
			name : "Belt of Fire Giant Strength",
			rarity : "very rare",
			magicItemTable : "H",
			description : "My Strength score is 25 while I'm wearing this belt, provided that my Strength is not already 25 or higher.",
			scoresOverride : [25, 0, 0, 0, 0, 0]
		},
		"cloud (str 27, legendary)" : {
			name : "Belt of Cloud Giant Strength",
			rarity : "legendary",
			magicItemTable : "I",
			description : "My Strength score is 27 while I'm wearing this belt, provided that my Strength is not already 27 or higher.",
			scoresOverride : [27, 0, 0, 0, 0, 0]
		},
		"storm (str 29, legendary)" : {
			name : "Belt of Storm Giant Strength",
			rarity : "legendary",
			magicItemTable : "I",
			description : "My Strength score is 29 while I'm wearing this belt, provided that my Strength is not already 29 or higher.",
			scoresOverride : [29, 0, 0, 0, 0, 0]
		}
	},
	"berserker axe" : {
		name : "Berserker Axe",
		nameTest : "Berserker",
		source : [["SRD", 211], ["D", 155]],
		type : "weapon (any axe)",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "This axe gives +1 to hit and damage, +1 HP per level, and is cursed. I can't part with it and have disadv. using other weapons. Whenever I'm damaged by a hostile, I must make a DC 15 Wis save or go berserk, using my action each round to attack the closest creature with the axe until none remain within 60 ft.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon. In addition, while you are attuned to this weapon, your hit point maximum increases by 1 for each level you have attained.\n   " + toUni("Curse") + ". This axe is cursed, and becoming attuned to it extends the curse to you. As long as you remain cursed, you are unwilling to part with the axe, keeping it within reach at all times. You also have disadvantage on attack rolls with weapons other than this one, unless no foe is within 60 feet of you that you can see or hear.\n   Whenever a hostile creature damages you while the axe is in your possession, you must succeed on a DC 15 Wisdom saving throw or go berserk. While berserk, you must use your action each round to attack the creature nearest to you with the axe. If you can make extra attacks as part of the Attack action, you use those extra attacks, moving to attack the next nearest creature after you fell your current target. If you have multiple possible targets, you attack one at random. You are berserk until you start your turn with no creatures within 60 feet of you that you can see or hear.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "suffix",
			descriptionChange : ["replace", "axe"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /axe/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/axe/i).test(v.baseWeaponName) && (/berserker/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'Cursed';
					}
				},
				'If I include the word "Berserker" in a the name of an axe, it will be treated as the magic weapon Berserker Axe. It has +1 to hit and damage, but also bears a curse.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/axe/i).test(v.baseWeaponName) && (/berserker/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 1;
					}
				}, ''
			],
			hp : function (totalHD) { return [totalHD]; }
		}
	},
	"boots of elvenkind" : { // contains contributions by AelarTheElfRogue
		name : "Boots of Elvenkind",
		source : [["SRD", 212], ["D", 155]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While I wear these boots, my steps make no sound, regardless of the surface I am moving across. I also have advantage on Dexterity (Stealth) checks that rely on moving silently.",
		descriptionFull : "While you wear these boots, your steps make no sound, regardless of the surface you are moving across. You also have advantage on Dexterity (Stealth) checks that rely on moving silently.",
		eval : function () {
			for (var i = 0; i < CurrentMagicItems.known.length; i++) {
				if (CurrentMagicItems.known[i].indexOf("cloak of elvenkind") !== -1 && tDoc.getField("Extra.Magic Item Attuned " + (1 + i)).isBoxChecked(0)) {
					SetProf("advantage", true, ["Stealth", true], "Cloak and Boots of Elvenkind (magic items)");
					break;
				}
			}
		},
		removeeval : function () {
			SetProf("advantage", false, ["Stealth", true], "Cloak and Boots of Elvenkind (magic items)");
		}
	},
	"boots of levitation" : { // contributed by AelarTheElfRogue
		name : "Boots of Levitation",
		source : [["SRD", 212], ["D", 155]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "While I wear these boots, I can cast Levitate on myself at will.",
		descriptionFull : "While you wear these boots, you can use an action to cast the Levitate spell on yourself at will.",
		spellcastingBonus : {
			name : "Self Only",
			spells : ["levitate"],
			selection : ["levitate"],
			firstCol : "atwill"
		},
		spellChanges : {
			"levitate" : {
				range : "Self",
				changes : "The spell can only affect the wearer."
			}
		}
	},
	"boots of speed" : {
		name : "Boots of Speed",
		source : [["SRD", 212], ["D", 155]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "As a bonus action, I can click the heels of these boots together to double my walking speed and make opportunity attacks against me have disadvantage. I can end this effect with another bonus action. After the boots' magic has been used for a total of 10 minutes, they lose their power until I finish a long rest.",
		descriptionFull : "While you wear these boots, you can use a bonus action and click the boots' heels together. If you do, the boots double your walking speed, and any creature that makes an opportunity attack against you has disadvantage on the attack roll. If you click your heels together again, you end the effect.\n   When the boots' property has been used for a total of 10 minutes, the magic ceases to function until you finish a long rest.",
		action : [["bonus action", " (start/stop)"]],
		usages : 10,
		recovery : "long rest",
		additional : "minutes"
	},
	"boots of striding and springing" : { // contributed by AelarTheElfRogue
		name : "Boots of Striding and Springing",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		attunement : true,
		description : "While I wear these boots, my walking speed becomes 30 feet, unless my walking speed is higher, and my speed isn't reduced if I am encumbered or wearing heavy armor. In addition, I can jump three times the normal distance, though I can't jump farther than my remaining movement would allow.",
		descriptionFull : "While you wear these boots, your walking speed becomes 30 feet, unless your walking speed is higher, and your speed isn't reduced if you are encumbered or wearing heavy armor. In addition, you can jump three times the normal distance, though you can't jump farther than your remaining movement would allow.",
		speed : { walk : { spd : "fixed 30", enc : "fixed 30" } }
	},
	"boots of the winterlands" : {
		name : "Boots of the Winterlands",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "uncommon",
		attunement : true,
		magicItemTable : "F",
		description : "While wearing these boots, I have resistance to cold damage and I ignore difficult terrain created by ice or snow. I can tolerate temperatures as low as -50 \u00B0F without any additional protection. If I wear heavy clothes, I can tolerate temperatures as low as -100 \u00B0F.",
		descriptionFull : "These furred boots are snug and feel quite warm. While you wear them, you gain the following benefits:\n \u2022 You have resistance to cold damage.\n \u2022 You ignore difficult terrain created by ice or snow.\n \u2022 You can tolerate temperatures as low as -50 degrees Fahrenheit without any additional protection. If you wear heavy clothes, you can tolerate temperatures as low as -100 degrees Fahrenheit.",
		dmgres : ["Cold"]
	},
	"bowl of commanding water elementals" : {
		name : "Bowl of Commanding Water Elementals",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While this bowl is filled with water, I can speak the bowl's command word as an action and summon a water elemental, as if I had cast Conjure Elemental. The bowl can't be used again until the next dawn. The bowl is about 1 foot in diameter and half as deep, and holds about 3 gallons of water.",
		descriptionFull : "While this bowl is filled with water, you can use an action to speak the bowl's command word and summon a water elemental, as if you had cast the Conjure Elemental spell. The bowl can't be used this way again until the next dawn.\n   The bowl is about 1 foot in diameter and half as deep. It weighs 3 pounds and holds about 3 gallons.",
		weight : 3,
		spellcastingBonus : {
			name : "Water Elemental only",
			spells : ["conjure elemental"],
			selection : ["conjure elemental"],
			firstCol : "oncelr"
		},
		usages : 1,
		recovery : "dawn",
		spellChanges : {
			"conjure elemental" : {
				time : "1 a",
				components : "V,M\u0192",
				compMaterial : "The Bowl of Commanding Water Elementals needs to be filled with water to cast this spell with a command word.",
				description : "CR 5 water elemental that obeys my verbal commands; on broken conc. elemental breaks free",
				changes : "Using the Bowl of Commanding Water Elementals, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth a water elemental."
			}
		}
	},
	"bracers of archery" : {
		name : "Bracers of Archery",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing these bracers, I have proficiency with the longbow and shortbow, and I gain a +2 bonus to damage rolls on ranged attacks made with such weapons.",
		descriptionFull : "While wearing these bracers, you have proficiency with the longbow and shortbow, and you gain a +2 bonus to damage rolls on ranged attacks made with such weapons.",
		attunement : true,
		weaponProfs : [false, false, ["longbow", "shortbow"]],
		calcChanges : {
			atkCalc : [
				function (fields, v, output) {
					if (v.baseWeaponName == "shortbow" || v.baseWeaponName == "longbow") {
						output.extraDmg += 2;
					}
				},
				'I add +2 to the damage of attacks I make with shortbows and longbows.'
			],
		}
	},
	"bracers of defense" : {
		name : "Bracers of Defense",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "These bracers give me a +2 bonus to AC, but only if I'm not wearing armor or using a shield.",
		descriptionFull : "While wearing these bracers, you gain a +2 bonus to AC if you are wearing no armor and using no shield.",
		attunement : true,
		extraAC : [{
			mod : 2,
			magic : true,
			text : "I gain a +2 bonus to AC while I'm not wearing armor or using a shield.",
			stopeval : function (v) { return v.wearingArmor || v.usingShield; }
		}]
	},
	"brazier of commanding fire elementals" : {
		name : "Brazier of Commanding Fire Elementals",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While a fire burns in this brass brazier, I can use an action to speak the brazier's command word and summon a fire elemental, as if I had cast the Conjure Elemental spell. The brazier can't be used this way again until the next dawn.",
		descriptionFull : "While a fire burns in this brass brazier, you can use an action to speak the brazier's command word and summon a fire elemental, as if you had cast the Conjure Elemental spell. The brazier can't be used this way again until the next dawn.\n   The brazier weighs 5 pounds.",
		weight : 5,
		spellcastingBonus : {
			name : "Fire Elemental only",
			spells : ["conjure elemental"],
			selection : ["conjure elemental"],
			firstCol : "oncelr"
		},
		usages : 1,
		recovery : "dawn",
		spellChanges : {
			"conjure elemental" : {
				time : "1 a",
				components : "V,M\u0192",
				compMaterial : "The Brazier of Commanding Fire Elementals needs to have a fire burning in it to cast this spell with a command word.",
				description : "CR 5 fire elemental that obeys my verbal commands; on broken conc. elemental breaks free",
				changes : "Using the Brazier of Commanding Fire Elementals, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth a fire elemental."
			}
		}
	},
	"brooch of shielding" : { // contributed by Smashman
		name : "Brooch of Shielding",
		source : [["SRD", 212], ["D", 156]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this brooch, I have resistance to force damage, and have immunity to damage from the Magic Missile spell.",
		descriptionFull : "While wearing this brooch, you have resistance to force damage, and you have immunity to damage from the Magic Missile spell.",
		attunement : true,
		dmgres: ["Force"],
		savetxt: {
			immune: ["Magic Missile spell"]
		}
	},
	"broom of flying" : {
		name : "Broom of Flying",
		source : [["SRD", 213], ["D", 156]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "With the command word, this broom hovers and can either be ridden in the air or send alone up to 1 mile by naming a familiar location. It has a flying speed of 50 ft, holds up to 400 lb, but only has 30 ft speed if over 200 lb. It stops hovering when I land. With another command word, it flies to me if within 1 mile.",
		descriptionFull : "This wooden broom, which weighs 3 pounds, functions like a mundane broom until you stand astride it and speak its command word. It then hovers beneath you and can be ridden in the air. It has a flying speed of 50 feet. It can carry up to 400 pounds, but its flying speed becomes 30 feet while carrying over 200 pounds. The broom stops hovering when you land.\n   You can send the broom to travel alone to a destination within 1 mile of you if you speak the command word, name the location, and are familiar with that place. The broom comes back to you when you speak another command word, provided that the broom is still within 1 mile of you.",
		weight : 3
	},
	"candle of invocation" : {
		name : "Candle of Invocation",
		source : [["SRD", 213], ["D", 157]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This slender taper is dedicated to a deity and shares that deity's alignment. Lit, it sheds dim light in a 30-ft radius for up to 4 hours and grants benefits to creatures of matching alignment in the light.",
		descriptionFull : "This slender taper is dedicated to a deity and shares that deity's alignment. The candle's alignment can be detected with the Detect Evil and Good spell. The DM chooses the god and associated alignment or determines the alignment randomly.\n\n" + toUni("d20\tAlignment\td20\tAlignment") + "\n1-2\tChaotic evil\t10-11\tNeutral\n3-4\tChaotic neutral\t12-13\tNeutral good\n5-7\tChaotic good\t14-15\tLawful evil\n8-9\tNeutral evil\t16-17\tLawful neutral\n\t\t\t18-20\tLawful good\n\nThe candle's magic is activated when the candle is lit, which requires an action. After burning for 4 hours, the candle is destroyed. You can snuff it out early for use at a later time. Deduct the time it burned in increments of 1 minute from the candle's total burn time.\n   While lit, the candle sheds dim light in a 30-foot radius. Any creature within that light whose alignment matches that of the candle makes attack rolls, saving throws, and ability checks with advantage. In addition, a cleric or druid in the light whose alignment matches the candle's can cast 1st-level spells he or she has prepared without expending spell slots, though the spell's effect is as if cast with a 1st-level slot.\n   Alternatively, when you light the candle for the first time, you can cast the Gate spell with it. Doing so destroys the candle.",
		attunement : true,
		allowDuplicates : true,
		usages : "240 min",
		recovery : "Never",
		spellcastingBonus : {
			name : "1\xD7 \u0026\u0026 candle is destroyed",
			spells : ["gate"],
			selection : ["gate"],
			firstCol : "1\xD7"
		},
		action : [["action", " (light)"]],
		choices : ["Chaotic Evil", "Chaotic Neutral", "Chaotic Good", "Neutral Evil", "Neutral", "Neutral Good", "Lawful Evil", "Lawful Neutral", "Lawful Good"],
		"chaotic evil" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are chaotic evil have adv. on attacks, saves, and checks, while CE clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"chaotic neutral" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are chaotic neutral have adv. on attacks, saves, and checks, while CN clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"chaotic good" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are chaotic good have adv. on attacks, saves, and checks, while CG clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"neutral evil" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are neutral evil have adv. on attacks, saves, and checks, while NE clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"neutral" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are neutral have adv. on attacks, saves, and checks, while N clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"neutral good" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are neutral good have adv. on attacks, saves, and checks, while NG clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"lawful evil" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are lawful evil have adv. on attacks, saves, and checks, while LE clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"lawful neutral" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are lawful neutral have adv. on attacks, saves, and checks, while LN clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		},
		"lawful good" : {
			description : "As an action, I can light this candle. The first time I do, I can cast Gate and destroy it or have it shed dim light in a 30-ft radius. All in the light who are lawful good have adv. on attacks, saves, and checks, while LG clerics/druids can cast their 1st-level spells without using a level 1 slot. It can burn for 4 hours intermittently."
		}
	},
	"cape of the mountebank" : { // contributed by Smashman
		name : "Cape of the Mountebank",
		source : [["SRD", 213], ["D", 157]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While wearing this cape, I can use it to cast the Dimension Door spell as an action. This property of the cape can't be used again until the next dawn. The cape smells faintly of brimstone. When I disappear, smoke lightly obscures the place that I left and the place that I appear, which dissipates at the end of my next turn.",
		descriptionFull : "This cape smells faintly of brimstone. While wearing it, you can use it to cast the Dimension Door spell as an action. This property of the cape can't be used again until the next dawn.\n   When you disappear, you leave behind a cloud of smoke, and you appear in a similar cloud of smoke at your destination. The smoke lightly obscures the space you left and the space you appear in, and it dissipates at the end of your next turn. A light or stronger wind disperses the smoke.",
		usages : 1,
		recovery : "dawn",
		spellcastingBonus : {
			name: "Cape of the Mountebank",
			spells: ["dimension door"],
			selection: ["dimension door"],
			firstCol : "oncelr"
		}
	},
	"carpet of flying" : {
		name : "Carpet of Flying",
		source : [["SRD", 213], ["D", 157]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "I can speak the carpet's command word as an action to make the carpet hover and fly. It moves according to my spoken directions if I am within 30 feet of it. A carpet can carry up to twice the weight for its type, but it flies at half speed if it carries more than its normal capacity.",
		descriptionFull : "You can speak the carpet's command word as an action to make the carpet hover and fly. It moves according to your spoken directions, provided that you are within 30 feet of it.\n   Four sizes of carpet of flying exist. The DM chooses the size of a given carpet or determines it randomly.\n\n" + toUni("d100\tSize\tCapacity\tFlying Speed") + "\n01-20\t3 \xD7 5 ft.\t  200 lb.\t  80 feet\n21-55\t4 \xD7 6 ft.\t  400 lb.\t  60 feet\n56-80\t5 \xD7 7 ft.\t  600 lb.\t  40 feet\n81-100\t6 \xD7 9 ft.\t  800 lb.\t  30 feet\n\nA carpet can carry up to twice the weight shown on the table, but it flies at half speed if it carries more than its normal capacity.",
		action : [["action", ""]],
		choices : ["3 \xD7 5 ft (fly 80 ft, 200 lb)", "4 \xD7 6 ft (fly 60 ft, 400 lb)", "5 \xD7 7 ft (fly 40 ft, 600 lb)", "6 \xD7 9 ft (fly 30 ft, 800 lb)"],
		"3 \xD7 5 ft (fly 80 ft, 200 lb)" : {
			name : "Carpet of Flying, 3 ft \xD7 5 ft",
			nameTest : "Carpet of Flying, 1 m \xD7 1,5 m",
			description : "I can speak the carpet's command word as an action to make the 3 ft \xD7 5 ft carpet hover and fly. It moves according to my spoken directions if I am within 30 ft of it. It has a flying speed of 80 ft and can carry up to 400 lb. If it carries more than 200 lb its flying speed is reduced to only 40 ft."
		},
		"4 \xD7 6 ft (fly 60 ft, 400 lb)" : {
			name : "Carpet of Flying, 4 ft \xD7 6 ft",
			nameTest : "Carpet of Flying, 1,2 m \xD7 2 m",
			description : "I can speak the carpet's command word as an action to make the 4 ft \xD7 6 ft carpet hover and fly. It moves according to my spoken directions if I am within 30 ft of it. It has a flying speed of 60 ft and can carry up to 800 lb. If it carries more than 400 lb its flying speed is reduced to only 30 ft."
		},
		"5 \xD7 7 ft (fly 40 ft, 600 lb)" : {
			name : "Carpet of Flying, 5 ft \xD7 7 ft",
			nameTest : "Carpet of Flying, 1,5 m \xD7 2,1 m",
			description : "I can speak the carpet's command word as an action to make the 5 ft \xD7 7 ft carpet hover and fly. It moves according to my spoken directions if I am within 30 ft of it. It has a flying speed of 40 ft and can carry up to 1200 lb. If it carries more than 600 lb its flying speed is reduced to only 20 ft."
		},
		"6 \xD7 9 ft (fly 30 ft, 800 lb)" : {
			name : "Carpet of Flying, 6 ft \xD7 9 ft",
			nameTest : "Carpet of Flying, 1,8 m \xD7 2,7 m",
			description : "I can speak the carpet's command word as an action to make the 6 ft \xD7 9 ft carpet hover and fly. It moves according to my spoken directions if I am within 30 ft of it. It has a flying speed of 30 ft and can carry up to 1600 lb. If it carries more than 800 lb its flying speed is reduced to only 15 ft."
		}
	},
	"censer of controlling air elementals" : {
		name : "Censer of Controlling Air Elementals",
		source : [["SRD", 213], ["D", 158]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While incense is burning in this censer, I can use an action to speak the censer's command word and summon an air elemental, as if I had cast Conjure Elemental. The censer can't be used this way again until the next dawn. This 6\" wide, 1' high vessel resembles a chalice with a decorated lid.",
		descriptionFull : "While incense is burning in this censer, you can use an action to speak the censer's command word and summon an air elemental, as if you had cast the Conjure Elemental spell. The censer can't be used this way again until the next dawn.\n   This 6-inch-wide, 1-foot-high vessel resembles a chalice with a decorated lid. It weighs 1 pound.",
		weight : 1,
		spellcastingBonus : {
			name : "Air Elemental only",
			spells : ["conjure elemental"],
			selection : ["conjure elemental"],
			firstCol : "oncelr"
		},
		usages : 1,
		recovery : "dawn",
		spellChanges : {
			"conjure elemental" : {
				time : "1 a",
				components : "V,M\u0192",
				compMaterial : "The Censer of Controlling Air Elementals needs to have a incense burning in it to cast this spell with a command word.",
				description : "CR 5 air elemental that obeys my verbal commands; on broken conc. elemental breaks free",
				changes : "Using the Censer of Controlling Air Elementals, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth an air elemental."
			}
		}
	},
	"chime of opening" : { // contributed by AelarTheElfRogue
		name : "Chime of Opening",
		source : [["SRD", 213], ["D", 158]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "I can strike this as an action, pointing it at an object within 120 ft of me that can be opened (i.e. door, lid, lock). One lock or latch on it opens unless the sound can't reach it. If no locks or latches remain, the object itself opens. The chime can be used ten times. After the tenth time it cracks and becomes useless.",
		descriptionFull : "This hollow metal tube measures about 1 foot long and weighs 1 pound. You can strike it as an action, pointing it at an object within 120 feet of you that can be opened, such as a door, lid, or lock. The chime issues a clear tone, and one lock or latch on the object opens unless the sound can't reach the object. If no locks or latches remain, the object itself opens.\n   The chime can be used ten times. After the tenth time it cracks and becomes useless.",
		weight : 1,
		action : [["action", ""]],
		usages : 10,
		recovery : "Never"
	},
	"circlet of blasting" : { // contains contributions by Larry Hoy
		name : "Circlet of Blasting",
		source : [["SRD", 214], ["D", 158]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this circlet, I can use an action to cast the Scorching Ray spell with it. When I make the spell's attacks, I do so with an attack bonus of +5. The circlet can't be used this way again until the next dawn.",
		descriptionFull : "While wearing this circlet, you can use an action to cast the Scorching Ray spell with it. When you make the spell's attacks, you do so with an attack bonus of +5. The circlet can't be used this way again until the next dawn.",
		usages : 1,
		recovery : "dawn",
		fixedDC : 13,
		spellcastingBonus : {
			name : "Once per dawn",
			spells : ["scorching ray"],
			selection : ["scorching ray"],
			firstCol : "oncelr"
		}
	},
	"cloak of arachnida" : {
		name : "Cloak of Arachnida",
		source : [["SRD", 214], ["D", 158]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This cloak grants me resistance to poison damage, climbing speed equal to my walking speed, even along vertical surfaces and upside down while keeping my hands free, freedom from being caught in webs, the ability to move through webs as if just difficult terrain, and the ability to cast Web once per dawn.",
		descriptionFull : "This fine garment is made of black silk interwoven with faint silvery threads. While wearing it, you gain the following benefits:\n \u2022 You have resistance to poison damage.\n \u2022 You have a climbing speed equal to your walking speed.\n \u2022 You can move up, down, and across vertical surfaces and upside down along ceilings, while leaving your hands free.\n \u2022 You can't be caught in webs of any sort and can move through webs as if they were difficult terrain.\n \u2022 You can use an action to cast the Web spell (save DC 13). The web created by the spell fills twice its normal area. Once used, this property of the cloak can't be used again until the next dawn.",
		attunement : true,
		usages : 1,
		recovery : "dawn",
		additional : "cast web",
		fixedDC : 13,
		speed : { climb : { spd : "walk", enc : "walk" } },
		spellcastingBonus : {
			name : "Once per dawn",
			spells : ["web"],
			selection : ["web"],
			firstCol : "oncelr"
		},
		spellChanges : {
			"web": {
				description : "2\xD7 20-ft cubes, anchored, all save or restrained; dif. ter.; lightly obscures; Str check vs. DC 13 to free"
			}
		}
	},
	"cloak of displacement" : { // contributed by Smashman
		name : "Cloak of Displacement",
		source : [["SRD", 214], ["D", 158]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While I wear this cloak, creatures have disadvantage on attack rolls against me as I appear to be standing in a slightly different location. If I take damage, this property ceases to function until the start of my next turn. The property is suppressed while I am incapacitated, restrained, or otherwise unable to move.",
		descriptionFull : "While you wear this cloak, it projects an illusion that makes you appear to be standing in a place near your actual location, causing any creature to have disadvantage on attack rolls against you. If you take damage, the property ceases to function until the start of your next turn. This property is suppressed while you are incapacitated, restrained, or otherwise unable to move.",
		attunement : true
	},
	"cloak of elvenkind" : {
		name : "Cloak of Elvenkind",
		source : [["SRD", 214], ["D", 158]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While I wear this cloak with its hood up, Wisdom (Perception) checks made to see me have disadvantage, and I have advantage on Dexterity (Stealth) checks made to hide, as the cloak's color shifts to camouflage me. Pulling the hood up or down requires an action.",
		descriptionFull : "While you wear this cloak with its hood up, Wisdom (Perception) checks made to see you have disadvantage, and you have advantage on Dexterity (Stealth) checks made to hide, as the cloak's color shifts to camouflage you. Pulling the hood up or down requires an action.",
		attunement : true,
		action : [["action", " (hood up/down)"]],
		eval : function () {
			if (CurrentMagicItems.known.indexOf("boots of elvenkind") !== -1) {
				SetProf("advantage", true, ["Stealth", true], "Cloak and Boots of Elvenkind (magic items)");
			}
		},
		removeeval : function () {
			SetProf("advantage", false, ["Stealth", true], "Cloak and Boots of Elvenkind (magic items)");
		}
	},
	"cloak of protection" : {
		name : "Cloak of Protection",
		source : [["SRD", 214], ["D", 159]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While I wear this cloak, I gain a +1 bonus to AC and saving throws.",
		descriptionFull : "You gain a +1 bonus to AC and saving throws while you wear this cloak.",
		attunement : true,
		extraAC : [{name : "Cloak of Protection", mod : 1, magic : true, text : "I gain a +1 bonus to AC while attuned."}],
		addMod : [{ type : "save", field : "all", mod : 1, text : "While I wear the Cloak of Protection, I gain a +1 bonus to all my saving throws." }]
	},
	"cloak of the bat" : {
		name : "Cloak of the Bat",
		source : [["SRD", 214], ["D", 159]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This cloak grants me adv. on Stealth checks. In dim light or darkness, I can fly with it and, once per dawn, use it to transform myself into a bat as if casting Polymorph. To fly, at 40 ft speed, I have to grip its edges with both my hands. While in the form of the bat, I retain my Intelligence, Wisdom, and Charisma scores.",
		descriptionFull : "While wearing this cloak, you have advantage on Dexterity (Stealth) checks. In an area of dim light or darkness, you can grip the edges of the cloak with both hands and use it to fly at a speed of 40 feet. If you ever fail to grip the cloak's edges while flying in this way, or if you are no longer in dim light or darkness, you lose this flying speed.\n   While wearing the cloak in an area of dim light or darkness, you can use your action to cast Polymorph on yourself, transforming into a bat. While you are in the form of the bat, you retain your Intelligence, Wisdom, and Charisma scores. The cloak can't be used this way again until the next dawn.",
		attunement : true,
		usages : 1,
		recovery : "dawn",
		additional : "Polymorph",
		advantages : [["Stealth", true]],
		spellcastingBonus : {
			name : "Only self into bat",
			spells : ["polymorph"],
			selection : ["polymorph"],
			firstCol : "oncelr"
		},
		spellChanges : {
			"polymorph" : {
				range : "Self",
				description : "Only cast in dim light or darkness; I transform into a bat, gaining its stats, but I keep my Int, Wis, Cha",
				changes : "The spell can only turn the wearer into a bat, but the wearer keeps its Intelligence, Wisdom, and Charisma scores."
			}
		}
	},
	"cloak of the manta ray" : {
		name : "Cloak of the Manta Ray",
		source : [["SRD", 214], ["D", 159]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "While wearing this cloak with its hood up, I can breathe underwater, and I have a swimming speed of 60 ft. Pulling the hood up or down requires an action.",
		descriptionFull : "While wearing this cloak with its hood up, you can breathe underwater, and you have a swimming speed of 60 feet. Pulling the hood up or down requires an action.",
		action : [["action", " (hood up/down)"]],
		speed : { swim : { spd : "fixed 60", enc : "fixed 50" } }
	},
	"crystal ball" : {
		name : "Crystal Ball",
		source : [["SRD", 214], ["D", 159]],
		type : "wondrous item",
		description : "I can cast Scrying (DC 17) at will while touching this ball of about 6 inches in diameter.",
		descriptionFull : "This crystal ball is about 6 inches in diameter. While touching it, you can cast the Scrying spell (save DC 17) with it.",
		attunement : true,
		weight : 3,
		allowDuplicates : true,
		fixedDC : 17,
		spellcastingBonus : {
			name : "DC 17",
			spells : ["scrying"],
			selection : ["scrying"],
			firstCol : "atwill"
		},
		choices : ["Crystal Ball  ", "Crystal Ball of Mind Reading", "Crystal Ball of Telepathy", "Crystal Ball of True Seeing"],
		"crystal ball  " : {
			name : "Crystal Ball  ",
			rarity : "very rare",
			magicItemTable : "H"
		},
		"crystal ball of mind reading" : {
			name : "Crystal Ball of Mind Reading",
			rarity : "legendary",
			magicItemTable : "I",
			description : "I can cast Scrying (DC 17) at will while touching this crystal ball of 6\" diameter. While scrying, I can cast Detect Thoughts (DC 17) to target creatures I can see within 30 ft of the spell's sensor. I don't need to concentrate on this Detect Thoughts, but it ends when the scrying ends.",
			descriptionFull : "This crystal ball is about 6 inches in diameter. While touching it, you can cast the Scrying spell (save DC 17) with it.\n   You can use an action to cast the Detect Thoughts spell (save DC 17) while you are Scrying with the crystal ball, targeting creatures you can see within 30 feet of the spell's sensor. You don't need to concentrate on this Detect Thoughts to maintain it during its duration, but it ends if Scrying ends.",
			spellcastingBonus : {
				name : "DC 17",
				spells : ["detect thoughts"],
				selection : ["detect thoughts"],
				firstCol : "atwill"
			},
			spellChanges : {
				"detect thoughts" : {
					duration : "1 min",
					changes : "Detect Thoughts only works through the spell sensor of the Scrying spell and doesn't require concentration. It ends when the Scrying spell ends."
				}
			}
		},
		"crystal ball of telepathy" : {
			name : "Crystal Ball of Telepathy",
			rarity : "legendary",
			magicItemTable : "I",
			description : "I can cast Scrying (DC 17) while touching this 6\" crystal ball. While scrying, I can communicate telepathically with creatures within 30 ft of the spell's sensor and can cast Suggestion (DC 17) once per dawn on one of them. I don't need to concentrate on this Suggestion, but it ends when the scrying ends.",
			descriptionFull : "This crystal ball is about 6 inches in diameter. While touching it, you can cast the Scrying spell (save DC 17) with it.\n   While Scrying with the crystal ball, you can communicate telepathically with creatures you can see within 30 feet of the spell's sensor. You can also use an action to cast the Suggestion spell (save DC 17) through the sensor on one of those creatures. You don't need to concentrate on this suggestion to maintain it during its duration, but it ends if Scrying ends. Once used, the suggestion power of the crystal ball can't be used again until the next dawn.",
			spellcastingBonus : {
				name : "DC 17",
				spells : ["suggestion"],
				selection : ["suggestion"],
				firstCol : "oncelr"
			},
			limfeaname : "Suggestion through Crystal Ball",
			usages : 1,
			recovery : "dawn",
			spellChanges : {
				"suggestion" : {
					duration : "8 h (scrying)",
					changes : "Suggestion only works through the spell sensor of the Scrying spell and doesn't require concentration. It ends when the Scrying spell ends."
				},
				"scrying" : {
					description : "1 crea save or sensor follows it around; or sensor in familiar location; telepathy 30 ft on sensor; see B",
					changes : "I can communicate telepathically with creatures within 30 ft of the scrying sensor."
				}
			}
		},
		"crystal ball of true seeing" : {
			name : "Crystal Ball of True Seeing",
			rarity : "legendary",
			magicItemTable : "I",
			description : "I can cast Scrying (save DC 17) at will while touching this ball of about 6 inches in diameter. While scrying, I can see out from the spell's sensor with truesight out to 120 ft.",
			descriptionFull : "This crystal ball is about 6 inches in diameter. While touching it, you can cast the Scrying spell (save DC 17) with it.\n   While Scrying with the crystal ball, you have truesight with a radius of 120 feet centered on the spell's sensor.",
			spellChanges : {
				"scrying" : {
					description : "1 crea save or sensor follows it around; or sensor in familiar location; truesight 120 ft on sensor; see B",
					changes : "I have truesight out to 120 ft from the scrying sensor."
				}
			}
		}
	},
	"cube of force" : { // contains contributions by Larry Hoy
		name : "Cube of Force",
		source : [["S	RD", 215], ["D", 159]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "Each face of this 1-inch cube has a distinct marking on it. As an action, I can press one of these faces, expending a number of charges to create an effect based on the chosen face, if enough charges remain. This creates a 15-ft cube barrier of force on me for 1 min, which moves with me. See Notes page for details.",
		descriptionFull : "This cube is about an inch across. Each face has a distinct marking on it that can be pressed. The cube starts with 36 charges, and it regains 1d20 expended charges daily at dawn.\n   You can use an action to press one of the cube's faces, expending a number of charges based on the chosen face, as shown in the Cube of Force Faces table. Each face has a different effect. If the cube has insufficient charges remaining, nothing happens. Otherwise, a barrier of invisible force springs into existence, forming a cube 15 feet on a side. The barrier is centered on you, moves with you, and lasts for 1 minute, until you use an action to press the cube's sixth face, or the cube runs out of charges. You can change the barrier's effect by pressing a different face of the cube and expending the requisite number of charges, resetting the duration. If your movement causes the barrier to come into contact with a solid object that can't pass through the cube, you can't move any closer to that object as long as the barrier remains.\n\n" + toUni("Face    Charges\tEffect") + "\n  1\t1\tGases, wind, and fog can't pass through the barrier.\n  2\t2\tNonliving matter can't pass through the barrier.*\n  3\t3\tLiving matter can't pass through the barrier.\n  4\t4\tSpell effects can't pass through the barrier.\n  5\t5\tNothing can pass through the barrier.*\n  6\t0\tThe barrier deactivates.\n\n   * Walls, floors, and ceilings can pass through at your discretion.\n\nThe cube loses charges when the barrier is targeted by certain spells or comes into contact with certain spell or magic item effects, as shown in the table below.\n\n" + toUni("Spell or Item\tCharges Lost") + "\nDisintegrate\t1d12\nHorn of Blasting\t1d10\nPasswall\t\t1d6\nPrismatic Spray\t1d20\nWall of Fire\t1d4",
		attunement : true,
		usages : 36,
		recovery : "dawn",
		additional : "regains 1d20",
		action : [["action", ""]],
		toNotesPage : [{
			name : "Cube of Force Charge Expenditure Tables",
			note : [
				"As an action, I can pressing one of the faces of the cube, expending charges and invoking the effect as listed below. The cube has 36 charges, and it regains 1d20 expended charges daily at dawn.",
				"Once activated, a barrier of invisible force springs into existence, forming a cube 15 feet on a side. The barrier is centered on me, moves with me, and lasts for 1 minute, until I use an action to press the cube's sixth face, the cube runs out of charges, or I press another face to invoke another barrier.",
				"If my movement causes the barrier to come into contact with a solid object that can't pass through the cube, I can't move any closer to that object as long as the barrier remains.",
				"FACE\tCHARGES\tEFFECT",
				"   1\t      1\tGases, wind, and fog can't pass through the barrier.",
				"   2\t      2\tNonliving matter can't pass through the barrier.",
				"   3\t      3\tLiving matter can't pass through the barrier.*",
				"   4\t      4\tSpell effects can't pass through the barrier.",
				"   5\t      5\tNothing can pass through the barrier.*",
				"   6\t      0\tThe barrier deactivates.\n" +
				"* Walls, floors, and ceilings can pass through at my discretion.\n",
				"The cube loses charges when the barrier is targeted by certain spells or comes into contact with certain spell or magic item effects, as shown in the table below.",
				"SPELL OR ITEM\tCHARGES LOST",
				"Disintegrate  \t1d12",
				"Horn of Blasting\t1d10",
				"Passwall\t\t1d6",
				"Prismatic Spray\t1d20",
				"Wall of Fire\t1d4"
			]
		}]
	},
	"cubic gate" : { // contains contributions by Larry Hoy
		name : "Cubic Gate",
		source : [["SRD", 215], ["D", 160]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "The six sides of this 3-inch cube, which radiates palpable magic energy, are each keyed to a different plane of existence (one is material plane). As an action, I can expend a charge and press a side of the cube once to cast Gate or twice to cast Plane Shift (DC 17). Both spells only link to the plane on the pressed side.",
		descriptionFull : "This cube is 3 inches across and radiates palpable magical energy. The six sides of the cube are each keyed to a different plane of existence, one of which is the Material Plane. The other sides are linked to planes determined by the DM.\n   You can use an action to press one side of the cube to cast the Gate spell with it, opening a portal to the plane keyed to that side. Alternatively, if you use an action to press one side twice, you can cast the Plane Shift spell (save DC 17) with the cube and transport the targets to the plane keyed to that side.\n   The cube has 3 charges. Each use of the cube expends 1 charge. The cube regains 1d3 expended charges daily at dawn.",
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		spellFirstColTitle : "Ch",
		fixedDC : 17,
		spellcastingBonus : {
			name : "1 charge",
			spells : ["gate", "plane shift"],
			selection : ["gate", "plane shift"],
			times : 2,
			firstCol : 1
		},
		spellChanges : {
			"plane shift" : {
				description : "Me + 8 willing crea teleport to, or spell attack + save to transport unwilling to plane keyed to the side",
				changes : "Using the Cubic Gate, the spell only links to the plane on the side of the cube that pressed."
			},
			"gate" : {
				description : "Create a portal to a precise location on the plane keyed to the side; can transport named creature to me",
				changes : "Using the Cubic Gate, the spell only links to the plane on the side of the cube that pressed."
			}
		}
	},
	"daern's instant fortress" : { // contains contributions by Larry Hoy
		name : "Daern's Instant Fortress",
		nameAlt : "Instant Fortress",
		source : [["SRD", 226], ["D", 160]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description: "As an action, I can place this 1-inch metal cube on the ground and speak its command word, making it grow into a 20-ft by 20-ft by 30-ft high adamantine tower with a door facing me, arrow slits on all sides, battlement atop, two floors, and a ladder along one wall ending at a trapdoor to the roof. See Notes page for details.",
		descriptionFull : "You can use an action to place this 1-inch metal cube on the ground and speak its command word. The cube rapidly grows into a fortress that remains until you use an action to speak the command word that dismisses it, which works only if the fortress is empty.\n   The fortress is a square tower, 20 feet on a side and 30 feet high, with arrow slits on all sides and a battlement atop it. Its interior is divided into two floors. with a ladder running along one wall to connect them. The ladder ends at a trapdoor leading to the roof. When activated, the tower has a small door on the side facing you. The door opens only at your command, which you can speak as a bonus action. It is immune to the Knock spell and similar magic, such as that of a chime of opening.\n   Each creature in the area where the fortress appears must make a DC 15 Dexterity saving throw, taking 10d10 bludgeoning damage on a failed save, or half as much damage on a successful one. In either case, the creature is pushed to an unoccupied space outside but next to the fortress. Objects in the area that aren't being worn or carried take this damage and are pushed automatically.\n   The tower is made of adamantine, and its magic prevents it from being tipped over. The roof, the door, and the walls each have 100 hit points, immunity to damage from nonmagical weapons excluding siege weapons, and resistance to all other damage. Only a Wish spell can repair the fortress (this use of the spell counts as replicating a spell of 8th level or lower). Each casting of Wish causes the roof, the door, or one wall to regain 50 hit points.",
		action : [["action", ""]],
		toNotesPage : [{
			name : "Fortress Details",
			note : [
				"As an action I can place this 1-inch metal cube on the ground and speak its command word. The cube rapidly grows into a fortress that remains until I use an action to speak the command word that dismisses it, which works only if the fortress is empty.",
				"The fortress is a square tower, 20 feet on a side and 30 feet high, with arrow slits on all sides and a battlement atop it. Its interior is divided into two floors. with a ladder running along one wall to connect them. The ladder ends at a trapdoor leading to the roof.",
				"When activated, the tower has a small door on the side facing me. The door opens only at my command, which I can speak as a bonus action. It is immune to the Knock spell and similar magic (e.g., a Chime of Opening).",
				"Each creature in the area where the fortress appears must make a DC 15 Dex save or take 10d10 bludgeoning damage (half damage on a success). In either case, the creature is pushed to an unoccupied space outside but next to the fortress. Objects in the area that aren't being worn or carried take this damage and are pushed automatically.",
				"The tower is made of adamantine, and its magic prevents it from being tipped over. The roof, the door, and the walls each have 100 hit points, immunity to damage from nonmagical weapons excluding siege weapons, and resistance to all other damage. Only a Wish spell can repair the fortress (this use of the spell counts as replicating a spell of 8th level or lower). Each casting of Wish causes the roof, the door, or one wall to regain 50 hit points."
			]
		}]
	},
	"dagger of venom" : {
		name : "Dagger of Venom",
		source : [["SRD", 215], ["D", 161]],
		type : "weapon (dagger)",
		rarity : "rare",
		magicItemTable : "G",
		description : "This magical dagger adds a +1 bonus to attack and damage rolls made with it. As an action once per dawn, I can have the blade coat itself with thick, black poison, lasting 1 min. While it is coated, the first creature hit must make a DC 15 Con save or take 2d10 poison damage and become poisoned for 1 min.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon.\n   You can use an action to cause thick, black poison to coat the blade. The poison remains for 1 minute or until an attack using this weapon hits a creature. That creature must succeed on a DC 15 Constitution saving throw or take 2d10 poison damage and become poisoned for 1 minute. The dagger can't be used this way again until the next dawn.",
		weight : 1,
		usages : 1,
		recovery : "dawn",
		weaponsAdd : ["Dagger of Venom"],
		weaponOptions : {
			baseWeapon : "dagger",
			regExpSearch : /^(?=.*dagger)(?=.*venom).*$/i,
			name : "Dagger of Venom",
			source : [["SRD", 215], ["D", 161]],
			description : "Finesse, light, thrown; If coated, DC 15 Con save or +2d10 poison damage \u0026 1 min poisoned",
			modifiers : [1, 1]
		}
	},
	"dancing sword" : {
		name : "Dancing Sword",
		nameTest : "Dancing",
		source : [["SRD", 215], ["D", 161]],
		type : "weapon (any sword)",
		rarity : "very rare",
		magicItemTable : "H",
		attunement : true,
		description : "As a bonus action, I can toss this sword into the air and use the command to make it hover, fly up to 30 ft and attack a target of my choice (as if I'm using it).\nI can command it to move/attack again as a bonus action while it hovers and is in 30 ft.\nAfter the 4th attack, it moves 30 ft to return to my hand.",
		descriptionLong : "As a bonus action, I can toss this magic sword into the air and use the command word to make it hover, fly up to 30 ft and attack a target of my choice within 5 ft of it.\nThe attack uses my attack roll and ability score for damage as if I would be using the sword.\nI can command it to move and attack again as a bonus action while it hovers.\nAfter the 4th attack, it moves 30 ft to try and return to my hand.\nIf it can't reach me or my hands are full, it falls to the ground after moving.\nIt also ceases to hover if I grasp it or move more than 30 ft away from it.",
		descriptionFull : "You can use a bonus action to toss this magic sword into the air and speak the command word. When you do so, the sword begins to hover, flies up to 30 feet, and attacks one creature of your choice within 5 feet of it. The sword uses your attack roll and ability score modifier to damage rolls.\n   While the sword hovers, you can use a bonus action to cause it to fly up to 30 feet to another spot within 30 feet of you. As part of the same bonus action, you can cause the sword to attack one creature within 5 feet of it.\n   After the hovering sword attacks for the fourth time, it flies up to 30 feet and tries to return to your hand. If you have no hand free, it falls to the ground at your feet. If the sword has no unobstructed path to you, it moves as close to you as it can and then falls to the ground. It also ceases to hover if you grasp it or move more than 30 feet away from it.",
		action : [["bonus action", ""]],
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "suffix",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/dancing/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'Attacks on its own as a bonus action';
					}
				},
				'If I include the word "Dancing" in a the name of a sword, it will be treated as the magic weapon Dancing Sword. The sword can be made to attack on its own as a bonus action.'
			]
		}
	},
	"decanter of endless water" : {
		name : "Decanter of Endless Water",
		source : [["SRD", 216], ["D", 161]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "C",
		description : 'As an action, I open the flask \u0026 speak a command word, pouring fresh/salt water out until my next turn starts. "Stream" for 1 gal. "Fountain" for 5 gal. "Geyser" for 30 gal in 30 ft \xD7 1 ft geyser. As a bonus action, I can aim it at a target, which has to make a DC 13 Str save or take 1d4 bludgeoning damage and fall prone.',
		descriptionLong : 'As an action, I can remove the stopper from this flask and speak one of three command words, pouring fresh or salt water (my choice) out until my next turn starts. "Stream" produces 1 gallon. "Fountain" produces 5 gallons. "Geyser" produces 30 gallons of water that gushes forth in a geyser 30 ft long by 1 ft wide. As a bonus action while holding it, I can aim the geyser at a creature I can see within 30 ft. The target must succeed on a DC 13 Strength save or take 1d4 bludgeoning damage and fall prone. I can instead target an unattended object weighing up to 200 lb, knocking it over or pushing it up to 15 ft away.',
		descriptionFull : "This stoppered flask sloshes when shaken, as if it contains water. The decanter weighs 2 pounds.\n   You can use an action to remove the stopper and speak one of three command words, whereupon an amount of fresh water or salt water (your choice) pours out of the flask. The water stops pouring out at the start of your next turn. Choose from the following options:\n \u2022 \"Stream\" produces 1 gallon of water.\n \u2022 \"Fountain\" produces 5 gallons of water.\n \u2022 \"Geyser\" produces 30 gallons of water that gushes forth in a geyser 30 feet long and 1 foot wide. As a bonus action while holding the decanter, you can aim the geyser at a creature you can see within 30 feet of you. The target must succeed on a DC 13 Strength saving throw or take 1d4 bludgeoning damage and fall prone. Instead of a creature, you can target an object that isn't being worn or carried and that weighs no more than 200 pounds. The object is either knocked over or pushed up to 15 feet away from you.",
		weight : 2
	},
	"deck of illusions" : {
		name : "Deck of Illusions",
		source : [["SRD", 216], ["D", 161]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "As an action, I can draw a card at random from this deck and throw it on the ground within 30 ft. An illusion, determined by the type of card, forms over the thrown card and remains until dispelled. While I'm within 120 ft of it, I can use an action to move it within 30 ft of the card. See Notes page for more details.",
		descriptionFull : [
			"This box contains a set of parchment cards. A full deck has 34 cards. A deck found as treasure is usually missing 1d20-1 cards.",
			"The magic of the deck functions only if cards are drawn at random (you can use an altered deck of playing cards to simulate the deck). You can use an action to draw a card at random from the deck and throw it to the ground at a point within 30 feet of you.",
			"An illusion of one or more creatures forms over the thrown card and remains until dispelled. An illusory creature appears real, of the appropriate size, and behaves as if it were a real creature, except that it can do no harm. While you are within 120 feet of the illusory creature and can see it, you can use an action to move it magically anywhere within 30 feet of its card. Any physical interaction with the illusory creature reveals it to be an illusion, because objects pass through it. Someone who uses an action to visually inspect the creature identifies it as illusory with a successful DC 15 Intelligence (Investigation) check. The creature then appears translucent.",
			"The illusion lasts until its card is moved or the illusion is dispelled. When the illusion ends, the image on its card disappears, and that card can't be used again.\n",
			toUni("1d34\tPlaying Card\tIllusion"),
			"  1\tAce of hearts\tRed dragon",
			"  2\tKing of hearts\tKnight and four guards",
			"  3\tQueen of hearts\tSuccubus/Incubus",
			"  4\tJack of hearts\tDruid",
			"  5\tTen of hearts\tCloud giant",
			"  6\tNine of hearts\tEttin",
			"  7\tEight of hearts\tBugbear",
			"  8\tTwo of hearts\tGoblin",
			"  9\tAce of diamonds\tBeholder",
			"  10\tKing of diamonds\tArchmage and mage apprentice",
			"  11\tQueen diamonds\tNight hag",
			"  12\tJack of diamonds\tAssassin",
			"  13\tTen of diamonds\tFire giant",
			"  14\tNine of diamonds\tOgre mage",
			"  15\tEight of diamonds\tGnoll",
			"  16\tTwo of diamonds\tKobold",
			"  17\tAce of spades\tLich",
			"  18\tKing of spades\tPriest and two acolytes",
			"  19\tQueen of spades\tMedusa",
			"  20\tJack of spades\tVeteran",
			"  21\tTen of spades\tFrost giant",
			"  22\tNine of spades\tTroll",
			"  23\tEight of spades\tHobgoblin",
			"  24\tTwo of spades\tGoblin",
			"  25\tAce of clubs\tIron golem",
			"  26\tKing of clubs\tBandit captain and three bandits",
			"  27\tQueen of clubs\tErinyes",
			"  28\tJack of clubs\tBerserker",
			"  29\tTen of clubs\tHill giant",
			"  30\tNine of clubs\tOgre",
			"  31\tEight of clubs\tOrc",
			"  32\tTwo of clubs\tKobold",
			"33-34\tJoker (2)   \tYou (the deck's owner)"
		].join("\n"),
		toNotesPage : [{
			name : "Cards and Their Effects",
			note : [
				"This box contains a set of parchment cards. A full deck has 34 cards. A deck found as treasure is usually missing 1d20-1 cards.",
				"The magic of the deck functions only if cards are drawn at random. I can use an action to draw a card at random from the deck and throw it to the ground at a point within 30 ft of me.",
				"An illusion of one or more creatures forms over the thrown card and remains until dispelled. An illusory creature appears real, of the appropriate size, and behaves as if it were a real creature, except that it can do no harm. While I am within 120 ft of the illusory creature and can see it, I can use an action to move it magically anywhere within 30 ft of its card. Any physical interaction with the illusory creature reveals it to be an illusion, because objects pass through it. Someone who uses an action to visually inspect the creature identifies it as illusory with a successful DC 15 Intelligence (Investigation) check. The creature then appears translucent.",
				"The illusion lasts until its card is moved or the illusion is dispelled. When the illusion ends, the image on its card disappears, and that card can't be used again.\n",
				"1d34\tPLAYING CARD\tILLUSION",
				"  1\tAce of hearts\tRed dragon",
				"  2\tKing of hearts\tKnight and four guards",
				"  3\tQueen of hearts\tSuccubus/Incubus",
				"  4\tJack of hearts\tDruid",
				"  5\tTen of hearts\tCloud giant",
				"  6\tNine of hearts\tEttin",
				"  7\tEight of hearts\tBugbear",
				"  8\tTwo of hearts\tGoblin",
				"  9\tAce of diamonds\tBeholder",
				"  10\tKing of diamonds\tArchmage and mage apprentice",
				"  11\tQueen diamonds\tNight hag",
				"  12\tJack of diamonds\tAssassin",
				"  13\tTen of diamonds\tFire giant",
				"  14\tNine of diamonds\tOgre mage",
				"  15\tEight of diamonds\tGnoll",
				"  16\tTwo of diamonds\tKobold",
				"  17\tAce of spades\tLich",
				"  18\tKing of spades\tPriest and two acolytes",
				"  19\tQueen of spades\tMedusa",
				"  20\tJack of spades\tVeteran",
				"  21\tTen of spades\tFrost giant",
				"  22\tNine of spades\tTroll",
				"  23\tEight of spades\tHobgoblin",
				"  24\tTwo of spades\tGoblin",
				"  25\tAce of clubs \tIron golem",
				"  26\tKing of clubs\tBandit captain and three bandits",
				"  27\tQueen of clubs\tErinyes",
				"  28\tJack of clubs\tBerserker",
				"  29\tTen of clubs \tHill giant",
				"  30\tNine of clubs\tOgre",
				"  31\tEight of clubs\tOrc",
				"  32\tTwo of clubs \tKobold",
				"33-34\tJoker (2)\t\tYou (the deck's owner)"
			].join("\n")
		}]
	},
	"deck of many things" : { // contains contributions by Larry Hoy
		name : "Deck of Many Things",
		source : [["SRD", 216], ["D", 162]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		notLegalAL : true,
		description : "Before drawing cards from this deck, I must declare how many I wish to draw and then draw that number randomly. Any cards drawn in excess have no effect. When a card is drawn, its magic takes effect, it fades from existence, and, unless the card is the Fool or the Jester, reappears in the deck. See Notes page.",
		descriptionFull : "Usually found in a box or pouch, this deck contains a number of cards made of ivory or vellum. Most (75 percent) of these decks have only thirteen cards, but the rest have twenty-two.\n   Before you draw a card, you must declare how many cards you intend to draw and then draw them randomly (you can use an altered deck of playing cards to simulate the deck). Any cards drawn in excess of this number have no effect. Otherwise, as soon as you draw a card from the deck, its magic takes effect. You must draw each card no more than 1 hour after the previous draw. If you fail to draw the chosen number, the remaining number of cards fly from the deck on their own and take effect all at once.\n   Once a card is drawn, it fades from existence. Unless the card is the Fool or the Jester, the card reappears in the deck, making it possible to draw the same card twice.\n   " + toUni("A Question of Enmity") + ". Two of the cards in a deck of many things can earn a character the enmity of another being. With the Flames card, the enmity is overt. The character should experience the devil's malevolent efforts on multiple occasions. Seeking out the fiend shouldn't be a simple task, and the adventurer should clash with the devil's allies and followers a few times before being able to confront the devil itself.\n   In the case of the Rogue card, the enmity is secret and should come from someone thought to be a friend or an ally. As Dungeon Master, you should wait for a dramatically appropriate moment to reveal this enmity, leaving the adventurer guessing who is likely to become a betrayer.\n\n" + toUni("1d22\tPlaying Card\tCard") + "\n   1\tAce of diamonds\tVizier*\n   2\tKing of diamonds\tSun\n   3\tQueen diamonds\tMoon\n   4\tJack of diamonds\tStar\n   5\tTwo of diamonds\tComet*\n   6\tAce of hearts\tThe Fates*\n   7\tKing of hearts\tThrone\n   8\tQueen of hearts\tKey\n   9\tJack of hearts\tKnight\n   10\tTwo of hearts\tGem*\n   11\tAce of clubs\tTalons*\n   12\tKing of clubs\tThe Void\n   13\tQueen of clubs\tFlames\n   14\tJack of clubs\tSkull\n   15\tTwo of clubs\tIdiot*\n   16\tAce of spades\tDonjon*\n   17\tKing of spades\tRuin\n   18\tQueen of spades\tEuryale\n   19\tJack of spades\tRogue\n   20\tTwo of spades\tBalance*\n   21\tJoker (with TM)\tFool*\n   22\tJoker (no TM)\tJester\n\n   * Found only in a deck with twenty-two cards\n" + [
			toUni("Balance") + ". Your mind suffers a wrenching alteration, causing your alignment to change. Lawful becomes chaotic, good becomes evil, and vice versa. If you are true neutral or unaligned, this card has no effect on you.",
			toUni("Comet") + ". If you single-handedly defeat the next hostile monster or group of monsters you encounter, you gain experience points enough to gain one level. Otherwise, this card has no effect.",
			toUni("Donjon") + ". You disappear and become entombed in a state of suspended animation in an extradimensional sphere. Everything you were wearing and carrying stays behind in the space you occupied when you disappeared. You remain imprisoned until you are found and removed from the sphere. You can't be located by any divination magic, but a Wish spell can reveal the location of your prison. You draw no more cards.",
			toUni("Euryale") + ". The card's medusa-like visage curses you. You take a -2 penalty on saving throws while cursed in this way. Only a god or the magic of The Fates card can end this curse.",
			toUni("The Fates") + ". Reality's fabric unravels and spins anew, allowing you to avoid or erase one event as if it never happened. You can use the card's magic as soon as you draw the card or at any other time before you die.",
			toUni("Flames") + ". A powerful devil becomes your enemy. The devil seeks your ruin and plagues your life, savoring your suffering before attempting to slay you. This enmity lasts until either you or the devil dies.",
			toUni("Fool") + ". You lose 10,000 XP, discard this card, and draw from the deck again, counting both draws as one of your declared draws. If losing that much XP would cause you to lose a level, you instead lose an amount that leaves you with just enough XP to keep your level.",
			toUni("Gem") + ". Twenty-five pieces of jewelry worth 2,000 gp each or fifty gems worth 1,000 gp each appear at your feet.",
			toUni("Idiot") + ". Permanently reduce your Intelligence by 1d4+1 (to a minimum score of 1). You can draw one additional card beyond your declared draws.",
			toUni("Jester") + ". You gain 10,000 XP, or you can draw two additional cards beyond your declared draws.",
			toUni("Key") + ". A rare or rarer magic weapon with which you are proficient appears in your hands. The DM chooses the weapon.",
			toUni("Knight") + ". You gain the service of a 4th-level fighter who appears in a space you choose within 30 feet of you. The fighter is of the same race as you and serves you loyally until death, believing the fates have drawn him or her to you. You control this character.",
			toUni("Moon") + ". You are granted the ability to cast the Wish spell 1d3 times.",
			toUni("Rogue") + ". A nonplayer character of the DM's choice becomes hostile toward you. The identity of your new enemy isn't known until the NPC or someone else reveals it. Nothing less than a Wish spell or divine intervention can end the NPC's hostility toward you.",
			toUni("Ruin") + ". All forms of wealth that you carry or own, other than magic items, are lost to you. Portable property vanishes. Businesses, buildings, and land you own are lost in a way that alters reality the least. Any documentation that proves you should own something lost to this card also disappears.",
			toUni("Skull") + ". You summon an avatar of death-a ghostly humanoid skeleton clad in a tattered black robe and carrying a spectral scythe. It appears in a space of the DM's choice within 10 feet of you and attacks you, warning all others that you must win the battle alone. The avatar fights until you die or it drops to 0 hit points, whereupon it disappears. If anyone tries to help you, the helper summons its own avatar of death. A creature slain by an avatar of death can't be restored to life.",
			toUni("Star") + ". Increase one of your ability scores by 2. The score can exceed 20 but can't exceed 24.",
			toUni("Sun") + ". You gain 50,000 XP, and a wondrous item (which the DM determines randomly) appears in your hands.",
			toUni("Talons") + ". Every magic item you wear or carry disintegrates. Artifacts in your possession aren't destroyed but do vanish.",
			toUni("Throne") + ". You gain proficiency in the Persuasion skill, and you double your proficiency bonus on checks made with that skill. In addition, you gain rightful ownership of a small keep somewhere in the world. However, the keep is currently in the hands of monsters, which you must clear out before you can claim the keep as yours.",
			toUni("Vizier") + ". At any time you choose within one year of drawing this card, you can ask a question in meditation and mentally receive a truthful answer to that question. Besides information, the answer helps you solve a puzzling problem or other dilemma. In other words, the knowledge comes with wisdom on how to apply it.",
			toUni("The Void") + ". This black card spells disaster. Your soul is drawn from your body and contained in an object in a place of the DM's choice. One or more powerful beings guard the place. While your soul is trapped in this way, your body is incapacitated. A Wish spell can't restore your soul, but the spell reveals the location of the object that holds it. You draw no more cards."
		].join("\n \u2022 "),
		toNotesPage : [{
			name : "Cards and Their Effects",
			note : [
				"Usually found in a box or pouch, this deck contains either 13 (75%) or 22 (25%) cards made of ivory or vellum.",
				"Before I draw a card, I must declare how many cards I intend to draw and then draw them randomly. Any cards drawn in excess of this number have no effect. Otherwise, as soon as I draw a card from the deck, its magic takes effect. I must draw each card no more than 1 hour after the previous draw. If I fail to draw the chosen number, the remaining number of cards fly from the deck on their own and take effect all at once.",
				"Once a card is drawn, it fades from existence. Unless the card is the Fool or the Jester, the card reappears in the deck, making it possible to draw the same card twice.\n\n1d22\tPLAYING CARD\tCARD",
				"1\tAce of diamonds\tVizier*",
				"2\tKing of diamonds\tSun",
				"3\tQueen of diamonds\tMoon",
				"4\tJack of diamonds\tStar",
				"5\tTwo of diamonds\tComet*",
				"6\tAce of hearts\tThe Fates*",
				"7\tKing of hearts\tThrone",
				"8\tQueen of hearts\tKey",
				"9\tJack of hearts\tKnight",
				"10\tTwo of hearts\tGem*",
				"11\tAce of clubs  \tTalons*",
				"12\tKing of clubs\tThe Void",
				"13\tQueen of clubs\tFlames",
				"14\tJack of clubs\tSkull",
				"15\tTwo of clubs  \tIdiot*",
				"16\tAce of spades\tDonjon*",
				"17\tKing of spades\tRuin",
				"18\tQueen of spades\tEuryale",
				"19\tJack of spades\tRogue",
				"20\tTwo of spades\tBalance*",
				"21\tJoker (with TM)\tFool*",
				"22\tJoker (no TM)\tJester\n* Found only in a deck with twenty-two cards\n",
				"\u2022 Balance. My mind suffers a wrenching alteration, causing my alignment to change. Lawful to chaotic, good to evil, and vice versa.",
				"\u2022 Comet. If I single-handedly defeat the next hostile monster/group of monsters I encounter, I gain enough XP to gain one level.",
				"\u2022 Donjon. I disappear into a state of suspended animation in an extradimensional sphere. Everything I had stays behind. Wish can reveal my location. I draw no more cards.",
				"\u2022 Euryale. This card's medusa-like visage curses me with a -2 penalty on saving throws. Only a god or the magic of The Fates card can end this curse.",
				"\u2022 The Fates. Reality's fabric unravels and spins anew, allowing me to avoid or erase one event. I can use the card's magic any one time before I die.",
				"\u2022 Flames. A powerful devil becomes my enemy until one of us dies. It seeks my ruin and plagues my life, savoring my suffering before attempting to slay me.",
				"\u2022 Fool. I lose up to 10,000 XP (no level loss), discard this card, and draw again.",
				"\u2022 Gem. 25 pieces of jewelry (2000 gp each) or 50 gems (1000 gp each) appear at my feet.",
				"\u2022 Idiot. Permanently reduce my Intelligence by 1d4+1 (min of 1). I can draw one additional card.",
				"\u2022 Jester. I gain 10,000 XP or I can draw two extra cards.",
				"\u2022 Key. A rare or rarer magic weapon with which I'm proficient appears in my hands.",
				"\u2022 Knight. A 4th-level fighter of my race appears within 30 ft, serving me loyally until death, believing the fates have drawn him/her to me (I control this NPC).",
				"\u2022 Moon. I am granted the ability to cast the Wish spell 1d3 times.",
				"\u2022 Rogue. An NPC becomes hostile toward me (Wish or divine intervention ends).",
				"\u2022 Ruin. All forms of wealth that I carry or own, other than magic items, are lost. Businesses, buildings, and land I own are lost in a way that alters reality the least.",
				"\u2022 Skull. I summon a ghostly skeleton with tattered robes and a spectral scythe within 10 ft. It attacks me, warning all others that I must win the battle alone.",
				"\u2022 Star. Increase one of my ability scores by 2 (can't exceed 24).",
				"\u2022 Sun. I gain 50,000 XP and a wondrous item appears in my hands.",
				"\u2022 Talons. Every magic item I wear or carry disintegrates. Artifacts in my possession aren't destroyed but do vanish.",
				"\u2022 Throne. I gain expertise in Persuasion and rightful ownership of a small keep somewhere in the world (currently occupied by monsters).",
				"\u2022 Vizier. Within one year I can ask one question in meditation and receive a truthful answer. This knowledge comes with the wisdom on how to apply it.",
				"\u2022 The Void. This black card spells disaster. My soul is contained in an object, powerful beings guard it, and my body is incapacitated. Wish can reveal my location. I draw no more cards."
			]
		}]
	},
	"defender" : {
		name : "Defender",
		source : [["SRD", 218], ["D", 164]],
		type : "weapon (any sword)",
		rarity : "legendary",
		magicItemTable : "I",
		attunement : true,
		description : "I have a +3 bonus to attack and damage rolls made with this magic sword. The first time I attack with it on each of my turns, I can transfer (part of) the bonus to AC instead. This adjustment remains in affect until the start of my next turn, although I must be holding the sword to gain its bonus to AC.",
		descriptionFull : "You gain a +3 bonus to attack and damage rolls made with this magic weapon.\n   The first time you attack with the sword on each of your turns, you can transfer some or all of the sword's bonus to your Armor Class, instead of using the bonus on any attacks that turn. For example, you could reduce the bonus to your attack and damage rolls to +1 and gain a +2 bonus to AC. The adjusted bonuses remain in effect until the start of your next turn, although you must hold the sword to gain a bonus to AC from it.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/defender/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+3 bonus can be used for AC instead';
					}
				},
				'If I include the word "Defender" in a the name of a sword, it will be treated as the magic weapon Defender. It has +3 to hit and damage, but this bonus can be lowered and added to AC instead. Decide to do so with the first attack on your turn.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/defender/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 3;
					}
				}, ''
			]
		}
	},
	"demon armor" : { // contains contributions by Larry Hoy
		name : "Demon Armor",
		source : [["SRD", 218], ["D", 165]],
		type : "armor (plate)",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While wearing this plate armor, I have +1 AC, know Abyssal, and can use its clawed gauntlets to make unarmed strikes that deal 1d8 slashing damage with a +1 bonus to hit and damage. I have disadv. on attacks and on saves vs. demons, their spells and abilities. I can't doff it without Remove Curse or similar magic.",
		descriptionFull : "While wearing this armor, you gain a +1 bonus to AC, and you can understand and speak Abyssal. In addition, the armor's clawed gauntlets turn unarmed strikes with your hands into magic weapons that deal slashing damage, with a +1 bonus to attack and damage rolls and a damage die of 1d8.\n   " + toUni("Curse") + ". Once you don this cursed armor, you can't doff it unless you are targeted by the Remove Curse spell or similar magic. While wearing the armor, you have disadvantage on attack rolls against demons and on saving throws against their spells and special abilities.",
		attunement : true,
		weight : 65,
		cursed : true,
		languageProfs : ["Abyssal"],
		savetxt : { text : ["Disadv. on saves vs. demons"] },
		armorAdd : "Demon Armor",
		armorOptions : [{
			regExpSearch : /^(?=.*demon)(?=.*armor).*$/i,
			name : "Demon Armor",
			source: [["SRD", 218], ["D", 165]],
			type : "heavy",
			ac : 19,
			stealthdis : true,
			weight : 65,
			strReq : 15
		}],
		weaponsAdd: ["Demon Armor Claws"],
		weaponOptions: [{
			baseWeapon : "unarmed strike",
			regExpSearch : /^(?=.*demon)(?=.*armor)(?=.*claws).*$/i,
			name : "Demon Armor Claws",
			source: [["SRD", 218], ["D", 165]],
			damage : [1, 8, "slashing"],
			modifiers : [1, 1]
		}]
	},
	"dimensional shackles" : {
		name : "Dimensional Shackles",
		source : [["SRD", 219], ["D", 165]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action, I can shackle an incapacitated creature of size Small to Large. They work as mundane manacles and prevent extradimensional movement, but not portal travel. I and others I designate can remove them as an action. The bound target can try every 30 days to break them with a DC 30 Athletics check.",
		descriptionFull : "You can use an action to place these shackles on an incapacitated creature. The shackles adjust to fit a creature of Small to Large size. In addition to serving as mundane manacles, the shackles prevent a creature bound by them from using any method of extradimensional movement, including teleportation or travel to a different plane of existence. They don't prevent the creature from passing-through an interdimensional portal.\n   You and any creature you designate when you use the shackles can use an action to remove them. Once every 30 days, the bound creature can make a DC 30 Strength (Athletics) check. On a success, the creature breaks free and destroys the shackles.",
		action : [["action", " (bind/remove)"]]
	},
	"dragon scale mail" : {
		name : "Dragon Scale Mail",
		source : [["SRD", 219], ["D", 165]],
		type : "armor (scale mail)",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While wearing this armor, I gain a resistance to a damage type, +1 AC and advantage on saving throws against the frightful presence and breath weapons of dragons. Once per dawn as an action, I can magically discern the distance and direction to the closest dragon of the armor's type within 30 miles of me.",
		descriptionFull : "Dragon scale mail is made of the scales of one kind of dragon. Sometimes dragons collect their cast-off scales and gift them to humanoids. Other times, hunters carefully skin and preserve the hide of a dead dragon. In either case, dragon scale mail is highly valued.\n   While wearing this armor, you gain a +1 bonus to AC, you have advantage on saving throws against the Frightful Presence and breath weapons of dragons, and you have resistance to one damage type that is determined by the kind of dragon that provided the scales (see the table).\n   Additionally, you can focus your senses as an action to magically discern the distance and direction to the closest dragon within 30 miles of you that is of the same type as the armor. This special action can't be used again until the next dawn.\n\n" + toUni("Dragon\tResistance\tDragon\tResistance") + "\nBlack\tAcid\t\tGold\tFire\nBlue\tLightning  \tGreen\tPoison\nBrass\tFire\t\tRed\tFire\nBronze\tLightning  \tSilver\tCold\nCopper\tAcid\t\tWhite\tCold",
		attunement : true,
		weight : 45,
		allowDuplicates : true,
		usages : 1,
		recovery : "dawn",
		savetxt : {
			adv_vs : ["Dragon Frightful Presence", "Dragon Breath Weapons"],
		},
		armorOptions : {
			regExpSearch : /^(?=.*dragon)(?=.*scale)(?=.*mail).*$/i,
			name : "Dragon Scale Mail",
			source : [["SRD", 219], ["D", 165]],
			type : "medium",
			ac : 15,
			stealthdis : true,
			weight : 45
		},
		choices : ["Black (acid)", "Blue (lightning)", "Brass (fire)", "Bronze (lightning)", "Copper (acid)", "Gold (fire)", "Green (poison)", "Red (fire)", "Silver (cold)", "White (cold)"],
		"black (acid)" : {
			name : "Black Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to acid damage. As an action, I can magically discern the distance and direction to the closest black dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Black Dragon Scale Mail",
			dmgres: ["Acid"],
			limfeaname : "Detect Black Dragon",
			action : [["action", "Detect Black Dragon"]]
		},
		"blue (lightning)" : {
			name : "Blue Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to lightning damage. As an action, I can magically discern the distance and direction to the closest blue dragon in 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Blue Dragon Scale Mail",
			dmgres: ["Lightning"],
			limfeaname : "Detect Blue Dragon",
			action : [["action", "Detect Blue Dragon"]]
		},
		"brass (fire)" : {
			name : "Brass Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to fire damage. As an action, I can magically discern the distance and direction to the closest brass dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Brass Dragon Scale Mail",
			dmgres: ["Fire"],
			limfeaname : "Detect Brass Dragon",
			action : [["action", "Detect Brass Dragon"]]
		},
		"bronze (lightning)" : {
			name : "Bronze Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to lightning damage. As an action, I can magically discern the distance and direction to the closest bronze dragon in 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Bronze Dragon Scale Mail",
			dmgres: ["Lightning"],
			limfeaname : "Detect Bronze Dragon",
			action : [["action", "Detect Bronze Dragon"]]
		},
		"copper (acid)" : {
			name : "Copper Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to acid damage. As an action, I can magically discern the distance and direction to the closest copper dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Copper Dragon Scale Mail",
			dmgres: ["Acid"],
			limfeaname : "Detect Copper Dragon",
			action : [["action", "Detect Copper Dragon"]]
		},
		"gold (fire)" : {
			name : "Gold Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to fire damage. As an action, I can magically discern the distance and direction to the closest gold dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Gold Dragon Scale Mail",
			dmgres: ["Fire"],
			limfeaname : "Detect Gold Dragon",
			action : [["action", "Detect Gold Dragon"]]
		},
		"green (poison)" : {
			name : "Green Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to poison damage. As an action, I can magically discern the distance and direction to the closest green dragon in 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Green Dragon Scale Mail",
			dmgres: ["Poison"],
			limfeaname : "Detect Green Dragon",
			action : [["action", "Detect Green Dragon"]]
		},
		"red (fire)" : {
			name : "Red Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to fire damage. As an action, I can magically discern the distance and direction to the closest red dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Red Dragon Scale Mail",
			dmgres: ["Fire"],
			limfeaname : "Detect Red Dragon",
			action : [["action", "Detect Red Dragon"]]
		},
		"silver (cold)" : {
			name : "Silver Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to cold damage. As an action, I can magically discern the distance and direction to the closest silver dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "Silver Dragon Scale Mail",
			dmgres: ["Cold"],
			limfeaname : "Detect Silver Dragon",
			action : [["action", "Detect Silver Dragon"]]
		},
		"white (cold)" : {
			name : "White Dragon Scale Mail",
			description : "This scale mail gives +1 to AC, adv. on saves against the frightful presence and breath weapons of dragons, and resistance to cold damage. As an action, I can magically discern the distance and direction to the closest white dragon within 30 miles. Once I use this action, I can't use it again until the next dawn.",
			armorAdd : "White Dragon Scale Mail",
			dmgres: ["Cold"],
			limfeaname : "Detect White Dragon",
			action : [["action", "Detect White Dragon"]]
		}
	},
	"dragon slayer" : {
		name : "Dragon Slayer",
		source : [["SRD", 219], ["D", 166]],
		type : "weapon (any sword)",
		rarity : "rare",
		magicItemTable : "G",
		description : "I have a +1 bonus to attack and damage rolls made with this magic sword. When I hit a creature with the dragon type with this sword, it does 3d6 extra damage of the weapon's damage type.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon.\n   When you hit a dragon with this weapon, the dragon takes an extra 3d6 damage of the weapon's type. For the purpose of this weapon, \"dragon\" refers to any creature with the dragon type, including dragon turtles and wyverns.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*dragon)(?=.*slayer).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+3d6 damage vs. dragons';
					}
				},
				'If I include the words "Dragon Slayer" in a the name of a sword, it will be treated as the magic weapon Dragon Slayer. It has +1 to hit and damage and deals +3d6 damage to creatures with the dragon type.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*dragon)(?=.*slayer).*$/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 1;
					}
				}, ''
			]
		}
	},
	"dust of disappearance" : {
		name : "Dust of Disappearance",
		source : [["SRD", 219], ["D", 166]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can throw this dust into the air. By doing so, me and all creatures within 10 ft of me become invisible for 2d4 minutes. The duration is the same for all subjects. If a creature affected by the dust attacks or casts a spell, the invisibility ends for that creature.",
		descriptionFull : "Found in a small packet, this powder resembles very fine sand. There is enough of it for one use. When you use an action to throw the dust into the air, you and each creature and object within 10 feet of you become invisible for 2d4 minutes. The duration is the same for all subjects, and the dust is consumed when its magic takes effect. If a creature affected by the dust attacks or casts a spell, the invisibility ends for that creature."
	},
	"dust of dryness" : {
		name : "Dust of Dryness",
		source : [["SRD", 219], ["D", 166]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "As an action, I can sprinkle a pinch of dust over water, turning a 15-ft cube into a floating, marble-sized pellet. As an action, someone can smash the pellet against a hard surface, destroying it and releasing the absorbed water. A pinch of dust does 10d6 necrotic damage to a water elemental, Con save DC 13 halves.",
		descriptionFull : "This small packet contains 1d6+4 pinches of dust. You can use an action to sprinkle a pinch of it over water. The dust turns a cube of water 15 feet on a side into one marble-sized pellet, which floats or rests near where the dust was sprinkled. The pellet's weight is negligible.\n   Someone can use an action to smash the pellet against a hard surface, causing the pellet to shatter and release the water the dust absorbed. Doing so ends that pellet's magic.\n   An elemental composed mostly of water that is exposed to a pinch of the dust must make a DC 13 Constitution saving throw, taking 10d6 necrotic damage on a failed save, or half as much damage on a successful one.",
		usages : 10,
		recovery : "Never",
		additional : "1d6+4 pinches"
	},
	"dust of sneezing and choking" : {
		name : "Dust of Sneezing and Choking",
		source : [["SRD", 219], ["D", 166]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can throw this dust into the air, causing me and all creatures within 30 ft that need to breathe to make a DC 15 Con save or start sneezing uncontrollably and be unable to breathe, thus becoming incapacitated and suffocating. Those affected can repeat their save at the end of each of their turns.",
		descriptionFull : "Found in a small container, this powder resembles very fine sand. It appears to be dust of disappearance, and an Identify spell reveals it to be such. There is enough of it for one use.\n   When you use an action to throw a handful of the dust into the air, you and each creature that needs to breathe within 30 feet of you must succeed on a DC 15 Constitution saving throw or become unable to breathe while sneezing uncontrollably. A creature affected in this way is incapacitated and suffocating. As long as it is conscious, a creature can repeat the saving throw at the end of each of its turns, ending the effect on it on a success. The Lesser Restoration spell can also end the effect on a creature."
	},
	"dwarven plate" : {
		name : "Dwarven Plate",
		source : [["SRD", 220], ["D", 167]],
		type : "armor (plate)",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While wearing this plate armor, I gain a +2 bonus to AC. In addition, if an effect moves me against my will along the ground, I can use my reaction to reduce the distance I am moved by up to 10 ft.",
		descriptionFull : "While wearing this armor, you gain a +2 bonus to AC. In addition, if an effect moves you against your will along the ground, you can use your reaction to reduce the distance you are moved by up to 10 feet.",
		weight : 65,
		action : [["reaction", ""]],
		armorAdd : "Dwarven Plate",
		armorOptions : [{
			regExpSearch : /^(?=.*dwarven)(?=.*plate).*$/i,
			name : "Dwarven Plate",
			source : [["SRD", 220], ["D", 167]],
			type : "heavy",
			ac : 20,
			stealthdis : true,
			weight : 65,
			strReq : 15
		}]
	},
	"dwarven thrower" : {
		name : "Dwarven Thrower",
		source : [["SRD", 220], ["D", 167]],
		type : "weapon (warhammer)",
		rarity : "very rare",
		magicItemTable : "H",
		attunement : true,
		description : "This magical warhammer adds a +3 bonus to attack and damage rolls made with it. It has the thrown property with a normal range of 20 ft and a long range of 60 ft. It deals an extra 1d8 damage (or 2d8 if the target is a giant) when thrown. Immediately after the attack, the weapon flies back to my hand.",
		prerequisite : "Requires attunement by a dwarf",
		prereqeval : function(v) { return CurrentRace.known.indexOf('dwarf') !== -1; },
		weight : 2,
		descriptionFull : "You gain a +3 bonus to attack and damage rolls made with this magic weapon. It has the thrown property with a normal range of 20 feet and a long range of 60 feet. When you hit with a ranged attack using this weapon, it deals an extra 1d8 damage or, if the target is a giant, 2d8 damage. Immediately after the attack, the weapon flies back to your hand.",
		weaponsAdd : ["Dwarven Thrower"],
		weaponOptions : {
			baseWeapon : "warhammer",
			regExpSearch : /^(?=.*dwarven)(?=.*thrower).*$/i,
			name : "Dwarven Thrower",
			source : [["SRD", 220], ["D", 167]],
			range : "Melee, 20/60 ft",
			description : "Thrown, versatile (1d10); +1d8 damage when thrown (2d8 vs. giants) and returns immediately",
			modifiers : [3, 3] // add 3 to each to hit and damage because of the magical bonus
		}
	},
	"efreeti bottle" : { // contributed by AelarTheElfRogue
		name : "Efreeti Bottle",
		source : [["SRD", 220], ["D", 167]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "When I use an action to remove the stopper, a cloud of thick smoke flows out of the bottle. At the end of my turn, an efreeti appears in an unoccupied space within 30 feet of me. The first time the bottle is opened, the DM rolls to determine what happens that time and the next times (if any).",
		descriptionLong : "When I use an action to remove the stopper, a cloud of thick smoke flows out of the bottle. At the end of my turn, an efreeti appears in an unoccupied space within 30 feet of me. The first time the bottle is opened, the DM rolls to determine what happens that time and the next times (if any). 10% chance that the efreeti attacks me for 5 rounds before disappearing. 80% change that the efreeti serves me for 1 hour, following my commands. It then returns to the bottle and I can have it serve me 2 more times, but only 24 hours after it returned to the bottle. 10% chance that the efreeti will grant me 3 wishes.",
		descriptionFull : "This painted brass bottle weighs 1 pound. When you use an action to remove the stopper, a cloud of thick smoke flows out of the bottle. At the end of your turn, the smoke disappears with a flash of harmless fire, and an efreeti appears in an unoccupied space within 30 feet of you.\n   The first time the bottle is opened, the DM rolls to determine what happens.\n\n" + toUni("d100") + "\t" + toUni("Effect") + "\n01-10\tThe efreeti attacks you. After fighting for 5 rounds, the efreeti disappears, and the bottle loses its magic.\n11-90\tThe efreeti serves you for 1 hour, doing as you command. Then the efreeti returns to the bottle, and a new stopper contains it. The stopper can't be removed for 24 hours. The next two times the bottle is opened, the same effect occurs. If the bottle is opened a fourth time, the efreeti escapes and disappears, and the bottle loses its magic.\n91-00\tThe efreeti can cast the Wish spell three times for you. It disappears when it grants the final wish or after 1 hour, and the bottle loses its magic.",
		weight : 1,
		action : [["action", ""]]
	},
	"elemental gem": {
		name : "Elemental Gem",
		source : [["SRD", 220], ["D", 167]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This gem contains a mote of elemental energy. When I use an action to break the gem, an elemental is summoned as if I had cast the Conjure Elemental spell, and the gem's magic is lost. The type of gem determines the elemental summoned by the spell.",
		descriptionFull : "This gem contains a mote of elemental energy. When you use an action to break the gem, an elemental is summoned as if you had cast the Conjure Elemental spell, and the gem's magic is lost. The type of gem determines the elemental summoned by the spell.",
		choices : ["Blue Sapphire (air)", "Emerald (water)", "Red Corundum (fire)", "Yellow Diamond (earth)"],
		allowDuplicates : true,
		"blue sapphire (air)" : {
			name : "Elemental Gem [Blue Sapphire]",
			description : "This gem contains a mote of air elemental energy. Once as an action, I can break this gem to summon an air elemental as if I had cast the Conjure Elemental spell. After doing so, the gem's magic is lost.",
			descriptionFull : "This gem contains a mote of elemental energy. When you use an action to break the gem, an air elemental is summoned as if you had cast the Conjure Elemental spell, and the gem's magic is lost.",
			spellcastingBonus : {
				name : "Air Elemental only",
				spells : ["conjure elemental"],
				selection : ["conjure elemental"]
			},
			spellChanges : {
				"conjure elemental" : {
					time : "1 a",
					description : "CR 5 air elemental that obeys my verbal commands; on broken conc. elemental breaks free",
					changes : "Using the Blue Sapphire Elemental Gem, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth an air elemental."
				}
			}
		},
		"emerald (water)" : {
			name : "Elemental Gem [Emerald]",
			description : "This gem contains a mote of water elemental energy. Once as an action, I can break this gem to summon a water elemental as if I had cast the Conjure Elemental spell. After doing so, the gem's magic is lost.",
			descriptionFull : "This gem contains a mote of elemental energy. When you use an action to break the gem, a water elemental is summoned as if you had cast the Conjure Elemental spell, and the gem's magic is lost.",
			spellcastingBonus : {
				name : "Water Elemental only",
				spells : ["conjure elemental"],
				selection : ["conjure elemental"]
			},
			spellChanges : {
				"conjure elemental" : {
					time : "1 a",
					description : "CR 5 water elemental that obeys my verbal commands; on broken conc. elemental breaks free",
					changes : "Using the Emerald Elemental Gem, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth a water elemental."
				}
			}
		},
		"red corundum (fire)" : {
			name : "Elemental Gem [Red Corundum]",
			description : "This gem contains a mote of fire elemental energy. Once as an action, I can break this gem to summon a fire elemental as if I had cast the Conjure Elemental spell. After doing so, the gem's magic is lost.",
			descriptionFull : "This gem contains a mote of elemental energy. When you use an action to break the gem, a fire elemental is summoned as if you had cast the Conjure Elemental spell, and the gem's magic is lost.",
			spellcastingBonus : {
				name : "Fire Elemental only",
				spells : ["conjure elemental"],
				selection : ["conjure elemental"]
			},
			spellChanges : {
				"conjure elemental" : {
					time : "1 a",
					description : "CR 5 fire elemental that obeys my verbal commands; on broken conc. elemental breaks free",
					changes : "Using the Red Corundum Elemental Gem, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth a fire elemental."
				}
			}
		},
		"yellow diamond (earth)" : {
			name : "Elemental Gem [Yellow Diamond]",
			description : "This gem contains a mote of earth elemental energy. Once as an action, I can break this gem to summon an earth elemental as if I had cast the Conjure Elemental spell. After doing so, the gem's magic is lost.",
			descriptionFull : "This gem contains a mote of elemental energy. When you use an action to break the gem, an earth elemental is summoned as if you had cast the Conjure Elemental spell, and the gem's magic is lost.",
			spellcastingBonus : {
				name : "Earth Elemental only",
				spells : ["conjure elemental"],
				selection : ["conjure elemental"]
			},
			spellChanges : {
				"conjure elemental" : {
					time : "1 a",
					description : "CR 5 earth elemental that obeys my verbal commands; on broken conc. elemental breaks free",
					changes : "Using the Yellow Diamond Elemental Gem, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth an earth elemental."
				}
			}
		}
	},
	"elven chain" : {
		name : "Elven Chain",
		source : [["SRD", 220], ["D", 168]],
		type : "armor (chain shirt)",
		rarity : "rare",
		magicItemTable : "G",
		description : "I gain a +1 bonus to AC while I wear this chain shirt. I am considered proficient with this armor even if I lack proficiency with medium armor.",
		descriptionFull : "You gain a +1 bonus to AC while you wear this armor. You are considered proficient with this armor even if you lack proficiency with medium armor.",
		weight : 20,
		armorAdd : "Elven Chain",
		armorOptions : [{
			regExpSearch : /^(?=.*elven)(?=.*chain).*$/i,
			name : "Elven Chain",
			source : [["SRD", 220], ["D", 168]],
			type : "medium",
			ac : 14,
			weight : 20
		}]
	},
	"eversmoking bottle" : {
		name : "Eversmoking Bottle",
		source : [["SRD", 220], ["D", 168]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "When I use an action to remove the stopper, a cloud of thick heavily obscuring smoke flows out of the bottle in a 60-ft radius, increasing by 10 ft for each minute the bottle is open, until it reaches 120 ft. Closing it requires me to speak the command word as an action. Once closed, the cloud disperses after 10 min.",
		descriptionFull : "Smoke leaks from the lead-stoppered mouth of this brass bottle, which weighs 1 pound. When you use an action to remove the stopper, a cloud of thick smoke pours out in a 60-foot radius from the bottle. The cloud's area is heavily obscured. Each minute the bottle remains open and within the cloud, the radius increases by 10 feet until it reaches its maximum radius of 120 feet.\n   The cloud persists as long as the bottle is open. Closing the bottle requires you to speak its command word as an action. Once the bottle is closed, the cloud disperses after 10 minutes. A moderate wind (11 to 20 miles per hour) can also disperse the smoke after 1 minute, and a strong wind (21 or more miles per hour) can do so after 1 round.",
		weight : 1,
		action : [["action", " (open/close)"]]
	},
	"eyes of charming" : {
		name : "Eyes of Charming",
		source : [["SRD", 220], ["D", 168]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "These crystal lenses fit over the eyes. They have 3 charges. While wearing them, I can expend 1 charge as an action to cast Charm Person (save DC 13) on a humanoid within 30 ft of me, provided that I and the target can see each other. The lenses regain all expended charges daily at dawn.",
		descriptionFull : "These crystal lenses fit over the eyes. They have 3 charges. While wearing them, you can expend 1 charge as an action to cast the Charm Person spell (save DC 13) on a humanoid within 30 feet of you, provided that you and the target can see each other. The lenses regain all expended charges daily at dawn.",
		attunement : true,
		usages : 3,
		recovery : "dawn",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["charm person"],
			selection : ["charm person"],
			firstCol : 1
		},
		fixedDC : 13,
		spellFirstColTitle : "Ch"
	},
	"eyes of minute seeing" : { // contributed by Soilentbrad
		name : "Eyes of Minute Seeing",
		source : [["SRD", 221], ["D", 168]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "C",
		description : "These crystal lenses fit over the eyes. While wearing them, I can see much better than normal out to a range of 1 ft. I have advantage on Intelligence (Investigation) checks that rely on sight while searching an area or studying an object within that range.",
		descriptionFull : "These crystal lenses fit over the eyes. While wearing them, you can see much better than normal out to a range of 1 foot. You have advantage on Intelligence (Investigation) checks that rely on sight while searching an area or studying an object within that range.",
		vision : [["Adv. on Investigation checks based on sight", 1]]
	},
	"eyes of the eagle" : {
		name : "Eyes of the Eagle",
		source : [["SRD", 221], ["D", 168]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "These crystal lenses fit over the eyes. While wearing them, I have advantage on Wisdom (Perception) checks that rely on sight. In conditions of clear visibility, I can make out details of even extremely distant creatures and objects as small as 2 ft across.",
		descriptionFull : "These crystal lenses fit over the eyes. While wearing them, you have advantage on Wisdom (Perception) checks that rely on sight. In conditions of clear visibility, you can make out details of even extremely distant creatures and objects as small as 2 feet across.",
		attunement : true,
		vision : [["Adv. on Perception checks that rely on sight", 0]]
	},
	"figurine of wondrous power" : { // contains contributions by Larry Hoy
		name: "Figurine of Wondrous Power",
		source: [["SRD", 221], ["D", 169]],
		type: "wondrous item",
		description: "As an action, I can speak the command word and throw one or more statuettes to an unoccupied space within 60 ft where it becomes a specific creature for a certain amount of time. It is friendly, understands my languages, and obeys my commands.",
		descriptionFull: "A figurine of wondrous power is a statuette of a beast small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living creature. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for a duration specific to each figurine. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until a certain amount of time has passed, as specified in the figurine's description.",
		action : [["action", ""]],
		choices : ["Bronze Griffon", "Ebony Fly", "Golden Lions", "Ivory Goats", "Marble Elephant", "Obsidian Steed", "Onyx Dog", "Serpentine Owl", "Silver Raven"],
		"bronze griffon" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw this bronze statuette to an unoccupied space within 60 ft, where it becomes a griffon for up to 6 hours, until I use the command word again, or it reaches 0 hp. It is friendly, understands my languages, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw this bronze statuette of a griffon rampant to an unoccupied space within 60 ft, where it becomes a griffon for up to 6 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 5 days have passed.",
			descriptionFull: "This figurine of wondrous power is a bronze statuette of a griffon rampant, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living griffon. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 6 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 5 days have passed.",
			usages : 1,
			recovery : "5 days"
		},
		"ebony fly" : {
			rarity: "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw this statuette to an unoccupied space within 60 ft, where it becomes a giant fly for up to 12 hours, until I use the command word again, or it reaches 0 hp. It is friendly, understands my languages, obeys my commands, and can be ridden as a mount.",
			descriptionLong: "As an action, I can speak the command word and throw this ebony statuette of a horsefly to an unoccupied space within 60 ft, where it becomes a giant fly for up to 12 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, obeys my spoken commands, and can be ridden as a mount. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 2 days have passed.",
			descriptionFull : "This figurine of wondrous power is an ebony statuette carved in the likeness of a horsefly, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living giant fly and can be ridden as a mount. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 12 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 2 days have passed.",
			usages : 1,
			recovery : "2 days"
		},
		"golden lions" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw one or both of these gold statuettes to an unoccupied space within 60 ft, where each becomes a lion for up to 1 hour, until I use the command word again, or it reaches 0 hp. They are friendly, understands my languages, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw one or both of these gold statuette of a lion to an unoccupied space within 60 ft, where each becomes a lion for up to 1 hour, until I use an action to repeat the command word, or it reaches 0 hp. They are friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 7 days have passed.",
			descriptionFull : "This figurine of wondrous power is a pair of gold statuette of lions, small enough to fit in a pocket. If you use an action to speak the command word and throw one or both of the figurine to a point on the ground within 60 feet of you, each figurine becomes a living lion. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 1 hour. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 7 days have passed.",
			usages : 2,
			recovery : "7 days"
		},
		"ivory goats" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw one or more of these 3 ivory statuettes to an unoccupied space within 60 ft, where each becomes a creature, until I use the command word again, or it reaches 0 hp. They are friendly, understands my languages, and obeys my commands. See Notes page.",
			descriptionLong: "As an action, I can speak the command word and throw one or more of these three ivory statuette of a lion to an unoccupied space within 60 ft, where each becomes a creature, until I use an action to repeat the command word, or it reaches 0 hp. They are friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until a certain amount of time has passed. See Notes page for details about each of the statuettes.",
			descriptionFull: "This figurine of wondrous power is three ivory statuettes of goats, small enough to fit in a pocket. Each goat looks unique and functions differently from the others. If you use an action to speak the command word and throw one or more of the figurines to a point on the ground within 60 feet of you, each figurine becomes a living creature. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for a duration specific to each figurine. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until a certain amount of time has passed, as specified in the figurine's description." +
			"\n \u2022 The goat of traveling can become a Large goat with the same statistics as a riding horse. It has 24 charges, and each hour or portion thereof it spends in beast form costs 1 charge. While it has charges, you can use it as often as you wish. When it runs out of charges, it reverts to a figurine and can't be used again until 7 days have passed, when it regains all its charges." +
			"\n \u2022 The goat of travail becomes a giant goat for up to 3 hours. Once it has been used, it can't be used again until 30 days have passed." +
			"\n \u2022 The goat of terror becomes a giant goat for up to 3 hours. The goat can't attack, but you can remove its horns and use them as weapons. One horn becomes a +1 lance, and the other becomes a +2 longsword. Removing a horn requires an action, and the weapons disappear and the horns return when the goat reverts to figurine form. In addition, the goat radiates a 30-foot-radius aura of terror while you are riding it. Any creature hostile to you that starts its turn in the aura must succeed on a DC 15 Wisdom saving throw or be frightened of the goat for 1 minute, or until the goat reverts to figurine form. The frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Once it successfully saves against the effect, a creature is immune to the goat's aura for the next 24 hours. Once the figurine has been used, it can't be used again until 15 days have passed.",
			extraLimitedFeatures : [{
				name : "Figurine of Wondrous Power [Ivory Goat of Traveling]",
				usages : 24,
				recovery : "7 days"
			}, {
				name : "Figurine of Wondrous Power [Ivory Goat of Travail]",
				usages : 1,
				recovery : "30 days"
			}, {
				name : "Figurine of Wondrous Power [Ivory Goat of Terror]",
				usages : 1,
				recovery : "15 days"
			}],
			toNotesPage : [{
				name : "Ivory Goat Details",
				note : [
					"The goat of traveling can become a Large goat with the same statistics as a riding horse. It has 24 charges, and each hour or portion thereof it spends in beast form costs 1 charge. While it has charges, you can use it as often as you wish. When it runs out of charges, it reverts to a figurine and can't be used again until 7 days have passed, when it regains all its charges.",
					"The goat of travail becomes a giant goat for up to 3 hours. Once it has been used, it can't be used again until 30 days have passed.",
					"The goat of terror becomes a giant goat for up to 3 hours. The goat can't attack, but I can remove its horns and use them as weapons. One horn becomes a +1 lance, and the other becomes a +2 longsword. Removing a horn requires an action, and the weapons disappear and the horns return when the goat reverts to figurine form. In addition, the goat radiates a 30-ft radius aura of terror while I am riding it. Any creature hostile to me that starts its turn in the aura must succeed on a DC 15 Wisdom saving throw or be frightened of the goat for 1 minute, or until the goat reverts to figurine form. The frightened creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. Once it successfully saves against the effect, a creature is immune to the goat's aura for the next 24 hours. Once the figurine has been used, it can't be used again until 15 days have passed."
				]
			}],
			weaponsAdd : ["Lance +1, Ivory Goat Horn", "Longsword +2, Ivory Goat Horn"],
			weaponOptions : [{
				baseWeapon : "lance",
				regExpSearch : /^(?=.*ivory)(?=.*goat)(?=.*lance).*$/i,
				name : "Lance +1, Ivory Goat Horn",
				source : [["SRD", 222], ["D", 170]]
			}, {
				baseWeapon : "longsword",
				regExpSearch : /^(?=.*ivory)(?=.*goat)(?=.*longsword).*$/i,
				name : "Longsword +2, Ivory Goat Horn",
				source : [["SRD", 222], ["D", 170]]
			}]
		},
		"marble elephant" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw this marble statuette to an unoccupied space within 60 ft, where it becomes a elephant for up to 24 hours, until I use the command word again, or it reaches 0 hp. It is friendly, understands my languages, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw this marble statuette of about 4 inches high and long to an unoccupied space within 60 ft, where it becomes a elephant for up to 24 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 7 days have passed.",
			descriptionFull: "This figurine of wondrous power is a marble statuette of about 4 inches high and long, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living elephant. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 24 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 7 days have passed.",
			usages : 1,
			recovery : "7 days"
		},
		"obsidian steed" : {
			rarity : "very rare",
			magicItemTable : "H",
			description: "As an action, I can speak the command word and throw this obsidian statuette to an unoccupied space within 60 ft, where it becomes a nightmare for up to 24 hours, until it reaches 0 hp, or I use the command word again. It is friendly, understands my languages, and obeys my commands. See Notes page.",
			descriptionLong: "As an action, I can speak the command word and throw this polished obsidian statuette of an horse to an unoccupied space within 60 ft, where it becomes a nightmare for up to 24 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. It only fights to defend itself. When it reverts back to a figurine, it can't be used again until 5 days have passed. See Notes page for more details.",
			descriptionFull: "This figurine of wondrous power is a polished obsidian statuette of a horse, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living nightmare. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 24 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 5 days have passed." +
			"\n   The nightmare fights only to defend itself.\n   If you have a good alignment, the figurine has a 10% chance each time you use it to ignore your orders, including a command to revert to figurine form. If you mount the nightmare while it is ignoring your orders, you and the nightmare are instantly transported to a random location on the plane of Hades, where the nightmare reverts to figurine form.",
			usages : 1,
			recovery : "5 days",
			toNotesPage : [{
				name : "Obsidian Steed Details",
				note : "\n   If I have a good alignment, the figurine has a 10% chance each time I use it to ignore my orders, including a command to revert to figurine form. If I mount the nightmare while it is ignoring my orders, we are both instantly transported to a random location on the plane of Hades, where the nightmare reverts to figurine form."
			}]
		},
		"onyx dog" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw this statuette to an unoccupied space within 60 ft, where it becomes a mastiff for up to 6 hours, until I use the command word again, or it reaches 0 hp. It has 60 ft darkvision, see invisible out to 60 ft, is friendly, understands me, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw this onyx statuette to an unoccupied space within 60 ft, where it becomes a mastiff for up to 6 hours, until I use an action to repeat the command word, or it reaches 0 hp. It has Intelligence 8, speaks common, darkvision out to 60 ft and can see invisible creatures and objects out to that same range. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 7 days have passed.",
			descriptionFull: "This figurine of wondrous power is an onyx statuette of a dog, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living mastiff. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The mastiff has an Intelligence of 8 and can speak Common. It also has darkvision out to a range of 60 feet and can see invisible creatures and objects within that range. It is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 6 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 7 days have passed.",
			usages : 1,
			recovery : "7 days"
		},
		"serpentine owl" : {
			rarity : "rare",
			magicItemTable : "G",
			description: "As an action, I can speak the command word and throw this statuette to an unoccupied space within 60 ft, where it becomes a giant owl for up to 8 hours, until I use the command word again, or it reaches 0 hp. It is friendly, can convers telepathically with me, understands my languages, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw this serpentine statuette to an unoccupied space within 60 ft, where it becomes a giant owl for up to 8 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. As long as it is on the same plane of existence, it can communicate telepathically with me. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 2 days have passed.",
			descriptionFull: "This figurine of wondrous power is a serpentine statuette of an owl, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living giant owl. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. It can telepathically communicate with you at any range if you and it are on the same plane of existence. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 8 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 2 days have passed.",
			usages : 1,
			recovery : "2 days"
		},
		"silver raven" : {
			rarity : "uncommon",
			magicItemTable : "F",
			description: "As an action, I can speak the command word and throw this silver statuette to an unoccupied space within 60 ft, where it becomes a raven for up to 12 hours, until I use the command word again, or it reaches 0 hp. It is friendly, understands my languages, and obeys my commands.",
			descriptionLong: "As an action, I can speak the command word and throw this silver statuette to an unoccupied space within 60 ft, where it becomes a raven for up to 12 hours, until I use an action to repeat the command word, or it reaches 0 hp. It is friendly to me and my allies, understands my languages, and obeys my spoken commands. While in raven form, the figurine allows me to cast Animal Messenger on it at will. If I issue no commands, the creature defends itself but takes no other actions. When it reverts back to a figurine, it can't be used again until 2 days have passed.",
			descriptionFull: "This figurine of wondrous power is as sliver statuette of a raven, small enough to fit in a pocket. If you use an action to speak the command word and throw the figurine to a point on the ground within 60 feet of you, the figurine becomes a living raven. If the space where the creature would appear is occupied by other creatures or objects, or if there isn't enough space for the creature, the figurine doesn't become a creature.\n   The creature is friendly to you and your companions. It understands your languages and obeys your spoken commands. If you issue no commands, the creature defends itself but takes no other actions.\n   The creature exists for 12 hours. At the end of the duration, the creature reverts to its figurine form. It reverts to a figurine early if it drops to 0 hit points or if you use an action to speak the command word again while touching it. When the creature becomes a figurine again, its property can't be used again until 2 days have passed.\n   While in raven form, the figurine allows you to cast the Animal Messenger spell on it at will.",
			usages : 1,
			recovery : "2 days",
			spellcastingBonus : {
				name : "At will",
				spells : ["animal messenger"],
				selection : ["animal messenger"],
				firstCol : "atwill"
			},
			spellChanges : {
				"animal messenger" : {
					description : "The raven delivers a 25 word message up to 50 miles away to chosen location and recipient",
					changes : "The spell can only affect the figurine."
				}
			}
		}
	},
	"flame tongue" : {
		name : "Flame Tongue",
		source : [["SRD", 223], ["D", 170]],
		type : "weapon (any sword)",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "As a bonus action, I can speak the command word of this magic sword, causing flames to erupt from it. These flames add +2d6 fire damage and shine bright light in a 40-ft radius and dim light for an additional 40 ft. The flames last until I speak the command word again as a bonus action or sheathe it.",
		descriptionFull : "You can use a bonus action to speak this magic sword's command word, causing flames to erupt from the blade. These flames shed bright light in a 40-foot radius and dim light for an additional 40 feet. While the sword is ablaze, it deals an extra 2d6 fire damage to any target it hits. The flames last until you use a bonus action to speak the command word again or until you drop or sheathe the sword.",
		action : [["bonus action", " (activate/end)"]],
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*flame)(?=.*tongue).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'While active, +2d6 fire damage';
					}
				},
				'If I include the words "Flame Tongue" in a the name of a sword, it will be treated as the magic weapon Flame Tongue. When the command word is spoken, the blade erupts with flames, adding +2d6 fire damage on a hit and shining light.'
			]
		}
	},
	"folding boat" : {
		name : "Folding Boat",
		source : [["SRD", 223], ["D", 170]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "As an action, I can speak a command word to have this wooden box become a boat, a ship, or to fold back up. The boat holds 4 Medium creatures and has oars, anchor, mast, and a sail. The ship holds 15 Medium creatures and has a deck, five sets of oars, rowing seats, a steering oar, anchor, deck cabin, mast, and a sail.",
		descriptionLong : "A wooden box of 12 inch \xD7 6 inch \xD7 6 inch, that can be opened to put items in. As an action, I can speak one of its three command words. The first causes it to unfold into a boat 10 ft \xD7 4 ft \xD7 2 ft, with oars, an anchor, a mast, and a lateen sail, which can hold four Medium creatures comfortably. The second causes it to unfold into a ship 24 ft \xD7 8 ft \xD7 6 ft, with a deck, rowing seats, five sets of oars, a steering oar, an anchor, a deck cabin, and a mast with a square sail, which can hold fifteen Medium creatures comfortably. Three causes it to fold up, leaving large objects placed in the boat/ship outside of the box.",
		descriptionFull : "This object appears as a wooden box that measures 12 inches long, 6 inches wide, and 6 inches deep. It weighs 4 pounds and floats. It can be opened to store items inside. This item also has three command words, each requiring you to use an action to speak it.\n   One command word causes the box to unfold into a boat 10 feet long, 4 feet wide, and 2 feet deep. The boat has one pair of oars, an anchor, a mast, and a lateen sail. The boat can hold up to four Medium creatures comfortably.\n   The second command word causes the box to unfold into a ship 24 feet long, 8 feet wide; and 6 feet deep. The ship has a deck, rowing seats, five sets of oars, a steering oar, an anchor, a deck cabin, and a mast with a square sail. The ship can hold fifteen Medium creatures comfortably.\n   When the box becomes a vessel, its weight becomes that of a normal vessel its size, and anything that was stored in the box remains in the boat.\n   The third command word causes the folding boat to fold back into a box, provided that no creatures are aboard. Any objects in the vessel that can't fit inside the box remain outside the box as it folds. Any objects in the vessel that can fit inside the box do so.",
		weight : 4,
		action : [["action", ""]]
	},
	"frost brand" : {
		name : "Frost Brand",
		source : [["SRD", 223], ["D", 171]],
		type : "weapon (any sword)",
		rarity : "very rare",
		magicItemTable : "H",
		attunement : true,
		description : "This magic sword adds +1d6 cold damage to its damage and grants me resistance to fire. In freezing temperatures, it sheds bright light in a 10-ft radius and dim light for an additional 10 ft. Once per hour when I draw the blade, I can extinguish all nonmagical flames within 30 ft of me.",
		descriptionFull : "When you hit with an attack using this magic sword, the target takes an extra 1d6 cold damage. In addition, while you hold the sword, you have resistance to fire damage.\n   In freezing temperatures, the blade sheds bright light in a 10-foot radius and dim light for an additional 10 feet.\n   When you draw this weapon, you can extinguish all nonmagical flames within 30 feet of you. This property can be used no more than once per hour.",
		usages : 1,
		recovery : "Hour",
		additional : "extinguish flames",
		dmgres : ["Fire"],
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*frost)(?=.*brand).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+1d6 cold damage';
					}
				},
				'If I include the words "Frost Brand" in a the name of a sword, it will be treated as the magic weapon Frost Brand. It does +1d6 cold damage.'
			]
		}
	},
	"gauntlets of ogre power" : {
		name : "Gauntlets of Ogre Power",
		source : [["SRD", 223], ["D", 171]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "My Strength score is 19 while I'm wearing these gauntlets, provided that my Strength is not already 19 or higher.",
		descriptionFull : "Your Strength score is 19 while you wear these gauntlets. They have no effect on you if your Strength is already 19 or higher without them.",
		attunement : true,
		scoresOverride : [19, 0, 0, 0, 0, 0]
	},
	"gem of brightness" : { // contains contributions by Larry Hoy
		name : "Gem of Brightness",
		source : [["SRD", 223], ["D", 171]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This gem has 50 charges. As an action while holding it, I can speak a command word to cause it to: shed 30-ft bright and 30-ft dim light, fire a 60-ft beam of light at 1 creature (1 charge, DC 15 Con save or blinded 1 minute), or flare with blinding light in a 30-ft cone (5 charges, DC 15 Con save or blinded 1 minute).",
		descriptionLong : "This gem has 50 charges. As an action while holding it, I can speak one of its three command words to cause it to: [1] shed bright light in a 30-ft radius and dim light in an additional 30 ft until another function of the gem is used or I use a bonus action to end it, [2] fire a 60-ft beam of light at 1 creature (1 charge, DC 15 Con save or blinded 1 minute), or [3] flare with blinding light in a 30-ft cone (5 charges, DC 15 Con save or blinded 1 minute). Blinded creatures can repeat the save at the end of each of their turns. When all of the gem's charges are expended, the gem becomes a nonmagical jewel worth 50 gp.",
		descriptionFull : "This prism has 50 charges. While you are holding it, you can use an action to speak one of three command words to cause one of the following effects:\n \u2022 The first command word causes the gem to shed bright light in a 30-foot radius and dim light for an additional 30 feet. This effect doesn't expend a charge. It lasts until you use a bonus action to repeat the command word or until you use another function of the gem.\n \u2022 The second command word expends 1 charge and causes the gem to fire a brilliant beam of light at one creature you can see within 60 feet of you. The creature must succeed on a DC 15 Constitution saving throw or become blinded for 1 minute. The creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.\n \u2022 The third command word expends 5 charges and causes the gem to flare with blinding light in a 30-foot cone originating from it. Each creature in the cone must make a saving throw as if struck by the beam created with the second command word.\n\nWhen all of the gem's charges are expended, the gem becomes a nonmagical jewel worth 50 gp.",
		weight : 1,
		usages : 50,
		recovery : "Never",
		action : [["action", ""]]
	},
	"gem of seeing" : { // contains contributions by Larry Hoy
		name : "Gem of Seeing",
		source : [["SRD", 223], ["D", 172]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This gem has 3 charges. As an action, I can speak its command word and expend 1 charge. For the next 10 minutes, I have truesight out to 120 ft when I peer through the gem. The gem regains 1d3 expended charges daily at dawn.",
		descriptionFull : "This gem has 3 charges. As an action, you can speak the gem's command word and expend 1 charge. For the next 10 minutes, you have truesight out to 120 feet when you peer through the gem.\n   The gem regains 1d3 expended charges daily at dawn.",
		attunement : true,
		weight : 1,
		usages : 3,
		recovery : "dawn",
		additional : "1d3 Recharge"
	},
	"giant slayer" : {
		name : "Giant Slayer",
		source : [["SRD", 224], ["D", 172]],
		type : "weapon (any axe or sword)",
		rarity : "rare",
		magicItemTable : "G",
		description : "I have a +1 bonus to attack and damage rolls made with this magic weapon. When I hit a creature with the giant type with this weapon, it does 2d6 extra damage of the weapon's damage type and the giant has to make a DC 15 Strength save or be knocked prone.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon.\n   When you hit a giant with it, the giant takes an extra 2d6 damage of the weapon's type and must succeed on a DC 15 Strength saving throw or fall prone. For the purpose of this weapon, \"giant\" refers to any creature with the giant type, including ettins and trolls.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "weapon"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier|axe/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier|axe/i).test(v.baseWeaponName) && (/^(?=.*giant)(?=.*slayer).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+2d6 damage vs. giants; Giants DC 15 Str save or prone';
					}
				},
				'If I include the words "Giant Slayer" in a the name of a sword, it will be treated as the magic weapon Giant Slayer. It has +1 to hit and damage and when hitting a creatures with the giant type, it does +2d6 damage and the target has to make a DC 15 Strength save or be knocked prone.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier|axe/i).test(v.baseWeaponName) && (/^(?=.*giant)(?=.*slayer).*$/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 1;
					}
				}, ''
			]
		}
	},
	"glamoured studded leather" : {
		name : "Glamoured Studded Leather",
		source : [["SRD", 224], ["D", 172]],
		type : "armor (studded leather)",
		rarity : "rare",
		magicItemTable : "G",
		description : "Studded leather with +1 AC. As a bonus action, I can speak its command word and have it assume the appearance of a normal set of clothing or another armor. I decide what it looks like: style, color, and accessories, but the armor retains its bulk and weight. The illusion lasts until I use this again or remove the armor.",
		weight : 13,
		descriptionFull : "While wearing this armor, you gain a +1 bonus to AC. You can also use a bonus action to speak the armor's command word and cause the armor to assume the appearance of a normal set of clothing or some other kind of armor. You decide what it looks like, including color, style, and accessories, but the armor retains its normal bulk and weight. The illusory appearance last until you use this property again or remove the armor.",
		armorAdd : "Glamoured Studded Leather",
		armorOptions : {
			regExpSearch : /^(?=.*glamou?r)(?=.*(studded|studs))(?=.*leather).*$/i,
			name : "Glamoured studded Leather",
			source : [["SRD", 224], ["D", 172]],
			type : "light",
			ac : 13,
			weight : 13
		},
		action : [["bonus action", ""]]
	},
	"gloves of missile snaring" : {
		name : "Gloves of Missile Snaring",
		source : [["SRD", 224], ["D", 172]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		calculate : 'event.value = "As a reaction when a ranged weapon attack hits me while I\'m wearing these gloves, I can reduce the damage by 1d10 + " + Number(What("Dex Mod")) + " (my Dexterity modifier). This only works if I have a free hand. If I reduce the damage to 0, I can catch the missile if it is small enough for me to hold in that hand.";',
		description : "",
		descriptionFull : "These gloves seem to almost meld into your hands when you don them. When a ranged weapon attack hits you while you're wearing them, you can use your reaction to reduce the damage by 1d10 + your Dexterity modifier, provided that you have a free hand. If you reduce the damage to 0, you can catch the missile if it is small enough for you to hold in that hand.",
		attunement : true,
		action : [["reaction", ""]]
	},
	"gloves of swimming and climbing" : { // contributed by AelarTheElfRogue
		name : "Gloves of Swimming and Climbing",
		source : [["SRD", 224], ["D", 172]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing these gloves, climbing and swimming don't cost me extra movement, and I gain a +5 bonus to Strength (Athletics) checks made to climb or swim.",
		descriptionFull : "While wearing these gloves, climbing and swimming don't cost you extra movement, and you gain a +5 bonus to Strength (Athletics) checks made to climb or swim.",
		attunement : true
	},
	"goggles of night" : { // contributed by AelarTheElfRogue
		name : "Goggles of Night",
		source : [["SRD", 224], ["D", 172]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "While wearing these dark lenses, I have darkvision out to a range of 60 feet. If I already have darkvision. wearing the goggles increases its range by 60 feet.",
		descriptionFull : "While wearing these dark lenses, you have darkvision out to a range of 60 feet. If you already have darkvision. wearing the goggles increases its range by 60 feet.",
		vision : [["Darkvision", "fixed 60"], ["Darkvision", "+60"]]
	},
	"hammer of thunderbolts" : {
		name : "Hammer of Thunderbolts",
		source : [["SRD", 224], ["D", 173]],
		type : "weapon (maul)",
		rarity : "legendary",
		magicItemTable : "I",
		description : "This magical maul adds a +1 bonus to attack and damage rolls made with it. It has additional features when I'm attuned to it, which requires me to wear both a belt of giant strength and gauntlets of ogre power.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon.\n   " + toUni("Giant's Bane (Requires Attunement)") + ". You must be wearing a belt of giant strength (any variety) and gauntlets of ogre power to attune to this weapon. The attunement ends if you take off either of those items. While you are attuned to this weapon and holding it, your Strength score increases by 4 and can exceed 20, but not 30. When you roll a 20 on an attack roll made with this weapon against a giant, the giant must succeed on a DC 17 Constitution saving throw or die.\n   The hammer also has 5 charges. While attuned to it, you can expend 1 charge and make a ranged weapon attack with the hammer, hurling it as if it had the thrown property with a normal range of 20 feet and a long range of 60 feet. If the attack hits, the hammer unleashes a thunderclap audible out to 300 feet. The target and every creature within 30 feet of it must succeed on a DC 17 Constitution saving throw or be stunned until the end of your next turn. The hammer regains 1d4+1 expended charges daily at dawn.",
		weight : 10,
		selfChoosing : function () {
			// don't have to be attuned to the prereqs https://twitter.com/jeremyecrawford/status/948346891296653315
			return CurrentMagicItems.known.indexOf("belt of giant strength") !== -1 && CurrentMagicItems.known.indexOf("gauntlets of ogre power") !== -1 ? "attuned (requires Belt of Giant Strength and Gauntlets of Ogre Power)" : "not attuned";
		},
		choices : ["not attuned", "attuned (requires Belt of Giant Strength and Gauntlets of Ogre Power)"],
		"not attuned" : {
			description : "This magical maul adds a +1 bonus to attack and damage rolls made with it. It has additional features when I'm attuned to it, which requires me to wear both a belt of giant strength and gauntlets of ogre power.",
			weaponsAdd : ["Hammer of Thunderbolts"],
			weaponOptions : {
				baseWeapon : "maul",
				regExpSearch : /^(?=.*hammer)(?=.*thunderbolts).*$/i,
				name : "Hammer of Thunderbolts",
				source : [["SRD", 224], ["D", 173]],
				modifiers : [1, 1]
			}
		},
		"attuned (requires belt of giant strength and gauntlets of ogre power)" : {
			name : "Hammer of Thunderbolts [attuned]",
			description : "This magical maul has a +1 bonus to hit/damage and gives me +4 Strength (max 30). On a roll of 20 to hit vs. a giant, it dies on a failed DC 17 Con save. I can expend 1 charge to throw it with 20 ft/60 ft range, which, on a hit, causes all within 30 ft to make a DC 17 Con save or be stunned until the end of my next turn.",
			descriptionLong : "This magical maul adds a +1 bonus to attack and damage rolls made with it. It gives me a +4 bonus to Strength (max 30). On a roll of 20 to hit vs. a giant, the giant dies on a failed DC 17 Con save. The hammer has 5 charges and regains 1d4+1 charges daily at dawn. I can can expend 1 charge and make a ranged weapon attack with the hammer, hurling it as if it had the thrown property with a normal range of 20 ft and a long range of 60 ft. On a hit, it releases an audible thunderclap in a 300 ft radius and all within 30 ft of the target that was hit must make a DC 17 Con save or be stunned until the end of my next turn.",
			prerequisite : "Must be wearing a Belt of Giant Strength and Gauntlets of Ogre Power to attune",
			prereqeval : function () {
				// don't have to be attuned to the prereqs https://twitter.com/jeremyecrawford/status/948346891296653315
				return CurrentMagicItems.known.indexOf("belt of giant strength") !== -1 && CurrentMagicItems.known.indexOf("gauntlets of ogre power") !== -1;
			},
			usages : 5,
			recovery : "dawn",
			additional : "regains 1d4+1",
			scores : [4, 0, 0, 0, 0, 0],
			scoresMaximum : [30, 0, 0, 0, 0, 0],
			weaponsAdd : ["Hammer of Thunderbolts"],
			weaponOptions : {
				baseWeapon : "maul",
				regExpSearch : /^(?=.*hammer)(?=.*thunderbolts).*$/i,
				name : "Hammer of Thunderbolts",
				source : [["SRD", 224], ["D", 173]],
				description : "Heavy, two-handed; On 20 to hit vs. Giant: DC 17 Con save or die; Expend charge to throw",
				modifiers : [1, 1]
			}
		}
	},
	"hat of disguise" : { // contributed by Larry Hoy
		name : "Hat of Disguise",
		source : [["SRD", 225], ["D", 173]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "As an action while wearing this hat, I can cast Disguise Self from it at will. The spell ends if the hat is removed.",
		descriptionFull : "While wearing this hat, you can use an action to cast the Disguise Self spell from it at will. The spell ends if the hat is removed.",
		attunement : true,
		spellcastingBonus : [{
			name : "At will",
			spells : ["disguise self"],
			selection : ["disguise self"],
			firstCol : "atwill"
	   }],
	   spellcastingAbility : "class" // https://www.sageadvice.eu/2015/11/27/hat-of-disguise-dc/
	},
	"headband of intellect" : {
		name : "Headband of Intellect",
		source : [["SRD", 225], ["D", 173]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "My Intelligence score is 19 while I'm wearing this headband, provided that my Intelligence is not already 19 or higher.",
		descriptionFull : "Your Intelligence score is 19 while you wear this headband. It has no effect on you if your Intelligence is already 19 or higher without it.",
		attunement : true,
		scoresOverride : [0, 0, 0, 19, 0, 0]
	},
	"helm of brilliance" : {
		name : "Helm of Brilliance",
		source : [["SRD", 225], ["D", 173]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This helm is set with diamonds, rubies, fire opals, and opals. Gems pried from the helm turn to dust. When all the gems are removed or destroyed, the helm loses its magic. I can use an action to cast a spell by having a gem crumble to dust. The helm has special properties for each type of gem, see Notes page.",
		descriptionFull : "This dazzling helm is set with 1d10 diamonds, 2d10 rubies, 3d10 fire opals, and 4d10 opals. Any gem pried from the helm crumbles to dust. When all the gems are removed or destroyed, the helm loses its magic.\n   You gain the following benefits while wearing it:\n \u2022 You can use an action to cast one of the following spells (save DC 18), using one of the helm's gems of the specified type as a component: Daylight (opal), Fireball (fire opal), Prismatic Spray (diamond), or Wall of Fire (ruby). The gem is destroyed when the spell is cast and disappears from the helm.\n \u2022 As long as it has at least one diamond, the helm emits dim light in a 30-foot radius when at least one undead is within that area. Any undead that starts its turn in that area takes 1d6 radiant damage.\n \u2022 As long as the helm has at least one ruby, you have resistance to fire damage.\n \u2022 As long as the helm has at least one fire opal, you can use an action and speak a command word to cause one weapon you are holding to burst into flames. The flames emit bright light in a 10-foot radius and dim light for an additional 10 feet. The flames are harmless to you and the weapon. When you hit with an attack using the blazing weapon, the target takes an extra 1d6 fire damage. The flames last until you use a bonus action to speak the command word again or until you drop or stow the weapon.\n\nRoll a d20 if you are wearing the helm and take fire damage as a result of failing a saving throw against a spell. On a roll of 1, the helm emits beams of light from its remaining gems. Each creature within 60 feet of the helm other than you must succeed on a DC 17 Dexterity saving throw or be struck by a beam, taking radiant damage equal to the number of gems in the helm. The helm and its gems are then destroyed.",
		attunement : true,
		dmgres : ["Fire"],
		action : [["action", " (spell/blazing weapon)"]],
		extraLimitedFeatures : [{
			name : "Helm of Brilliance - Diamonds (D)",
			usages : "1d10",
			recovery : "Never"
		}, {
			name : "Helm of Brilliance - Rubies (R)",
			usages : "2d10",
			recovery : "Never"
		}, {
			name : "Helm of Brilliance - Fire Opals (F)",
			usages : "3d10",
			recovery : "Never"
		}, {
			name : "Helm of Brilliance - Opals (O)",
			usages : "4d10",
			recovery : "Never"
		}],
		fixedDC : 18,
		spellFirstColTitle : "GE",
		spellcastingBonus : [{
			name : "Uses an opal (O)",
			spells : ["daylight"],
			selection : ["daylight"],
			firstCol : "(O)"
		}, {
			name : "Uses a fire opal (F)",
			spells : ["fireball"],
			selection : ["fireball"],
			firstCol : "(F)"
		}, {
			name : "Uses a diamond (D)",
			spells : ["prismatic spray"],
			selection : ["prismatic spray"],
			firstCol : "(D)"
		}, {
			name : "Uses a ruby (R)",
			spells : ["wall of fire"],
			selection : ["wall of fire"],
			firstCol : "(R)"
		}],
		spellChanges : {
			"daylight" : {
				components : "M\u0192,M\u2020",
				compMaterial : "Spells cast from magic items don't require any components other than the magic item itself and, when casting Daylight from the Helm of Brilliance, causes one of the opals in the helm to crumble to dust.",
				changes : "Using the Helm of Brilliance to cast Daylight causes one of the opals in the helm to crumble to dust."
			},
			"fireball" : {
				components : "M\u0192,M\u2020",
				compMaterial : "Spells cast from magic items don't require any components other than the magic item itself and, when casting Fireball from the Helm of Brilliance, causes one of the fire opals in the helm to crumble to dust.",
				changes : "Using the Helm of Brilliance to cast Fireball causes one of the fire opals in the helm to crumble to dust."
			},
			"prismatic spray" : {
				components : "M\u0192,M\u2020",
				compMaterial : "Spells cast from magic items don't require any components other than the magic item itself and, when casting Prismatic Spray from the Helm of Brilliance, causes one of the diamonds in the helm to crumble to dust.",
				changes : "Using the Helm of Brilliance to cast Prismatic Spray causes one of the diamonds in the helm to crumble to dust."
			},
			"wall of fire" : {
				components : "M\u0192,M\u2020",
				compMaterial : "Spells cast from magic items don't require any components other than the magic item itself and, when casting Wall of Fire from the Helm of Brilliance, causes one of the rubies in the helm to crumble to dust.",
				changes : "Using the Helm of Brilliance to cast Wall of Fire causes one of the rubies in the helm to crumble to dust."
			}
		},
		toNotesPage : [{
			name : "Special Properties",
			popupName : "Helm of Brilliance's Special Properties",
			note : [
				"This dazzling helm is set with 1d10 diamonds, 2d10 rubies, 3d10 fire opals, and 4d10 opals. Any gem pried from the helm crumbles to dust. When all the gems are removed or destroyed, the helm loses its magic.",
				"As an action, I can cast one of the following spells (save DC 18), using one of the helm's gems of the specified type as a component: Daylight (opal), Fireball (fire opal), Prismatic Spray (diamond), or Wall of Fire (ruby). The gem is destroyed when the spell is cast and disappears from the helm.",
				"As long as the helm has at least one diamond remaining, it emits dim light in a 30-ft radius when at least one undead is within that area. Any undead that starts its turn in that area takes 1d6 radiant damage.",
				"As long as the helm has at least one ruby remaining, I have resistance to fire damage.",
				"As long as the helm has at least one fire opal remaining, I can use an action and speak a command word to cause one weapon I'm holding to burst into flames. The flames emit bright light in a 10-ft radius and dim light for an additional 10 ft. The flames are harmless to me and the weapon. When I hit with an attack using the blazing weapon, the target takes an extra 1d6 fire damage. The flames last until I use a bonus action to speak the command word again or until I drop or stow the weapon.",
				"If I take fire damage as a result of failing a save against a spell while wearing the helm, I have to roll a d20. On a roll of 1, the helm emits beams of light from its remaining gems. Each creature within 60 ft other than myself must succeed on a DC 17 Dexterity save or be struck by a beam, taking radiant damage equal to the number of gems remaining in the helm. The helm and its gems are then destroyed."
			]
		}]
	},
	"helm of comprehending languages" : { // contributed by Larry Hoy
		name : "Helm of Comprehending Languages",
		source : [["SRD", 225], ["D", 173]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "While wearing this helm, I can cast Comprehend Languages at will.",
		descriptionFull : "While wearing this helm, you can use an action to cast the Comprehend Languages spell from it at will.",
		spellcastingBonus : {
			name : "At will",
			spells : ["comprehend languages"],
			selection : ["comprehend languages"],
			firstCol : "atwill"
		}
	},
	"helm of telepathy" : {
		name : "Helm of Telepathy",
		source : [["SRD", 225], ["D", 174]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this helm, I can cast Detect Thoughts (DC 13). As a bonus action, I can send a telepathic message to a creature that I'm focussing on with Detect Thoughts, which can reply as a bonus action. Once between each dawn, I can cast Suggestion (DC 13) on a creature I'm focussing on with Detect Thoughts.",
		descriptionFull : "While wearing this helm, you can use an action to cast the Detect Thoughts spell (save DC 13) from it. As long as you maintain concentration on the spell, you can use a bonus action to send a telepathic message to a creature you are focused on. It can reply\u2014using a bonus action to do so\u2014while your focus on it continues.\n   While focusing on a creature with Detect Thoughts, you can use an action to cast the Suggestion spell (save DC 13) from the helm on that creature. Once used, the suggestion property can't be used again until the next dawn.",
		attunement : true,
		limfeaname : "Helm of Telepathy: Suggestion",
		usages : 1,
		recovery : "dawn",
		fixedDC : 13,
		spellcastingBonus : [{
			name : "At will",
			spells : ["detect thoughts"],
			selection : ["detect thoughts"],
			firstCol : "atwill"
		}, {
			name : "Once per dawn",
			spells : ["suggestion"],
			selection : ["suggestion"],
			firstCol : "oncelr"
		}]
	},
	"helm of teleportation" : {
		name : "Helm of Teleportation",
		source : [["SRD", 225], ["D", 174]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This helm has 3 charges. While wearing it, I can use an action and expend 1 charge to cast Teleport from it. The helm regains 1d3 expended charges daily at dawn.",
		descriptionFull : "This helm has 3 charges. While wearing it, you can use an action and expend 1 charge to cast the Teleport spell from it. The helm regains 1d3 expended charges daily at dawn.",
		attunement : true,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		spellFirstColTitle : "Ch",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["teleport"],
			selection : ["teleport"],
			firstCol : "1"
		}
	},
	"holy avenger" : {
		name : "Holy Avenger",
		source : [["SRD", 225], ["D", 174]],
		type : "weapon (any sword)",
		rarity : "legendary",
		magicItemTable : "I",
		attunement : true,
		description : "I have a +3 bonus to attack and damage rolls made with this magic sword. It does +2d10 radiant damage against fiends and undead. While holding the drawn sword, I have a 10-ft radius aura (30-ft if level 17 paladin) that grants me and my allies adv. on saves against spells and magical effects.",
		descriptionFull : "You gain a +3 bonus to attack and damage rolls made with this magic weapon. When you hit a fiend or an undead with it, that creature takes an extra 2d10 radiant damage.\n   While you hold the drawn sword, it creates an aura in a 10-foot radius around you. You and all creatures friendly to you in the aura have advantage on saving throws against spells and other magical effects. If you have 17 or more levels in the paladin class, the radius of the aura increases to 30 feet.",
		prerequisite : "Requires attunement by a paladin",
		prereqeval : function (v) { return classes.known.paladin ? true : false; },
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			itemName1stPage : ["brackets", "Holy Avenger"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*holy)(?=.*avenger).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+2d10 radiant damage vs. fiends and undead';
					}
				},
				'If I include the words "Holy Avenger" in a the name of a sword, it will be treated as the magic weapon Holy Avenger. It has +3 to hit and damage and does +2d10 radiant damage to fiends and undead.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*holy)(?=.*avenger).*$/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 3;
					}
				}, ''
			]
		},
		savetxt : { adv_vs : ["spells", "magical effects"] },
		choices : ["Paladin level 1-16 (10-ft aura)", "Paladin level 17+ (30-ft aura)"],
		selfChoosing : function () {
			return !classes.known.paladin ? "" : classes.known.paladin.level < 17 ? "paladin level 1-16 (10-ft aura)" : "paladin level 17+ (30-ft aura)";
		},
		"paladin level 1-16 (10-ft aura)" : {
			name : "Holy\u200A Avenger",
			description : "I have a +3 bonus to attack and damage rolls made with this magic sword. It does +2d10 radiant damage against fiends and undead. While holding the drawn sword, I have a 10-ft radius aura that grants me and my allies advantage on saving throws against spells and magical effects."
		},
		"paladin level 17+ (30-ft aura)" : {
			name : "Holy\u200A\u200A Avenger",
			description : "I have a +3 bonus to attack and damage rolls made with this magic sword. It does +2d10 radiant damage against fiends and undead. While holding the drawn sword, I have a 30-ft radius aura that grants me and my allies advantage on saving throws against spells and magical effects."
		}
	},
	"heward's handy haversack" : {
		name : "Heward's Handy Haversack",
		nameAlt : "Handy Haversack",
		source : [["SRD", 224], ["D", 174]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "This backpack weighs 5 lb, regardless of its contents. It has two side pouches that hold 20 lb (2 cu ft) each and a central pouch that holds 80 lb (8 cu ft). Retrieving an item from it requires an action. If it's overloaded, pierced, or torn, it and its content are destroyed. If turned inside out, all its contents spill forth.",
		descriptionLong : "This backpack weighs 5 lb, regardless of its contents. It has two side pouches that hold up to 20 lb (2 cu ft) each and a central pouch that holds up to 80 lb (8 cu ft). Retrieving an item from it requires an action. When I reach in the bag for a specific item, the item is always magically on top. If it's overloaded, pierced, or torn, it and its content are destroyed. If turned inside out, all its contents spill forth. A creature placed inside the bag can survive for 10 minutes before starting to suffocate. Placing the haversack in another extradimensional space instantly destroys both and opens a gate to the Astral Plane.",
		descriptionFull : "This backpack has a central pouch and two side pouches, each of which is an extradimensional space. Each side pouch can hold up to 20 pounds of material, not exceeding a volume of 2 cubic feet. The large central pouch can hold up to 8 cubic feet or 80 pounds of material. The backpack always weighs 5 pounds, regardless of its contents.\n   Placing an object in the haversack follows the normal rules for interacting with objects. Retrieving an item from the haversack requires you to use an action. When you reach into the haversack for a specific item, the item is always magically on top.\n   The haversack has a few limitations. If it is overloaded, or if a sharp object pierces it or tears it, the haversack ruptures and is destroyed. If the haversack is destroyed, its contents are lost forever, although an artifact always turns up again somewhere. If the haversack is turned inside out, its contents spill forth, unharmed, and the haversack must be put right before it can be used again. If a breathing creature is placed within the haversack, the creature can survive for up to 10 minutes, after which time it begins to suffocate.\n   Placing the haversack inside an extradimensional space created by a bag of holding, portable hole, or similar item instantly destroys both items and opens a gate to the Astral Plane. The gate originates where the one item was placed inside the other. Any creature within 10-feet of the gate is sucked through it and deposited in a random location on the Astral Plane. The gate then closes. The gate is one-way only and can't be reopened.",
		weight : 5,
		action : [["action", " (retrieve item)"]]
	},
	"horn of blasting" : { // contains contributions by Larry Hoy
		name : "Horn of Blasting",
		source : [["SRD", 226], ["D", 174]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action, I can speak the horn's command word and blow it, creating a 30-ft cone. All in it take 5d6 thunder damage and are deafened for 1 min. Half damage with a DC 15 Con save and not deafened. Glass/crystal creatures/objects have disadv. and take 10d6 damage. There is a 20% chance each use that it explodes.",
		descriptionLong: "As an action, I can speak the horn's command word and blow it, emitting a thunderous blast in a 30-foot cone audible 600 feet away. Creatures in the cone must make a DC 15 Con save or take 5d6 thunder damage and be deafened for 1 min; otherwise, they just take half the damage. Creatures and objects made of glass or crystal have disadvantage on the save and take 10d6 thunder damage instead. Each use of its magic has a 20% chance of causing it to explode, dealing 10d6 fire damage to the blower and destroying it.",
		descriptionFull : "You can use an action to speak the horn's command word and then blow the horn, which emits a thunderous blast in a 30-foot cone that is audible 600 feet away. Each creature in the cone must make a DC 15 Constitution saving throw. On a failed save, a creature takes 5d6 thunder damage and is deafened for 1 minute. On a successful save, a creature takes half as much damage and isn't deafened. Creatures and objects made of glass or crystal have disadvantage on the saving throw and take 10d6 thunder damage instead of 5d6.\n   Each use of the horn's magic has a 20% chance of causing the horn to explode. The explosion deals 10d6 fire damage to the blower and destroys the horn.",
		weight : 2,
		action : [["action", ""]]
	},
	"horn of valhalla" : { // contains contributions by Larry Hoy
		name : "Horn of Valhalla",
		source : [["SRD", 226], ["D", 175]],
		type : "wondrous item",
		description : "As an action once per 7 days, I can blow this horn to summon warrior spirits from Ysgard within 60 ft me. These have the statistics of a berserker and return after 1 hour or when they drop to 0 hp. The number and how they respond depends on the type of material the horn is made of.",
		descriptionFull : "You can use an action to blow this horn. In response, warrior spirits from the plane of Ysgard appear within 60 feet of you. These spirits use the berserker statistics. They return to Ysgard after 1 hour or when they drop to 0 hit points. Once you use the horn, it can't be used again until 7 days have passed.\n Four types of Horn of Valhalla are known to exist, each made of a different metal. The horn's type determines how many berserkers answer it summons, as well as the requirement for its use. The DM chooses the horn's type or determines it randomly.\n   If you blow the horn without meeting its requirement, the summoned berserkers attack you. If you meet the requirement, they are friendly to you and your companions and follow your commands.",
		weight : 2,
		usages : 1,
		recovery : "7 days",
		action : [["action", ""]],
		allowDuplicates : true,
		choices : ["Silver (rare; 2d4+2 berserkers)", "Brass (rare; 3d4+3 berserkers; prereq: simple weapons prof.)", "Bronze (very rare; 4d4+4 berserkers; prereq: medium armor prof.)", "Iron (very rare; 5d4+5 berserkers; prereq: martial weapons prof.)"],
		"silver (rare; 2d4+2 berserkers)" : {
			name : "Silver Horn of Valhalla",
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action once per 7 days, I can blow this horn to summon 2d4+2 warrior spirits from Ysgard within 60 ft me. These have the statistics of a berserker and return after 1 hour or when they drop to 0 hp. They are friendly to me and my companions and follow my commands.",
			descriptionFull : "You can use an action to blow this horn. In response, warrior spirits from the plane of Ysgard appear within 60 feet of you. These spirits use the berserker statistics. They return to Ysgard after 1 hour or when they drop to 0 hit points. Once you use the horn, it can't be used again until 7 days have passed.\n   The silver horn summons 2d4+2 berserkers.\n   The berserkers are friendly to you and your companions and follow your commands."
		},
		"brass (rare; 3d4+3 berserkers; prereq: simple weapons prof.)" : {
			name : "Brass Horn of Valhalla",
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action once per 7 days, I can blow this horn to summon 3d4+3 warrior spirits from Ysgard within 60 ft. These berserkers return after 1 hour or when they drop to 0 hp. If I'm proficient with all simple weapons, they follow my commands and are friendly to me and my companions. Otherwise, they attack me.",
			descriptionFull : "You can use an action to blow this horn. In response, warrior spirits from the plane of Ysgard appear within 60 feet of you. These spirits use the berserker statistics. They return to Ysgard after 1 hour or when they drop to 0 hit points. Once you use the horn, it can't be used again until 7 days have passed.\n   A brass horn summons 3d4+3 berserkers. To use the brass horn, you must be proficient with all simple weapons.\n   If you blow the horn without meeting its requirement, the summoned berserkers attack you. If you meet the requirement, they are friendly to you and your companions and follow your commands."
		},
		"bronze (very rare; 4d4+4 berserkers; prereq: medium armor prof.)" : {
			name : "Bronze Horn of Valhalla",
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action once per 7 days, I can blow this horn to summon 4d4+4 warrior spirits from Ysgard within 60 ft. These berserkers return after 1 hour or when they drop to 0 hp. If I'm proficient with medium armor, they follow my commands and are friendly to me and my companions. Otherwise, they attack me.",
			descriptionFull : "You can use an action to blow this horn. In response, warrior spirits from the plane of Ysgard appear within 60 feet of you. These spirits use the berserker statistics. They return to Ysgard after 1 hour or when they drop to 0 hit points. Once you use the horn, it can't be used again until 7 days have passed.\n   A bronze horn summons 4d4+4 berserkers. To use the bronze horn, you must be proficient with medium armor.\n   If you blow the horn without meeting its requirement, the summoned berserkers attack you. If you meet the requirement, they are friendly to you and your companions and follow your commands."
		},
		"iron (very rare; 5d4+5 berserkers; prereq: martial weapons prof.)" : {
			name : "Iron Horn of Valhalla",
			rarity : "legendary",
			magicItemTable : "I",
			description : "As an action once per 7 days, I can blow this horn to summon 5d4+5 warrior spirits from Ysgard within 60 ft. These berserkers return after 1 hour or when they drop to 0 hp. If I'm proficient with all martial weapons, they follow my commands and are friendly to me and my companions. Otherwise, they attack me.",
			descriptionFull : "You can use an action to blow this horn. In response, warrior spirits from the plane of Ysgard appear within 60 feet of you. These spirits use the berserker statistics. They return to Ysgard after 1 hour or when they drop to 0 hit points. Once you use the horn, it can't be used again until 7 days have passed.\n   The iron horn summons 5d4+5 berserkers. To use the iron horn, you must be proficient with all martial weapons.\n   If you blow the horn without meeting its requirement, the summoned berserkers attack you. If you meet the requirement, they are friendly to you and your companions and follow your commands."
		}
	},
	"horseshoes of a zephyr" : {
		name : "Horseshoes of a Zephyr",
		source : [["SRD", 226], ["D", 175]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "D",
		description : "While all four shoes are affixed to the hooves of a creature, they allow it to move normally while floating 4 inches above the floor. the creature can cross or stand above liquid or unstable surfaces, leaves no tracks, ignores difficult terrain, and doesn't suffer exhaustion from moving at normal speed for 12 hours a day.",
		descriptionFull : "These iron horseshoes come in a set of four. While all four shoes are affixed to the hooves of a horse or similar creature, they allow the creature to move normally while floating 4 inches above the ground. This effect means the creature can cross or stand above nonsolid or unstable surfaces, such as water or lava. The creature leaves no tracks and ignores difficult terrain. In addition, the creature can move at normal speed for up to 12 hours a day without suffering exhaustion from a forced march."
	},
	"horseshoes of speed" : {
		name : "Horseshoes of Speed",
		source : [["SRD", 226], ["D", 175]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "While all four shoes are affixed to the hooves of a horse or similar creature, they increase the creature's walking speed by 30 ft.",
		descriptionFull : "These iron horseshoes come in a set of four. While all four shoes are affixed to the hooves of a horse or similar creature, they increase the creature's walking speed by 30 feet."
	},
	"immovable rod" : {
		name : "Immovable Rod",
		source : [["SRD", 226], ["D", 175]],
		type : "rod",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This flat iron rod has a button on one end. I can use an action to press the button, magically fixing the rod in place or making it movable again. Once fixed, it holds up to 8000 lb. More weight causes it to deactivate and fall. A creature can use an action to try and move the rod up to 10 ft with a DC 30 Strength check.",
		descriptionFull : "This flat iron rod has a button on one end. You can use an action to press the button, which causes the rod to become magically fixed in place. Until you or another creature uses an action to push the button again, the rod doesn't move, even if it is defying gravity. The rod can hold up to 8,000 pounds of weight. More weight causes the rod to deactivate and fall. A creature can use an action to make a DC 30 Strength check, moving the fixed rod up to 10 feet on a success",
		weight : 2,
		action : [["action", " (activate/deactivate)"]]
	},
	"ioun stone" : {
		name : "Ioun Stone",
		source : [["SRD", 227], ["D", 176]],
		type : "wondrous item",
		attunement : true,
		description : "As an action, I can make an ioun stone orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. Different stones grant different benefits.",
		descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.",
		allowDuplicates : true,
		action : [["action", " (orbit/retrieve)"]],
		choices : ["Absorption", "Agility", "Awareness", "Fortitude", "Greater Absorption", "Insight", "Intellect", "Leadership", "Mastery", "Protection", "Regeneration", "Reserve", "Strength", "Sustenance"],
		"absorption" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this pale lavender ellipsoid orbit my head at 1d3 ft or retrieve it. While it orbits my head, I can use my reaction to cancel a spell of 4th level or lower targeting only me, if I can see the caster and the stone has enough charges left. It can cancel 20 levels of spells before it loses its magic.",
			descriptionLong : "As an action, I can make this pale lavender ellipsoid orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I can use my reaction to cancel a spell of 4th level or lower targeting only me, if I can see the caster and the stone has enough charges left. It can cancel 20 levels of spells before it loses its magic.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   While this pale lavender ellipsoid orbits your head, you can use your reaction to cancel a spell of 4th level or lower cast by a creature you can see and targeting only you.\n   Once the stone has canceled 20 levels of spells, it burns out and turns dull gray, losing its magic. If you are targeted by a spell whose level is higher than the number of spell levels the stone has left, the stone can't cancel it.",
			limfeaname : "Ioun Stone of Absorption",
			usages : 20,
			recovery : "Never",
			action : [["reaction", ""]]
		},
		"agility" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this deep red sphere orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Dexterity score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Dexterity score increases by 2, to a maximum of 20, while this deep red sphere orbits your head.",
			scores : [0, 2, 0, 0, 0, 0]
		},
		"awareness" : {
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action, I can make this dark blue rhomboid orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I can't be surprised.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   You can't be surprised while this dark blue rhomboid orbits your head."
		},
		"fortitude" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this pink rhomboid orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Constitution score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Constitution score increases by 2, to a maximum of 20, while this pink rhomboid orbits your head.",
			scores : [0, 0, 2, 0, 0, 0]
		},
		"greater absorption" : {
			rarity : "legendary",
			magicItemTable : "I",
			description : "As an action, I can make this marbled lavender and green ellipsoid orbit my head at 1d3 ft or retrieve it. While it orbits my head, I can use a reaction to cancel a spell of 8th level or lower targeting only me, if I can see the caster and enough charges are left. It can cancel 50 levels of spells before it loses its magic.",
			descriptionLong : "As an action, I can make this marbled lavender and green ellipsoid orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I can use my reaction to cancel a spell of 8th level or lower targeting only me, if I can see the caster and the stone has enough charges left. It can cancel 50 levels of spells before it loses its magic.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   While this marbled lavender and green ellipsoid orbits your head, you can use your reaction to cancel a spell of 8th level or lower cast by a creature you can see and targeting only you. Once the stone has canceled 50 levels of spells, it burns out and turns dull gray, losing its magic. If you are targeted by a spell whose level is higher than the number of spell levels the stone has left, the stone can't cancel it.",
			limfeaname : "Ioun Stone of Greater Absorption",
			usages : 50,
			recovery : "Never",
			action : [["reaction", ""]]
		},
		"insight" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this incandescent blue sphere orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Wisdom score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Wisdom score increases by 2, to a maximum of 20, while this incandescent blue sphere orbits your head.",
			scores : [0, 0, 0, 0, 2, 0]
		},
		"intellect" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this marbled scarlet and blue sphere orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Intelligence score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Intelligence score increases by 2, to a maximum of 20, while this marbled scarlet and blue sphere orbits your head.",
			scores : [0, 0, 0, 2, 0, 0]
		},
		"leadership" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this marbled pink and green sphere orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Charisma score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Charisma score increases by 2, to a maximum of 20, while this marbled pink and green sphere orbits your head.",
			scores : [0, 0, 0, 0, 0, 2]
		},
		"mastery" : {
			rarity : "legendary",
			magicItemTable : "I",
			description : "As an action, I can make this pale green prism orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my proficiency bonus increases by 1.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your proficiency bonus increases by 1 while this pale green prism orbits your head.",
			addMod : [{ type: "", field : "Proficiency Bonus Modifier", mod : 1, text : "My proficiency bonus increases by 1." }]
		},
		"protection" : {
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action, I can make this dusty rose prism orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I have a +1 bonus to AC.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   You gain a +1 bonus to AC while this dusty rose prism orbits your head.",
			extraAC : [{name : "Ioun Stone of Protection", mod : 1, magic : true, text : "I gain a +1 bonus to AC while attuned."}]
		},
		"regeneration" : {
			rarity : "legendary",
			magicItemTable : "I",
			description : "As an action, I can make this pearly white spindle orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I regain 15 HP at the end of each hour as long as I have at least 1 HP.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   You regain 15 hit points at the end of each hour this pearly white spindle orbits your head, provided that you have at least 1 hit point."
		},
		"reserve" : {
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action, I can make this vibrant purple prism orbit my head at 1d3 ft or retrieve it. It can store 3 (spell slot) levels worth of spells. By touching it, one can cast a 1-3 level spell into it. While it orbits my head, I can cast any spell stored in it as if casting it myself, but using the original casters spellcasting ability.",
			descriptionLong : "As an action, I can make this vibrant purple prism orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. It can store 3 (spell slot) levels worth of spells. By touching it, one can cast a 1-3 level spell into it. While it orbits my head, I can cast any spell stored in it as if casting it myself, but using the original casters spellcasting ability.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   This vibrant purple prism stores spells cast into it, holding them until you use them. The stone can store up to 3 levels worth of spells at a time. When found, it contains 1d4-1 levels of stored spells chosen by the DM.\n   Any creature can cast a spell of 1st through 3rd level into the stone by touching it as the spell is cast. The spell has no effect, other than to be stored in the stone. If the stone can't hold the spell, the spell is expended without effect. The level of the slot used to cast the spell determines how much space it uses.\n   While this stone orbits your head, you can cast any spell stored in it. The spell uses the slot level, spell save DC, spell attack bonus, and spellcasting ability of the original caster, but is otherwise treated as if you cast the spell. The spell cast from the stone is no longer stored in it, freeing up space."
		},
		"strength" : {
			rarity : "very rare",
			magicItemTable : "H",
			description : "As an action, I can make this pale blue rhomboid orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, my Strength score increases by 2, to a maximum of 20.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   Your Strength score increases by 2, to a maximum of 20, while this pale blue rhomboid orbits your head.",
			scores : [2, 0, 0, 0, 0, 0]
		},
		"sustenance" : {
			rarity : "rare",
			magicItemTable : "G",
			description : "As an action, I can make this clear spindle orbit my head at 1d3 ft or retrieve it. Others can catch it as an action with an attack or Acrobatics check (AC/DC 24). It has 10 HP and resistance to all damage. While it orbits my head, I don't need to eat or drink.",
			descriptionFull : "An Ioun stone is named after Ioun, a god of knowledge and prophecy revered on some worlds. Many types of Ioun stone exist, each type a distinct combination of shape and color.\n   When you use an action to toss one of these stones into the air, the stone orbits your head at a distance of 1d3 feet and confers a benefit to you. Thereafter, another creature must use an action to grasp or net the stone to separate it from you, either by making a successful attack roll against AC 24 or a successful DC 24 Dexterity (Acrobatics) check. You can use an action to seize and stow the stone, ending its effect.\n   A stone has AC 24, 10 hit points, and resistance to all damage. It is considered to be an object that is being worn while it orbits your head.\n   You don't need to eat or drink while this clear spindle orbits your head."
		}
	},
	"iron bands of bilarro" : { // contains contributions by AelarTheElfRogue
		name : "Iron Bands of Bilarro",
		nameAlt : "Iron Bands of Binding",
		source : [["SRD", 228], ["D", 177]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "Once per dawn, as an action, I can speak the command word and make a ranged attack (Dex + Prof). If hit, the target is restrained until I use a bonus action to speak the command word again. Once per 24 hours, the target can make a DC 20 Strength check as an action to free itself and destroy the bands.",
		descriptionLong : "Once per dawn, as an action, I can throw this rusty iron sphere and speak its command word. I make a ranged attack roll with an attack bonus equal to my Dexterity modifier plus Proficiency Bonus. On a hit, the target is restrained until I take a bonus action to speak the command word again to release it. Doing so, or missing with the attack, causes the bands to contract and become a sphere once more. The target can make a DC 20 Strength check as an action, freeing itself and destroying the bands on a success. If the check fails, any further attempts made by that creature automatically fail until 24 hours have elapsed.",
		descriptionFull : "This rusty iron sphere measures 3 inches in diameter and weighs 1 pound. You can use an action to speak the command word and throw the sphere at a Huge or smaller creature you can see within 60 feet of you. As the sphere moves through the air, it opens into a tangle of metal bands.\n   Make a ranged attack roll with an attack bonus equal to your Dexterity modifier plus your proficiency bonus. On a hit, the target is restrained until you take a bonus action to speak the command word again to release it. Doing so, or missing with the attack, causes the bands to contract and become a sphere once more.\n   A creature, including the one restrained, can use an action to make a DC 20 Strength check to break the iron bands. On a success, the item is destroyed, and the restrained creature is freed. If the check fails, any further attempts made by that creature automatically fail until 24 hours have elapsed.\n   Once the bands are used, they can't be used again until the next dawn.",
		weight : 1,
		usages : 1,
		recovery : "dawn",
		action : [["action", " (throw)"], ["bonus action", " (release)"]],
		weaponsAdd : ["Iron Bands of Bilarro"],
		weaponOptions : {
			regExpSearch : /^(?=.*iron)(?=.*band)(?=.*(bilarro|binding)).*$/i,
			name : "Iron Bands of Bilarro",
			source : [["SRD", 228], ["D", 177]],
			ability : 2,
			type : "Natural",
			damage : ["\u2015", "", "Restrained"],
			range : "60 ft",
			description : "Restrains Huge or smaller creature; DC 20 Strength check to break out",
			abilitytodamage : false,
			weight : 1
		}
	},
	"iron flask" : { // contains contributions by Larry Hoy
		name : "Iron Flask",
		source : [["SRD", 228], ["D", 178]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		notLegalAL : true,
		description : "As an action I can speak the flask's command word and target a creature from another plane that I can see within 60 ft. It must make a DC 17 Wis save (adv. if trapped before) or be trapped in the flask. It holds only 1 creature. As an action, I can open it to release the creature, which then obeys my commands for 1 hour.",
		descriptionLong : "As an action I can speak the flask's command word and target a creature from another plane that I can see within 60 ft. It must make a DC 17 Wisdom saving throw or be trapped inside the flask. It has advantage on this save if it was trapped in the flask before. The flask holds only 1 creature, which remain inside until released and doesn't need to breathe, eat, or drink and doesn't age. As an action, I can remove the flak's brass stopper and release the creature inside, which then obeys my commands for 1 hour as long as those commands aren't likely to cause its death. After this time, it acts normally.",
		descriptionFull : "This iron bottle has a brass stopper. You can use an action to speak the flask's command word, targeting a creature that you can see within 60 feet of you. If the target is native to a plane of existence other than the one you're on, the target must succeed on a DC 17 Wisdom saving throw or be trapped in the flask. If the target has been trapped by the flask before, it has advantage on the saving throw. Once trapped, a creature remains in the flask until released. The flask can hold only one creature at a time. A creature trapped in the flask doesn't need to breathe, eat, or drink and doesn't age.\n   You can use an action to remove the flask's stopper and release the creature the flask contains. The creature is friendly to you and your companions for 1 hour and obeys your commands for that duration. If you give no commands or give it a command that is likely to result in its death, it defends itself but otherwise takes no actions. At the end of the duration, the creature acts in accordance with its normal disposition and alignment.\n   An Identify spell reveals that a creature is inside the flask, but the only way to determine the type of creature is to open the flask. A newly discovered bottle might already contain a creature chosen by the DM or determined randomly.\n\n" + toUni("d100\tContents") + "\n01-50\tEmpty\n   51\tArcanaloth\n   52\tCambion\n53-54\tDao\n55-57\tDemon (type 1): barlgura, shadow demon, or vrock\n58-60\tDemon (type 2): chasme or hezrou\n61-62\tDemon (type 3): glabrezu or yochlol\n63-64\tDemon (type 4): nalfeshnee\n   65\tDemon (type 5): marilith\n   66\tDemon (type 6): balor or goristro\n   67\tDeva\n68-69\tDevil (greater): horned devil, erinyes, ice devil, or pit fiend\n70-72\tDevil (lesser): imp, spined devil, bearded devil, barbed devil, chain devil, or bone devil\n73-74\tDjinni\n75-76\tEfreeti\n77-78\tElemental (any)\n   79\tGithyanki knight\n   80\tGithzerai zerth\n81-82\tInvisible stalker\n83-84\tMarid\n85-86\tMezzoloth\n87-88\tNight hag\n89-90\tNycaloth\n   91\tPlanetar\n92-93\tSalamander\n94-95\tSlaad (any)\n   96\tSolar\n97-98\tSuccubus/Incubus\n   99\tUltroloth\n   00\tXorn",
		weight : 1
	},
	"javelin of lightning" : { // contains contributions by Larry Hoy
		name : "Javelin of Lightning",
		source : [["SRD", 228], ["D", 178]],
		type : "weapon (javelin)",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "Once per dawn I can speak this javelin's command word and make a ranged weapon attack with it on a target within 120 ft. All between me and the target in a 5-ft wide line take 4d6 lightning damage, DC 13 Dex save halves. If the javelin hits the target, it takes 1d6 piercing and 4d6 lightning damage.",
		descriptionFull : "This javelin is a magic weapon. When you hurl it and speak its command word, it transforms into a bolt of lightning, forming a line 5 feet wide that extends out from you to a target within 120 feet. Each creature in the line excluding you and the target must make a DC 13 Dexterity saving throw, taking 4d6 lightning damage on a failed save, and half as much damage on a successful one. The lightning bolt turns back into a javelin when it reaches the target. Make a ranged weapon attack against the target. On a hit, the target takes damage from the javelin plus 4d6 lightning damage.\n   The javelin's property can't be used again until the next dawn. In the meantime, the javelin can still be used as a magic weapon.",
		weight : 2,
		usages : 1,
		recovery : "dawn",
		weaponsAdd : ["Javelin of Lightning"],
		weaponOptions : {
			baseWeapon : "javelin",
			regExpSearch : /^(?=.*javelin)(?=.*lightning).*$/i,
			name : "Javelin of Lightning",
			source : [["SRD", 228], ["D", 178]],
			description : "Thrown; Once per dawn special attack, see item description"
		}
	},
	"keoghtom's ointment" : {
		name : "Keoghtom's Ointment",
		nameAlt : "Restorative Ointment",
		source : [["SRD", 235], ["D", 179]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This glass jar, 3 inches in diameter, contains 1d4+1 doses of a thick mixture that smells faintly of aloe. As an action, one dose of the ointment can be swallowed or applied to the skin. The creature that receives it regains 2d8+2 hit points, ceases to be poisoned, and is cured of any disease.",
		descriptionFull : "This glass jar, 3 inches in diameter, contains 1d4+1 doses of a thick mixture that smells faintly of aloe. The jar and its contents weigh \xBD pound.\n   As an action, one dose of the ointment can be swallowed or applied to the skin. The creature that receives it regains 2d8+2 hit points, ceases to be poisoned, and is cured of any disease.",
		weight : 0.5,
		usages : "1d4+1",
		recovery : "Never"
	},
	"lantern of revealing" : {
		name : "Lantern of Revealing",
		source : [["SRD", 228], ["D", 179]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This lantern burns for 6 hours on 1 pint of oil. It shines bright light in a 30-ft radius and dim light for an additional 30 ft. Invisible objects and creatures are visible in the lantern's bright light. As an action, I can lower the hood, making it only dim light in a 5-ft radius.",
		descriptionFull : "While lit, this hooded lantern burns for 6 hours on 1 pint of oil, shedding bright light in a 30-foot radius and dim light for an additional 30 feet. Invisible creatures and objects are visible as long as they are in the lantern's bright light. You can use an action to lower the hood, reducing the light to dim light in a 5-foot radius.",
		weight : 2,
		action : [["action", " (hood up/down)"]]
	},
	"luck blade" : {
		name : "Luck Blade",
		source : [["SRD", 229], ["D", 179]],
		type : "weapon (any sword)",
		rarity : "legendary",
		magicItemTable : "I",
		attunement : true,
		description : "This magic sword has a +1 bonus to attack and damage rolls made with it, and grants me +1 to all saves. Once per dawn, I can use its luck to reroll one attack, ability check, or save, but I must use the second result. As an action, I can use one of its 1d4-1 charges to cast Wish. Charges can't be regained.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon. While the sword is on your person, you also gain a +1 bonus to saving throws.\n   " + toUni("Luck") + ". If the sword is on your person, you can call on its luck (no action required) to reroll one attack roll, ability check, or saving throw you dislike. You must use the second roll. This property can't be used again until the next dawn.\n   " + toUni("Wish") + ". The sword has 1d4-1 charges. While holding it, you can use an action to expend 1 charge and cast the wish spell from it. This property can't be used again until the next dawn. The sword loses this property if it has no charges.",
		extraLimitedFeatures : [{
			name : "Luck Blade - luck reroll",
			usages : 1,
			recovery : "Dawn"
		}, {
			name : "Luck Blade - cast Wish",
			usages : "1d4-1",
			recovery : "Never"
		}],
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		addMod : [{ type : "save", field : "all", mod : 1, text : "While the Luck Blade is on my person, I gain a +1 bonus to all my saving throws." }],
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*luck)(?=.*blade).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
					}
				},
				'If I include the words "Luck Blade" in a the name of a sword, it will be treated as the magic weapon Luck Blade. It has +1 to hit and damage.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*luck)(?=.*blade).*$/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 1;
					}
				}, ''
			]
		}
	},
	"mace of disruption" : {
		name : "Mace of Disruption",
		source : [["SRD", 229], ["D", 179]],
		type : "weapon (mace)",
		rarity : "rare",
		magicItemTable : "G",
		description : "This magic mace sheds bright light in a 20-ft radius and dim light for another 20 ft while held. Fiends and undead hit with it take +2d6 radiant damage and becomes frightened of me until my next turn ends. If the target has less than 26 HP after taking the damage, it must make a DC 15 Wis save or be destroyed.",
		descriptionFull : "When you hit a fiend or an undead with this magic weapon, that creature takes an extra 2d6 radiant damage. If the target has 25 hit points or fewer after taking this damage, it must succeed on a DC 15 Wisdom saving throw or be destroyed. On a successful save, the creature becomes frightened of you until the end of your next turn.\n   While you hold this weapon, it sheds bright light in a 20-foot radius and dim light for an additional 20 feet.",
		attunement : true,
		weight : 4,
		weaponsAdd : ["Mace of Disruption"],
		weaponOptions : {
			baseWeapon : "mace",
			regExpSearch : /^(?=.*mace)(?=.*disruption).*$/i,
			name : "Mace of Disruption",
			source : [["SRD", 229], ["D", 179]],
			description : "Fiend/undead +2d6 radiant damage, frightened until my next turn ends, and if hp<26, DC 15 Wis save or die"
		}
	},
	"mace of smiting" : {
		name : "Mace of Smiting",
		source : [["SRD", 229], ["D", 179]],
		type : "weapon (mace)",
		rarity : "rare",
		magicItemTable : "G",
		description : "This magical mace adds a +1 bonus (+3 vs. constructs) to attack and damage rolls made with it. When I roll a 20 on an attack roll, the target takes an extra 7 bludgeoning damage, or an extra 14 bludgeoning damage if it's a construct. If a construct has less than 26 HP after taking this damage, it is destroyed.",
		descriptionFull : "You gain a +1 bonus to attack and damage rolls made with this magic weapon. The bonus increases to +3 when you use the mace to attack a construct.\n   When you roll a 20 on an attack roll made with this weapon, the target takes an extra 7 bludgeoning damage, or an extra 14 bludgeoning damage if it's a construct. If a construct has 25 hit points or fewer after taking this damage, it is destroyed.",
		weight : 4,
		weaponsAdd : ["Mace of Smiting"],
		weaponOptions : {
			baseWeapon : "mace",
			regExpSearch : /^(?=.*mace)(?=.*smiting).*$/i,
			name : "Mace of Smiting",
			source : [["SRD", 229], ["D", 179]],
			description : "+2 to hit/damage vs. constructs; On 20 to hit: +7 damage (+14 vs. constructs); Constructs hp<26 destroyed",
			modifiers : [1,1]
		}
	},
	"mace of terror" : {
		name : "Mace of Terror",
		source : [["SRD", 229], ["D", 180]],
		type : "weapon (mace)",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action, I can use 1 charge of this mace to have all chosen creatures within 30 ft make a DC 15 Wis save or be frightened of me for 1 min, repeating the save at the end of its turns. While frightened, it takes only the Dash action to move away (or action to free itself), no reactions, and can't move within 30 ft of me.",
		descriptionLong : "This magic mace has 3 charges, regaining 1d3 at dawn. As an action, I can expend 1 charge to have each creature of my choice within 30 ft make a DC 15 Wis save or become frightened of me for 1 minute. While frightened in this way, a creature must spend its turns trying to move as far away from me as it can, using its action to Dash or to get away, and it can't willingly move within 30 ft of me and can't take reactions. If it has nowhere it can move, the creature can use the Dodge action. At the end of each of its turns, a creature can repeat the saving throw, ending the effect on itself on a success.",
		descriptionFull : "This magic weapon has 3 charges. While holding it, you can use an action and expend 1 charge to release a wave of terror. Each creature of your choice in a 30-foot radius extending from you must succeed on a DC 15 Wisdom saving throw or become frightened of you for 1 minute. While it is frightened in this way, a creature must spend its turns trying to move as far away from you as it can, and it can't willingly move to a space within 30 feet of you. It also can't take reactions. For its action it can use only the Dash action or try to escape from an effect that prevents it from moving. If it has nowhere it can move, the creature can use the Dodge action. At the end of each of its turns, a creature can repeat the saving throw, ending the effect on itself on a success.\n   The mace regains 1d3 expended charges daily at dawn.",
		attunement : true,
		weight : 4,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		weaponsAdd : ["Mace of Terror"],
		weaponOptions : {
			baseWeapon : "mace",
			regExpSearch : /^(?=.*mace)(?=.*terror).*$/i,
			name : "Mace of Terror",
			source : [["SRD", 229], ["D", 180]]
		}
	},
	"mantle of spell resistance" : {
		name : "Mantle of Spell Resistance",
		source : [["SRD", 229], ["D", 180]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "I have advantage on saving throws against spells while I wear this cloak.",
		descriptionFull : "You have advantage on saving throws against spells while you wear this cloak.",
		attunement : true,
		savetxt : { adv_vs : ["spells"] }
	},
	"manual of bodily health" : {
		name : "Manual of Bodily Health",
		source : [["SRD", 229], ["D", 180]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book contains health and diet tips, and its words are charged with magic. If I spend 48 hours within 6 days to study its contents and practicing its guidelines, my Constitution score increases by 2, as does my maximum for that score. The manual then loses its magic, but regains it in a century.",
		descriptionFull : "This book contains health and diet tips, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Constitution score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		applyStatBonus : function(itemName, statName) {
			// a function for all the manuals/tomes
			if (!IsNotReset) return;
			initiateCurrentStats();
			var statIndx = AbilityScores.names.indexOf(statName);
			var alreadyAppliedBefore = CurrentStats.maximumsLinked[itemName];
			var applyChange = app.alert({
				nIcon : 2,
				nType : 2,
				nTitle : "Apply " + itemName + "?",
				cMsg : "Do you want to apply the +2 bonus to the " + statName + " score and maximum from the " + itemName + " permanently? This increase will stay even after you remove this magic item, but will not be applied if you select 'No', even if you keep the magic item selected.\n\n" + (alreadyAppliedBefore ? "It seems you have applied this item before. If you click 'No', you will be prompted to remove all ability score increases from " + itemName : "If you want to remove this ability score increase at a later time, just add the item again and you will be prompted to remove the ability score increase then.")
			});
			if (applyChange == 3) {
				if (alreadyAppliedBefore) {
					var removeAll = app.alert({
						nIcon : 2,
						nType : 2,
						nTitle : "Remove all previous uses of " + itemName + "?",
						cMsg : "Do you want to remove all the previous bonuses to " + statName + " gained from the " + itemName + "?"
					});
					if (removeAll == 3) return;
				} else {
					return;
				}
			}
			var baseAdd = [0,0,0,0,0,0];
			baseAdd[statIndx] = 2;
			if (alreadyAppliedBefore) {
				baseAdd = [].concat(CurrentStats.maximumsLinked[itemName]);
				// remove the old version
				processStats(false, "magic", itemName, baseAdd, false, false, true);
				if (removeAll) {
					// also remove the maximum
					processStats(false, "magic", itemName, baseAdd, false, "maximums");
					return;
				}
				baseAdd[statIndx] += 2;
			}
			processStats(true, "magic", itemName, baseAdd, false, false, true);
			var maxAdd = [0,0,0,0,0,0];
			maxAdd[statIndx] = 20 + baseAdd[statIndx];
			processStats(true, "magic", itemName, maxAdd, false, "maximums");
		},
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Manual of Bodily Health", "Constitution");
		}
	},
	"manual of gainful exercise" : {
		name : "Manual of Gainful Exercise",
		source : [["SRD", 229], ["D", 180]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book describes fitness exercises, and its words are charged with magic. If I spend 48 hours over a period of 6 days or fewer studying its contents and practicing its guidelines, my Strength score increases by 2, as does my maximum for that score. The manual then loses its magic, but regains it in a century.",
		descriptionFull : "This book describes fitness exercises, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Strength score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Manual of Gainful Exercise", "Strength");
		}
	},
	"manual of golems" : { // contains contributions by Larry Hoy
		name : "Manual of Golems",
		source : [["SRD", 229], ["D", 180]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This tome can only be used by a spellcaster with two 5th-level spell slots. Others reading it take 6d6 psychic damage.",
		descriptionFull : "This tome contains information and incantations necessary to make a particular type of golem. The DM chooses the type or determines it randomly. To decipher and use the manual, you must be a spellcaster with at least two 5th-level spell slots. A creature that can't use a manual of golems and attempts to read it takes 6d6 psychic damage.\n   To create a golem, you must spend a the time shown on the table, working without interruption with the manual at hand and resting no more than 8 hours per day. You must also pay the specified cost to purchase supplies. Once you finish creating the golem, the book is consumed in eldritch flames. The golem becomes animate when the ashes of the manual are sprinkled on it. It is under your control, and it understands and obeys your spoken commands.",
		weight : 5,
		allowDuplicates : true,
		prerequisite : "Requires a spellcaster with at least two 5th-level spell slots",
		prereqeval : function () { return What('SpellSlots.CheckboxesSet.lvl5') >= 2; },
		choices : ["Clay", "Flesh", "Iron", "Stone"],
		"clay" : {
			name : "Manual of Clay Golems",
			description : "Only spellcasters with two 5th-level spell slots can use this tome. Creating a clay golem requires 65000 gp of supplies, 30 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionLong : "Only spellcasters with two 5th-level spell slots can use this tome, others reading it take 6d6 psychic damage. Creating a clay golem requires 65000 gp of supplies, 30 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionFull : "This tome contains information and incantations necessary to make a particular type of golem. The DM chooses the type or determines it randomly. To decipher and use the manual, you must be a spellcaster with at least two 5th-level spell slots. A creature that can't use a manual of golems and attempts to read it takes 6d6 psychic damage.\n   To create a clay golem, you must spend 30 days, working without interruption with the manual at hand and resting no more than 8 hours per day. You must also pay 65,000 gp to purchase supplies. Once you finish creating the golem, the book is consumed in eldritch flames. The golem becomes animate when the ashes of the manual are sprinkled on it. It is under your control, and it understands and obeys your spoken commands."
		},
		"flesh" : {
			name : "Manual of Flesh Golems",
			description : "Only spellcasters with two 5th-level spell slots can use this tome. Creating a flesh golem requires 50000 gp of supplies, 60 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionLong : "Only spellcasters with two 5th-level spell slots can use this tome, others reading it take 6d6 psychic damage. Creating a flesh golem requires 50000 gp of supplies, 60 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionFull : "This tome contains information and incantations necessary to make a particular type of golem. The DM chooses the type or determines it randomly. To decipher and use the manual, you must be a spellcaster with at least two 5th-level spell slots. A creature that can't use a manual of golems and attempts to read it takes 6d6 psychic damage.\n   To create a flesh golem, you must spend 60 days, working without interruption with the manual at hand and resting no more than 8 hours per day. You must also pay 50,000 gp to purchase supplies. Once you finish creating the golem, the book is consumed in eldritch flames. The golem becomes animate when the ashes of the manual are sprinkled on it. It is under your control, and it understands and obeys your spoken commands."
		},
		"iron" : {
			name : "Manual of Iron Golems",
			description : "Only spellcasters with two 5th-level spell slots can use this tome. Creating a iron golem requires 100000 gp of supplies, 120 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionLong : "Only spellcasters with two 5th-level spell slots can use this tome, others reading it take 6d6 psychic damage. Creating a iron golem requires 100000 gp of supplies, 120 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionFull : "This tome contains information and incantations necessary to make a particular type of golem. The DM chooses the type or determines it randomly. To decipher and use the manual, you must be a spellcaster with at least two 5th-level spell slots. A creature that can't use a manual of golems and attempts to read it takes 6d6 psychic damage.\n   To create an iron golem, you must spend 120 days, working without interruption with the manual at hand and resting no more than 8 hours per day. You must also pay 100,000 gp to purchase supplies. Once you finish creating the golem, the book is consumed in eldritch flames. The golem becomes animate when the ashes of the manual are sprinkled on it. It is under your control, and it understands and obeys your spoken commands."
		},
		"stone" : {
			name : "Manual of Stone Golems",
			description : "Only spellcasters with two 5th-level spell slots can use this tome. Creating a stone golem requires 80000 gp of supplies, 90 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionLong : "Only spellcasters with two 5th-level spell slots can use this tome, others reading it take 6d6 psychic damage. Creating a stone golem requires 80000 gp of supplies, 90 days working uninterrupted with the manual at hand, resting no more than 8 hours per day. The manual is consumed to animate the golem, which understands and obeys my spoken commands.",
			descriptionFull : "This tome contains information and incantations necessary to make a particular type of golem. The DM chooses the type or determines it randomly. To decipher and use the manual, you must be a spellcaster with at least two 5th-level spell slots. A creature that can't use a manual of golems and attempts to read it takes 6d6 psychic damage.\n   To create a stone golem, you must spend 90 days, working without interruption with the manual at hand and resting no more than 8 hours per day. You must also pay 80,000 gp to purchase supplies. Once you finish creating the golem, the book is consumed in eldritch flames. The golem becomes animate when the ashes of the manual are sprinkled on it. It is under your control, and it understands and obeys your spoken commands."
		}
	},
	"manual of quickness of action" : {
		name : "Manual of Quickness of Action",
		source : [["SRD", 230], ["D", 181]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book contains coordination and balance exercises, and its words are charged with magic. If I spend 48 hours within 6 days to study its contents and practicing its guidelines, my Dexterity score increases by 2, as does my maximum for that score. The manual then loses its magic, but regains it in a century.",
		descriptionFull : "This book contains coordination and balance exercises, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Dexterity score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Manual of Quickness of Action", "Dexterity");
		}
	},
	"medallion of thoughts" : {
		name : "Medallion of Thoughts",
		source : [["SRD", 230], ["D", 181]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "The medallion has 3 charges. While wearing it, I can use an action and expend 1 charge to cast Detect Thoughts (save DC 13) from it. The medallion regains 1d3 expended charges daily at dawn.",
		descriptionFull : "The medallion has 3 charges. While wearing it, you can use an action and expend 1 charge to cast the Detect Thoughts spell (save DC 13) from it. The medallion regains 1d3 expended charges daily at dawn.",
		attunement : true,
		weight : 1,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["detect thoughts"],
			selection : ["detect thoughts"],
			firstCol : 1
		},
		fixedDC : 13,
		spellFirstColTitle : "Ch"
	},
	"mirror of life trapping" : {
		name : "Mirror of Life Trapping",
		source : [["SRD", 230], ["D", 181]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "As an action when I'm within 5 ft of this mirror, I can speak its command word and activate it and it remains activated until I do so again. Creatures other than me who look in the activated mirror must make a DC 15 Charisma save or become trapped in one of its twelve extradimensional cells. See Notes page for info.",
		descriptionFull : "When this 4-foot-tall mirror is viewed indirectly, its surface shows faint images of creatures. The mirror weighs 50 pounds, and it has AC 11, 10 hit points, and vulnerability to bludgeoning damage. It shatters and is destroyed when reduced to 0 hit points.\n   If the mirror is hanging on a vertical surface and you are within 5 feet of it, you can use an action to speak its command word and activate it. It remains activated until you use an action to speak the command word again.\n   Any creature other than you that sees its reflection in the activated mirror while within 30 feet of it must succeed on a DC 15 Charisma saving throw or be trapped, along with anything it is wearing or carrying, in one of the mirror's twelve extradimensional cells. This saving throw is made with advantage if the creature knows the mirror's nature, and constructs succeed on the saving throw automatically.\n   An extradimensional cell is an infinite expanse filled with thick fog that reduces visibility to 10 feet. Creatures trapped in the mirror's cells don't age, and they don't need to eat, drink, or sleep. A creature trapped within a cell can escape using magic that permits planar travel. Otherwise, the creature is confined to the cell until freed.\n   If the mirror traps a creature but its twelve extradimensional cells are already occupied, the mirror frees one trapped creature at random to accommodate the new prisoner. A freed creature appears in an unoccupied space within sight of the mirror but facing away from it. If the mirror is shattered, all creatures it contains are freed and appear in unoccupied spaces near it.\n   While within 5 feet of the mirror, you can use an action to speak the name of one creature trapped in it or call out a particular cell by number. The creature named or contained in the named cell appears as an image on the mirror's surface. You and the creature can then communicate normally.\n   In a similar way, you can use an action to speak a second command word and free one creature trapped in the mirror. The freed creature appears, along with its possessions, in the unoccupied space nearest to the mirror and facing away from it.",
		weight : 50,
		action : [["action", ""]],
		toNotesPage : [{
			name : "Workings of the Mirror",
			popupName : "Workings of the Mirror of Life Trapping",
			note : [
				"When this 4-ft-tall mirror is viewed indirectly, its surface shows faint images of creatures. The mirror weighs 50 lb, has AC 11, 10 HP, and vulnerability to bludgeoning damage. It shatters and is destroyed when reduced to 0 hit points.",
				"If the mirror is hanging on a vertical surface and I am within 5 ft of it, I can use an action to speak its command word and activate it. It remains activated until I use an action to speak the command word again.",
				"Any creature other than me that sees its reflection in the activated mirror while within 30 ft of it must succeed on a DC 15 Charisma saving throw or be trapped, along with anything it is wearing or carrying, in one of the mirror's twelve extradimensional cells. This saving throw is made with advantage if the creature knows the mirror's nature, and constructs succeed on the saving throw automatically.",
				"An extradimensional cell is an infinite expanse filled with thick fog that reduces visibility to 10 ft. Creatures trapped in the mirror's cells don't age, and they don't need to eat, drink, or sleep. A creature trapped within a cell can escape using magic that permits planar travel. Otherwise, the creature is confined to the cell until freed.",
				"If the mirror traps a creature but its twelve extradimensional cells are already occupied, the mirror frees one trapped creature at random to accommodate the new prisoner. A freed creature appears in an unoccupied space within sight of the mirror but facing away from it. If the mirror is shattered, all creatures it contains are freed and appear in unoccupied spaces near it.",
				"While within 5 ft of the mirror, I can use an action to speak the name of one creature trapped in it or call out a particular cell by number. The creature named or contained in the named cell appears as an image on the mirror's surface and I can then communicate normally with it.",
				"In a similar way, I can use an action to speak a second command word and free one creature trapped in the mirror. The freed creature appears, along with its possessions, in the unoccupied space nearest to the mirror and facing away from it."
			]
		}]
	},
	"mithral armor" : {
		name : "Mithral Armor",
		nameTest : "Mithral",
		source : [["SRD", 231], ["D", 182]],
		type : "armor (medium or heavy)",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Mithral is a light, flexible metal. If the armor normally imposes disadvantage on Dexterity (Stealth) checks or has a Strength requirement, the mithral version of the armor doesn't. A mithral chain shirt or breastplate can be worn under normal clothes. ",
		descriptionFull : "Mithral is a light, flexible metal. A mithral chain shirt or breastplate can be worn under normal clothes. If the armor normally imposes disadvantage on Dexterity (Stealth) checks or has a Strength requirement, the mithral version of the armor doesn't.",
		allowDuplicates : true,
		chooseGear : {
			type : "armor",
			prefixOrSuffix : "suffix",
			excludeCheck : function (inObjKey, inObj) {
				return !(/medium|heavy/i).test(inObj.type) || (/hide/i).test(inObj.name);
			},
			descriptionChange : ["prefix", "armor"]
		}
	},
	"necklace of adaptation" : {
		name : "Necklace of Adaptation",
		source : [["SRD", 231], ["D", 182]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this necklace, I can breathe normally in any environment, and I have advantage on saving throws made against harmful gases and vapors (such as Cloudkill and Stinking Cloud effects, inhaled poisons, and the breath weapons of some dragons).",
		descriptionFull : "While wearing this necklace, you can breathe normally in any environment, and you have advantage on saving throws made against harmful gases and vapors (such as Cloudkill and Stinking Cloud effects, inhaled poisons, and the breath weapons of some dragons).",
		weight : 1,
		attunement : true,
		savetxt : { adv_vs : ["gases", "vapors"] }
	},
	"necklace of fireballs" : {
		name : "Necklace of Fireballs",
		source : [["SRD", 231], ["D", 182]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		description : "This necklace has 1d6+3 beads hanging from it. As an action, I can detach a bead and throw it up to 60 ft away where it detonates as a 3rd-level Fireball (save DC 15). I can hurl multiple beads as part of the same action, increasing the level of the Fireball by 1 for each bead beyond the first.",
		descriptionFull : "This necklace has 1d6+3 beads hanging from it. You can use an action to detach a bead and throw it up to 60 feet away. When it reaches the end of its trajectory, the bead detonates as a 3rd-level Fireball spell (save DC 15).\n   You can hurl multiple beads, or even the whole necklace, as one action. When you do so, increase the level of the Fireball by 1 for each bead beyond the first.",
		weight : 1,
		usages : "1d6+3",
		recovery : "Never",
		spellcastingBonus : {
			name : "Fireball",
			spells : ["fireball"],
			selection : ["fireball"]
		},
		fixedDC : 15,
		spellChanges : {
			"fireball" : {
				description : "20-ft rad all crea 8d6 (+1d6/extra bead) Fire dmg; save halves; unattended flammable objects ignite",
				components : "M\u2020",
				compMaterial : "Using the Necklace of Fireballs to cast Fireball requires removing and destorying one or more of the beads from it.",
				changes : "Using the Necklace of Fireballs to cast Fireball requires removing and destorying one or more of the beads from it. The damage is that of a Fireball cast a 3rd-level, +1 level per bead thrown as part of the same action beyond the first."
			}
		}
	},
	"necklace of prayer beads" : {
		name : "Necklace of Prayer Beads",
		source : [["SRD", 231], ["D", 182]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This necklace has many bead, 1d4+2 are magical and can each be used to cast a spell once per dawn as a bonus action. The DM selects the spells from: Bless, Cure Wounds, Lesser Restoration, Greater Restoration, Branding Smite, Planar Ally, and Wind Walk. Multiple beads of the same type can be on one necklace.",
		descriptionFull : "This necklace has 1d4+2 magic beads made from aquamarine, black pearl, or topaz. It also has many nonmagical beads made from stones such as amber, bloodstone, citrine, coral, jade, pearl, or quartz. If a magic bead is removed from the necklace, that bead loses its magic.\n   Six types of magic beads exist. The DM decides the type of each bead on the necklace or determines it randomly. A necklace can have more than one bead of the same type. To use one, you must be wearing the necklace. Each bead contains a spell that you can cast from it as a bonus action (using your spell save DC if a save is necessary). Once a magic bead's spell is cast, that bead can't be used again until the next dawn.\n\n" + toUni("d20\tBead of ...\tSpell") + "\n1-6\tBlessing\t\tBless\n7-12\tCuring\t\tCure Wounds (2nd level) or Lesser Restoration\n13-16\tFavor\t\tGreater Restoration\n17-18\tSmiting\t\tBranding Smite\n19\tSummons   \tPlanar Ally\n20\tWind walking\tWind Walk",
		attunement : true,
		weight : 1,
		usages : "1d4+2",
		recovery : "dawn",
		spellcastingAbility : "class",
		spellFirstColTitle : "Us",
		spellcastingBonus : {
			name : "Bead",
			spells : ["bless", "cure wounds", "lesser restoration", "greater restoration", "branding smite", "planar ally", "wind walk"],
			times : 6
		},
		spellChanges : {
			"bless" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			},
			"cure wounds" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			},
			"lesser restoration" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			},
			"greater restoration" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			},
			"planar ally" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			},
			"wind walk" : {
				time : "1 bns",
				changes : "The casting time is only a bonus action."
			}
		}
	},
	"nolzur's marvelous pigments" : {
		name : "Nolzur's Marvelous Pigments",
		nameAlt : "Marvelous Pigments",
		source : [["SRD", 230], ["D", 183]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "D",
		description : "This wooden box contains a brush and 1d4 pots of paint. Each pot contains enough paint to cover 1000 sq ft, which can turn into 10000 cu ft of inanimate objects or terrain features. Those become real upon completion of a painting. It takes 10 min to paint 100 sq ft. Nothing created can have a value over 25 gp.",
		descriptionLong : "This wooden box contains a brush and 1d4 pots of paint. Each pot contains enough paint to cover 1000 sq ft, which can turn into 10000 cu ft of nonmagical inanimate objects or terrain features. Those become real upon completion of a painting. It takes 10 min to paint 100 sq ft. Nothing created can have a value over 25 gp and objects appearing of greater value look authentic but don't hold up to closer inspection. I can use this to paint, for example, a door on a wall and then walk through it, or a pit on the floor and have my enemies fall into it. I can't use this to form energy that deals damage, like fire or lightning.",
		descriptionFull : "Typically found in 1d4 pots inside a fine wooden box with a brush (weighing 1 pound in total), these pigments allow you to create three-dimensional objects by painting them in two dimensions. The paint flows from the brush to form the desired object as you concentrate on its image.\n   Each pot of paint is sufficient to cover 1,000 square feet of a surface, which lets you create inanimate objects or terrain features\u2014such as a door, a pit, flowers, trees, cells, rooms, or weapons\u2014that are up to 10,000 cubic feet. It takes 10 minutes to cover 100 square feet.\n   When you complete the painting, the object or terrain feature depicted becomes a real, nonmagical object. Thus, painting a door on a wall creates an actual door that can be opened to whatever is beyond. Painting a pit on a floor creates a real pit, and its depth counts against the total area of objects you create.\n   Nothing created by the pigments can have a value greater than 25 gp. If you paint an object of greater value (such as a diamond or a pile of gold), the object looks authentic, but close inspection reveals it is made from paste, bone, or some other worthless material.\n   If you paint a form of energy such as fire or lightning, the energy appears but dissipates as soon as you complete the painting, doing no harm to anything.",
		weight : 1
	},
	"nine lives stealer" : {
		name : "Nine Lives Stealer",
		source : [["SRD", 231], ["D", 183]],
		type : "weapon (any sword)",
		rarity : "very rare",
		magicItemTable : "H",
		attunement : true,
		description : "I have a +2 bonus to attack and damage rolls with this magic sword. It has 1d8+1 charges and if it inflicts a critical hit while it has charges left on a creature with fewer than 100 HP (and that is not a construct or undead, the target must make a DC 15 Con save or die. If it dies, the sword uses a charge.",
		descriptionFull : "You gain a +2 bonus to attack and damage rolls made with this magic weapon.\n   The sword has 1d8+1 charges. If you score a critical hit against a creature that has fewer than 100 hit points, it must succeed on a DC 15 Constitution saving throw or be slain instantly as the sword tears its life force from its body (a construct or an undead is immune). The sword loses 1 charge if the creature is slain. When the sword has no charges remaining, it loses this property.",
		usages : "1d8+1",
		recovery : "Never",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*(9|nine))(?=.*(lives|life))(?=.*stealer).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'On crit to target <100 HP, DC 15 Con save or die';
					}
				},
				'If I include the words "Nine Lives Stealer" in a the name of a sword, it will be treated as the magic weapon Nine Lives Stealer. It has +2 to hit and damage. Also, as long as it has charges left, when it does a critical hit against a creature with fewer than 100 HP, that creature must make a DC 15 Constitution saving throw or die.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*luck)(?=.*blade).*$/i).test(v.WeaponText)) {
						output.magic = v.thisWeapon[1] + 2;
					}
				}, ''
			]
		}
	},
	"oathbow" : {
		name : "Oathbow",
		source : [["SRD", 231], ["D", 183]],
		type : "weapon (longbow)",
		rarity : "very rare",
		magicItemTable : "H",
		description : "When I attack with this longbow and say its command phrase, I make the target my sworn enemy if I don't have one already for 7 days or until it dies. Attacks with this bow vs. it get adv, +3d6 damage, ignore cover (not full), and suffer no disadv. from long range. While it lives, I have disadv. when I use other weapons.",
		descriptionLong : "When I use this weapon to make a ranged attack and say its command phrase \"Swift death to you who have wronged me.\", the target of that attack becomes me sworn enemy until it dies or until dawn seven days later. I can have only one such sworn enemy at a time and when it dies, I can choose a new one after the next dawn. My ranged attack rolls with this weapon against me sworn enemy have advantage, do +3d6 piercing damage, ignore all cover except full, and don't suffer disadvantage due to long range. While my sworn enemy lives, I have disadvantage on attack rolls with all other weapons.",
		descriptionFull : 'When you nock an arrow on this bow, it whispers in Elvish, "Swift defeat to my enemies." When you use this weapon to make a ranged attack, you can, as a command phrase, say, "Swift death to you who have wronged me." The target of your attack becomes your sworn enemy until it dies or until dawn seven days later. You can have only one such sworn enemy at a time. When your sworn enemy dies, you can choose a new one after the next dawn.\n   When you make a ranged attack roll with this weapon against your sworn enemy, you have advantage on the roll. In addition, your target gains no benefit from cover, other than total cover, and you suffer no disadvantage due to long range. If the attack hits, your sworn enemy takes an extra 3d6 piercing damage.\n   While your sworn enemy lives, you have disadvantage on attack rolls with all other weapons.',
		attunement : true,
		weight : 2,
		weaponsAdd : ["Oathbow"],
		weaponOptions : {
			baseWeapon : "longbow",
			regExpSearch : /oathbow/i,
			name : "Oathbow",
			source : [["SRD", 231], ["D", 183]],
			description : "Ammunition, heavy, two-handed; Vs. sworn enemy: adv, +3d6 damage, no cover/range penalties"
		}
	},
	"oil of etherealness" : { // contains contributions by AelarTheElfRogue
		name : "Oil of Etherealness",
		source : [["SRD", 231], ["D", 183]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "This cloudy gray oil can be used once to cover a Medium or smaller creature, along with the equipment it's wearing and carrying (one additional vial is required for each size category above Medium). Applying the oil takes 10 minutes. The affected target then gains the effect of the Etherealness spell for 1 hour.",
		descriptionLong : "This cloudy gray oil can be used once cover a Medium or smaller creature, along with the equipment it's wearing and carrying (one additional vial is required for each size category above Medium). Applying the oil takes 10 minutes. The affected creature then gains the effect of the Etherealness spell for 1 hour. It step into the border regions of the Ethereal Plane, in the area where it overlaps with my current plane, remaining there until it uses an action to dismiss the spell. I can still see the plane I came from, but can move anywhere, up, down, and even through solid objects and creatures.",
		descriptionFull : "Beads of this cloudy gray oil form on the outside of its container and quickly evaporate. The oil can cover a Medium or smaller creature, along with the equipment it's wearing and carrying (one additional vial is required for each size category above Medium). Applying the oil takes 10 minutes. The affected creature then gains the effect of the Etherealness spell for 1 hour.",
		weight : 0.5
	},
	"oil of sharpness" : { // contributed by AelarTheElfRogue
		name : "Oil of Sharpness",
		source : [["SRD", 232], ["D", 184]],
		type : "potion",
		rarity : "very rare",
		magicItemTable : "D",
		description : "This clear, gelatinous oil sparkles with tiny, ultrathin silver shards. It can be used once to coat one slashing or piercing weapon or up to 5 pieces of slashing or piercing ammunition. Applying the oil takes 1 minute. For 1 hour, the coated item is magical and has a +3 bonus to attack and damage rolls.",
		descriptionFull : "This clear, gelatinous oil sparkles with tiny, ultrathin silver shards. The oil can coat one slashing or piercing weapon or up to 5 pieces of slashing or piercing ammunition. Applying the oil takes 1 minute. For 1 hour, the coated item is magical and has a +3 bonus to attack and damage rolls.",
		weight : 0.5
	},
	"oil of slipperiness" : { // contains contributions by AelarTheElfRogue
		name : "Oil of Slipperiness",
		source : [["SRD", 232], ["D", 184]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This sticky black unguent can be used once to cover a Medium or smaller creature and its equipment, granting it the effects of  Freedom of Movement for 8 hours. Applying it takes 10 minutes. Alternatively, it can be poured out as an action, duplicating the effects of the Grease spell in a 10-ft square for 8 hours.",
		descriptionLong : "This sticky black unguent can be used once to cover a Medium or smaller creature and its equipment, granting it the effects of Freedom of Movement for 8 hours. Applying it takes 10 minutes. The creature's movement is unaffected by difficult terrain, being underwater, and spells and other magical effects can't reduce it's speed or cause it to be paralyzed or restrained. Alternatively, it can be poured out as an action, duplicating the effects of the Grease spell in a 10-ft square for 8 hours. The area is difficult terrain and any in it when it appears, entering it, or ending their turn in it must make a DC 10 Dex save or fall prone.",
		descriptionFull : "This sticky black unguent is thick and heavy in the container, but it flows quickly when poured. The oil can cover a Medium or smaller creature, along with the equipment it's wearing and carrying (one additional vial is required for each size category above Medium). Applying the oil takes 10 minutes. The affected creature then gains the effect of a Freedom of Movement spell for 8 hours.\n   Alternatively, the oil can be poured on the ground as an action, where it covers a 10-foot square, duplicating the effect of the Grease spell in that area for 8 hours.",
		weight : 0.5
	},
	"pearl of power" : { // contains contributions by AelarTheElfRogue
		name : "Pearl of Power",
		source : [["SRD", 232], ["D", 184]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While this pearl is on my person, I can use an action to speak its command word and regain one expended spell slot. If the expended slot was of 4th level or higher, the new slot is 3rd level. Once I have used the pearl, it can't be used again until the next dawn.",
		descriptionFull : "While this pearl is on your person, you can use an action to speak its command word and regain one expended spell slot. If the expended slot was of 4th level or higher, the new slot is 3rd level. Once you have used the pearl, it can't be used again until the next dawn.",
		attunement : true,
		usages : 1,
		recovery : "dawn",
		action : [["action", ""]]
	},
	"periapt of health" : { // contributed by AelarTheElfRogue
		name : "Periapt of Health",
		source : [["SRD", 232], ["D", 184]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "C",
		description : "I am immune to contracting any disease while I wear this pendant. If I am already infected with a disease, the effects of the disease are suppressed while I wear the pendant.",
		descriptionFull : "You are immune to contracting any disease while you wear this pendant. If you are already infected with a disease, the effects of the disease are suppressed you while you wear the pendant.",
		weight : 1,
		savetxt : { immune : ["disease"] }
	},
	"periapt of proof against poison" : { // contributed by AelarTheElfRogue
		name : "Periapt of Proof Against Poison",
		source : [["SRD", 232], ["D", 184]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This delicate silver chain has a brilliant-cut black gem pendant. While I wear it, poisons have no effect on me. I am immune to the poisoned condition and have immunity to poison damage.",
		descriptionFull : "This delicate silver chain has a brilliant-cut black gem pendant. While you wear it, poisons have no effect on you. You are immune to the poisoned condition and have immunity to poison damage.",
		weight : 1,
		savetxt : { immune : ["poison"] }
	},
	"periapt of wound closure" : { // contributed by AelarTheElfRogue
		name : "Periapt of Wound Closure",
		source : [["SRD", 232], ["D", 184]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While I wear this pendant, I stabilize whenever I am dying at the start of my turn. In addition, whenever I roll a Hit Die to regain hit points, I double the number of hit points it restores.",
		descriptionFull : "While you wear this pendant, you stabilize whenever you are dying at the start of your turn. In addition, whenever you roll a Hit Die to regain hit points, double the number of hit points it restores.",
		attunement : true,
		weight : 1
	},
	"philter of love" : {
		name : "Philter of Love",
		source : [["SRD", 232], ["D", 184]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can drink this rose-hued liquid or administer it to another. The consumer is charmed for 1 hour by the first creature it sees within 10 minutes of drinking it. If that creature is of a species and gender the consumer is normally attracted to, it regards the creature as its true love while it is charmed.",
		descriptionFull : "The next time you see a creature within 10 minutes after drinking this philter, you become charmed by that creature for 1 hour. If the creature is of a species and gender you are normally attracted to, you regard it as your true love while you are charmed. This potion's rose-hued, effervescent liquid contains one easy-to-miss bubble shaped like a heart.",
		weight : 0.5
	},
	"pipes of haunting" : { // contains contributions by Soilentbrad
		name : "Pipes of Haunting",
		source : [["SRD", 232], ["D", 185]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "These pipes have 3 charges. As an action, I can use 1 charge to play them and have each (non-hostile) creature in 30 ft that can hear them make a DC 15 Wis save or be frightened of me for 1 minute. A target can repeat the save at the end of each of their turns. The pipes regain 1d3 expended charges daily at dawn.",
		descriptionLong : "These pipes have 3 charges. As an action, I can expand 1 charge to create an eerie, spellbinding tune. Each creature within 30 ft of me that can hear the pipes must make a DC 15 Wisdom saving throw or become frightened of me for 1 minute.  If you wish, all creatures in the area that aren't hostile toward me automatically succeed on the saving throw. An affected creature can repeat the save at the end of each of its turns, ending the effect on itself on a success. A creature that succeeds on its saving throw is immune to the effect of these pipes for 24 hours. The pipes regain 1d3 expended charges daily at dawn.",
		descriptionFull : "You must be proficient with wind instruments to use these pipes. They have 3 charges. You can use an action to play them and expend 1 charge to create an eerie, spellbinding tune. Each creature within 30 feet of you that hears you play must succeed on a DC 15 Wisdom saving throw or become frightened of you for 1 minute. If you wish, all creatures in the area that aren't hostile toward you automatically succeed on the saving throw. A creature that fails the saving throw can repeat it at the end of each of its turns, ending the effect on itself on a success. A creature that succeeds on its saving throw is immune to the effect of these pipes for 24 hours. The pipes regain 1d3 expended charges daily at dawn.",
		weight : 2,
		action : [["action", ""]],
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		prerequisite : "Requires proficiency with wind instruments",
		prereqeval : function (v) {
			for (var i = 0; i < v.toolProfs.length; i++) {
				if ((/pipe|flute|horn|trumpet|horn|ocarina|sackbut|shawm|trombone|tuba|bombard|cornett|flageolet|^(?=.*(air|wind))(?=.*instrument).*$/i).test(v.toolProfs[i])) return true;
			}
		}
	},
	"pipes of the sewers" : { // contains contributions by Soilentbrad
		name : "Pipes of the Sewers",
		source : [["SRD", 232], ["D", 185]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "The pipes have 3 charges, regain 1d3 at dawn, and cause rats to be indifferent toward me unless threatened. As an action, I can play them, then use a bonus action to summon rats in 0.5 miles to form 1 swarm per charge spend. While playing, rat swarms in 30 ft make a Wis check vs. my Cha check or obey my commands.",
		descriptionLong : "The pipes have 3 charges, regain 1d3 at dawn, and cause rats to be indifferent toward me unless threatened. As an action, I can play them, then use a bonus action to summon rats within 0.5 miles to come towards me and form 1 swarm of rats per charge I spend.  When a swarm of rats that isn't under another's control comes within 30 ft of me while I play the pipes, I can make a Charisma check contested by the swarm's Wisdom check. If the swarm fails, it obeys my commands for as long as they can hear the pipes at the start of its turn. If the swarm succeeds or it falls out of the sway, it can't be affected again for 24 hours.",
		descriptionFull : "You must be proficient with wind instruments to use these pipes. While you are attuned to the pipes, ordinary rats and giant rats are indifferent toward you and will not attack you unless you threaten or harm them.\n   The pipes have 3 charges. If you play the pipes as an action, you can use a bonus action to expend 1 to 3 charges, calling forth one swarm of rats with each expended charge, provided that enough rats are within half a mile of you to be called in this fashion (as determined by the DM). If there aren't enough rats to form a swarm, the charge is wasted. Called swarms move toward the music by the shortest available route but aren't under your control otherwise. The pipes regain 1d3 expended charges daily at dawn.\n   Whenever a swarm of rats that isn't under another creature's control comes within 30 feet of you while you are playing the pipes, you can make a Charisma check contested by the swarm's Wisdom check. If you lose the contest, the swarm behaves as it normally would and can't be swayed by the pipes' music for the next 24 hours. If you win the contest, the swarm is swayed by the pipes' music and becomes friendly to you and your companions for as long as you continue to play the pipes each round as an action. A friendly swarm obeys your commands. If you issue no commands to a friendly swarm, it defends itself but otherwise takes no actions. If a friendly swarm starts its turn and can't hear the pipes' music, your control over that swarm ends, and the swarm behaves as it normally would and can't be swayed by the pipes' music for the next 24 hours.",
		attunement : true,
		weight : 2,
		action : [["action", ""]],
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		prerequisite: "Requires proficiency with wind instruments",
		prereqeval: function (v) {
			for (var i = 0; i < v.toolProfs.length; i++) {
				if ((/pipe|flute|horn|trumpet|horn|ocarina|sackbut|shawm|trombone|tuba|bombard|cornett|flageolet|^(?=.*(air|wind))(?=.*instrument).*$/i).test(v.toolProfs[i])) return true;
			}
		}
	},
	"plate armor of etherealness" : {
		name : "Plate Armor of Etherealness",
		source : [["SRD", 233], ["D", 185]],
		type : "armor (plate)",
		rarity : "legendary",
		magicItemTable : "I",
		description : "As an action while I'm wearing this plate armor, I can speak its command word to cast Etherealness on myself. This effect lasts for 10 minutes or until I remove the armor or use an action to speak the command word again. This property of the armor can't be used again until the next dawn.",
		descriptionFull : "While you're wearing this armor, you can speak its command word as an action to gain the effect of the Etherealness spell, which lasts for 10 minutes or until you remove the armor or use an action to speak the command word again. This property of the armor can't be used again until the next dawn.",
		attunement : true,
		weight : 65,
		usages : 1,
		recovery : "dawn",
		action : [["action", " (start/stop)"]],
		armorAdd : "Plate Armor of Etherealness",
		armorOptions : {
			regExpSearch : /^(?=.*plate)(?=.*etherealness).*$/i,
			name : "Plate Armor of Etherealness",
			source : [["SRD", 233], ["D", 185]],
			type : "heavy",
			ac : 18,
			stealthdis : true,
			weight : 65,
			strReq : 15
		},
		spellcastingBonus : {
			name : "once per dawn",
			spells : ["etherealness"],
			selection : ["etherealness"],
			firstCol : "oncelr"
		},
		spellChanges : {
			"etherealness" : {
				components : "V,M\u0192",
				duration : "10 min",
				description : "I go to Ethereal Plane; move there freely, but able to perceive 60 ft into the normal plane",
				changes : "Using the Plate Armor of Etherealness, I can cast Etherealness, but only on myself and it lasts only 10 minutes."
			}
		}
	},
	"portable hole" : {
		name : "Portable Hole",
		source : [["SRD", 233], ["D", 185]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "D",
		description : "As an action, I can unfold this black cloth, 6 ft in diameter, and place it on a solid surface, whereupon it creates a 10-ft deep extradimensional hole. It can be used to create passages. The space is always the same, so I can store things and creatures in there. Removing it and folding it back takes an action.",
		descriptionLong : "As an action, I can unfold this circular black cloth, 6 ft in diameter, and place it on a solid surface, whereupon it creates a 10-ft deep extradimensional hole. It can be used to create passages. Removing it and folding it back takes an action. The space created is always the same, so I can store things and creatures in there. The hole always weighs next to nothing. Creatures inside the folded up hole can breathe for 10 min and can escape as an action with a DC 10 Strength check, appearing next to me of they do. Placing the hole in another extradimensional space instantly destroys both and opens a gate to the Astral Plane.",
		descriptionFull : "This fine black cloth, soft as silk, is folded up to the dimensions of a handkerchief. It unfolds into a circular sheet 6 feet in diameter.\n   You can use an action to unfold a portable hole and place it on or against a solid surface, whereupon the portable hole creates an extradimensional hole 10 feet deep. The cylindrical space within the hole exists on a different plane, so it can't be used to create open passages. Any creature inside an open portable hole can exit the hole by climbing out of it.\n   You can use an action to close a portable hole by taking hold of the edges of the cloth and folding it up. Folding the cloth closes the hole, and any creatures or objects within remain in the extradimensional space. No matter what's in it, the hole weighs next to nothing.\n   If the hole is folded up, a creature within the hole's extradimensional space can use an action to make a DC 10 Strength check. On a successful check, the creature forces its way out and appears within 5 feet of the portable hole or the creature carrying it. A breathing creature within a closed portable hole can survive for up to 10 minutes, after which time it begins to suffocate.\n   Placing a portable hole inside an extradimensional space created by a bag of holding, Heward's handy haversack, or similar item instantly destroys both items and opens a gate to the Astral Plane. The gate originates where the one item was placed inside the other. Any creature within 10 feet of the gate is sucked through it and deposited in a random location on the Astral Plane. The gate then closes. The gate is one-way only and can't be reopened.",
		action : [["action", " (place/fold)"]]
	},
	"potion of animal friendship" : {
		name : "Potion of Animal Friendship",
		source : [["SRD", 233], ["D", 187]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can drink this potion or administer it to another to be able to cast the Animal Friendship spell for 1 hour at will, charming beasts with Int < 4 for 1 hour if it fails a DC 13 Wis save. Agitating this muddy liquid brings little bits into view: a fish scale, a hummingbird tongue, a cat claw, or a squirrel hair.",
		descriptionFull : "When you drink this potion, you can cast the Animal Friendship spell (save DC 13) for 1 hour at will. Agitating this muddy liquid brings little bits into view: a fish scale, a hummingbird tongue, a cat claw, or a squirrel hair.",
		weight : 0.5,
		extraTooltip : "AL: can always be bought for 100 gp"
	},
	"potion of clairvoyance" : {
		name : "Potion of Clairvoyance",
		source : [["SRD", 233], ["D", 187]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "Once as an action, I can drink this potion or administer it to another to gain the effect of the Clairvoyance spell. This creates an invisible sensor within 1 mile, in a familiar or obvious location, that the consumer can see or hear through. An eyeball bobs in this yellowish liquid but vanishes when the potion is opened.",
		descriptionFull : "When you drink this potion, you gain the effect of the Clairvoyance spell. An eyeball bobs in this yellowish liquid but vanishes when the potion is opened.",
		weight : 0.5
	},
	"potion of climbing" : {
		name : "Potion of Climbing",
		source : [["SRD", 233], ["D", 187]],
		type : "potion",
		rarity : "common",
		magicItemTable : "A",
		description : "Once as an action, I can drink this potion or administer it to another to gain, for 1 hour, a climbing speed equal to the consumer's walking speed and adv. on Str (Athletics) checks to climb. The potion is separated into brown, silver, and gray layers resembling bands of stone. Shaking it fails to mix the colors.",
		descriptionFull : "When you drink this potion, you gain a climbing speed equal to your walking speed for 1 hour. During this time, you have advantage on Strength (Athletics) checks you make to climb. The potion is separated into brown, silver, and gray layers resembling bands of stone. Shaking the bottle fails to mix the colors.",
		weight : 0.5,
		extraTooltip : "AL: can always be bought for 75 gp"
	},
	"potion of diminution" : {
		name : "Potion of Diminution",
		source : [["SRD", 233], ["D", 187]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "Once as an action, I can drink this potion or administer it to another to be reduced as per the Enlarge/Reduce spell for 1d4 hours (no concentration required). The red in the potion's liquid continuously contracts to a tiny bead and then expands to color the clear liquid around it.",
		descriptionLong : "Once as an action, I can drink this potion or administer it to another to be reduced as per the Enlarge/Reduce spell for 1d4 hours (no concentration required). This causes the consumer to decrease one size category as it halves in size in all dimensions and its weight is reduced to one-eight of normal. Its weapon attacks deal -1d4 damage (min 1) and it has disadvantage on Strength checks and saving throws. The red in the potion's liquid continuously contracts to a tiny bead and then expands to color the clear liquid around it. Shaking the bottle fails to interrupt this process.",
		descriptionFull : "When you drink this potion, you gain the \"reduce\" effect of the Enlarge/Reduce spell for 1d4 hours (no concentration required). The red in the potion's liquid continuously contracts to a tiny bead and then expands to color the clear liquid around it. Shaking the bottle fails to interrupt this process.",
		weight : 0.5
	},
	"potion of flying" : {
		name : "Potion of Flying",
		source : [["SRD", 234], ["D", 187]],
		type : "potion",
		rarity : "very rare",
		magicItemTable : "D",
		description : "Once as an action, I can drink this potion or administer it to another to gain a flying speed equal to the consumer's walking speed for 1 hour and be able to hover. When the potion wears off, the consumer falls. This potion's clear liquid floats at the top of its container and has cloudy white impurities drifting in it.",
		descriptionFull : "When you drink this potion, you gain a flying speed equal to your walking speed for 1 hour and can hover. If you're in the air when the potion wears off, you fall unless you have some other means of staying aloft. This potion's clear liquid floats at the top of its container and has cloudy white impurities drifting in it.",
		weight : 0.5
	},
	"potion of gaseous form" : {
		name : "Potion of Gaseous Form",
		source : [["SRD", 234], ["D", 187]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "Once as an action, I can drink this potion or administer it to another to gain the effect of the Gaseous Form spell for 1 hour (no concentration required), until the consumer drops to 0 HP, or ends the effect as a bonus action. This potion's container seems to hold fog that moves and pours like water.",
		descriptionLong : "Once as an action, I can drink this potion or administer it to another to gain the effect of the Gaseous Form spell for 1 hour (no concentration required), until the consumer drops to 0 HP, or ends the effect as a bonus action. The consumer, along with everything it's wearing and carrying, transforms into a misty cloud. In this form, it can only move by flying at 10 ft speed, can hover, can't fall, has resistance to nonmagical damage, adv. on Str, Dex, and Con saves, can pass through mere cracks, but can't talk, manipulate items, cast spells, or attack. This container seems to hold fog that moves and pours like water.",
		descriptionFull : "When you drink this potion, you gain the effect of the Gaseous Form spell for 1 hour (no concentration required) or until you end the effect as a bonus action. This potion's container seems to hold fog that moves and pours like water.",
		weight : 0.5
	},
	"potion of giant strength" : {
		name : "Potion of Giant Strength",
		source : [["SRD", 234], ["D", 187]],
		type : "potion",
		description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score for 1 hour. The number of this score depends on the type of giant from which a sliver of fingernail is floating in this potions' transparent liquid.",
		descriptionFull : "When you drink this potion, your Strength score changes for 1 hour. The type of giant determines the score (see the table below). The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a giant of the appropriate type. The potion of frost giant strength and the potion of stone giant strength have the same effect.\n\n" + toUni("Type\t\tStr\tRarity") + "\nHill giant\t\t21\tUncommon\nStone/frost giant\t23\tRare\nFire giant   \t25\tRare\nCloud giant\t27\tVery rare\nStorm giant\t29\tLegendary",
		weight : 0.5,
		allowDuplicates : true,
		choices : ["Hill (Str 21, uncommon)", "Frost (Str 23, rare)", "Stone (Str 23, rare)", "Fire (Str 25, rare)", "Cloud (Str 27, very rare)", "Storm (Str 29, legendary)"],
		"hill (str 21, uncommon)" : {
			name : "Potion of Hill Giant Strength",
			rarity : "uncommon",
			magicItemTable : "B",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 21 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a hill giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 21 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a hill giant."
		},
		"frost (str 23, rare)" : {
			name : "Potion of Frost Giant Strength",
			rarity : "rare",
			magicItemTable : "C",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 23 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a frost giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 23 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a frost giant."
		},
		"stone (str 23, rare)" : {
			name : "Potion of Stone Giant Strength",
			rarity : "rare",
			magicItemTable : "C",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 23 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a stone giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 23 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a stone giant."
		},
		"fire (str 25, rare)" : {
			name : "Potion of Fire Giant Strength",
			rarity : "rare",
			magicItemTable : "C",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 25 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a fire giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 25 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a fire giant."
		},
		"cloud (str 27, very rare)" : {
			name : "Potion of Cloud Giant Strength",
			rarity : "very rare",
			magicItemTable : "D",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 27 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a cloud giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 27 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a cloud giant."
		},
		"storm (str 29, legendary)" : {
			name : "Potion of Storm Giant Strength",
			rarity : "legendary",
			magicItemTable : "E",
			description : "Once as an action, I can drink this potion or administer it to another to change the consumer's Strength score to 29 for 1 hour. This potion has no effect if the consumer's Strength score is already equal or higher. This potion's transparent liquid has floating in it a sliver of fingernail from a storm giant.",
			descriptionFull : "When you drink this potion, your Strength score changes to 29 for 1 hour. The potion has no effect on you if your Strength is equal to or greater than that score.\n   This potion's transparent liquid has floating in it a sliver of fingernail from a storm giant."
		}
	},
	"potion of growth" : {
		name : "Potion of Growth",
		source : [["SRD", 234], ["D", 187]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can drink this potion or administer it to another to be enlarged as per the Enlarge/Reduce spell for 1d4 hours (no concentration required). The red in the potion's liquid continuously expands from a tiny bead to color the clear liquid around it and then contracts.",
		descriptionLong : "Once as an action, I can drink this potion or administer it to another to be enlarged as per the Enlarge/Reduce spell for 1d4 hours (no concentration required). This causes the consumer to grow one size category as it doubles in size in all dimensions and its weight is multiplied by eight. This growth stops early if the encompassing space is fully filled. Its weapon attacks deal +1d4 damage and it has advantage on Strength checks and saving throws. The red in the potion's liquid continuously expands from a tiny bead to color the clear liquid around it and then contracts. Shaking the bottle fails to interrupt this process.",
		descriptionFull : "When you drink this potion, you gain the \"enlarge\" effect of the Enlarge/Reduce spell for 1d4 hours (no concentration required). The red in the potion's liquid continuously expands from a tiny bead to color the clear liquid around it and then contracts. Shaking the bottle fails to interrupt this process.",
		weight : 0.5
	},
	"potion of healing" : {
		name : "Potion of Healing",
		source : [["SRD", 234], ["D", 187]],
		type : "potion",
		description : "Once as an action, I can drink this potion or administer it to another to heal a number of hit points depending on the type of potion. This potion's red liquid glimmers when agitated.",
		descriptionFull : "You regain hit points when you drink this potion. The number of hit points depends on the potion's rarity, as shown in the Potions of Healing table. Whatever its potency, the potion's red liquid glimmers when agitated.",
		weight : 0.5,
		allowDuplicates : true,
		choices : ["Healing (2d4+2, common)", "Greater Healing (4d4+4, uncommon)", "Superior Healing (8d4+8, rare)", "Supreme Healing (10d4+20, very rare)"],
		"healing (2d4+2, common)" : {
			name : "Potion of Healing  ",
			rarity : "common",
			magicItemTable : "A",
			description : "Once as an action, I can drink this potion or administer it to another to regain 2d4+2 hit points. This potion's red liquid glimmers when agitated.",
			descriptionFull : "You regain 2d4+2 hit points when you drink this potion. The potion's red liquid glimmers when agitated.",
			extraTooltip : "Can be bought for 50 gp (also in AL)"
		},
		"greater healing (4d4+4, uncommon)" : {
			name : "Potion of Greater Healing",
			rarity : "uncommon",
			magicItemTable : ["A", "B"],
			description : "Once as an action, I can drink this potion or administer it to another to regain 4d4+4 hit points. This potion's red liquid glimmers when agitated.",
			descriptionFull : "You regain 4d4+4 hit points when you drink this potion. The potion's red liquid glimmers when agitated.",
			extraTooltip : "AL: can always be bought for 100 gp"
		},
		"superior healing (8d4+8, rare)" : {
			name : "Potion of Superior Healing",
			rarity : "rare",
			magicItemTable : "C",
			description : "Once as an action, I can drink this potion or administer it to another to regain 8d4+8 hit points. This potion's red liquid glimmers when agitated.",
			descriptionFull : "You regain 8d4+8 hit points when you drink this potion. The potion's red liquid glimmers when agitated.",
			extraTooltip : "AL: can always be bought for 500 gp"
		},
		"supreme healing (10d4+20, very rare)" : {
			name : "Potion of Supreme Healing",
			rarity : "very rare",
			magicItemTable : ["D", "E"],
			description : "Once as an action, I can drink this potion or administer it to another to regain 10d4+20 hit points. This potion's red liquid glimmers when agitated.",
			descriptionFull : "You regain 10d4+20 hit points when you drink this potion. The potion's red liquid glimmers when agitated.",
			extraTooltip : "AL: can always be bought for 5000 gp"
		}
	},
	"potion of heroism" : {
		name : "Potion of Heroism",
		source : [["SRD", 234], ["D", 188]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "Once as an action, I can drink this potion or administer it to another to gain 10 temporary hit points for 1 hour. For the same duration, the consumer is under the effect of the Bless spell (no concentration required), which adds +1d4 on all attack rolls and saving throws. This blue potion bubbles and steams as if boiling.",
		descriptionFull : "For 1 hour after drinking it, you gain 10 temporary hit points that last for 1 hour. For the same duration, you are under the effect of the Bless spell (no concentration required). This blue potion bubbles and steams as if boiling.",
		weight : 0.5
	},
	"potion of invisibility" : {
		name : "Potion of Invisibility",
		source : [["SRD", 234], ["D", 188]],
		type : "potion",
		rarity : "very rare",
		magicItemTable : "D",
		description : "Once as an action, I can drink this potion or administer it to another to become invisible for 1 hour. Anything the consumer wears or carries is invisible along with it. The effect ends early the consumer attacks or casts a spell. This potion's container looks empty but feels as though it holds liquid.",
		descriptionFull : "This potion's container looks empty but feels as though it holds liquid. When you drink it, you become invisible for 1 hour. Anything you wear or carry is invisible with you. The effect ends early if you attack or cast a spell.",
		weight : 0.5,
		extraTooltip : "AL: can always be bought for 5000 gp"
	},
	"potion of mind reading" : {
		name : "Potion of Mind Reading",
		source : [["SRD", 234], ["D", 188]],
		type : "potion",
		rarity : "rare",
		magicItemTable : "C",
		description : "Once as an action, I can drink this potion or administer it to another to gain the effect of the Detect Thoughts spell (save DC 13) for 1 minute. The potion's dense, purple liquid has an ovoid cloud of pink floating in it.",
		descriptionFull : "When you drink this potion, you gain the effect of the Detect Thoughts spell (save DC 13). The potion's dense, purple liquid has an ovoid cloud of pink floating in it.",
		weight : 0.5
	},
	"potion of poison" : {
		name : "Potion of Poison",
		source : [["SRD", 234], ["D", 188]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "The consumer of this potion takes 3d6 poison damage and must make a DC 13 Con save or be poisoned. While poisoned this way, it takes 3d6 poison damage at the start of each of its turns and can repeat the save at the end of each of its turns to lower subsequent damage by 1d6. The poison ends when it reaches 0.",
		descriptionLong : "This concoction looks, smells, and tastes like a potion of healing or other beneficial potion. However, whomever consumes it takes 3d6 poison damage and must make a DC 13 Con save or be poisoned. While poisoned this way, the consumer takes 3d6 poison damage at the start of each of its turns. At the end of each of the consumer's turns, it can repeat the saving throw. On a successful save, the poison damage on subsequent turns decreases by 1d6. The poison ends when the damage decreases to 0.",
		descriptionFull : "This concoction looks, smells, and tastes like a potion of healing or other beneficial potion. However, it is actually poison masked by illusion magic. An Identify spell reveals its true nature.\n   If you drink it, you take 3d6 poison damage, and you must succeed on a DC 13 Constitution saving throw or be poisoned. At the start of each of your turns while you are poisoned in this way, you take 3d6 poison damage. At the end of each of your turns, you can repeat the saving throw. On a successful save, the poison damage you take on your subsequent turns decreases by 1d6. The poison ends when the damage decreases to 0.",
		weight : 0.5
	},
	"potion of resistance" : {
		name : "Potion of Resistance",
		source : [["SRD", 235], ["D", 188]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can drink this potion or administer it to another to gain resistance to one damage type for 1 hour.",
		descriptionFull : "When you drink this potion, you gain resistance to one type of damage for 1 hour. The DM chooses the type or determines it randomly from the options below.\n\n" + toUni("d10\tType\t\td10\tType") + "\n 1\tAcid\t\t 6\tNecrotic\n 2\tCold\t\t 7\tPoison\n 3\tFire\t\t 8\tPsychic\n 4\tForce\t\t 9\tRadiant\n 5\tLightning   \t 10\tThunder",
		weight : 0.5,
		allowDuplicates : true,
		choices : ["Acid", "Cold", "Fire", "Force", "Lightning", "Necrotic", "Poison", "Psychic", "Radiant", "Thunder"],
		"acid" : {
			name : "Potion of Acid Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to acid damage for 1 hour."
		},
		"cold" : {
			name : "Potion of Cold Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to cold damage for 1 hour."
		},
		"fire" : {
			name : "Potion of Fire Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to fire damage for 1 hour."
		},
		"force" : {
			name : "Potion of Force Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to force damage for 1 hour."
		},
		"lightning" : {
			name : "Potion of Lightning Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to lightning damage for 1 hour."
		},
		"necrotic" : {
			name : "Potion of Necrotic Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to necrotic damage for 1 hour."
		},
		"poison" : {
			name : "Potion of Poison Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to poison damage for 1 hour."
		},
		"psychic" : {
			name : "Potion of Psychic Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to psychic damage for 1 hour."
		},
		"radiant" : {
			name : "Potion of Radiant Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to radiant damage for 1 hour."
		},
		"thunder" : {
			name : "Potion of Thunder Resistance",
			description : "Once as an action, I can drink this potion or administer it to another to gain resistance to thunder damage for 1 hour."
		}
	},
	"potion of speed" : {
		name : "Potion of Speed",
		source : [["SRD", 235], ["D", 188]],
		type : "potion",
		rarity : "very rare",
		magicItemTable : "D",
		description : "Once as an action, I can drink this potion or administer it to another to gain the effects of Haste for 1 minute (no concentration required). The potion's yellow fluid is streaked with black and swirls on its own.",
		descriptionLong : "Once as an action, I can drink this potion or administer it to another to gain the effects of Haste for 1 minute (no concentration required). The potion's yellow fluid is streaked with black and swirls on its own. Haste doubles its speed, gives a +2 bonus to AC, gives advantage on Dex saves, and gives an additional action on each turn. That action can be used only to take the Attack (one weapon attack only), Dash, Disengage, Hide, or Use an Object action. When the spell ends, the target can't move or take actions until after its next turn, as a wave of lethargy sweeps over it.",
		descriptionFull : "When you drink this potion, you gain the effect of the Haste spell for 1 minute (no concentration required). The potion's yellow fluid is streaked with black and swirls on its own.",
		weight : 0.5
	},
	"potion of water breathing" : {
		name : "Potion of Water Breathing",
		source : [["SRD", 235], ["D", 188]],
		type : "potion",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "Once as an action, I can drink this potion or administer it to another to be able to breathe underwater for 1 hour after drinking this potion. Its cloudy green fluid smells of the sea and has a jellyfish-like bubble floating in it.",
		descriptionFull : "You can breathe underwater for 1 hour after drinking this potion. Its cloudy green fluid smells of the sea and has a jellyfish-like bubble floating in it.",
		weight : 0.5,
		extraTooltip : "AL: can always be bought for 100 gp"
	},
	"quaal's feather token" : {
		name : "Quaal's Feather Token",
		nameAlt : "Feather Token",
		source : [["SRD", 221], ["D", 188]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "C",
		descriptionFull : "This tiny object looks like a feather. Different types of feather tokens exist, each with a different single-use effect. The DM chooses the kind of token or determines it randomly.\n\n" + toUni("d100\tToken\td100\tToken") +
		"\n01-20\tAnchor\t51-65\tSwan boat" +
		"\n21-35\tBird   \t66-90\tTree" +
		"\n36-50\tFan   \t91-00\tWhip",
		allowDuplicates : true,
		choices : ["Anchor", "Bird", "Fan", "Swan Boat", "Tree", "Whip"],
		"anchor" : {
			description : "This tiny object looks like a feather. As an action, I can touch the token to a boat or ship. For the next 24 hours, the vessel can't be moved by any means. Touching the token to the vessel again ends the effect early. When the effect ends, the token disappears.",
			descriptionFull : "This tiny object looks like a feather. You can use an action to touch the token to a boat or ship. For the next 24 hours, the vessel can't be moved by any means. Touching the token to the vessel again ends the effect. When the effect ends, the token disappears.",
			action : [["action", ""]]
		},
		"bird" : {
			description : "As an action, I can toss this token into the air and it turns into a roc. It obeys my simple commands, can't attack, can carry 500 lb while flying (16 miles per hour or 144 miles per day, as it rests 1 hour per 3 of flying), or double that at half speed. It disappears after a day, i it drops to 0 HP, or if I use an action to make it.",
			descriptionFull : "This tiny object looks like a feather. You can use an action to toss the token 5 feet into the air. The token disappears and an enormous, multicolored bird takes its place. The bird has the statistics of a roc, but it obeys your simple commands and can't attack. It can carry up to 500 pounds while flying at its maximum speed (16 miles an hour for a maximum of 144 miles per day. with a one-hour rest for every 3 hours of flying), or 1,000 pounds at half that speed. The bird disappears after flying its maximum distance for a day or if it drops to 0 hit points. You can dismiss the bird as an action.",
			action : [["action", " (use/dismiss)"]]
		},
		"fan" : {
			description : "As an action when I'm on a boat or ship, I can toss this token up to 10 ft in the air. The token disappears, and a giant flapping fan takes its place. The fan floats and creates a wind strong enough to fill the sails of one ship, increasing its speed by 5 miles per hour for 8 hours. I can dismiss the fan as an action.",
			descriptionFull : "This tiny object looks like a feather. If you are on a boat or ship, you can use an action to toss the token up to 10 feet in the air. The token disappears, and a giant flapping fan takes its place. The fan floats and creates a wind strong enough to fill the sails of one ship, increasing its speed by 5 miles per hour for 8 hours. You can dismiss the fan as an action.",
			action : [["action", " (create/dismiss)"]]
		},
		"swan boat" : {
			description : "As an action, I can touch the token to a body of water at least 60-ft in diameter, having it turn into a 50 ft by 20 ft boat shaped like a swan that remains for 24 hours. It moves itself at 6 miles per hour. As an action, I can command it to turn up to 90°. It can hold up to 32 Medium creatures (Large count as 4, Huge as 9).",
			descriptionFull : "This tiny object looks like a feather. You can use an action to touch the token to a body of water at least 60 feet in diameter. The token disappears, and a 50-foot-long, 20-foot-wide boat shaped like a swan takes its place. The boat is self-propelled and moves across water at a speed of 6 miles per hour. You can use an action while on the boat to command it to move or to turn up to 90 degrees. The boat can carry up to thirty-two Medium or smaller creatures. A Large creature counts as four Medium creatures, while a Huge creature counts as nine. The boat remains for 24 hours and then disappears. You can dismiss the boat as an action.",
			action : [["action", " (create/dismiss)"]]
		},
		"tree" : {
			description : "This tiny object looks like a feather. As an action, I can touch it to an unoccupied space on the ground. If this is done outdoors, the token disappears, and in its place a nonmagical oak tree springs into existence. The tree is 60 ft tall and has a 5-ft diameter trunk, and its branches at the top spread out in a 20-ft radius.",
			descriptionFull : "This tiny object looks like a feather. You must be outdoors to use this token. You can use an action to touch it to an unoccupied space on the ground. The token disappears, and in its place a nonmagical oak tree springs into existence. The tree is 60 feet tall and has a 5-foot-diameter trunk, and its branches at the top spread out in a 20-foot radius.",
			action : [["action", ""]]
		},
		"whip" : {
			description : "As an action, can throw the token 10 ft, where it turns into a floating whip for 1 hour, until I use an action to dismiss it, I die, or I become incapacitated. As a bonus action, I can have it fly 20 ft and make a melee spell attack against a creature within 10 ft of it, with a +9 to hit and dealing 1d6+5 force damage.",
			descriptionFull : "This tiny object looks like a feather. You can use an action to throw the token to a point within 10 feet of you. The token disappears, and a floating whip takes its place. You can then use a bonus action to make a melee spell attack against a creature within 10 feet of the whip, with an attack bonus of +9. On a hit, the target takes 1d6+5 force damage.\n   As a bonus action on your turn, you can direct the whip to fly up to 20 feet and repeat the attack against a creature within 10 feet of it. The whip disappears after 1 hour, when you use an action to dismiss it, or when you are incapacitated or die.",
			action : [["action", " (create)"], ["bous action", " (direct)"]]
		}
	},
	"quiver of ehlonna" : {
		name : "Quiver of Ehlonna",
		nameAlt : "Efficient Quiver",
		source : [["SRD", 220], ["D", 189]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This quiver has three compartments and weighs 2 lb, regardless of its contents. Its shortest compartment can hold 60 arrows, bolts, or similar objects. Its midsize compartment holds up to 18 javelins or similar objects. Its longest compartment holds up to 6 long objects, such as bows, quarterstaffs, or spears.",
		descriptionFull : "Each of the quiver's three compartments connects to an extradimensional space that allows the quiver to hold numerous items while never weighing more than 2 pounds. The shortest compartment can hold up to sixty arrows, bolts, or similar objects. The midsize compartment holds up to eighteen javelins or similar objects. The longest compartment holds up to six long objects, such as bows, quarterstaffs, or spears.\n   You can draw any item the quiver contains as if doing so from a regular quiver or scabbard.",
		weight : 2
	},
	"ring of animal influence" : {
		name : "Ring of Animal Influence",
		source : [["SRD", 235], ["D", 189]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "This ring has 3 charges, and it regains 1d3 expended charges daily at dawn. As an action while wearing the ring, I can expend 1 of its charges to cast a spell (save DC 13): Animal Friendship, Speak with Animals, or Fear. Fear cast from this ring can target only beasts that have an Intelligence of 3 or lower.",
		descriptionFull : "This ring has 3 charges, and it regains 1d3 expended charges daily at dawn. While wearing the ring, you can use an action to expend 1 of its charges to cast one of the following spells:\n \u2022 Animal Friendship (save DC 13)\n \u2022 Fear (save DC 13), targeting only beasts that have an Intelligence of 3 or lower\n \u2022 Speak with Animals",
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		fixedDC : 13,
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "1 charge",
			spells : ["animal friendship", "speak with animals", "fear"],
			selection : ["animal friendship", "speak with animals", "fear"],
			firstCol : "1",
			times : 3
		}],
		spellChanges : {
			"fear" : {
				description : "All beasts Int<4 save or frightened, Dash to get away; extra save at end of turn if not in line of sight",
				changes : "Only affects beasts that have an Intelligence of 3 or lower."
			}
		}
	},
	"ring of djinni summoning" : {
		name : "Ring of Djinni Summoning",
		source : [["SRD", 235], ["D", 190]],
		type : "ring",
		rarity : "legendary",
		magicItemTable : "I",
		description : "As an action, I can speak this ring's command word to summon a djini within 120 ft, remaining while I concentrate, up to 1 hour. After that time, I can't summon it for 24 hours. It is friendly to me and my allies, obeys my commands, but takes no actions if not commanded to. The ring loses its magic If the djini dies.",
		descriptionFull : "While wearing this ring, you can speak its command word as an action to summon a particular djinni from the Elemental Plane of Air. The djinni appears in an unoccupied space you choose within 120 feet of you. It remains as long as you concentrate (as if concentrating on a spell), to a maximum of 1 hour, or until it drops to 0 hit points. It then returns to its home plane.\n   While summoned, the djinni is friendly to you and your companions. It obeys any commands you give it, no matter what language you use. If you fail to command it, the djinni defends itself against attackers but takes no other actions.\n   After the djinni departs, it can't be summoned again for 24 hours, and the ring becomes nonmagical if the djinni dies.",
		attunement : true,
		usages : 1,
		recovery : "24 hours"
	},
	"ring of elemental command" : {
		name : "Ring of Elemental Command",
		source : [["SRD", 235], ["D", 190]],
		type : "ring",
		rarity : "legendary",
		magicItemTable : "I",
		description : "Select one of the eight types of this ring, two for each of the elemental planes, with each ring having two option, its initial state and its 'unlocked' state that becomes available once you help slay an elemental of that plane while attuned to the ring.",
		descriptionFull : "This ring is linked to one of the four Elemental Planes. The GM chooses or randomly determines the linked plane.\n   While wearing this ring, you have advantage on attack rolls against elementals from the linked plane, and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the linked plane.\n   The ring has 5 charges. It regains 1d4 + 1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.",
		attunement : true,
		allowDuplicates : true,
		usages : 5,
		recovery : "dawn",
		additional : "regains 1d4+1",
		choices : ["Air", "Air (help kill air elemental while attuned)", "Earth", "Earth (help kill earth elemental while attuned)", "Fire", "Fire (help kill fire elemental while attuned)", "Water", "Water (help kill water elemental while attuned)"],
		"air" : {
			name : "Ring of Air Elemental Command",
			description : "This ring has 5 charges and regains 1d4+1 daily at dawn. It grants me adv. on attacks vs. elementals from the Plane of Air and they have disadv. vs. me. I can expend 2 charges to cast Dominate Monster on an air elemental. When I fall, I descend 60 ft per round and take no falling damage. I also know Auran.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Air, and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Air.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on an air elemental. In addition, when you fall, you descend 60 feet per round and take no damage from falling. You can also speak and understand Auran.\n   If you help slay an air elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You have resistance to lightning damage.\n \u2022 You have a flying speed equal to your walking speed and can hover.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Chain Lightning (3 charges), Gust of Wind (2 charges), or Wind Wall (1 charge).",
			languageProfs : ["Auran"],
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : {
				name : "2 charges",
				spells : ["dominate monster"],
				selection : ["dominate monster"],
				firstCol : 2
			},
			spellChanges : {
				"dominate monster" : {
					description : "Air elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect an air elemental."
				}
			}
		},
		"air (help kill air elemental while attuned)" : {
			name : "Ring of Air Elemental Command [unlocked]",
			description : "This ring grants adv. on attacks vs. elementals from the Plane of Air while they have disadv. vs. me. I have resistance to lightning damage, flying speed equal to my walking speed. I fall at 60 ft per round and take no falling damage. I know Auran. I can cast spells by using its 5 charges, of which it regains 1d4+1 at dawn.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Air, and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Air.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on an air elemental. In addition, when you fall, you descend 60 feet per round and take no damage from falling. You can also speak and understand Auran.\n   If you help slay an air elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You have resistance to lightning damage.\n \u2022 You have a flying speed equal to your walking speed and can hover.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Chain Lightning (3 charges), Gust of Wind (2 charges), or Wind Wall (1 charge).",
			languageProfs : ["Auran"],
			dmgres : ["Lightning"],
			speed : { fly : { spd : "walk", enc : "walk" } },
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : [{
				name : "1 charge",
				spells : ["wind wall"],
				selection : ["wind wall"],
				firstCol : 1
			}, {
				name : "2 charges",
				spells : ["dominate monster", "gust of wind"],
				selection : ["dominate monster", "gust of wind"],
				firstCol : 2,
				times : 2
			}, {
				name : "3 charges",
				spells : ["chain lightning"],
				selection : ["chain lightning"],
				firstCol : 3
			}],
			spellChanges : {
				"dominate monster" : {
					description : "Air elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect an air elemental."
				}
			},
			limfeaname : "Ring of Air Elemental Command"
		},
		"earth" : {
			name : "Ring of Earth Elemental Command",
			description : "This ring has 5 charges and regains 1d4+1 daily at dawn. It grants me adv. on attacks vs. elementals from the Plane of Earth and they have disadv. vs. me. I can expend 2 charges to cast Dominate Monster on an earth elemental. I move normally in difficult terrain of rubble, rocks, or dirt. I also know Terran.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Earth and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Earth.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on an earth elemental. In addition, you can move in difficult terrain that is composed of rubble, rocks, or dirt as if it were normal terrain. You can also speak and understand Terran.\n   If you help slay an earth elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You have resistance to acid damage.\n \u2022 You can move through solid earth or rock as if those areas were difficult terrain. If you end your turn there, you are shunted out to the nearest unoccupied space you last occupied.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Stone Shape (2 charges), Stoneskin (3 charges), or Wall of Stone (3 charges).",
			languageProfs : ["Terran"],
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : {
				name : "2 charges",
				spells : ["dominate monster"],
				selection : ["dominate monster"],
				firstCol : 2
			},
			spellChanges : {
				"dominate monster" : {
					description : "Earth elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect an earth elemental."
				}
			}
		},
		"earth (help kill earth elemental while attuned)" : {
			name : "Ring of Earth Elemental Command [unlocked]",
			description : "This ring grants resistance to acid damage and adv. on attacks vs. elementals from the Plane of Earth while they have disadv. vs. me. I know Terran, move normally in difficult terrain of rubble, rocks, or dirt, and can move through solid earth or rock as if it were difficult terrain. I can cast spells by using its 5 charges.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Earth and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Earth.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on an earth elemental. In addition, you can move in difficult terrain that is composed of rubble, rocks, or dirt as if it were normal terrain. You can also speak and understand Terran.\n   If you help slay an earth elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You have resistance to acid damage.\n \u2022 You can move through solid earth or rock as if those areas were difficult terrain. If you end your turn there, you are shunted out to the nearest unoccupied space you last occupied.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Stone Shape (2 charges), Stoneskin (3 charges), or Wall of Stone (3 charges).",
			languageProfs : ["Terran"],
			dmgres : ["Acid"],
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : [{
				name : "2 charges",
				spells : ["dominate monster", "stone shape"],
				selection : ["dominate monster", "stone shape"],
				firstCol : 2,
				times : 2
			}, {
				name : "3 charges",
				spells : ["stoneskin", "wall of stone"],
				selection : ["stoneskin", "wall of stone"],
				firstCol : 3,
				times : 2
			}],
			spellChanges : {
				"dominate monster" : {
					description : "Earth elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect an earth elemental."
				}
			},
			limfeaname : "Ring of Earth Elemental Command"
		},
		"fire" : {
			name : "Ring of Fire Elemental Command",
			description : "This ring has 5 charges and regains 1d4+1 daily at dawn. It grants me adv. on attacks vs. elementals from the Plane of Fire and they have disadv. vs. me. I can expend 2 charges to cast Dominate Monster (DC 17) on a fire elemental. I have resistance to fire damage and can speak and understand Ignan.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Fire and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Fire.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on a fire elemental. In addition, you have resistance to fire damage. You can also speak and understand Ignan.\n   If you help slay a fire elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You are immune to fire damage.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Burning Hands (1 charge), Fireball (2 charges), and Wall of Fire (3 charges).",
			languageProfs : ["Ignan"],
			dmgres : ["Fire"],
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : {
				name : "2 charges",
				spells : ["dominate monster"],
				selection : ["dominate monster"],
				firstCol : 2
			},
			spellChanges : {
				"dominate monster" : {
					description : "Fire elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect a fire elemental."
				}
			}
		},
		"fire (help kill fire elemental while attuned)" : {
			name : "Ring of Fire Elemental Command [unlocked]",
			description : "This ring has 5 charges, regaining 1d4+1 at dawn. It grants me immunity to fire damage, adv. on attacks vs. elementals from the Plane of Fire and they have disadv. vs. me. I can expend charges to cast spells (DC 17), Burning Hands (1), Dominate Monster (1; fire elemental only), Fireball (2), Wall of Fire (3). I know Ignan.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Fire and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Fire.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on a fire elemental. In addition, you have resistance to fire damage. You can also speak and understand Ignan.\n   If you help slay a fire elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You are immune to fire damage.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Burning Hands (1 charge), Fireball (2 charges), and Wall of Fire (3 charges).",
			languageProfs : ["Ignan"],
			savetxt : { immune : ["fire"] },
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : [{
				name : "1 charge",
				spells : ["burning hands"],
				selection : ["burning hands"],
				firstCol : 1
			}, {
				name : "2 charges",
				spells : ["dominate monster", "fireball"],
				selection : ["dominate monster", "fireball"],
				firstCol : 2,
				times : 2
			}, {
				name : "3 charges",
				spells : ["wall of fire"],
				selection : ["wall of fire"],
				firstCol : 3
			}],
			spellChanges : {
				"dominate monster" : {
					description : "Fire elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect a fire elemental."
				}
			},
			limfeaname : "Ring of Fire Elemental Command"
		},
		"water" : {
			name : "Ring of Water Elemental Command",
			description : "This ring has 5 charges, regaining 1d4+1 at dawn. It grants me adv. on attacks vs. elementals from the Plane of Water and they have disadv. vs. me. I can expend 2 charges to cast Dominate Monster on a water elemental. I can stand on and walk across liquid surfaces as if they were solid ground. I know Aquan.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Water and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Water.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on a water elemental. In addition, you can stand on and walk across liquid surfaces as if they were solid ground. You can also speak and understand Aquan.\n   If you help slay a water elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You can breathe underwater and have a swimming speed equal to your walking speed.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Create or Destroy Water (1 charge), Control Water (3 charges), Ice Storm (2 charges), or Wall of Ice (3 charges).",
			languageProfs : ["Aquan"],
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : {
				name : "2 charges",
				spells : ["dominate monster"],
				selection : ["dominate monster"],
				firstCol : 2
			},
			spellChanges : {
				"dominate monster" : {
					description : "Water elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect a water elemental."
				}
			}
		},
		"water (help kill water elemental while attuned)" : {
			name : "Ring of Water Elemental Command [unlocked]",
			description : "This ring gives me adv. on attacks vs. elementals from the Plane of Water while they have disadv. vs. me. I know Aquan, can stand and walk on liquid surfaces as if they were solid ground, swim at my walking speed, and breathe underwater.  I can cast spells by using the ring's 5 charges, of which it regains 1d4+1 at dawn.",
			descriptionFull : "While wearing this ring, you have advantage on attack rolls against elementals from the Elemental Plane of Water and they have disadvantage on attack rolls against you. In addition, you have access to properties based on the Elemental Plane of Water.\n   The ring has 5 charges. It regains 1d4+1 expended charges daily at dawn. Spells cast from the ring have a save DC of 17.\n   You can expend 2 of the ring's charges to cast Dominate Monster on a water elemental. In addition, you can stand on and walk across liquid surfaces as if they were solid ground. You can also speak and understand Aquan.\n   If you help slay a water elemental while attuned to the ring, you gain access to the following additional properties:\n \u2022 You can breathe underwater and have a swimming speed equal to your walking speed.\n \u2022 You can cast the following spells from the ring, expending the necessary number of charges: Create or Destroy Water (1 charge), Control Water (3 charges), Ice Storm (2 charges), or Wall of Ice (3 charges).",
			languageProfs : ["Aquan"],
			speed : { swim : { spd : "walk", enc : "walk" } },
			fixedDC : 17,
			spellFirstColTitle : "Ch",
			spellcastingBonus : [{
				name : "1 charge",
				spells : ["create or destroy water"],
				selection : ["create or destroy water"],
				firstCol : 1
			}, {
				name : "2 charges",
				spells : ["dominate monster", "ice storm"],
				selection : ["dominate monster", "ice storm"],
				firstCol : 2,
				times : 2
			}, {
				name : "3 charges",
				spells : ["control water", "wall of ice"],
				selection : ["control water", "wall of ice"],
				firstCol : 3,
				times : 2
			}],
			spellChanges : {
				"dominate monster" : {
					description : "Water elemental save or charmed, follows telepathic commands, 1 a for complete control; save on dmg",
					changes : "Can only affect a water elemental."
				}
			},
			limfeaname : "Ring of Water Elemental Command"
		}
	},
	"ring of evasion" : {
		name : "Ring of Evasion",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "This ring has 3 charges, and it regains 1d3 expended charges daily at dawn. As a reaction when I fail a Dexterity saving throw while wearing it, I can expend 1 of its charges to succeed on that saving throw instead.",
		descriptionFull : "This ring has 3 charges, and it regains 1d3 expended charges daily at dawn. When you fail a Dexterity saving throw while wearing it, you can use your reaction to expend 1 of its charges to succeed on that saving throw instead.",
		attunement : true,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		action : [["reaction", ""]]
	},
	"ring of feather falling" : {
		name : "Ring of Feather Falling",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "When I fall while wearing this ring, I descend 60 ft per round and take no damage from falling.",
		descriptionFull : "When you fall while wearing this ring, you descend 60 feet per round and take no damage from falling.",
		attunement : true
	},
	"ring of free action" : {
		name : "Ring of Free Action",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "While I wear this ring, difficult terrain doesn't cost me extra movement. In addition, magic can neither reduce my speed nor cause me to be paralyzed or restrained.",
		descriptionFull : "While you wear this ring, difficult terrain doesn't cost you extra movement. In addition, magic can neither reduce your speed nor cause you to be paralyzed or restrained.",
		attunement : true,
		savetxt : { immune : ["paralyzed", "restrained"] }
	},
	"ring of invisibility" : {
		name : "Ring of Invisibility",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "legendary",
		magicItemTable : "I",
		description : "While wearing this ring, I can turn invisible as an action. Anything I am wearing or carrying is invisible with me. I remain invisible until the ring is removed, until I attack or cast a spell, or until I use a bonus action to become visible again.",
		descriptionFull : "While wearing this ring, you can turn invisible as an action. Anything you are wearing or carrying is invisible with you. You remain invisible until the ring is removed, until you attack or cast a spell, or until you use a bonus action to become visible again.",
		attunement : true,
		action : [["action", " (start)"], ["action", " (stop)"]]
	},
	"ring of jumping" : {
		name : "Ring of Jumping",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "As a bonus action, I can use this ring to cast Jump on myself. That spell causes my jump distance to triple for 1 minute.",
		descriptionFull : "While wearing this ring, you can cast the Jump spell from it as a bonus action at will, but can target only yourself when you do so.",
		attunement : true,
		action : [["bonus action", ""]],
		spellcastingBonus : {
			name : "Self Only",
			spells : ["jump"],
			selection : ["jump"],
			firstCol : "atwill"
		},
		spellChanges : {
			"jump" : {
				time : "1 bns",
				range : "Self",
				changes : "The casting time is only a bonus action instead of an action and it can only affect the wearer."
			}
		}
	},
	"ring of mind shielding" : {
		name : "Ring of Mind Shielding",
		source : [["SRD", 236], ["D", 191]],
		type : "ring",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This ring makes me immune to magic that allows others to read my thoughts, determine if I'm lying, know my alignment or creature type, and telepathy only works if I allow it. As an action, I can cause it to become invisible as long as I wear it and not die, or visible again. If I die while wearing it, my soul enters it.",
		descriptionLong : "While wearing this ring, I'm immune to magic that allows others to read my thoughts, know my alignment or creature type, or determine if I'm lying. Also, telepathy only works if I allow it. As an action, I can cause it to become invisible for as long as I wear it and not die, or visible again. If I die while wearing it, my soul enters it unless it already houses a soul. I can remain in the ring or depart for the afterlife. As long as my soul is in the ring, I can telepathically communicate with any creature wearing it. A wearer can't prevent this telepathic communication.",
		descriptionFull : "While wearing this ring, you are immune to magic that allows other creatures to read your thoughts, determine whether you are lying, know your alignment, or know your creature type. Creatures can telepathically communicate with you only if you allow it.\n   You can use an action to cause the ring to become invisible until you use another action to make it visible, until you remove the ring, or until you die.\n   If you die while wearing the ring, your soul enters it, unless it already houses a soul. You can remain in the ring or depart for the afterlife. As long as your soul is in the ring, you can telepathically communicate with any creature wearing it. A wearer can't prevent this telepathic communication.",
		attunement : true,
		action : [["action", "Ring of Mind Shielding: (in)visible"]],
		savetxt : { immune : ["magic reading my thoughts, truthfullness, alignment, or type"] }
	},
	"ring of protection" : {
		name : "Ring of Protection",
		source : [["SRD", 237], ["D", 191]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "While wearing this ring, I gain a +1 bonus to AC and saving throws.",
		descriptionFull : "You gain a +1 bonus to AC and saving throws while wearing this ring.",
		attunement : true,
		extraAC : [{name : "Ring of Protection", mod : 1, magic : true, text : "I gain a +1 bonus to AC while attuned."}],
		addMod : [{ type : "save", field : "all", mod : 1, text : "While I wear the Ring of Protection, I gain a +1 bonus to all my saving throws." }]
	},
	"ring of regeneration" : {
		name : "Ring of Regeneration",
		source : [["SRD", 237], ["D", 191]],
		type : "ring",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While wearing this ring, I regain 1d6 hit points every 10 minutes, provided that I have at least 1 hit point. If I lose a body part, the ring causes the missing part to regrow and return to full functionality after 1d6+1 days if I have at least 1 hit point the whole time.",
		descriptionFull : "While wearing this ring, you regain 1d6 hit points every 10 minutes, provided that you have at least 1 hit point. If you lose a body part, the ring causes the missing part to regrow and return to full functionality after 1d6+1 days if you have at least 1 hit point the whole time.",
		attunement : true
	},
	"ring of resistance" : {
		name : "Ring of Resistance",
		source : [["SRD", 237], ["D", 192]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "I have resistance to one damage type while wearing this ring. The gem in the ring indicates the type of damage.",
		descriptionFull : "You have resistance to one damage type while wearing this ring. The gem in the ring indicates the type, which the GM chooses or determines randomly.\n\n" + toUni("d10\tDamage Type\tGem") +
		"\n   1\tAcid\t\tPearl" +
		"\n   2\tCold\t\tTourmaline" +
		"\n   3\tFire\t\tGarnet" +
		"\n   4\tForce\t\tSapphire" +
		"\n   5\tLightning   \tCitrine" +
		"\n   6\tNecrotic\t\tJet" +
		"\n   7\tPoison\t\tAmethyst" +
		"\n   8\tPsychic\t\tJade" +
		"\n   9\tRadiant\t\tTopaz" +
		"\n 10\tThunder\t\tSpinel",
		attunement : true,
		choices : ["Acid", "Cold", "Fire", "Force", "Lightning", "Necrotic", "Poison", "Psychic", "Radiant", "Thunder"],
		"acid" : {
			name : "Ring of Acid Resistance",
			description : "While I'm wearing this ring set with a pearl and I'm attuned to it, I have resistance to acid damage.",
			dmgres : ["Acid"]
		},
		"cold" : {
			name : "Ring of Cold Resistance",
			description : "While I'm wearing this ring set with a tourmaline and I'm attuned to it, I have resistance to cold damage.",
			dmgres : ["Cold"]
		},
		"fire" : {
			name : "Ring of Fire Resistance",
			description : "While I'm wearing this ring set with a garnet and I'm attuned to it, I have resistance to fire damage.",
			dmgres : ["Fire"]
		},
		"force" : {
			name : "Ring of Force Resistance",
			description : "While I'm wearing this ring set with a sapphire and I'm attuned to it, I have resistance to force damage.",
			dmgres : ["Force"]
		},
		"lightning" : {
			name : "Ring of Lightning Resistance",
			description : "While I'm wearing this ring set with a citrine and I'm attuned to it, I have resistance to lightning damage.",
			dmgres : ["Lightning"]
		},
		"necrotic" : {
			name : "Ring of Necrotic Resistance",
			description : "While I'm wearing this ring set with jet and I'm attuned to it, I have resistance to necrotic damage.",
			dmgres : ["Necrotic"]
		},
		"poison" : {
			name : "Ring of Poison Resistance",
			description : "While I'm wearing this ring set with an amethyst and I'm attuned to it, I have resistance to poison damage.",
			dmgres : ["Poison"]
		},
		"psychic" : {
			name : "Ring of Psychic Resistance",
			description : "While I'm wearing this ring set with jade and I'm attuned to it, I have resistance to psychic damage.",
			dmgres : ["Psychic"]
		},
		"radiant" : {
			name : "Ring of Radiant Resistance",
			description : "While I'm wearing this ring set with a topaz and I'm attuned to it, I have resistance to radiant damage.",
			dmgres : ["Radiant"]
		},
		"thunder" : {
			name : "Ring of Thunder Resistance",
			description : "While I'm wearing this ring set with a spinel and I'm attuned to it, I have resistance to thunder damage.",
			dmgres : ["Thunder"]
		}
	},
	"ring of shooting stars" : {
		name : "Ring of Shooting Stars",
		source : [["SRD", 237], ["D", 192]],
		type : "ring",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This ring has 6 charges and it regains 1d6 expended charges daily at dawn. While wearing this ring in dim light or darkness, I can cast Dancing Lights and Light at will. As an action, I can expend charges to cast Faerie Fire, Ball Lightning (see 3rd page notes), or Shooting Stars (see 3rd page notes). All spells DC 15.",
		descriptionFull : "While wearing this ring in dim light or darkness, you can cast Dancing Lights and Light from the ring at will. Casting either spell from the ring requires an action.\n   The ring has 6 charges for the following other properties. The ring regains 1d6 expended charges daily at dawn.\n   " + toUni("Faerie Fire") + ". You can expend 1 charge as an action to cast Faerie Fire from the ring.\n   " + toUni("Ball Lightning") + ". You can expend 2 charges as an action to create one to four 3-foot-diameter spheres of lightning. The more spheres you create, the less powerful each sphere is individually.\n   Each sphere appears in an unoccupied space you can see within 120 feet of you. The spheres last as long as you concentrate (as if concentrating on a spell), up to 1 minute. Each sphere sheds dim light in a 30-foot radius.\n   As a bonus action, you can move each sphere up to 30 feet, but no farther than 120 feet away from you. When a creature other than you comes within 5 feet of a sphere, the sphere discharges lightning at that creature and disappears. That creature must make a DC 15 Dexterity saving throw. On a failed save, the creature takes lightning damage based on the number of spheres you created (4 spheres = 2d4, 3 spheres = 2d6, 2 spheres = 5d4, 1 sphere = 4d12).\n   " + toUni("Shooting Stars") + ". \n   You can expend 1 to 3 charges as an action. For every charge you expend, you launch a glowing mote of light from the ring at a point you can see within 60 feet of you. Each creature within a 15-foot cube originating from that point is showered in sparks and must make a DC 15 Dexterity saving throw. taking 5d4 fire damage on a failed save, or half as much damage on a successful one.",
		attunement : true,
		toNotesPage : [{
			name : "Ball Lightning",
			popupName : "Ball Lightning function of Ring of Shooting Stars",
			page3notes : true,
			additional : "2 charges",
			note : [
				"As an action, I can create 1-4 spheres of lightning of 3-ft diameter within 120 ft",
				"These last while I concentrate, up to 1 min; As a bonus action, I can more them 30 ft",
				"When a creature (not me) comes within 5 ft of a sphere, it discharges and disappears",
				"The target must make a DC 15 Dex save or take lightning damage",
				"A sphere sheds dim light in 30-ft radius, its damage depends on the number created:",
				" \u2022 1 sphere: 4d12;    \u2022 2 spheres: 5d4;    \u2022 3 spheres: 2d6;    \u2022 4 spheres: 2d4"
			]
		}, {
			name : "Shooting Stars",
			popupName : "Shooting Stars function of Ring of Shooting Stars",
			page3notes : true,
			additional : "1-3 charges",
			note : [
				"As an action, I can launch one mote of light per expended charge to a point within 60 ft",
				"All creatures within a 15-ft cube originating from those points take 5d4 fire damage",
				"The targets can make a DC 15 Dexterity saving throw to halve the damage"
			]
		}],
		usages : 6,
		recovery : "dawn",
		additional : "regains 1d6",
		fixedDC : 15,
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "At will",
			spells : ["dancing lights", "light"],
			selection : ["dancing lights", "light"],
			firstCol : "atwill",
			times : 2
		}, {
			name : "1 charge",
			spells : ["faerie fire"],
			selection : ["faerie fire"],
			firstCol : 1
		}, {
			name : "Ball lightning (2 chr)",
			spells : ["burning hands"],
			selection : ["burning hands"],
			firstCol : 2
		}, {
			name : "Shooting stars (1-3 chr)",
			spells : ["magic missile"],
			selection : ["magic missile"],
			firstCol : "1+"
		}],
		spellChanges : {
			"burning hands" : { // change into Ball Lightning
				name : "Ball Lightning",
				source : [["SRD", 237], ["D", 192]],
				level : "",
				school : "Evoc",
				time : "1 a",
				range : "120 ft",
				components : "M\u0192",
				compMaterial : "Spells cast by magic items don't require any components other than the magic item itself.",
				duration : "Conc, 1 min",
				save : "Dex",
				description : "1-4 spheres; bns a move all 30 ft; 1st crea in 5 ft save or Lightning dmg (1:4d12, 2:5d4, 3:2d6, 4:2d4)",
				descriptionFull : "You can expend 2 charges from the ring of shooting starts as an action to create one to four 3-foot-diameter spheres of lightning. The more spheres you create, the less powerful each sphere is individually.\n   Each sphere appears in an unoccupied space you can see within 120 feet of you. The spheres last as long as you concentrate (as if concentrating on a spell), up to 1 minute. Each sphere sheds dim light in a 30-foot radius.\n   As a bonus action, you can move each sphere up to 30 feet, but no farther than 120 feet away from you. When a creature other than you comes within 5 feet of a sphere, the sphere discharges lightning at that creature and disappears. That creature must make a DC 15 Dexterity saving throw. On a failed save, the creature takes lightning damage based on the number of spheres you created (4 spheres = 2d4, 3 spheres = 2d6, 2 spheres = 5d4, 1 sphere = 4d12).",
				completeRewrite : true, // indicates that the changes here even overwrite the tooltip
				changes : "The listing of 'Burning Hands' has been completely changed to reflect the 'Ball Lightning' ability of the Ring of Shooting Stars. Even the information above is changed."
			},
			"magic missile" : { // change into Shooting Stars
				name : "Shooting Stars",
				source : [["SRD", 237], ["D", 192]],
				level : "",
				school : "Evoc",
				time : "1 a",
				range : "60 ft",
				components : "M\u0192",
				compMaterial : "Spells cast by magic items don't require any components other than the magic item itself.",
				duration : "Instantaneous",
				description : "15-ft cube in range per expended charge; all crea in cubes take 5d4 Fire damage, save halves",
				descriptionFull : "You can expend 1 to 3 charges from the ring of shooting starts as an action. For every charge you expend, you launch a glowing mote of light from the ring at a point you can see within 60 feet of you. Each creature within a 15-foot cube originating from that point is showered in sparks and must make a DC 15 Dexterity saving throw. taking 5d4 fire damage on a failed save, or half as much damage on a successful one.",
				completeRewrite : true, // indicates that the changes here even overwrite the tooltip
				changes : "The listing of 'Magic Missile' has been completely changed to reflect the 'Shooting Stars' ability of the Ring of Shooting Stars. Even the information above is changed."
			}
		}
	},
	"ring of spell storing" : { // contains contributions by Fourleafclov
		name : "Ring of Spell Storing",
		source : [["SRD", 237], ["D", 192]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "This ring can hold up to 5 levels of spell slots. Any creature can cast a spell into the ring using a 1-5th level spell slot, which is then stored if there is space. I can cast stored spells from the ring, freeing up space, using the original caster's attack bonus, save DC, spellcasting ability score, and the initial spell slot level.",
		descriptionFull : "This ring stores spells cast into it, holding them until the attuned wearer uses them. The ring can store up to 5 levels worth of spells at a time. When found, it contains 1d6-1 levels of stored spells chosen by the DM.\n   Any creature can cast a spell of 1st through 5th level into the ring by touching the ring as the spell is cast. The spell has no effect, other than to be stored in the ring. If the ring can't hold the spell, the spell is expended without effect. The level of the slot used to cast the spell determines how much space it uses.\n   While wearing this ring, you can cast any spell stored in it. The spell uses the slot level, spell save DC, spell attack bonus, and spellcasting ability of the original caster, but is otherwise treated as if you cast the spell. The spell cast from the ring is no longer stored in it, freeing up space.",
		attunement : true,
		usages : "5 lvls",
		recovery : " Cast"
	},
	"ring of spell turning" : {
		name : "Ring of Spell Turning",
		source : [["SRD", 237], ["D", 193]],
		type : "ring",
		rarity : "legendary",
		magicItemTable : "I",
		description : "While wearing this ring, I have advantage on saves against any spell that targets only me (not in an area of effect). In addition, if I roll a 20 for the save and the spell is 7th level or lower, the spell has no effect on me and instead targets the caster as if the caster had effectively targeted itself.",
		descriptionFull : "While wearing this ring, you have advantage on saving throws against any spell that targets only you (not in an area of effect). In addition, if you roll a 20 for the save and the spell is 7th level or lower, the spell has no effect on you and instead targets the caster, using the slot level, spell save DC, attack bonus, and spellcasting ability of the caster.",
		attunement : true,
		savetxt : { adv_vs : ["spells targeting only me"] }
	},
	"ring of swimming" : {
		name : "Ring of Swimming",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "I have a swimming speed of 40 feet while wearing this ring.",
		descriptionFull : "You have a swimming speed of 40 feet while wearing this ring.",
		speed : { swim : { spd : "fixed 40", enc : "fixed 30" } }
	},
	"ring of telekinesis" : {
		name : "Ring of Telekinesis",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While wearing this ring, I can cast Telekinesis at will, but I can target only an object up to 1000 lb that isn't being worn or carried. I can move it up to 30 ft in any direction, but not more than 60 ft away from me. I can exert fine control on it, such as manipulating a tool, opening a door, or pouring out its contents.",
		descriptionFull : "While wearing this ring, you can cast the Telekinesis spell at will, but you can target only objects that aren't being worn or carried.",
		attunement : true,
		spellcastingBonus : {
			name : "At will",
			spells : ["telekinesis"],
			selection : ["telekinesis"],
			firstCol : "atwill"
		},
		spellChanges : {
			"telekinesis" : {
				description : "Move 1 object up to 1000 lb 30 ft and exert fine control over it; as 1 a following rounds",
				changes : "The Ring of Telekinesis only allows manupilation of unattended objects."
			}
		}
	},
	"ring of the ram" : {
		name : "Ring of the Ram",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "This ring has 3 charges, regaining 1d3 charges daily at dawn. As an action, I can use charges to make a ranged attack on a target in 60 ft, with a +7 to hit, doing 2d10 force damage per charge and pushing it 5 ft per charge. If I target an unattended object, I can try to break it with a +5 per charge on the Strength check.",
		descriptionFull : "This ring has 3 charges, and it regains 1d3 expended charges daily at dawn. While wearing the ring, you can use an action to expend 1 to 3 of its charges to attack one creature you can see within 60 feet of you. The ring produces a spectral ram's head and makes its attack roll with a +7 bonus. On a hit, for each charge you spend, the target takes 2d10 force damage and is pushed 5 feet away from you.\n   Alternatively, you can expend 1 to 3 of the ring's charges as an action to try to break an object you can see within 60 feet of you that isn't being worn or carried. The ring makes a Strength check with a +5 bonus for each charge you spend.",
		attunement : true,
		weaponsAdd : ["Ring of the Ram"],
		weaponOptions : {
			regExpSearch : /^(?=.*ring)(?=.*ram).*$/i,
			name : "Ring of the Ram",
			source : [["SRD", 238], ["D", 193]],
			ability : 0,
			type : "Magic Item",
			damage : [2, 10, "force"],
			range : "60 ft",
			description : "Damage is per charge used, also pushes 5 ft away per charge used",
			abilitytodamage : false,
			modifiers : [7, ""]
		}
	},
	"ring of three wishes" : {
		name : "Ring of Three Wishes",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "legendary",
		magicItemTable : "I",
		description : "While wearing this ring, I can use an action to expend 1 of its 3 charges to cast the Wish spell from it. The ring becomes nonmagical when I use the last charge.",
		descriptionFull : "While wearing this ring, you can use an action to expend 1 of its 3 charges to cast the Wish spell from it. The ring becomes nonmagical when you use the last charge.",
		usages : 3,
		recovery : "Never",
		spellFirstColTitle : "Ch",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["wish"],
			selection : ["wish"],
			firstCol : 1
		}
	},
	"ring of warmth" : {
		name : "Ring of Warmth",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this ring, I have resistance to cold damage. In addition, I and everything I wear and carry are unharmed by temperatures as low as -50 \u00B0F.",
		descriptionFull : "While wearing this ring, you have resistance to cold damage. In addition, you and everything you wear and carry are unharmed by temperatures as low as -50 degrees Fahrenheit.",
		attunement : true,
		dmgres : ["Cold"]
	},
	"ring of water walking" : {
		name : "Ring of Water Walking",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While wearing this ring, I can stand on and move across any liquid surface as if it were solid ground.",
		descriptionFull : "While wearing this ring, you can stand on and move across any liquid surface as if it were solid ground."
	},
	"ring of x-ray vision" : {
		name : "Ring of X-ray Vision",
		source : [["SRD", 238], ["D", 193]],
		type : "ring",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action, I can speak this ring's command word to make me see into and through solid matter as if it is transparent and light passes through for 1 minute within 30 ft (1 ft stone, 1 inch metal, 3 ft wood/dirt, not lead). When I use this again before a long rest, I must make a DC 15 Con save or gain 1 level of exhaustion.",
		descriptionFull : "While wearing this ring, you can use an action to speak its command word. When you do so, you can see into and through solid matter for 1 minute. This vision has a radius of 30 feet. To you, solid objects within that radius appear transparent and don't prevent light from passing through them. The vision can penetrate 1 foot of stone, 1 inch of common metal, or up to 3 feet of wood or dirt. Thicker substances block the vision, as does a thin sheet of lead.\n   Whenever you use the ring again before taking a long rest, you must succeed on a DC 15 Constitution saving throw or gain one level of exhaustion.",
		attunement : true,
		action : [["action", ""]],
		usages : 1,
		recovery : "long rest",
		additional : "more uses: DC 15 Con save"
	},
	"robe of eyes" : { // contains contributions by SoilentBrad
		name : "Robe of Eyes",
		source : [["SRD", 238], ["D", 193]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "This robe gives me adv. on sight-based Perception checks, the ability to see in all directions, see invisible/ethereal out to 120 ft, darkvision 120 ft. I can't close or avert my eyes. If Light is cast on it or Daylight within 5 ft of it, I'm blinded for 1 min, Con save (DC 11-Light, 15-Daylight) at the end of my each of my turns to end.",
		descriptionFull : "This robe is adorned with eyelike patterns. While you wear the robe, you gain the following benefits:\n \u2022 The robe lets you see in all directions, and you have advantage on Wisdom (Perception) checks that rely on sight.\n \u2022 You have darkvision out to a range of 120 feet.\n \u2022 You can see invisible creatures and objects, as well as see into the Ethereal Plane, out to a range of 120 feet.\n\nThe eyes on the robe can't be closed or averted. Although you can close or avert your own eyes, you are never considered to be doing so while wearing this robe.\n   A Light spell cast on the robe or a Daylight spell cast within 5 feet of the robe causes you to be blinded for 1 minute. At the end of each of your turns, you can make a Constitution saving throw (DC 11 for Light or DC 15 for Daylight), ending the blindness on a success.",
		attunement : true,
		weight : 4,
		vision: [
			["Darkvision", "fixed 120"],
			["See invisible/ethereal", "fixed 120"],
			["Adv. on Perception checks based on sight", 0]
		]
	},
	"robe of scintillating colors" : { // contains contributions by SoilentBrad
		name : "Robe of Scintillating Colors",
		source : [["SRD", 238], ["D", 194]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This robe has 3 charges, regaining 1d3 at dawn. As an action, I can use 1 charge to shed 30-ft radius bright light, 30 ft dim light until the end of my next turn, causing all that see me to have disadv. on attacks against me. All within 30 ft that can see me at activation make a DC 15 Wis save or stunned until effect ends.",
		descriptionFull : "This robe has 3 charges, and it regains 1d3 expended charges daily at dawn. While you wear it, you can use an action and expend 1 charge to cause the garment to display a shifting pattern of dazzling hues until the end of your next turn. During this time, the robe sheds bright light in a 30-foot radius and dim light for an additional 30 feet. Creatures that can see you have disadvantage on attack rolls against you. In addition, any creature in the bright light that can see you when the robe's power is activated must succeed on a DC 15 Wisdom saving throw or become stunned until the effect ends.",
		attunement : true,
		weight : 4,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		action : [["action", ""]]
	},
	"robe of stars" : { // contains contributions by SoilentBrad
		name : "Robe of Stars",
		source : [["SRD", 239], ["D", 194]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This dark robe gives a +1 bonus to saving throws. It has 6 large stars embroidered on it, that I can use to cast Magic Missile at 5th-level. 1d6 used stars reappear at dusk. As an action, I can enter or exit the Astral Plane along with all I'm wearing and carrying. I can return as an action, appearing in the spot I left.",
		descriptionFull : "This black or dark blue robe is embroidered with small white or silver stars. You gain a +1 bonus to saving throws while you wear it.\n   Six stars, located on the robe's upper front portion, are particularly large. While wearing this robe, you can use an action to pull off one of the stars and use it to cast Magic Missile as a 5th-level spell. Daily at dusk, 1d6 removed stars reappear on the robe.\n   While you wear the robe, you can use an action to enter the Astral Plane along with everything you are wearing and carrying. You remain there until you use an action to return to the plane you were on. You reappear in the last space you occupied, or if that space is occupied, the nearest unoccupied space.",
		attunement : true,
		weight : 4,
		action : [["action", ""]],
		usages : 6,
		recovery : "Dusk",
		additional : "regains 1d6",
		addMod: [{ type: "save", field: "all", mod: 1, text: "While wearing the Robe of Stars, I gain a +1 bonus to all my saving throws." }],
		spellFirstColTitle: "Ch",
		spellcastingBonus: {
			name: "1 charge",
			spells: ["magic missile"],
			selection: ["magic missile"],
			firstCol: 1
		},
		spellChanges : {
			"magic missile" : {
				description : "8 darts hit creature(s) I can see for 1d4+1 Force dmg per dart",
				changes : "Magic Missile cast from the Robe of Stars is always at 5th-level."
			}
		}
	},
	"robe of the archmagi" : { // contains contributions by SoilentBrad
		name : "Robe of the Archmagi",
		source : [["SRD", 239], ["D", 194]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "I can only attune to a robe of the archmagi that matches my alignment: white for good, gray for neutral, black for evil. I gain these benefits while wearing the robe: if unarmored, my AC is 15 + my Dex mod; I have adv on saves against spells and magical effects; my spell save DC and spell attack bonus increase by 2.",
		descriptionFull : "This elegant garment is made from exquisite cloth of white, gray, or black and adorned with silvery runes. The robe's color corresponds to the alignment for which the item was created. A white robe was made for good, gray for neutral, and black for evil. You can't attune to a robe of the archmagi that doesn't correspond to your alignment.\n   You gain these benefits while wearing the robe:\n \u2022 If you aren't wearing armor, your base Armor Class is 15 + your Dexterity modifier.\n \u2022 You have advantage on saving throws against spell and other magical effects.\n \u2022 Your spell save DC and spell attack bonus each increase by 2.",
		attunement : true,
		weight : 4,
		savetxt : { adv_vs : ["spells", "magical effects"] },
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type != "prepare") return 2;
				},
				"While wearing the Robe of the Archmagi my spell save DC and spell attack bonus each increase by 2."
			]
		},
		addArmor: "Robe of the Archmagi",
		armorOptions: {
			regExpSearch: /^(?=.*robe)(?=.*(archmage|archmagi)).*$/i,
			name : "Robe of the Archmagi",
			source : [["SRD", 239], ["D", 194]],
			ac : 15,
			weight : 4
		},
		choices : ["Good", "Neutral", "Evil"],
		"good" : {
			description : "While wearing this elegant robe made from exquisite white cloth adorned with silvery runes, I have advantage on saves against spells and magical effects and add +2 to both my spell save DC and spell attack rolls. Also, if I'm not wearing armor, it makes my base AC 15 + my Dexterity modifier.",
			prerequisite : "Requires attunement by a good sorcerer, warlock, or wizard",
			prereqeval : function(v) { return (classes.known.sorcerer || classes.known.warlock || classes.known.wizard) && (/good/i).test(What("Alignment")); }
		},
		"neutral" : {
			description : "While wearing this elegant robe made from exquisite gray cloth adorned with silvery runes, I have advantage on saves against spells and magical effects and add +2 to both my spell save DC and spell attack rolls. Also, if I'm not wearing armor, it makes my base AC 15 + my Dexterity modifier.",
			prerequisite : "Requires attunement by a neutral sorcerer, warlock, or wizard",
			prereqeval : function(v) { return (classes.known.sorcerer || classes.known.warlock || classes.known.wizard) && !(/good|evil/i).test(What("Alignment")); }
		},
		"evil" : {
			description : "While wearing this elegant robe made from exquisite black cloth adorned with silvery runes, I have advantage on saves against spells and magical effects and add +2 to both my spell save DC and spell attack rolls. Also, if I'm not wearing armor, it makes my base AC 15 + my Dexterity modifier.",
			prerequisite : "Requires attunement by an evil sorcerer, warlock, or wizard",
			prereqeval : function(v) { return (classes.known.sorcerer || classes.known.warlock || classes.known.wizard) && (/evil/i).test(What("Alignment")); }
		}
	},
	"robe of useful items" : {
		name : "Robe of Useful Items",
		source : [["SRD", 239], ["D", 195]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "As an action while donned, I can detach one patch, causing it to become the thing it represents. The robe becomes ordinary if it runs out of patches. It has two each of: dagger, bullseye lantern (filled and lit), steel mirror, 10-ft pole, 50 ft hempen rope, sack. In addition, it has 4d4 patches that are determined by the DM.",
		descriptionFull : "This robe has cloth patches of various shapes and colors covering it. While wearing the robe. you can use an action to detach one of the patches, causing it to become the object or creature it represents. Once the last patch is removed, the robe becomes an ordinary garment.\n\nThe robe has two of each of the following patches:\n \u2022 Dagger\n \u2022 Bullseye lantern (filled and lit)\n \u2022 Steel mirror\n \u2022 10-foot pole\n \u2022 Hempen rope (50 feet, coiled)\n \u2022 Sack\n\nIn addition, the robe has 4d4 other patches. The DM chooses the patches or determines them randomly.\n\n" + toUni("d100\tPatch") + "\n01-08\tBag of 100 gp\n09-15\tSilver coffer (1 foot long, 6 inches wide and deep) worth 500 gp\n16-22\tIron door (up to 10 feet wide and 10 feet high, barred on one side of your choice), which you can place in an opening you can reach; it conforms to fit the opening, attaching and hinging itself\n23-30\t10 gems worth 100 gp each\n31-44\tWooden ladder (24 feet long)\n45-51\tA riding horse with saddle bags\n52-59\tPit (a cube 10 feet on a side), which you can place on the ground within 10 feet of you\n60-68\t4 potions of healing\n69-75\tRowboat (12 feet long)\n76-83\tSpell scroll containing one spell of 1st to 3rd level\n84-90\t2 mastiffs\n91-96\tWindow (2 feet by 4 feet, up to 2 feet deep), which you can place on a vertical surface you can reach\n97-00\tPortable ram",
		weight : 4,
		action : ["action", ""]
	},
	"rod of absorption" : {
		name : "Rod of Absorption",
		source : [["SRD", 239], ["D", 195]],
		type : "rod",
		rarity : "very rare",
		magicItemTable : "H",
		description : "As a reaction while holding this rod, I can use it to absorb a spell targeting only me, without an area of effect. It has no effect and its spell slot level is stored in the rod. I can expend these levels as if they are spell slots to power my own spells up to 5th-level. Once the rod has absorbed 50 levels, it can absorb no more.",
		descriptionLong : "As a reaction while holding this rod, I can use it to absorb a spell targeting only me and without an area of effect. The spell has no effect and its energy is stored in the rod. This energy has the same level as the spell when it was cast. Once the rod has absorbed 50 levels, it can absorb no more. I can expend these levels as if they are spell slots to power my own spells up to 5th-level and only for spell slot levels I have access to otherwise. For example, I can expend 3 levels to cast one of my spells using a 3rd-level spell slot. When the rod can't absorb any more levels and has no energy left, it becomes nonmagical.",
		descriptionFull : "While holding this rod, you can use your reaction to absorb a spell that is targeting only you and not with an area of effect. The absorbed spell's effect is canceled, and the spell's energy\u2014not the spell itself\u2014is stored in the rod. The energy has the same level as the spell when it was cast. The rod can absorb and store up to 50 levels of energy over the course of its existence. Once the rod absorbs 50 levels of energy, it can't absorb more. If you are targeted by a spell that the rod can't store, the rod has no effect on that spell.\n   When you become attuned to the rod, you know how many levels of energy the rod has absorbed over the course of its existence, and how many levels of spell energy it currently has stored.\n   If you are a spellcaster holding the rod, you can convert energy stored in it into spell slots to cast spells you have prepared or know. You can create spell slots only of a level equal to or lower than your own spell slots, up to a maximum of 5th level. You use the stored levels in place of your slots, but otherwise cast the spell as normal. For example, you can use 3 levels stored in the rod as a 3rd-level spell slot.\n   A newly found rod has 1d10 levels of spell energy stored in it already. A rod that can no longer absorb spell energy and has no energy remaining becomes nonmagical.",
		attunement : true,
		weight : 2,
		action : [["reaction", ""]],
		extraLimitedFeatures : [{
			name : "Rod of Absorption [Total Levels Absorbed]",
			usages : 50,
			recovery : "Never"
		}, {
			name : "Rod of Absorption [Stored Levels]",
			usages : "1d10",
			recovery : "Never"
		}],
	},
	"rod of alertness" : { // contains contributions by SoilentBrad
		name : "Rod of Alertness",
		source : [["SRD", 240], ["D", 196]],
		type : "rod",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While holding this rod, I have adv. on initiative and Perception and can cast certain spells. As an action once per dawn, I can plant it in the ground, making it shed 60-ft radius bright light, dim for another 60 ft for 10 min. In the bright light, my allies and I gain +1 AC, +1 bonus to saves, and can sense invisible hostiles.",
		descriptionLong : "While holding this rod, I have advantage on my initiative and Wisdom (Perception) checks. As an action, I can use it to cast either Detect Evil and Good, Detect Magic, Detect Poison and Disease, or See Invisibility. As an action once per dawn, I can plant the rod's haft in the ground, making its head shed bright light in a 60-ft radius and dim light for another 60 ft. This lasts 10 minutes or until a creature pulls the rod from the ground as an action. While in the bright light, my allies and I gain +1 bonus to AC and saving throws and can sense the location of any invisible hostile creatures that are also within the bright light.",
		descriptionFull : "This rod has a flanged head and the following properties.\n   " + toUni("Alertness") + ". While holding the rod, you have advantage on Wisdom (Perception) checks and on rolls for initiative.\n   " + toUni("Spells") + ". While holding the rod, you can use an action to cast one of the following spells from it: Detect Evil and Good, Detect Magic, Detect Poison and Disease, or See Invisibility.\n   " + toUni("Protective Aura") + ". As an action, you can plant the haft end of the rod in the ground, whereupon the rod's head sheds bright light in a 60-foot radius and dim light for an additional 60 feet. While in that bright light, you and any creature that is friendly to you gain a +1 bonus to AC and saving throws and can sense the location of any invisible hostile creature that is also in the bright light.\n   The rod's head stops glowing and the effect ends after 10 minutes, or when a creature uses an action to pull the rod from the ground. This property can't be used again until the next dawn.",
		attunement : true,
		weight : 2,
		usages : 1,
		recovery : "dawn",
		limfeaname : "Rod of Alertness (Plant in Ground)",
		advantages : [["Initiative", true], ["Perception", true]],
		vision : [["Adv. on Perception checks", 0]],
		action : [["action", ""]],
		spellcastingBonus: [{
			name: "Robe of Alertness",
			spells: ["detect evil and good", "detect magic", "detect poison and disease", "see invisibility"],
			selection: ["detect evil and good", "detect magic", "detect poison and disease", "see invisibility"],
			times: 4
		}]
	},
	"rod of lordly might" : {
		name : "Rod of Lordly Might",
		source : [["SRD", 240], ["D", 196]],
		type : "rod",
		rarity : "legendary",
		magicItemTable : "I",
		description : "This rod functions as a +3 mace. As a bonus action, I can press one of the six buttons on the rod, changing it. The rod can also drain life, paralyze, and terrify, each once per dawn. See the notes page for what the different buttons do and how the functions work that can each be used once per dawn.",
		descriptionFull : "This rod has a flanged head, and it functions as a magic mace that grants a +3 bonus to attack and damage roll made with it. The rod has properties associated with six different buttons that are set in a row along the haft. It has three other properties as well, detailed below.\n   " + toUni("Six Buttons") + ". You can press one of the rod's six buttons as a bonus action. A button's effect lasts until you push a different button or until you push the same button again, which causes the rod to revert to its normal form.\n   If you press " + toUni("button 1") + ", the rod becomes a flame tongue as a fiery blade sprouts from the end opposite the rod's flanged head (you choose the type of sword).\n   If you press " + toUni("button 2") + ", the rod's flanged head folds down and two crescent-shaped blades spring out, transforming the rod into a magic battleaxe that grants a +3 bonus to attack and damage rolls made with it.\n   If you press " + toUni("button 3") + ", the rod's flanged head folds down, a spear point springs from the rod's tip, and the rod's handle lengthens into a 6-foot haft, transforming the rod into a magic spear that grants a +3 bonus to attack and damage rolls made with it.\n   If you press " + toUni("button 4") + ", the rod transforms into a climbing pole up to 50 feet long, as you specify. In surfaces as hard as granite, a spike at the bottom and three hooks at the top anchor the pole. Horizontal bars 3 inches long fold out from the sides, 1 foot apart, forming a ladder. The pole can bear up to 4,000 pounds. More weight or lack of solid anchoring causes the rod to revert to its normal form.\n   If you press " + toUni("button 5") + ", the rod transforms into a handheld battering ram and gram its user a +10 bonus to Strength checks made to break through doors, barricades, and other barriers.\n   If you press " + toUni("button 6") + ", the rod assumes or remains in its normal form and indicates magnetic north. (Nothing happens if this function of the rod is used in a location that has no magnetic north.) The rod also gives you knowledge of your approximate depth beneath the ground or your height above it.\n   " + toUni("Drain Life") + ". When you hit a creature with a melee attack using the rod, you can force the target to make a DC 17 Constitution saving throw. On a failure, the target rakes an extra 4d6 necrotic damage, and you regain a number of hit points equal to half that necrotic damage. This property can't be used again until the next dawn.\n   " + toUni("Paralyze") + ". When you hit a creature with a melee attack using the rod, you can force the target to make a DC 17 Strength saving throw. On a failure, the target is paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on a success. This property can't be used again until the next dawn.\n   " + toUni("Terrify") + ". While holding the rod, you can use an action to force each creature you can see within 30 feet of you to make a DC 17 Wisdom saving throw. On a failure, a target is frightened of you for 1 minute. A frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. This property can't be used again until the next dawn.",
		attunement : true,
		weight : 2,
		action: [["bonus action", " (press button)"], ["action", " (Terrify)"]],
		extraLimitedFeatures : [{
			name : "Rod of Lordly Might (Drain Life)",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Rod of Lordly Might (Paralyze)",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Rod of Lordly Might (Terrify)",
			usages : 1,
			recovery : "dawn"
		}],
		weaponOptions : [{
			baseWeapon : "battleaxe",
			regExpSearch : /^(?=.*rod)(?=.*lordly)(?=.*might)(?=.*axe).*$/i,
			name : "Rod of Lordly Might (Axe)",
			source : [["SRD", 240], ["D", 196]],
			modifiers : [3,3]
		}, {
			baseWeapon : "mace",
			regExpSearch : /^(?=.*rod)(?=.*lordly)(?=.*might)(?=.*mace).*$/i,
			name : "Rod of Lordly Might (Mace)",
			source : [["SRD", 240], ["D", 196]],
			modifiers : [3,3]
		}, {
			baseWeapon : "spear",
			regExpSearch : /^(?=.*rod)(?=.*lordly)(?=.*might)(?=.*spear).*$/i,
			name : "Rod of Lordly Might (Spear)",
			source : [["SRD", 240], ["D", 196]],
			modifiers : [3,3]
		}],
		toNotesPage : [{
			name : "Buttons and Other Functions",
			popupName : "Rod of Lordly Might's functions",
			note : [
				"The rod of lordly might has a flanged head, and it functions as a magic mace that grants a +3 bonus to attack and damage roll made with it.",
				"As a bonus action, I can press one of the six different buttons that are set in a row along the haft of the rod. A button's effect lasts until a different button is pushed, or until the same button is pushed again, whereupon it reverts to its normal form.",
				"\u2022 1st button. A fiery blade sprouts from the end opposite the rod's flanged head. These flames shed bright light in a 40-ft radius and dim light for an additional 40 ft. It now functions as a sword (I can choose which type) that deals an extra 2d6 fire damage to any target it hits. [Write \"lordly might\" in the name of a sword in the attack section to have this damage added to the attack's description, for example \"Rod of Lordly Might (Greatsword)\".]",
				"\u2022 2nd button. The rod's flanged head folds down and two crescent-shaped blades spring out, transforming the rod into a magic battleaxe that grants a +3 bonus to attack and damage rolls made with it.",
				"\u2022 3rd button. The rod's flanged head folds down, a spear point springs from the rod's tip, and the rod's handle lengthens into a 6-foot haft, transforming the rod into a magic spear that grants a +3 bonus to attack and damage rolls made with it.",
				"\u2022 4th button. The rod transforms into a climbing pole up to 50 ft long, as I specify. In surfaces as hard as granite, a spike at the bottom and three hooks at the top anchor the pole. Horizontal bars 3 inch long fold out from the sides, 1 ft apart, forming a ladder. The pole can bear up to 4000 lb. More weight or lack of solid anchoring causes the rod to revert to its normal form.",
				"\u2022 5th button. The rod transforms into a handheld battering ram and gram its user a +10 bonus to Strength checks made to break through doors, barricades, and other barriers.",
				"\u2022 6th button. The rod assumes or remains in its normal form and indicates magnetic north. (Nothing happens if this function of the rod is used in a location that has no magnetic north.) The rod also gives me knowledge of my approximate depth beneath the ground or my height above it.",
				"The rod also has three functions that work independent of the buttons.",
				"\u2022 Drain Life. When I hit a creature with a melee attack using the rod, I can force the target to make a DC 17 Constitution saving throw. On a failure, the target rakes an extra 4d6 necrotic damage, and I regain a number of hit points equal to half that necrotic damage. This property can't be used again until the next dawn.",
				"\u2022 Paralyze. When I hit a creature with a melee attack using the rod, I can force the target to make a DC 17 Strength saving throw. On a failure, the target is paralyzed for 1 minute. The target can repeat the saving throw at the end of each of its turns, ending the effect on a success. This property can't be used again until the next dawn.",
				"\u2022 Terrify. As an action while holding the rod, I can force each creature I can see within 30 ft of me to make a DC 17 Wisdom saving throw. On a failure, a target is frightened of me for 1 minute. A frightened target can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success. This property can't be used again until the next dawn."
			]
		}],
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*lordly)(?=.*might).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + '+2d6 fire damage';
					}
				},
				'If I include the words "Lordly Might" in a the name of a sword, it will be treated as the magic weapon Flame Tongue. It adds +2d6 fire damage on a hit and shines light.'
			]
		}
	},
	"rod of rulership" : {
		name : "Rod of Rulership",
		source : [["SRD", 240], ["D", 197]],
		type : "rod",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action once per dawn, I can use this rod to have chosen creatures I can see within 120 ft make a DC 15 Wis save or be charmed by me for 8 hours. While charmed in this way, a target regards me as its trusted leader. It stops being charmed if my allies or I harm it or it is commanded to go against its nature.",
		descriptionFull : "You can use an action to present the rod and command obedience from each creature of your choice that you can see within 120 feet of you. Each target must succeed on a DC 15 Wisdom saving throw or be charmed by you for 8 hours. While charmed in this way, the creature regards you as its trusted leader. If harmed by you or your companions, or commanded to do something contrary to its nature, a target ceases to be charmed in this way. The rod can't be used again until the next dawn.",
		attunement : true,
		weight : 2,
		action : [["action", ""]],
		usages : 1,
		recovery : "dawn"
	},
	"rod of security" : {
		name : "Rod of Security",
		source : [["SRD", 241], ["D", 197]],
		type : "rod",
		rarity : "very rare",
		magicItemTable : "H",
		description : "As an action once per 10 days, I can transport myself and up to 199 willing others I can see to an extraplanar paradise for 200 days divided by the number of creatures or until I end it as an action. Creatures within the paradise don't age, have enough to eat and drink, and regain HP every hour as if having spent 1 HD.",
		descriptionFull : "While holding this rod, you can use an action to activate it. The rod then instantly transports you and up to 199 other willing creatures you can see to a paradise that exists in an extraplanar space. You choose the form that the paradise takes. It could be a tranquil garden, lovely glade, cheery tavern, immense palace, tropical island, fantastic carnival, or whatever else you can imagine. Regardless of its nature, the paradise contains enough water and food to sustain its visitors. Everything else that can be interacted with inside the extraplanar space can exist only there. For example, a flower picked from a garden in the paradise disappears if it is taken outside the extraplanar space.\n   For each hour spent in the paradise, a visitor regains hit points as if it had spent 1 Hit Die. Also, creatures don't age while in the paradise, although time passes normally. Visitors can remain in the paradise for up to 200 days divided by the number of creatures present (round down).\n   When the time runs out or you use an action to end it, all visitors reappear in the location they occupied when you activated the rod, or an unoccupied space nearest that location. The rod can't be used again until ten days have passed.",
		weight : 2,
		usages: 1,
		recovery: "10 days",
		action : [["action", ""]]
	},
	"rope of climbing" : {
		name : "Rope of Climbing",
		source : [["SRD", 241], ["D", 197]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This 60 ft silk rope can hold 3000 lb. As an action while I hold one end of it, I can animate it with its command word. Then, as a bonus action, I can command its other end to: start/stop moving (10 ft per turn), (un)fasten itself, coil itself, or (un)knot itself (50 ft length, adv. to climb it). It has AC 20, 20 HP, heals 1 HP/5 min.",
		descriptionLong : "This 60-ft length of silk rope can hold up to 3000 lb. As an action while holding one end of the rope, I can speak the command word to animate it. Then, as a bonus action, I can command the other end to move 10 ft to a chosen destination up to its maximum length away, moving 10 ft on each of my turns until it reaches it. I can also use the bonus action to tell it to stop moving, to fasten itself securely, to unfasten itself, to knot or unknot itself, or to coil itself for carrying. While knotted, the rope shortens to 50 ft and grants advantage to climb it. The rope has AC 20 and 20 HP, regaining 1 HP per 5 minutes.",
		descriptionFull : "This 60-foot length of silk rope weighs 3 pounds and can hold up to 3,000 pounds. If you hold one end of the rope and use an action to speak the command word, the rope animates. As a bonus action, you can command the other end to move toward a destination you choose. That end moves 10 feet on your turn when you first command it and 10 feet on each of your turns until reaching its destination, up to its maximum length away, or until you tell it to stop. You can also tell the rope to fasten itself securely to an object or to unfasten itself, to knot or unknot itself, or to coil itself for carrying.\n   If you tell the rope to knot, large knots appear at 1-foot intervals along the rope. While knotted, the rope shortens to a 50-foot length and grants advantage on checks made to climb it.\n   The rope has AC 20 and 20 hit points. It regains 1 hit point every 5 minutes as long as it has at least 1 hit point. If the rope drops to 0 hit points, it is destroyed.",
		weight : 3,
		action : [["action", " (animate)"], ["bonus action", " (move/fasten/knot/coil)"]]
	},
	"rope of entanglement" : {
		name : "Rope of Entanglement",
		source : [["SRD", 241], ["D", 197]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "As an action while I hold one end of this 30 ft rope, I can speak its command word to have a creature I can see within 20 ft make a DC 15 Dex save or be restrained by the rope. I can release it as a bonus action. The creature can, as an action, escape with a DC 15 Dex/Str check. The rope has AC 20, 20 HP, heals 1 HP/5 min.",
		descriptionFull : "This rope is 30 feet long and weighs 3 pounds. If you hold one end of the rope and use an action to speak its command word, the other end darts forward to entangle a creature you can see within 20 feet of you. The target must succeed on a DC 15 Dexterity saving throw or become restrained.\n   You can release the creature by using a bonus action to speak a second command word. A target restrained by the rope can use an action to make a DC 15 Strength or Dexterity check (target's choice). On a success, the creature is no longer restrained by the rope.\n   The rope has AC 20 and 20 hit points. It regains 1 hit point every 5 minutes as long as it has at least 1 hit point. If the rope drops to 0 hit points, it is destroyed.",
		weight : 3,
		action : [["action", " (entangle)"], ["bonus action", " (release)"]],
		weaponsAdd : ["Rope of Entanglement"],
		weaponOptions : {
			regExpSearch : /^(?=.*rope)(?=.*entanglement).*$/i,
			name : "Rope of Entanglement",
			source : [["SRD", 241], ["D", 197]],
			ability : 0,
			type : "Magic Item",
			damage : ["\u2015", "", "Restrained"],
			range : "20 ft",
			description : "Dexterity saving throw or restrained; DC 15 Strength or Dexterity check to escape",
			abilitytodamage : false,
			weight : 3,
			modifiers : ["dc+7", 0]
		}
	},
	"scarab of protection" : {
		name : "Scarab of Protection",
		source : [["SRD", 241], ["D", 199]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "This beetle-shaped medallion gives me advantage on saves against spells. If I fail a save against a necromancy spell or an effect from an undead creature, I can use my reaction to expend 1 charge and succeed on the save instead. The scarab has 12 charges and crumbles into powder when the last is used. ",
		descriptionFull : "If you hold this beetle-shaped medallion in your hand for 1 round, an inscription appears on its surface revealing its magical nature. It provides two benefits while it is on your person:\n \u2022 You have advantage on saving throws against spells.\n \u2022 The scarab has 12 charges. If you fail a saving throw against a necromancy spell or a harmful effect originating from an undead creature, you can use your reaction to expend 1 charge and turn the failed save into a successful one. The scarab crumbles into powder and is destroyed when its last charge is expended.",
		attunement : true,
		savetxt : { adv_vs : ["spells"] },
		usages : 12,
		recovery : "Never",
		action : [["reaction", ""]]
	},
	"scimitar of speed" : {
		name : "Scimitar of Speed",
		source : [["SRD", 241], ["D", 199]],
		type : "weapon (scimitar)",
		rarity : "very rare",
		magicItemTable : "H",
		description : "I gain a +2 bonus to attack and damage rolls made with this magic weapon. In addition, I can make one attack with it as a bonus action on each of my turns.",
		descriptionFull : "You gain a +2 bonus to attack and damage rolls made with this magic weapon. In addition, you can make one attack with it as a bonus action on each of your turns.",
		attunement : true,
		weight : 3,
		action : [["bonus action", ""]],
		weaponsAdd : ["Scimitar of Speed"],
		weaponOptions : {
			baseWeapon : "scimitar",
			regExpSearch : /^(?=.*scimitar)(?=.*speed).*$/i,
			name : "Scimitar of Speed",
			source : [["SRD", 241], ["D", 199]],
			description : "Finesse, light; Extra attack as bonus action",
			modifiers : [2, 2]
		}
	},
	"shield, +1, +2, or +3" : {
		name : "Shield, +1, +2, or +3",
		source : [["SRD", 240], ["D", 200]],
		type : "shield",
		description : "While holding this shield, I have a bonus to AC. This bonus is in addition to the shield's normal bonus to AC. The bonus is determined by the rarity of the shield: uncommon (+1), rare (+2), or very rare (+3).",
		descriptionFull : "While holding this shield, you have a bonus to AC. This bonus is in addition to the shield's normal bonus to AC. The bonus is determined by the rarity of the shield: uncommon (+1), rare (+2), or very rare (+3).",
		allowDuplicates : true,
		choices : ["+1 Shield (uncommon)", "+2 Shield (rare)", "+3 Shield (very rare)"],
		"+1 shield (uncommon)" : {
			name : "Shield +1",
			nameTest : "+1 Shield",
			rarity : "uncommon",
			magicItemTable : "F",
			description : "While holding this shield, I have a +1 bonus to AC. This bonus is in addition to the shield's normal bonus to AC.",
			allowDuplicates : true,
			shieldAdd : "+1 Shield"
		},
		"+2 shield (rare)" : {
			name : "Shield +2",
			nameTest : "+2 Shield",
			rarity : "rare",
			magicItemTable : "G",
			description : "While holding this shield, I have a +2 bonus to AC. This bonus is in addition to the shield's normal bonus to AC.",
			allowDuplicates : true,
			shieldAdd : "+2 Shield"
		},
		"+3 shield (very rare)" : {
			name : "Shield +3",
			nameTest : "+3 Shield",
			rarity : "very rare",
			magicItemTable : "H",
			description : "While holding this shield, I have a +3 bonus to AC. This bonus is in addition to the shield's normal bonus to AC.",
			allowDuplicates : true,
			shieldAdd : "+3 Shield"
		}
	},
	"shield of missile attraction" : {
		name : "Shield of Missile Attraction",
		source : [["SRD", 242], ["D", 200]],
		type : "shield",
		rarity : "rare",
		magicItemTable : "G",
		description : "While holding this shield, I have resistance to damage from ranged weapon attacks. Once attuned to it, I am cursed until I am the target of Remove Curse or similar magic. Whenever a ranged weapon attack is made against a target within 10 ft of me, the curse causes me to become the target instead.",
		descriptionFull : "While holding this shield, you have resistance to damage from ranged weapon attacks.\n   " + toUni("Curse") + ". This shield is cursed. Attuning to it curses you until you are targeted by the Remove Curse spell or similar magic. Removing the shield fails to end the curse on you. Whenever a ranged weapon attack is made against a target within 10 feet of you, the curse causes you to become the target instead.",
		attunement : true,
		weight : 6,
		shieldAdd : "Shield of Missile Attraction",
		cursed : true,
		dmgres : ["Ranged Weapons"]
	},
	"slippers of spider climbing" : {
		name : "Slippers of Spider Climbing",
		source : [["SRD", 242], ["D", 200]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While I wear these light shoes, I can move up, down, and across vertical surfaces and upside down along ceilings, while leaving my hands free. I have a climbing speed equal to my walking speed. However, the slippers don't allow me to move this way on a slippery surface, such as one covered by ice or oil.",
		descriptionFull : "While you wear these light shoes, you can move up, down, and across vertical surfaces and upside down along ceilings, while leaving your hands free. You have a climbing speed equal to your walking speed. However, the slippers don't allow you to move this way on a slippery surface, such as one covered by ice or oil.",
		attunement : true,
		speed : { climb : { spd : "walk", enc : "walk" } }
	},
	"sovereign glue" : {
		name : "Sovereign Glue",
		source : [["SRD", 242], ["D", 200]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "E",
		description : "This viscous, milky-white substance is stored in a jar or flask, coated on the inside with oil of slipperiness. One ounce of the glue can cover a 1-ft square surface, taking 1 minute to set. Once it sets, the bond it creates can be broken only by universal solvent, oil of etherealness, or with a Wish spell.",
		descriptionFull : "This viscous, milky-white substance can form a permanent adhesive bond between any two objects. It must be stored in a jar or flask that has been coated inside with oil of slipperiness. When found, a container contains 1d6+1 ounces.\n   One ounce of the glue can cover a 1-foot square surface. The glue takes 1 minute to set. Once it has done so, the bond it creates can be broken only by the application of universal solvent or oil of etherealness, or with a Wish spell.",
		usages : "1d6+1",
		recovery : "Never"
	},
	"spell scroll" : {
		name : "Spell Scroll",
		source : [["SRD", 242], ["D", 200]],
		type : "scroll",
		description : "If the spell on this scroll is on my class' spell list(s), I can cast it with its normal casting time, but have the scroll crumble to dust. If the spell is of a higher level than I can cast, I need to make an ability check using my spellcasting ability. The DC for this, the spell save, and its attack modifier depend on its level.",
		descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC equals 10 + the spell's level. On a failed check, the spell disappears from the scroll with no other effect.\n   The level of the spell on the scroll determines the spell's saving throw DC and attack bonus, as well as the scroll's rarity, as shown below.\n\n" + toUni("Level\tRarity\t\tDC\tTo hit") + [
			"\nCantrip\tCommon  \t13\t+5",
			"1st  \tCommon  \t13\t+5",
			"2nd  \tUncommon\t13\t+5",
			"3rd  \tUncommon\t15\t+7",
			"4th  \tRare\t\t15\t+7",
			"5th  \tRare\t\t17\t+9",
			"6th  \tVery rare    \t17\t+9",
			"7th  \tVery rare    \t18\t+10",
			"8th  \tVery rare    \t18\t+10",
			"9th  \tLegendary  \t19\t+11"
		].join("\n") + "\n\nA wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on an Intelligence (Arcana) check with a DC equal to 10 + the spell's level. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
		allowDuplicates : true,
		choices : ["Cantrip", "1st-level", "2nd-level", "3rd-level", "4th-level", "5th-level", "6th-level", "7th-level", "8th-level", "9th-level", "mixed levels"],
		"cantrip" : {
			rarity : "common",
			magicItemTable : "A",
			description : "If the cantrip on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If I can't cast any cantrips, I need to make a DC 10 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The cantrips is cast with DC 13 and a +5 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC equals 10. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 13 and an attack bonus of +5.",
			extraTooltip : "AL: can always be bought for 25 gp",
			fixedDC : 13,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [0,0],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"1st-level" : {
			rarity : "common",
			magicItemTable : "A",
			description : "If the 1st-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 11 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 13 and a +5 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 11. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 13 and an attack bonus of +5.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 11 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			extraTooltip : "AL: can always be bought for 75 gp",
			fixedDC : 13,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [1,1],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"2nd-level" : {
			rarity : "uncommon",
			magicItemTable : ["A", "B"],
			description : "If the 2nd-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 12 check with my spellcasting ability to use this scroll or destroy it if I fail. The spell is cast with DC 13 and a +5 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 12. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 13 and an attack bonus of +5.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 12 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			extraTooltip : "AL: can always be bought for 150 gp",
			fixedDC : 13,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [2,2],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"3rd-level" : {
			rarity : "uncommon",
			magicItemTable : "B",
			description : "If the 3rd-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 13 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 15 and a +7 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 13. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 15 and an attack bonus of +7.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 13 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			extraTooltip : "AL: can always be bought for 300 gp",
			fixedDC : 15,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [3,3],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"4th-level" : {
			rarity : "rare",
			magicItemTable : "C",
			description : "If the 4th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 14 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 15 and a +7 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 14. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 15 and an attack bonus of +7.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 14 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			extraTooltip : "AL: can always be bought for 500 gp",
			fixedDC : 15,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [4,4],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"5th-level" : {
			rarity : "rare",
			magicItemTable : "C",
			description : "If the 5th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 15 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 17 and a +9 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 15. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 17 and an attack bonus of +9.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 15 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			extraTooltip : "AL: can always be bought for 1000 gp",
			fixedDC : 17,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [5,5],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"6th-level" : {
			rarity : "very rare",
			magicItemTable : "D",
			description : "If the 6th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 16 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 17 and a +9 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 16. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 17 and an attack bonus of +9.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 16 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			fixedDC : 17,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [6,6],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"7th-level" : {
			rarity : "very rare",
			magicItemTable : "D",
			description : "If the 7th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 17 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 18 and a +10 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 17. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 18 and an attack bonus of +10.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 17 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			fixedDC : 18,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [7,7],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"8th-level" : {
			rarity : "very rare",
			magicItemTable : ["D", "E"],
			description : "If the 8th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 18 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 18 and a +10 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 18. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 18 and an attack bonus of +10.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 18 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			fixedDC : 18,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [8,8],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"9th-level" : {
			rarity : "legendary",
			magicItemTable : "E",
			description : "If the 9th-level spell on this scroll is on my class' spell list(s), I can cast it, having the scroll crumble to dust afterwards. If the spell is of a level that I can't yet cast, I need to make a DC 19 check with my spellcasting ability to use this scroll or it is destroyed if I fail. The spell is cast with DC 19 and a +11 attack modifier.",
			descriptionFull : "A spell scroll bears the words of a single spell, written as a mystical cipher. If the spell is on your class's spell list, you can read the scroll and cast its spell without having to provide any of the spell's components. Otherwise, the scroll is unintelligible. Casting the spell by reading the scroll requires the spell's normal casting time. Once the spell is cast, the words on the scroll fade, and it crumbles to dust. If the casting is interrupted, the scroll is not lost.\n   If the spell is on your class's spell list but of a higher level than you can normally cast, you must make an ability check using your spellcasting ability to determine whether you cast it successfully. The DC is 19. On a failed check, the spell disappears from the scroll with no other effect.\n   Once the spell is cast, the words on the scroll fade, and the scroll itself crumbles to dust.\n   A spell cast from this scroll has a save DC of 19 and an attack bonus of +11.\n   A wizard spell on a spell scroll can be copied just as spells in spellbooks can be copied. When a spell is copied from a spell scroll, the copier must succeed on a DC 19 Intelligence (Arcana) check. If the check succeeds, the spell is successfully copied. Whether the check succeeds or fails, the spell scroll is destroyed.",
			fixedDC : 19,
			spellFirstColTitle : "Us", // used
			spellcastingBonus : {
				level : [9,9],
				psionic : false,
				times : 16,
				firstCol : "checkbox"
			}
		},
		"mixed levels" : {
			description : "If the spell on this scroll is on my class' spell list, I can cast it, having the scroll crumble to dust afterwards. If the spell's level is higher than I can cast, I need to make a DC 10 + spell level check with my spellcasting ability, destroying it if I fail. The DC will be listed on the spell sheet's first column (spell attack = DC - 8).",
			spellFirstColTitle : "DC",
			spellcastingBonus : {
				level : [0,9],
				psionic : false,
				times : 16
			},
			calcChanges : {
				spellAdd : [
					function (spellKey, spellObj, spName) {
						if ((/mixed levels/).test(spName)) {
							spellObj.firstCol = spellObj.level < 3 ? 13 : spellObj.level < 5 ? 15 : spellObj.level < 7 ? 17 : spellObj.level < 9 ? 18 : 19;
							return true;
						}
					}, ""
				]
			}
		}
	},
	"spellguard shield" : {
		name : "Spellguard Shield",
		source : [["SRD", 242], ["D", 201]],
		type : "shield",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While holding this shield, I have advantage on saving throws against spells and other magical effects, and spell attacks have disadvantage against me.",
		descriptionFull : "While holding this shield, you have advantage on saving throws against spells and other magical effects, and spell attacks have disadvantage against you.",
		attunement : true,
		weight : 6,
		shieldAdd : "Spellguard Shield",
		savetxt : { adv_vs : ["spells", "magical effects"] }
	},
	"sphere of annihilation" : {
		name : "Sphere of Annihilation",
		source : [["SRD", 242], ["D", 201]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "This 1-ft radius black sphere obliterates all matter it comes into contact with, except artifacts. Anything not wholly engulfed by it and destroyed takes 4d10 force damage. I can control it as an action with a DC 25 Arcana check, moving it 5 ft per my Int mod, or 10 ft towards me if I fail. See notes page for more details.",
		descriptionFull : "This 2-foot-diameter black sphere is a hole in the multiverse, hovering in space and stabilized by a magical field surrounding it.\n   The sphere obliterates all matter it passes through and all matter that passes through it. Artifacts are the exception. Unless an artifact is susceptible to damage from a sphere of annihilation, it passes through the sphere unscathed. Anything else that touches the sphere but isn't wholly engulfed and obliterated by it takes 4d10 force damage.\n   The sphere is stationary until someone controls it. If you are within 60 feet of an uncontrolled sphere, you can use an action to make a DC 25 Intelligence (Arcana) check. On a success, the sphere levitates in one direction of your choice, up to a number of feet equal to 5 \xD7 your Intelligence modifier (minimum 5 feet). On a failure, the sphere moves 10 feet toward you. A creature whose space the sphere enters must succeed on a DC 13 Dexterity saving throw or be touched by it, taking 4d10 force damage.\n   If you attempt to control a sphere that is under another creature's control, you make an Intelligence (Arcana) check contested by the other creature's Intelligence (Arcana) check. The winner of the contest gains control of the sphere and can levitate it as normal.\n   If the sphere comes into contact with a planar portal, such as that created by the Gate spell, or an extradimensional space, such as that within a portable hole, the DM determines randomly what happens, using the following table.\n\n" + toUni("d100\tResult") + "\n01-50\tThe sphere is destroyed.\n51-85\tThe sphere moves through the portal or into the extradimensional space.\n86-00\tA spatial rift sends each creature and object within 180 feet of the sphere, including the sphere, to a random plane of existence.",
		action : [["action", ""]],
		toNotesPage : [{
			name : "Special Properties",
			popupName : "Sphere of Annihilation's Special Properties",
			note : [
				"This 2-ft-diameter black sphere is a hole in the multiverse, hovering in space and stabilized by a magical field surrounding it. It obliterates all matter it passes through and all matter that passes through it. Artifacts are the exception. Unless an artifact is susceptible to damage from a sphere of annihilation, it passes through the sphere unscathed. Anything else that touches the sphere but isn't wholly engulfed and obliterated by it takes 4d10 force damage.",
				"The sphere is stationary until someone controls it. If I am within 60 ft of an uncontrolled sphere, I can use an action to make a DC 25 Intelligence (Arcana) check. On a success, the sphere levitates in one direction of my choice, up to 5 ft \xD7 my Intelligence modifier (minimum 5 ft). On a failure, the sphere moves 10 ft toward me. A creature whose space the sphere enters must succeed on a DC 13 Dexterity saving throw or be touched by it, taking 4d10 force damage.",
				"If I attempt to control a sphere that is under another creature's control, I make an Intelligence (Arcana) check contested by the other creature's Intelligence (Arcana) check. The winner of the contest gains control of the sphere and can levitate it as normal.",
				"If the sphere comes into contact with a planar portal, such as that created by the Gate spell, or an extradimensional space, such as that within a portable hole, the DM determines randomly what happens, by rolling a d100.",
				" \u2022 01-50 The sphere is destroyed.",
				" \u2022 51-85 The sphere moves through the portal or into the extradimensional space.",
				" \u2022 86-00 A spatial rift sends each creature and object within 180 ft of the sphere, including the sphere, to a random plane of existence."
			]
		}]
	},
	"staff of charming" : {
		name : "Staff of Charming",
		source : [["SRD", 243], ["D", 201]],
		type : "staff",
		rarity : "rare",
		magicItemTable : "G",
		description : "This staff has 10 charges, regaining 1d8+2 at dawn, 5% chance it loses its magic when its last charge is used. If an enchantment spell is cast only on me, I can use the staff to, once per dawn, turn a failed save into a success and as a reaction if I make the save, I can expend 1 charge to turn the spell back on its caster.",
		descriptionFull : "While holding this staff, you can use an action to expend 1 of its 10 charges to cast Charm Person, Command, or Comprehend Languages from it using your spell save DC. The staff can also be used as a magic quarterstaff.\n   If you are holding the staff and fail a saving throw against an enchantment spell that targets only you, you can turn your failed save into a successful one. You can't use this property of the staff again until the next dawn. If you succeed on a save against an enchantment spell that targets only you, with or without the staff's intervention, you can use your reaction to expend 1 charge from the staff and turn the spell back on its caster as if you had cast the spell.\n   The staff regains 1d8+2 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, the staff becomes a nonmagical quarterstaff.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a bard, cleric, druid, sorcerer, warlock, or wizard",
		prereqeval : function(v) { return classes.known.bard || classes.known.cleric || classes.known.druid || classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false; },
		extraLimitedFeatures : [{
			name : "Staff of Charming (charges, regains 1d8+2)",
			usages : 10,
			recovery : "dawn"
		}, {
			name : "Staff of Charming (pass enchantment save)",
			usages : 1,
			recovery : "dawn"
		}],
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d8+2",
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["charm person", "command", "comprehend languages"],
			selection : ["charm person", "command", "comprehend languages"],
			firstCol : 1,
			times : 3
		},
		action : [["reaction", ""]]
	},
	"staff of fire" : {
		name : "Staff of Fire",
		source : [["SRD", 243], ["D", 201]],
		type : "staff",
		rarity : "very rare",
		magicItemTable : "H",
		description : "I have resistance to fire while I'm holding this staff. It has 10 charges, regaining 1d6+4 expended charges at dawn. If I use its last charge, roll a d20. On a 1, it is destroyed. I can use its charges to cast Burning Hands (1 charge), Fireball (3 charges), and Wall of Fire (4 charges), using my spellcasting ability.",
		descriptionFull : "You have resistance to fire damage while you hold this staff.\n   The staff has 10 charges. While holding it, you can use an action to expend 1 or more of its charges to cast one of the following spells from it, using your spell save DC: Burning Hands (1 charge), Fireball (3 charges), or Wall of Fire (4 charges).\n   The staff regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, the staff blackens, crumbles into cinders, and is destroyed.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a druid, sorcerer, warlock, or wizard",
		prereqeval : function(v) { return classes.known.druid || classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false; },
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		dmgres : ["Fire"],
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "1 charge",
			spells : ["burning hands"],
			selection : ["burning hands"],
			firstCol : 1
		}, {
			name : "3 charges",
			spells : ["fireball"],
			selection : ["fireball"],
			firstCol : 3
		}, {
			name : "4 charges",
			spells : ["wall of fire"],
			selection : ["wall of fire"],
			firstCol : 4
		}]
	},
	"staff of frost" : {
		name : "Staff of Frost",
		source : [["SRD", 243], ["D", 202]],
		type : "staff",
		rarity : "very rare",
		magicItemTable : "H",
		description : "I have resistance to cold while I'm holding this staff. It has 10 charges, regaining 1d6+4 at dawn. If I use its last charge, roll a d20. On a 1, it is destroyed. I can use its charges to cast Cone of Cold (5 charges), Fog Cloud (1 charge), Ice Storm (4 charges), and Wall of Ice (4 charges) using my spellcasting ability.",
		descriptionFull : "You have resistance to cold damage while you hold this staff.\n   The staff has 10 charges. While holding it, you can use an action to expend 1 or more of its charges to cast one of the following spells from it, using your spell save DC: Cone of Cold (5 charges), Fog Cloud (1 charge), Ice Storm (4 charges), or Wall of Ice (4 charges).\n   The staff regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1. the staff turns to water and is destroyed.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a druid, sorcerer, warlock, or wizard",
		prereqeval : function(v) { return classes.known.druid || classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false; },
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		dmgres : ["Cold"],
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "1 charge",
			spells : ["fog cloud"],
			selection : ["fog cloud"],
			firstCol : 1
		}, {
			name : "4 charges",
			spells : ["ice storm", "wall of ice"],
			selection : ["ice storm", "wall of ice"],
			firstCol : 4,
			times : 2
		}, {
			name : "5 charges",
			spells : ["cone of cold"],
			selection : ["cone of cold"],
			firstCol : 5
		}]
	},
	"staff of healing" : {
		name : "Staff of Healing",
		source : [["SRD", 243], ["D", 202]],
		type : "staff",
		rarity : "rare",
		magicItemTable : "G",
		description : "This staff has 10 charges, regaining 1d6+4 expended charges at dawn. If I use its last charge, roll a d20. On a 1, it vanishes in a flash of light. I can use its charges to cast Cure Wounds (1 charge per spell level, up to 4th), Lesser Restoration (2 charges), and Mass Cure Wounds (5 charges) using my spellcasting ability.",
		descriptionFull : "This staff has 10 charges. While holding it, you can use an action to expend 1 or more of its charges to cast one of the following spells from it, using your spell save DC and spellcasting ability modifier: Cure Wounds (1 charge per spell level, up to 4th), Lesser Restoration (2 charges), or Mass Cure Wounds (5 charges).\n   The staff regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1. the staff vanishes in a flash of light, lost forever.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a bard, cleric, or druid",
		prereqeval : function(v) { return classes.known.bard || classes.known.cleric || classes.known.druid ? true : false; },
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "1+ charges",
			spells : ["cure wounds"],
			selection : ["cure wounds"],
			firstCol : "1+"
		}, {
			name : "2 charges",
			spells : ["lesser restoration"],
			selection : ["lesser restoration"],
			firstCol : 2
		}, {
			name : "5 charges",
			spells : ["mass cure wounds"],
			selection : ["mass cure wounds"],
			firstCol : 5
		}],
		spellChanges : {
			"cure wounds" : {
				description : "1 living creature heals 1d8+spellcasting ability modifier HP, +1d8 per charge spend after the 1st",
				changes : "The spell level Cure Wounds is cast at depends on the amount of charges spend, 1 charge per spell slot level."
			}
		}
	},
	"staff of power" : {
		name : "Staff of Power",
		source : [["SRD", 243], ["D", 202]],
		type : "staff",
		rarity : "very rare",
		magicItemTable : "H",
		description : "While holding this +2 quarterstaff, I gain a +2 bonus on saves, AC, and spell attacks. The staff has 20 charges, regaining 2d8+4 at dawn. Charges can be used to cast spells, or, on a hit in melee with it, I can expend 1 charge to deal +1d6 force damage. As an action, I can break it, causing a 30-ft radius explosion.",
		descriptionLong : "While holding this staff, I gain a +2 bonus on saves, AC, and spell attacks. The staff has 20 charges, regaining 2d8+4 at dawn. If I use the last charge, roll a d20. On a 1, it converts to a +2 quarterstaff without other abilities. On a 20, it regains 1d8+2 charges. Charges can be used to cast spells, or, on a hit in melee with it, I can expend 1 charge to deal +1d6 force damage. As an action, I can break it so it explodes. When it explodes, there is a 50% chance I teleport to a random plane, otherwise I take 16\xD7 the charges left in force damage. All within 10 ft take 8\xD7, 20 ft 6\xD7, and 30 ft 4\xD7; DC 17 Dex save halves.",
		descriptionFull : "This staff can be wielded as a magic quarterstaff that grants a +2 bonus to attack and damage rolls made with it. While holding it, you gain a +2 bonus to Armor Class, saving throws, and spell attack rolls.\n   The staff has 20 charges for the following properties. The staff regains 2d8+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, the staff retains its +2 bonus to attack and damage roll but loses all other properties. On a 20, the staff regain 1d8+2 charges.\n   " + toUni("Power Strike") + ". When you hit with a melee attack using the staff, you can expend 1 charge to deal an extra 1d6 force damage to the target.\n   " + toUni("Spells") + ". While holding this staff, you can use an action to expend 1 or more of its charges to cast one of the following spells from it, using your spell save DC and spell attack bonus: Cone of Cold (5 charges), Fireball (5th-level version, 5 charges), Globe of Invulnerability (6 charges), Hold Monster (5 charges), Levitate (2 charges). Lightning Bolt (5th-level version, 5 charges), Magic Missile (1 charge), Ray of Enfeeblement (1 charge), or Wall of Force (5 charges).\n   " + toUni("Retributive Strike") + ". You can use an action to break the staff over your knee or against a solid surface, performing a retributive strike. The staff is destroyed and releases its remaining magic in an explosion that expands to fill a 30-foot-radius sphere centered on it.\n   You have a 50% chance to instantly travel to a random plane of existence, avoiding the explosion. If you fail to avoid the effect, you take force damage equal to 16 \xD7 the number of charges in the staff. Every other creature in the area must make a DC 17 Dexterity saving throw. On a failed save, a creature takes an amount of damage based on how far away it is from the point of origin, as shown in the following table. On a successful save, a creature takes half as much damage.\n\n" + toUni("Distance from Origin\tEffect") + "\n10 ft. away or closer\t8 \xD7 the number of charges in the staff\n11 to 20 ft. away\t6 \xD7 the number of charges in the staff\n21 to 30 ft. away\t4 \xD7 the number of charges in the staff",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a sorcerer, warlock, or wizard",
		prereqeval : function(v) { return classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false; },
		usages : 20,
		recovery : "dawn",
		additional : "regains 2d8+4",
		weaponsAdd : ["Staff of Power"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*power).*$/i,
			name : "Staff of Power",
			source : [["SRD", 243], ["D", 202]],
			description : "Versatile (1d8); On hit, 1 charge for +1d6 force damage",
			modifiers : [2, 2]
		},
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type == "attack") return 2;
				},
				"While holding the Staff of Power, I have a +2 bonus to spell attack rolls."
			]
		},
		addMod : [{ type : "save", field : "all", mod : 2, text : "While holding the Staff of Power, I gain a +2 bonus to all my saving throws." }],
		extraAC : [{name : "Staff of Power", mod : 2, magic : true, text : "I gain a +2 bonus to AC while attuned."}],
		action : [["action", " (Retributive Strike)"]],
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "5 charges; 5th level",
			spells : ["fireball", "lightning bolt"],
			selection : ["fireball", "lightning bolt"],
			firstCol : 5,
			times : 2
		}, {
			name : "6 charges",
			spells : ["globe of invulnerability"],
			selection : ["globe of invulnerability"],
			firstCol : 6
		}, {
			name : "5 charges",
			spells : ["cone of cold", "hold monster", "wall of force"],
			selection : ["cone of cold", "hold monster", "wall of force"],
			firstCol : 5,
			times : 3
		}, {
			name : "2 charges",
			spells : ["levitate"],
			selection : ["levitate"],
			firstCol : 2
		}, {
			name : "1 charge",
			spells : ["magic missile", "ray of enfeeblement"],
			selection : ["magic missile", "ray of enfeeblement"],
			firstCol : 1,
			times : 2
		}],
		spellChanges : {
			"fireball" : {
				nameShort : "Fireball (5th level)",
				description : "20-ft rad all crea 10d6 Fire dmg; save halves; unattended flammable objects ignite",
				changes : "Cast as if using a 5th-level spell slot."
			},
			"lightning bolt" : {
				nameShort : "Lightning Bolt (5th level)",
				description : "100-ft long 5-ft wide all 10d6 Lightning dmg; save halves; unattended flammable obj ignite",
				changes : "Cast as if using a 5th-level spell slot."
			}
		}
	},
	"staff of striking" : {
		name : "Staff of Striking",
		source : [["SRD", 244], ["D", 203]],
		type : "staff",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This staff function as a +3 quarterstaff and has 10 charges, regaining 1d6+4 at dawn. There is a 5% chance that expending the last charge makes it nonmagical. When I hit with a melee attack using it, I can expend up to 3 of its charges. For each charge I expend, the target takes an extra 1d6 force damage.",
		descriptionFull : "This staff can be wielded as a magic quarterstaff that grants a +3 bonus to attack and damage rolls made with it.\n   The staff has 10 charges. When you hit with a melee attack using it, you can expend up to 3 of its charges. For each charge you expend, the target takes an extra 1d6 force damage. The staff regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, the staff becomes a nonmagical quarterstaff.",
		attunement : true,
		weight : 4,
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		weaponsAdd : ["Staff of Striking"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*striking).*$/i,
			name : "Staff of Striking",
			source : [["SRD", 244], ["D", 203]],
			modifiers : [3, 3],
			description : "Versatile (1d8); On hit, 1-3 charges for +1d6 force damage per charge"
		}
	},
	"staff of swarming insects" : {
		name : "Staff of Swarming Insects",
		source : [["SRD", 244], ["D", 203]],
		type : "staff",
		rarity : "rare",
		magicItemTable : "G",
		description : "This staff has 10 charges, regaining 1d6+4 at dawn, 5% chance it is destroyed when its last charge is used. As an action, I can expend 1 charge to create a 30-ft radius swarm of flying insects for 10 minutes that moves with me, making the area heavily obscured for anybody but me. A 10+ mph wind disperses it.",
		descriptionFull : "This staff has 10 charges and regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, a swarm of insects consumes and destroys the staff, then disperses.\n   " + toUni("Spells") + ". While holding the staff, you can use an action to expend some of its charges to cast one of the following spells from it, using your spell save DC: Giant Insect (4 charges) or Insect Plague (5 charges).\n   " + toUni("Insect Cloud") + ". While holding the staff, you can use an action and expend 1 charge to cause a swarm of harmless flying insects to spread out in a 30-foot radius from you. The insects remain for 10 minutes, making the area heavily obscured for creatures other than you. The swarm moves with you, remaining centered on you. A wind of at least 10 miles per hour disperses the swarm and ends the effect.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a bard, cleric, druid, sorcerer, warlock, or wizard",
		prereqeval : function(v) { return classes.known.bard || classes.known.cleric || classes.known.druid || classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false; },
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		action : [["action", ""]],
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "4 charges",
			spells : ["giant insect"],
			selection : ["giant insect"],
			firstCol : 4
		}, {
			name : "5 charges",
			spells : ["insect plague"],
			selection : ["insect plague"],
			firstCol : 5
		}]
	},
	"staff of the magi" : { // contains contributions by Pengsloth
		name : "Staff of the Magi",
		source : [["SRD", 244], ["D", 203]],
		type : "staff",
		rarity : "legendary",
		magicItemTable : "I",
		description : "While holding this +2 quarterstaff, I have adv. on saves vs. spells and +2 on spell attacks. The staff has 50 charges to cast spells, regaining 4d6+2 at dawn. As a reaction, I can absorb a spell targeting only me, converting its spell level to charges. If this brings it over 50 charges or I break it is as an action, it explodes.",
		descriptionLong : "While holding this staff I have a +2 to spell attacks, adv. on saving throws vs. spells, and can be used as a +2 quarterstaff. The staff has 50 charges (4d6+2 at dawn) to cast spells. When the last charge is used, it has a 5% chance to regain 1d12+1 charges. I can use a reaction to absorb a spell targeting only me, converting its spell level to charges. If that brings the staff over 50 charges or I use an action to break it, it explodes. If it explodes, there is a 50% chance I teleport to a random plane, otherwise I take 16\xD7 the charges left in force damage. All within 10 ft take 8\xD7, 20 ft 6\xD7, and 30 ft 4\xD7; DC 17 Dex save halves.",
		descriptionFull : "This staff can be wielded as a magic quarterstaff that grants a +2 bonus to attack and damage rolls made with it. While you hold it, you gain a +2 bonus to spell attack rolls.\n   The staff has 50 charges for the following properties. It regains 4d6+2 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 20, the staff regains 1d12+1 charges.\n   " + toUni("Spell Absorption") + ". While holding the staff, you have advantage on saving throws against spells. In addition, you can use your reaction when another creature casts a spell that targets only you. If you do, the staff absorbs the magic of the spell, canceling its effect and gaining a number of charges equal to the absorbed spell's level. However, if doing so brings the staff's total number of charges above 50, the staff explodes as if you activated its retributive strike (see below).\n   " + toUni("Spells") + ". While holding the staff, you can use an action to expend some of its charges to cast one of the following spells from it, using your spell save DC and spellcasting ability: Conjure Elemental (7 charges), Dispel Magic (3 charges), Fireball (7th-level version, 7 charges), Flaming Sphere (2 charges), Ice Storm (4 charges), Invisibility (2 charges), Knock (2 charges), Lightning Bolt (7th-level version, 7 charges), Passwall (5 charges), Plane Shift (7 charges), Telekinesis (5 charges), Wall of Fire (4 charges), or Web (2 charges).\n   You can also use an action to cast one of the following spells from the staff without using any charges: Arcane Lock, Detect Magic, Enlarge/Reduce, Light, Mage Hand, or Protection from Evil and Good.\n   " + toUni("Retributive Strike") + ". You can use an action to break the staff over your knee or against a solid surface, performing a retributive strike. The staff is destroyed and releases its remaining magic in an explosion that expands to fill a 30-foot-radius sphere centered on it.\n   You have a 50% chance to instantly travel to a random plane of existence, avoiding the explosion. If you fail to avoid the effect, you take force damage equal to 16 \xD7 the number of charges in the staff. Every other creature in the area must make a DC 17 Dexterity saving throw. On a failed save, a creature takes an amount of damage based on how far away it is from the point of origin, as shown in the following table. On a successful save, a creature takes half as much damage.\n\n" + toUni("Distance from Origin\tDamage") + "\n10 ft. away or closer\t8 \xD7 the number of charges in the staff\n11 to 20 ft. away\t\t6 \xD7 the number of charges in the staff\n21 to 30 ft. away\t\t4 \xD7 the number of charges in the staff",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a sorcerer, warlock, or wizard",
		prereqeval : function (v) {
			return classes.known.sorcerer || classes.known.warlock || classes.known.wizard ? true : false;
		},
		weaponsAdd : ["Staff of the Magi"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*magi).*$/i,
			name : "Staff of the Magi",
			source : [["SRD", 244], ["D", 203]],
			modifiers : [2, 2]
		},
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type == "attack") return 2;
				},
				"While holding the Staff of the Magi I have a +2 bonus to spell attack rolls."
			]
		},
		usages : 50,
		recovery : "dawn",
		additional : "regains 4d6+2",
		savetxt : { adv_vs : ["spells"] },
		action : [
			["reaction", " (Spell Absorption)"],
			["action", " (Retributive Strike)"]
		],
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "7 charges",
			spells : ["conjure elemental", "plane shift"],
			selection : ["conjure elemental", "plane shift"],
			firstCol : 7,
			times : 2
		}, {
			name : "7 charges; 7th level",
			spells : ["fireball", "lightning bolt"],
			selection : ["fireball", "lightning bolt"],
			firstCol : 7,
			times : 2
		}, {
			name : "5 charges",
			spells : ["passwall", "telekinesis"],
			selection : ["passwall", "telekinesis"],
			firstCol : 5,
			times : 2
		}, {
			name : "4 charges",
			spells : ["ice storm", "wall of fire"],
			selection : ["ice storm", "wall of fire"],
			firstCol : 4,
			times : 2
		}, {
			name : "3 charges",
			spells : ["dispel magic"],
			selection : ["dispel magic"],
			firstCol : 3
		}, {
			name : "2 charges",
			spells : ["flaming sphere", "invisibility", "knock", "web"],
			selection : ["flaming sphere", "invisibility", "knock", "web"],
			firstCol : 2,
			times : 4
		}],
		eval : function () {
			// get the CurrentSpells object or create it if it didn't exists yet.
			var spObj = CreateCurrentSpellsEntry("items", "staff of the magi");
			// now set some of the attributes for it, adding the 3 spells that didn't fit as spellcastingBonus
			spObj.typeSp = "known";
			spObj.known = { cantrips : 2, spells : 4 };
			spObj.list = { spells : ["light", "mage hand", "arcane lock", "detect magic", "enlarge/reduce", "protection from evil and good"] };
			spObj.selectCa = ["light", "mage hand"];
			spObj.selectSp = ["arcane lock", "detect magic", "enlarge/reduce", "protection from evil and good"];
			spObj.typeList = 2;
		},
		removeeval : function () {
			if (CurrentSpells["staff of the magi"]) {
				// delete the CurrentSpells object
				delete CurrentSpells["staff of the magi"];
				SetStringifieds('spells');
				CurrentUpdates.types.push("spells");
			}
		},
		spellChanges : {
			"light" : { firstCol : "atwill" },
			"mage hand" : { firstCol : "atwill" },
			"arcane lock" : { firstCol : "atwill" },
			"detect magic" : { firstCol : "atwill" },
			"enlarge/reduce" : { firstCol : "atwill" },
			"protection from evil and good" : { firstCol : "atwill" },
			"fireball" : {
				nameShort : "Fireball (7th level)",
				description : "20-ft rad all crea 12d6 Fire dmg; save halves; unattended flammable objects ignite",
				changes : "Cast as if using a 7th-level spell slot."
			},
			"lightning bolt" : {
				nameShort : "Lightning Bolt (7th level)",
				description : "100-ft long 5-ft wide all 12d6 Lightning dmg; save halves; unattended flammable obj ignite",
				changes : "Cast as if using a 7th-level spell slot."
			},
			"conjure elemental" : {
				time : "1 a",
				changes : "Casting time is only 1 action instead of 1 minute."
			}
		}
	},
	"staff of the python" : {
		name : "Staff of the Python",
		source : [["SRD", 245], ["D", 204]],
		type : "staff",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "As an action, I can speak the command word and throw this staff to have it become a giant constrictor snake within 10 ft with full HP. It has its own initiative. I can command it mentally on my turn if within 60 ft. As a bonus action, I can command it to revert back to a staff. If the snake reaches 0 HP, the staff is destroyed.",
		descriptionLong : "As an action, I can speak this staff's command word and throw the staff on the ground within 10 ft where it becomes a giant constrictor snake. As a bonus action, I can speak the command word again to have it return to its staff form. The snake acts on its own initiative count. On my turn, I can mentally command the snake if it is within 60 ft of me and I'm not incapacitated, deciding what it does on its next turn or a more general command. If the snake is reduced to 0 HP, it dies, reverts to its staff form, and the staff then shatters and is destroyed. Otherwise, the snake always starts out with full HP.",
		descriptionFull : "You can use an action to speak this staff's command word and throw the staff on the ground within 10 feet of you. The staff becomes a giant constrictor snake under your control and acts on its own initiative count. By using a bonus action to speak the command word again, you return the staff to its normal form in a space formerly occupied by the snake.\n   On your turn, you can mentally command the snake if it is within 60 feet of you and you aren't incapacitated. You decide what action the snake takes and where it moves during its next turn, or you can issue it a general command, such as to attack your enemies or guard a location.\n   If the snake is reduced to 0 hit points, it dies and reverts to its staff form. The staff then shatters and is destroyed. If the snake reverts to staff form before losing all its hit points, it regains all of them.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a cleric, druid, or warlock",
		prereqeval : function(v) { return classes.known.cleric || classes.known.druid || classes.known.warlock ? true : false; },
		action : [["action", " (animate)"], ["bonus action", " (end)"]]
	},
	"staff of the woodlands" : {
		name : "Staff of the Woodlands",
		source : [["SRD", 245], ["D", 204]],
		type : "staff",
		rarity : "rare",
		magicItemTable : "G",
		description : "This +2 quarterstaff gives me a +2 bonus on spell attacks. It has 10 charges, regaining 1d6+4 at dawn, 5% chance of losing its magic when its last charge is used. As an action, I can plant it into the ground and expend 1 charge to have it grow into a 60 ft tree, which it remains until I use another action to revert it back.",
		descriptionFull : "This staff can be wielded as a magic quarterstaff that grants a +2 bonus to attack and damage rolls made with it. While holding it, you have a +2 bonus to spell attack rolls.\n   The staff has 10 charges for the following properties. It regains 1d6+4 expended charges daily at dawn. If you expend the last charge, roll a d20. On a 1, the staff loses its properties and becomes a nonmagical quarterstaff.\n   " + toUni("Spells") + ". You can use an action to expend 1 or more of the staff's charges to cast one of the following spells from it, using your spell save DC: Animal Friendship (1 charge), Awaken (5 charges), Barkskin (2 charges), Locate Animals or Plants (2 charges), Speak with Animals (1 charge), Speak with Plants (3 charges), or Wall of Thorns (6 charges).\n   You can also use an action to cast the Pass Without Trace spell from the staff without using any charges.\n   " + toUni("Tree Form") + ". You can use an action to plant one end of the staff in fertile earth and expend 1 charge to transform the staff into a healthy tree. The tree is 60 feet tall and has a 5-foot-diameter trunk, and its branches at the top spread out in a 20-foot radius. The tree appears ordinary but radiates a faint aura of transmutation magic if targeted by Detect Magic. While touching the tree and using another action to speak its command word, you return the staff to its normal form. Any creature in the tree falls when it reverts to a staff.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a druid",
		prereqeval : function(v) { return classes.known.druid ? true : false; },
		action : [["action", ""]],
		usages : 10,
		recovery : "dawn",
		additional : "regains 1d6+4",
		weaponsAdd : ["Staff of the Woodlands"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*woodlands).*$/i,
			name : "Staff of the Woodlands",
			source : [["SRD", 245], ["D", 204]],
			modifiers : [2, 2]
		},
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type == "attack") return 2;
				},
				"While holding the Staff of the Woodlands, I have a +2 bonus to spell attack rolls."
			]
		},
		spellcastingAbility : "class",
		spellFirstColTitle : "Ch",
		spellcastingBonus : [{
			name : "At will",
			spells : ["pass without trace"],
			selection : ["pass without trace"],
			firstCol : "atwill"
		}, {
			name : "1 charge",
			spells : ["animal friendship", "speak with animals"],
			selection : ["animal friendship", "speak with animals"],
			firstCol : 1,
			times : 2
		}, {
			name : "2 charges",
			spells : ["barkskin", "locate animals or plants"],
			selection : ["barkskin", "locate animals or plants"],
			firstCol : 2,
			times : 2
		}, {
			name : "3 charges",
			spells : ["speak with plants"],
			selection : ["speak with plants"],
			firstCol : 3
		}, {
			name : "5 charges",
			spells : ["awaken"],
			selection : ["awaken"],
			firstCol : 5
		}, {
			name : "6 charges",
			spells : ["wall of thorns"],
			selection : ["wall of thorns"],
			firstCol : 6
		}],
		spellChanges : {
			"awaken" : {
				time : "1 a",
				changes : "Casting time is only 1 action instead of 8 hours."
			}
		}
	},
	"staff of thunder and lightning" : {
		name : "Staff of Thunder and Lightning",
		source : [["SRD", 245], ["D", 204]],
		type : "staff",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This +2 quarterstaff has 5 special abilities that each can be used once per dawn. Both 'Lightning' and 'Thunder' can be used when I hit a melee attack with it, while 'Lightning Strike', 'Thunderclap', and 'Thunder and Lightning' require an action to use. See the Notes page for what all of these abilities entail.",
		descriptionFull : "This staff can be wielded as a magic quarterstaff that grants a +2 bonus to attack and damage rolls made with it. It also has the following additional properties. When one of these properties is used, it can't be used again until the next dawn.\n   " + toUni("Lightning") + ". When you hit with a melee attack using the staff, you can cause the target to take an extra 2d6 lightning damage.\n   " + toUni("Thunder") + ". When you hit with a melee attack using the staff, you can cause the staff to emit a crack of thunder, audible out to 300 feet. The target you hit must succeed on a DC 17 Constitution saving throw or become stunned until the end of your next turn.\n   " + toUni("Lightning Strike") + ". You can use an action to cause a bolt of lightning to leap from the staff's tip in a line that is 5 feet wide and 120 feet long. Each creature in that line must make a DC 17 Dexterity saving throw, taking 9d6 lightning damage on a failed save, or half as much damage on a successful one.\n   " + toUni("Thunderclap") + ". You can use an action to cause the staff to issue a deafening thunderclap, audible out to 600 feet. Each creature within 60 feet of you (not including you) must make a DC 17 Constitution saving throw. On a failed save, a creature takes 2d6 thunder damage and becomes deafened for 1 minute. On a successful save, a creature takes half damage and isn't deafened.\n   " + toUni("Thunder and Lightning") + ". You can use an action to use the Lightning Strike and Thunderclap properties at the same time. Doing so doesn't expend the daily use of those properties, only the use of this one.",
		attunement : true,
		weight : 4,
		action : [["action", "Staff of T\u0026L (Lightning Strike, Thunderclap, both)"]],
		weaponsAdd : ["Staff of Thunder and Lightning"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*thunder)(?=.*lightning).*$/i,
			name : "Staff of Thunder and Lightning",
			source : [["SRD", 245], ["D", 204]],
			description : "Versatile (1d8); Lightning: 1\xD7 per dawn, +2d6 lightning damage; Thunder: 1\xD7 per dawn DC 17 Con save or 1 round stunned",
			modifiers : [2, 2]
		},
		extraLimitedFeatures : [{
			name : "Staff of T\u0026L [Lightning]",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Staff of T\u0026L [Thunder]",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Staff of T\u0026L [Lightning Strike]",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Staff of T\u0026L [Thunderclap]",
			usages : 1,
			recovery : "dawn"
		}, {
			name : "Staff of T\u0026L [Thunder and Lightning]",
			usages : 1,
			recovery : "dawn"
		}],
		toNotesPage : [{
			name : "Special Properties",
			popupName : "Staff of Thunder and Lightning's Special Properties",
			note : [
				"\n   This staff can be wielded as a magic quarterstaff that grants a +2 bonus to attack and damage rolls made with it. It also has the following additional properties. When one of these properties is used, it can't be used again until the next dawn.",
				" \u2022 Thunder. When I hit with a melee attack using the staff, I can cause the target to take an extra 2d6 lightning damage.",
				" \u2022 Lightning. When I hit with a melee attack using the staff, I can cause the staff to emit a crack of thunder, audible out to 300 ft. The target must succeed on a DC 17 Constitution saving throw or become stunned until the end of my next turn.",
				" \u2022 Lightning Strike. As an action, I can cause a bolt of lightning to leap from the staff's tip in a line that is 5 ft wide and 120 ft long. Each creature in that line must make a DC 17 Dexterity saving throw, taking 9d6 lightning damage on a failed save, or half as much damage on a successful one.",
				" \u2022 Thunderclap. As an action, I can cause the staff to issue a deafening thunderclap, audible out to 600 ft. Each creature within 60 ft of me, excluding myself, must make a DC 17 Constitution saving throw or take 2d6 thunder damage and becomes deafened for 1 minute. On a successful save, a creature takes half damage and isn't deafened.",
				" \u2022 Thunder and Lightning. As an action, I can use the Lightning Strike and Thunderclap properties at the same time. Doing so doesn't expend the daily use of those properties, only the use of this one.",
			].join("\n")
		}]
	},
	"staff of withering" : {
		name : "Staff of Withering",
		source : [["SRD", 246], ["D", 205]],
		type : "staff",
		rarity : "rare",
		magicItemTable : "G",
		description : "This staff has 3 charges, regaining 1d3 at dawn and functions as a magic quarterstaff. On a hit with it, I can expend 1 charge to deal an extra 2d10 necrotic damage to the target, which must then make a DC 15 Con save or have disadvantage on any ability check or save that uses Strength or Constitution for 1 hour.",
		descriptionFull : "This staff has 3 charges and regains 1d3 expended charges daily at dawn.\n   The staff can be wielded as a magic quarterstaff. On a hit, it deals damage as a normal quarterstaff, and you can expend 1 charge to deal an extra 2d10 necrotic damage to the target. In addition, the target must succeed on a DC 15 Constitution saving throw or have disadvantage for 1 hour on any ability check or saving throw that uses Strength or Constitution.",
		attunement : true,
		weight : 4,
		prerequisite : "Requires attunement by a cleric, druid, or warlock",
		prereqeval : function(v) { return classes.known.cleric || classes.known.druid || classes.known.warlock ? true : false; },
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		weaponsAdd : ["Staff of Withering"],
		weaponOptions : {
			baseWeapon : "quarterstaff",
			regExpSearch : /^(?=.*staff)(?=.*withering).*$/i,
			name : "Staff of Withering",
			source : [["SRD", 244], ["D", 203]],
			description : "Versatile (1d8); On hit, 1 charge for +2d10 necrotic damage and save, see magic item"
		}
	},
	"stone of controlling earth elementals" : {
		name : "Stone of Controlling Earth Elementals",
		source : [["SRD", 246], ["D", 205]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While the stone is touching the ground, I can use an action to speak its command word and summon an earth elemental, as if I had cast the Conjure Elemental spell. The stone can't be used this way again until the next dawn.",
		descriptionFull : "If the stone is touching the ground, you can use an action to speak its command word and summon an earth elemental, as if you had cast the Conjure Elemental spell. The stone can't be used this way again until the next dawn. The stone weighs 5 pounds.",
		weight : 5,
		spellcastingBonus : {
			name : "Earth Elemental only",
			spells : ["conjure elemental"],
			selection : ["conjure elemental"],
			firstCol : "oncelr"
		},
		usages : 1,
		recovery : "dawn",
		spellChanges : {
			"conjure elemental" : {
				time : "1 a",
				components : "V,M\u0192",
				compMaterial : "The Stone of Controlling Earth Elementals needs to touch the ground to cast this spell with a command word.",
				description : "CR 5 earth elemental that obeys my verbal commands; on broken conc. elemental breaks free",
				changes : "Using the Stone of Controlling Earth Elementals, the spell only takes 1 action instead of 1 minute to cast, but can only bring forth an earth elemental."
			}
		}
	},
	"stone of good luck" : {
		name : "Stone of Good Luck",
		source : [["SRD", 246], ["D", 205]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While this polished agate is on my person, I gain a +1 bonus to ability checks and saving throws.",
		descriptionFull : "While this polished agate is on your person, you gain a +1 bonus to ability checks and saving throws.",
		attunement : true,
		addMod : [
			{ type : "save", field : "all", mod : 1, text : "I gain a +1 bonus on all my saving throws." },
			{ type : "skill", field : "all", mod : 1, text : "I gain a +1 bonus on all my ability checks." },
			{ type : "skill", field : "Init", mod : 1, text : "I gain a +1 bonus on all my ability checks." }
		]
	},
	"sun blade" : {
		name : "Sun Blade",
		source : [["SRD", 246], ["D", 205]],
		type : "weapon (longsword)",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "As a bonus action, I can have this hilt create a blade of radiance. While the blade exists, it acts like a longsword that does +2 to attack and damage rolls, radiant damage (+1d8 to undead), has finesse, emits bright sunlight in a 15-ft radius and dim light in another 15 ft. As an action, I can change the light's radius by 5 ft.",
		descriptionLong : "As a bonus action, I can have this longsword hilt create or dismiss a blade of pure radiance. While the blade exists, it acts like a longsword that grants a +2 bonus to attack and damage rolls, does radiant damage and has the finesse property. It also deals +1d8 radiant damage to undead and emits sunlight, bright light in a 15-ft radius and dim light in an additional 15-ft radius. As an action, I can expand or reduce both the bright and dim light's radius by 5 ft each, to a maximum of 30 feet each or a minimum of 10 feet each. I am proficient with this weapon if I'm proficient with either longswords or shortswords.",
		descriptionFull : "This item appears to be a longsword hilt. While grasping the hilt, you can use a bonus action to cause a blade of pure radiance to spring into existence, or make the blade disappear. While the blade exists, this magic longsword has the finesse property. If you are proficient with shortswords or longswords, you are proficient with the sun blade.\n   You gain a +2 bonus to attack and damage rolls made with this weapon, which deals radiant damage instead of slashing damage. When you hit an undead with it, that target takes an extra 1d8 radiant damage.\n   The sword's luminous blade emits bright light in a 15-foot radius and dim light for an additional 15 feet. The light is sunlight. While the blade persists, you can use an action to expand or reduce its radius of bright and dim light by 5 feet each, to a maximum of 30 feet each or a minimum of 10 feet each.",
		weight : 3,
		action : [["bonus action", " (start/stop)"], ["action", " (change light)"]],
		weaponsAdd : ["Sun Blade"],
		weaponOptions : {
			baseWeapon : "longsword",
			regExpSearch : /^(?=.*sun)(?=.*blade).*$/i,
			name : "Sun Blade",
			source : [["SRD", 246], ["D", 205]],
			damage : [1, 8, "radiant"],
			description : "Finesse, versatile (1d10); +1d8 damage to undead",
			modifiers : [2, 2]
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (v.theWea.name == "Sun Blade" && !fields.Proficiency) {
						fields.Proficiency = CurrentProfs.weapon.otherWea && CurrentProfs.weapon.otherWea.finalProfs.indexOf("shortsword") !== -1;
					}
				}, ''
			]
		}
	},
	"sword of life stealing" : {
		name : "Sword of Life Stealing",
		nameTest : "of Life Stealing",
		source : [["SRD", 246], ["D", 206]],
		type : "weapon (any sword)",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "When I attack a creature with this magic sword and roll a 20 on the attack roll, that target takes an extra 10 necrotic damage if it isn't a construct or an undead. I then also gain 10 temporary hit points.",
		descriptionFull : "When you attack a creature with this magic weapon and roll a 20 on the attack roll, that target takes an extra 10 necrotic damage if it isn't a construct or an undead. You also gain 10 temporary hit points.", // the SRD says 3d6 but that is incorrect
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "prefix",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/^(?=.*life)(?=.*stealing).*$/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'On 20 to hit: +10 Necrotic dmg, 10 temp HP';
					}
				},
				'If I include the words "Life Stealing" in a the name of a sword, it will be treated as the magic weapon Sword of Life Stealing. It does +10 necrotic damage when I roll a 20 on the attack roll and then gives me 10 temporary hit points. It doesn\'t work against Constructs or Undead.'
			]
		}
	},
	"sword of sharpness" : {
		name : "Sword of Sharpness",
		nameTest : "of Sharpness",
		source : [["SRD", 246], ["D", 206]],
		type : "weapon (any sword that deals slashing damage)",
		rarity : "rare",
		magicItemTable : "H",
		attunement : true,
		description : "When I roll a 20 to hit with this magic sword vs. a creature, it takes +14 slashing damage and I have a 5% chance of lobbing off one of its limbs. It does maximum damage vs. objects. With the command word, the blade gives bright light in a 10-ft radius \u0026 dim light in another 10 ft. " + (typePF ? "This stops if sheathed." : "The light stops when commanded again or sheathed."),
		descriptionLong : "When I attack a creature with this magic sword and roll a 20 on the attack roll, that target takes an extra 14 slashing damage and I roll another d20. If that turns op 20 as well, I lob off one of the target's limbs. If the creature has no limb to sever, you lop off a portion of its body instead. When used against an object, the damage dice are maximized. In addition, I can speak the sword's command word to cause the blade to shed bright light in a 10-foot radius and dim light for an additional 10 feet. Speaking the command word again or sheathing the sword puts out the light.",
		descriptionFull : "When you attack an object with this magic sword and hit, maximize your weapon damage dice against the target.\n   When you attack a creature with this weapon and roll a 20 on the attack roll, that target takes an extra 14 slashing damage. Then roll another d20. If you roll a 20, you lop off one of the target's limbs, with the effect of such loss determined by the DM. If the creature has no limb to sever, you lop off a portion of its body instead.\n   In addition, you can speak the sword's command word to cause the blade to shed bright light in a 10-foot radius and dim light for an additional 10 feet. Speaking the command word again or sheathing the sword puts out the light.", // the SRD says 4d6 but that is incorrect
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "prefix",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return (!(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon))) || (inObj.baseWeapon && !inObj.damage ? WeaponsList[inObj.baseWeapon].damage : inObj.damage)[2] !== "slashing";
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/of sharpness/i).test(v.WeaponText) && v.theWea.damage[2] == "slashing") {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'On 20 to hit: +14 damage \u0026 5% chance to sever limb; Max damage vs. objects';
					}
				},
				'If I include the words "of Sharpness" in a the name of a sword that deals slashing damage, it will be treated as the magic weapon Sword of Sharpness. It deals maximum damage against objects. On a roll of 20 to hit against creatures, it deals +14 slashing damage and has a 5% chance to lob off one limb.'
			]
		}
	},
	"sword of wounding" : {
		name : "Sword of Wounding",
		nameTest : "of Wounding",
		source : [["SRD", 246], ["D", 207]],
		type : "weapon (any sword)",
		rarity : "rare",
		magicItemTable : "G",
		attunement : true,
		description : "HP lost to this sword can be regained only by resting. Once per turn, I can wound a target hit with this sword. At the start of its turn, it takes 1d4 necrotic damage per such wound, and then makes a DC 15 Con save to stop all wounds on itself. " + (typePF ? "It or another can stop them as an action (DC 15 Medicine)." : "Alternatively, the target or another can stop them with an action (DC 15 Medicine check)."),
		descriptionLong : "Hit points lost to this magic sword can be regained only through a short or long rest, not by regeneration, magic, or other means. Once per turn, when I hit a creature with this sword, I can wound the target. At the start of each of the wounded creature's turns, it takes 1d4 necrotic damage for each time I've wounded it, and it can then make a DC 15 Constitution save to end the effect of all such wounds on itself. Alternatively, the wounded creature, or another within 5 feet of it, can use an action to make a DC 15 Wisdom (Medicine) check to end the effect of all such wounds on it.",
		descriptionFull : "Hit points lost to this weapon's damage can be regained only through a short or long rest, rather than by regeneration, magic, or any other means.\n   Once per turn, when you hit a creature with an attack using this magic weapon, you can wound the target. At the start of each of the wounded creature's turns, it takes 1d4 necrotic damage for each time you've wounded it, and it can then make a DC 15 Constitution saving throw, ending the effect of all such wounds on itself on a success. Alternatively, the wounded creature, or a creature within 5 feet of it, can use an action to make a DC 15 Wisdom (Medicine) check, ending the effect of such wounds on it on a success.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "prefix",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return !(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon));
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/of wounding/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'Damage can only be healed by resting; Once per turn, wound target';
					}
				},
				'If I include the words "of Wounding" in a the name of a sword, it will be treated as the magic weapon Sword of Wounding. Damage by the sword can only be regained with a short or long rest. Once per turn when I hit with the sword, I can inflict a lingering wound on a target, causing it pain every turn thereafter.'
			]
		}
	},
	"talisman of pure good" : {
		name : "Talisman of Pure Good",
		source : [["SRD", 247], ["D", 207]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "I can use this talisman as a holy symbol and if I'm a good cleric or paladin, it gives a +2 bonus on my spell attacks. As an action, I can use 1 of its 7 charges to have an evil creature within 120 ft make a DC 20 Dex save or be destroyed. Non-good creatures touching it take radiant damage, 8d6 if evil or 6d6 if neutral.",
		descriptionLong : "If I'm a good cleric or paladin, I can use this talisman as a holy symbol and it grants me a +2 bonus on my spell attack rolls. As an action, I can use 1 of its 7 charges to target one creature on the ground that I can see within 120 ft of me. If it is evil, a flaming fissure opens under it and it must succeed on a DC 20 Dexterity save or fall into the fissure and be destroyed, leaving no remains of it or the fissure. The talisman is destroyed when the last of its charges is used. Non-good creatures touching it take radiant damage, 8d6 if evil or 6d6 if neutral. This damage repeats at the end of each turn carrying the talisman.",
		descriptionFull : "This talisman is a mighty symbol of goodness. A creature that is neither good nor evil in alignment takes 6d6 radiant damage upon touching the talisman. An evil creature takes 8d6 radiant damage upon touching the talisman. Either sort of creature takes the damage again each time it ends its turn holding or carrying the talisman.\n   If you are a good cleric or paladin, you can use the talisman as a holy symbol, and you gain a +2 bonus to spell attack rolls while you wear or hold it.\n   The talisman has 7 charges. If you are wearing or holding it, you can use an action to expend 1 charge from it and choose one creature you can see on the ground within 120 feet of you. If the target is of evil alignment, a flaming fissure opens under it. The target must succeed on a DC 20 Dexterity saving throw or fall into the fissure and be destroyed, leaving no remains. The fissure then closes, leaving no trace of its existence. When you expend the last charge, the talisman disperses into motes of golden light and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a creature of good alignment",
		prereqeval : function(v) { return (/good/i).test(What("Alignment")); },
		usages : 7,
		recovery : "never",
		action : [["action", ""]],
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type == "attack" && (classes.known.paladin || classes.known.cleric) && (/good/i).test(What("Alignment"))) return 2;
				},
				"If I'm a good cleric or paladin, I gain a +2 bonus on my spell attack rolls while wearing or holding the Talisman of Pure Good."
			]
		}
	},
	"talisman of the sphere" : {
		name : "Talisman of the Sphere",
		source : [["SRD", 247], ["D", 207]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "While I'm holding this talisman, I double my proficiency bonus on the Intelligence (Arcana) check to control a sphere of annihilation. In addition, when I start your turn with control over a sphere of annihilation, I can use an action to levitate it 10 ft plus 10 ft times my Intelligence modifier.",
		descriptionFull : "When you make an Intelligence (Arcana) check to control a sphere of annihilation while you are holding this talisman, you double your proficiency bonus on the check. In addition, when you start your turn with control over a sphere of annihilation, you can use an action to levitate it 10 feet plus a number of additional feet equal to 10 \xD7 your Intelligence modifier.",
		attunement : true,
		weight : 1
	},
	"talisman of ultimate evil" : {
		name : "Talisman of Ultimate Evil",
		source : [["SRD", 247], ["D", 207]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "I can use this talisman as a holy symbol and if I'm an evil cleric or paladin, it gives a +2 bonus on my spell attacks. As an action, I can use 1 of its 6 charges to have a good creature within 120 ft make a DC 20 Dex save or be destroyed. Non-evil creatures touching it take necrotic damage, 8d6 if good or 6d6 if neutral.",
		descriptionLong : "If I'm an evil cleric or paladin, I can use this talisman as a holy symbol and it grants me a +2 bonus on my spell attack rolls. As an action, I can use 1 of its 6 charges to target one creature on the ground that I can see within 120 ft of me. If it is good, a flaming fissure opens under it and it must succeed on a DC 20 Dexterity save or fall into the fissure and be destroyed, leaving no remains of it or the fissure. The talisman is destroyed when the last of its charges is used. Non-evil creatures touching it take necrotic damage, 8d6 if good or 6d6 if neutral. This damage repeats at the end of each turn carrying the talisman.",
		descriptionFull : "This item symbolizes unrepentant evil. A creature that is neither good nor evil in alignment takes 6d6 necrotic damage upon touching the talisman. A good creature takes 8d6 necrotic damage upon touching the talisman. Either sort of creature takes the damage again each time it ends its turn holding or carrying the talisman.\n   If you are an evil cleric or paladin, you can use the talisman as a holy symbol, and you gain a +2 bonus to spell attack rolls while you wear or hold it.\n   The talisman has 6 charges. If you are wearing or holding it, you can use an action to expend 1 charge from the talisman and choose one creature you can see on the ground within 120 feet of you. If the target is of good alignment, a flaming fissure opens under it. The target must succeed on a DC 20 Dexterity saving throw or fall into the fissure and be destroyed, leaving no remains. The fissure then closes, leaving no trace of its existence. When you expend the last charge, the talisman dissolves into foul-smelling slime and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a creature of evil alignment",
		prereqeval : function(v) { return (/evil/i).test(What("Alignment")); },
		usages : 6,
		recovery : "never",
		action : [["action", ""]],
		calcChanges : {
			spellCalc : [
				function (type, spellcasters, ability) {
					if (type == "attack" && (classes.known.paladin || classes.known.cleric) && (/evil/i).test(What("Alignment"))) return 2;
				},
				"If I'm an evil cleric or paladin, I gain a +2 bonus on my spell attack rolls while wearing or holding the Talisman of Ultimate Evil."
			]
		}
	},
	"tome of clear thought" : {
		name : "Tome of Clear Thought",
		source : [["SRD", 247], ["D", 208]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book contains memory and logic exercises, and its words are charged with magic. If I spend 48 hours within a period of 6 days to study its contents and practicing its guidelines, my Intelligence score increases by 2, as does my maximum for that score. The tome then loses its magic, but regains it in a century.",
		descriptionFull : "This book contains memory and logic exercises, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Intelligence score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Tome of Clear Thought", "Intelligence");
		}
	},
	"tome of leadership and influence" : {
		name : "Tome of Leadership and Influence",
		source : [["SRD", 247], ["D", 208]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book contains guidelines for influencing and charming others and its words are charged with magic. If I spend 48 hours within 6 days studying its contents and practicing its guidelines, my Charisma score increases by 2, as does my maximum for that score. The tome then loses its magic, but regains it in a century.",
		descriptionFull : "This book contains guidelines for influencing and charming others, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Charisma score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Tome of Leadership and Influence", "Charisma");
		}
	},
	"tome of understanding" : {
		name : "Tome of Understanding",
		source : [["SRD", 247], ["D", 209]],
		type : "wondrous item",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This book contains intuition and insight exercises, and its words are charged with magic. If I spend 48 hours within a period of 6 days studying its contents and practicing its guidelines, my Wisdom score increases by 2, as does my maximum for that score. The tome then loses its magic, but regains it in a century.",
		descriptionFull : "This book contains intuition and insight exercises, and its words are charged with magic. If you spend 48 hours over a period of 6 days or fewer studying the book's contents and practicing its guidelines, your Wisdom score increases by 2, as does your maximum for that score. The manual then loses its magic, but regains it in a century.",
		weight : 5,
		eval : function() {
			MagicItemsList["manual of bodily health"].applyStatBonus("Tome of Understanding", "Wisdom");
		}
	},
	"trident of fish command" : {
		name : "Trident of Fish Command",
		source : [["SRD", 247], ["D", 209]],
		type : "weapon (trident)",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This magic trident has 3 charges. While I carry it, I can use an action and expend 1 charge to cast Dominate Beast (save DC 15) from it on a beast that has an innate swimming speed. The trident regains 1d3 expended charges daily at dawn.",
		descriptionFull : "This trident is a magic weapon. It has 3 charges. While you carry it, you can use an action and expend 1 charge to cast Dominate Beast (save DC 15) from it on a beast that has an innate swimming speed. The trident regains 1d3 expended charges daily at dawn.",
		attunement : true,
		weight : 4,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		weaponsAdd : ["Trident of Fish Command"],
		weaponOptions : {
			baseWeapon : "trident",
			regExpSearch : /^(?=.*trident)(?=.*fish)(?=.*command).*$/i,
			name : "Trident of Fish Command",
			source : [["SRD", 247], ["D", 209]]
		},
		fixedDC : 15,
		spellFirstColTitle : "Ch",
		spellcastingBonus : {
			name : "1 charge",
			spells : ["dominate beast"],
			selection : ["dominate beast"],
			firstCol : 1
		},
		spellChanges : {
			"dominate beast" : {
				description : "1 beast with swim speed save or charmed, follows telepathic commands, 1 a for complete control",
				changes : "Can only affect beasts with innate swim speed."
			}
		}
	},
	"universal solvent" : {
		name : "Universal Solvent",
		source : [["SRD", 248], ["D", 209]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "E",
		description : "This tube holds milky liquid with a strong alcohol smell. Once as an action, I can pour the contents of the tube onto a surface within reach. The liquid instantly dissolves up to 1 square foot of adhesive it touches, including sovereign glue.",
		descriptionFull : "This tube holds milky liquid with a strong alcohol smell. You can use an action to pour the contents of the tube onto a surface within reach. The liquid instantly dissolves up to 1 square foot of adhesive it touches, including sovereign glue."
	},
	"vicious weapon" : {
		name : "Vicious Weapon",
		nameTest : "Vicious",
		source : [["SRD", 248], ["D", 209]],
		type : "weapon (any)",
		rarity : "rare",
		magicItemTable : "G",
		description : "When I roll a 20 on my attack roll with this magic weapon, the target takes an extra 7 damage of the weapon's type.",
		descriptionFull : "When you roll a 20 on your attack roll with this magic weapon, the target takes an extra 7 damage of the weapon's type.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "suffix",
			descriptionChange : ["replace", "weapon"]
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && (/vicious/i).test(v.WeaponText)) {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'On 20 to hit: +7 damage';
					}
				},
				'If I include the word "Vicious" in a the name of a weapon, it will be treated as the magic weapon Vicious Weapon. On a roll of 20 to hit, it does +7 damage of the weapons type.'
			]
		}
	},
	"vorpal sword" : {
		name : "Vorpal Sword",
		nameTest : "Vorpal",
		source : [["SRD", 248], ["D", 209]],
		type : "weapon (any sword that deals slashing damage)",
		rarity : "legendary",
		magicItemTable : "I",
		attunement : true,
		description : "I have a +3 bonus to attack and damage rolls with this magic sword. It ignores slashing damage resistance. On a roll of 20 to hit, it cuts off one head" + (typePF ? "" : ", possibly killing it instantly") + ". If the target has no head, is immune to slashing damage, has legendary actions, or its neck is too wide, it takes +6d8 slashing damage instead.",
		descriptionFull : "You gain a +3 bonus to attack and damage rolls made with this magic weapon. In addition, the weapon ignores resistance to slashing damage.\n   When you attack a creature that has at least one head with this weapon and roll a 20 on the attack roll, you cut off one of the creature's heads. The creature dies if it can't survive without the lost head. A creature is immune to this effect if it is immune to slashing damage, doesn't have or need a head, has legendary actions, or the DM decides that the creature is too big for its head to be cut off with this weapon. Such a creature instead takes an extra 6d8 slashing damage from the hit.",
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "suffix",
			descriptionChange : ["replace", "sword"],
			excludeCheck : function (inObjKey, inObj) {
				var testRegex = /sword|scimitar|rapier/i;
				return (!(testRegex).test(inObjKey) && (!inObj.baseWeapon || !(testRegex).test(inObj.baseWeapon))) || (inObj.baseWeapon && !inObj.damage ? WeaponsList[inObj.baseWeapon].damage : inObj.damage)[2] !== "slashing";
			}
		},
		calcChanges : {
			atkAdd : [
				function (fields, v) {
					if (!v.theWea.isMagicWeapon && v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/vorpal/i).test(v.WeaponText) && v.theWea.damage[2] == "slashing") {
						v.theWea.isMagicWeapon = true;
						fields.Description = fields.Description.replace(/(, |; )?Counts as magical/i, '');
						fields.Description += (fields.Description ? '; ' : '') + 'Ignores slashing resistance; On 20 to hit: cut off head';
					}
				},
				'If I include the word "Vorpal" in a the name of a sword that deals slashing damage, it will be treated as the magic weapon Vorpal Sword. It has +3 to hit and damage and on a roll of 20 on the attack roll, it cuts off a head of the target.'
			],
			atkCalc : [
				function (fields, v, output) {
					if (v.isMeleeWeapon && (/sword|scimitar|rapier/i).test(v.baseWeaponName) && (/vorpal/i).test(v.WeaponText) && v.theWea.damage[2] == "slashing") {
						output.magic = v.thisWeapon[1] + 3;
					}
				}, ''
			]
		}
	},
	"wand of binding" : {
		name : "Wand of Binding",
		source : [["SRD", 248], ["D", 209]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn, which I can use to cast its spells. I can expend 1 charge to gain adv. on a check to escape a grapple or on a save vs. being paralyzed or restrained, the latter requiring me to use my reaction. When the last charge is used there is a 5% chance the wand is destroyed.",
		descriptionLong : "This wand has 7 charges, regaining 1d6+1 at dawn. I can expend charges to cast (save DC 17) Hold Monster (5 charges) or Hold Person (2 charges). As a reaction, I can expend 1 charge to gain adv. on a save to avoid being paralyzed or restrained. I can also expend 1 charge to gain adv. on a check to escape a grapple. If I expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		descriptionFull : "This wand has 7 charges for the following properties. It regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.\n   " + toUni("Spells") + ". While holding the wand, you can use an action to expend some of its charges to cast one of the following spells (save DC 17): Hold Monster (5 charges) or Hold Person (2 charges).\n   " + toUni("Assisted Escape") + ". While holding the wand, you can use your reaction to expend 1 charge and gain advantage on a saving throw you make to avoid being paralyzed or restrained, or you can expend 1 charge and gain advantage on any check you make to escape a grapple.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		action : [["reaction", " (adv. on save)"]],
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 17,
		spellcastingBonus : [{
			name : "2 charges",
			spells : ["hold person"],
			selection : ["hold person"],
			firstCol : 2
		}, {
			name : "5 charges",
			spells : ["hold monster"],
			selection : ["hold monster"],
			firstCol : 5
		}]
	},
	"wand of enemy detection" : {
		name : "Wand of Enemy Detection",
		source : [["SRD", 248], ["D", 210]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn. As an action, I can expend 1 charge to speak its command word. For 1 minute, I know the direction of the nearest creature hostile to me in 60 ft, regardless of it being ethereal, invisible, disguised, or hidden. When the last charge is used there is a 5% chance it's destroyed.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action and expend 1 charge to speak its command word. For the next minute, you know the direction of the nearest creature hostile to you within 60 feet, but not its distance from you. The wand can sense the presence of hostile creatures that are ethereal, invisible, disguised, or hidden, as well as those in plain sight. The effect ends if you stop holding the wand.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		action : [["action", ""]]
	},
	"wand of fear" : {
		name : "Wand of Fear",
		source : [["SRD", 248], ["D", 210]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn, which I can use to cast Command (1 charge), or as an action have all in a 60-ft cone (2 charges) make a DC 15 Wis save or be frightened and move away from me for 1 min (save end of each turn). When using the last charge, 5% chance the wand is destroyed.",
		descriptionLong : "This wand has 7 charges, regaining 1d6+1 charges at dawn. As an action, I can expend 1 charge to cast Command, but only to use \"flee\" or \"grovel\". I can also use an action to expend 2 charges, causing the wand's tip to emit a 60-ft cone of amber light. All within the cone must make a DC 15 Wis save or be frightened of me for 1 minute. While frightened, a target moves away from me as fast as possible, can only use the Dash action, and is unwilling to move within 30 ft of me, but can repeat thesave at the end of each of its turn. When the last charge is used, roll a d20. On a 1, the wand crumbles into ashes.",
		descriptionFull : "This wand has 7 charges for the following properties. It regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.\n   " + toUni("Command") + ". While holding the wand, you can use an action to expend 1 charge and command another creature to flee or grovel, as with the Command spell (save DC 15).\n   " + toUni("Cone of Fear") + ". While holding the wand, you can use an action to expend 2 charges, 	. Each creature in the cone must succeed on a DC 15 Wisdom saving throw or become frightened of you for 1 minute. While it is frightened in this way, a creature must spend its turns trying to move as far away from you as it can, and it can't willingly move to a space within 30 feet of you. It also can't take reactions. For its action, it can use only the Dash action or try to escape from an effect that prevent it from moving. If it has nowhere it can move, the creature can use the Dodge action. At the end of each of its turns, a creature can repeat the saving throw, ending the effect on itself on a success.",
		attunement : true,
		weight : 1,
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 15,
		spellcastingBonus : {
			name : "1 charge",
			spells : ["command"],
			selection : ["command"],
			firstCol : 1
		},
		spellChanges : {
			"command" : {
				description : '1 creature save or has to follow an one-word command on its next turn, either "flee" or "grovel"',
				changes : 'When casting form the Wand of Fear, I can only use the "flee" or "grovel" command.'
			}
		}
	},
	"wand of fireballs" : {
		name : "Wand of Fireballs",
		source : [["SRD", 248], ["D", 210]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn. As an action, I can expend 1 or more of its charges to cast Fireball (save DC 15) from it as a 3rd level spell. The spell slot level increases by one for each charge expended after the first. When the last charge is used, roll a d20. On a 1, the wand crumbles into ashes.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 or more of its charges to cast the Fireball spell (save DC 15) from it. For 1 charge, you cast the 3rd-level version of the spell. You can increase the spell slot level by one for each additional charge you expend.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 15,
		spellcastingBonus : {
			name : "1+ charges",
			spells : ["fireball"],
			selection : ["fireball"],
			firstCol : "1+"
		},
		spellChanges : {
			"fireball" : {
				description : "20-ft rad all crea 8d6 Fire dmg (+1d6/extra charge); save halves; unattended flammable objects ignite",
				changes : "For 1 charge, it is cast as the 3rd-level version of the spell, but I can increase the spell slot level by one for each additional charge expended."
			}
		}
	},
	"wand of lightning bolts" : {
		name : "Wand of Lightning Bolts",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn. As an action, I can expend 1 or more of its charges to cast Lightning Bolt (save DC 15) from it as a 3rd level spell. The spell slot level increases by one for each charge expended after the first. When the last charge is used, roll a d20. On a 1, the wand crumbles into ashes.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 or more of its charges to cast the Lightning Bolt spell (save DC 15) from it. For 1 charge, you cast the 3rd-level version of the spell. You can increase the spell slot level by one for each additional charge you expend.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 15,
		spellcastingBonus : {
			name : "1+ charges",
			spells : ["lightning bolt"],
			selection : ["lightning bolt"],
			firstCol : "1+"
		},
		spellChanges : {
			"lightning bolt" : {
				description : "100-ft long 5-ft wide all 8d6 Lightn. dmg (+1d6/extra charge); save halves; unattended objects ignite",
				changes : "For 1 charge, it is cast as the 3rd-level version of the spell, but I can increase the spell slot level by one for each additional charge expended."
			}
		}
	},
	"wand of magic detection" : {
		name : "Wand of Magic Detection",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "This wand has 3 charges. While holding it, I can expend 1 charge as an action to cast Detect Magic from it. The wand regains 1d3 expended charges daily at dawn.",
		descriptionFull : "This wand has 3 charges. While holding it, you can expend 1 charge as an action to cast the Detect Magic spell from it. The wand regains 1d3 expended charges daily at dawn.",
		weight : 1,
		spellcastingBonus : {
			name : "1 charge",
			spells : ["detect magic"],
			selection : ["detect magic"],
			firstCol : 1
		},
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		spellFirstColTitle : "Ch"
	},
	"wand of magic missiles" : {
		name : "Wand of Magic Missiles",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn. As an action, I can expend 1 or more of its charges to cast Magic Missile from it as a 1st level spell. The spell slot level increases by one for each charge expended after the first. When the last charge is used, roll a d20. On a 1, the wand crumbles into ashes.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 or more of its charges to cast the Magic Missile spell from it. For 1 charge, you cast the 1st-level version of the spell. You can increase the spell slot level by one for each additional charge you expend.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		weight : 1,
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		spellcastingBonus : {
			name : "1+ charges",
			spells : ["magic missile"],
			selection : ["magic missile"],
			firstCol : "1+"
		},
		spellChanges : {
			"magic missile" : {
				description : "3+1/extra charge darts hit creature(s) I can see for 1d4+1 Force dmg per dart",
				changes : "For 1 charge, it is cast as the 1st-level version of the spell, but I can increase the spell slot level by one for each additional charge expended."
			}
		}
	},
	"wand of paralysis" : {
		name : "Wand of Paralysis",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges, regaining 1d6+1 at dawn. As an action, I can expend 1 charge to have a creature within 60 ft make a DC 15 Constitution saving throw or be paralyzed for 1 minute. It can repeat this save at the end of each of its turns. When the last charge is used, roll a d20. On a 1, the wand crumbles into ashes.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 of its charges to cause a thin blue ray to streak from the tip toward a creature you can see within 60 feet of you. The target must succeed on a DC 15 Constitution saving throw or be paralyzed for 1 minute. At the end of each of the target's turns, it can repeat the saving throw, ending the effect on itself on a success.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		action : [["action", ""]]
	},
	"wand of polymorph" : {
		name : "Wand of Polymorph",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "very rare",
		magicItemTable : "H",
		description : "This wand has 7 charges and regains 1d6+1 expended charges daily at dawn. As an action, I can expend 1 of its charges to cast Polymorph (save DC 15) from it. If I expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 of its charges to cast the Polymorph spell (save DC 15) from it.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 15,
		spellcastingBonus : {
			name : "1 charge",
			spells : ["polymorph"],
			selection : ["polymorph"],
			firstCol : 1
		}
	},
	"wand of secrets" : {
		name : "Wand of Secrets",
		source : [["SRD", 249], ["D", 211]],
		type : "wand",
		rarity : "uncommon",
		magicItemTable : "B",
		description : "The wand has 3 charges. While holding it, I can use an action to expend 1 of its charges, and if a secret door or trap is within 30 feet of me, the wand pulses and points at the one nearest to me. The wand regains 1d3 expended charges daily at dawn.",
		descriptionFull : "The wand has 3 charges. While holding it. you can use an action to expend 1 of its charges, and if a secret door or trap is within 30 feet of you, the wand pulses and points at the one nearest to you. The wand regains 1d3 expended charges daily at dawn.",
		weight : 1,
		usages : 3,
		recovery : "dawn",
		additional : "regains 1d3",
		action : [["action", ""]]
	},
	"wand of the war mage, +1, +2, or +3" : {
		name : "Wand of the War Mage, +1, +2, or +3",
		source : [["SRD", 249], ["D", 212]],
		type : "wand",
		description : "While I am holding this wand, I gain a bonus to spell attack rolls determined by the wand's rarity: uncommon (+1), rare (+2), or very rare (+3). In addition, I ignore half cover when making a spell attack.",
		descriptionFull : "While you are holding this wand, you gain a bonus to spell attack rolls determined by the wand's rarity: uncommon (+1), rare (+2), or very rare (+3). In addition, you ignore half cover when making a spell attack.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		choices : ["+1 Wand (uncommon)", "+2 Wand (rare)", "+3 Wand (very rare)"],
		"+1 wand (uncommon)" : {
			name : "Wand of the War Mage +1",
			rarity : "uncommon",
			magicItemTable : "F",
			description : "While I am holding this wand, I gain a +1 bonus to spell attack rolls and I ignore half cover when making a spell attack.",
			calcChanges : {
				spellCalc : [
					function (type, spellcasters, ability) {
						if (type == "attack") return 1;
					},
					"I gain a +1 bonus to spell attack rolls."
				]
			}
		},
		"+2 wand (rare)" : {
			name : "Wand of the War Mage +2",
			rarity : "rare",
			magicItemTable : "G",
			description : "While I am holding this wand, I gain a +2 bonus to spell attack rolls and I ignore half cover when making a spell attack.",
			calcChanges : {
				spellCalc : [
					function (type, spellcasters, ability) {
						if (type == "attack") return 2;
					},
					"I gain a +2 bonus to spell attack rolls."
				]
			}
		},
		"+3 wand (very rare)" : {
			name : "Wand of the War Mage +3",
			rarity : "very rare",
			magicItemTable : "H",
			description : "While I am holding this wand, I gain a +3 bonus to spell attack rolls and I ignore half cover when making a spell attack.",
			calcChanges : {
				spellCalc : [
					function (type, spellcasters, ability) {
						if (type == "attack") return 3;
					},
					"I gain a +3 bonus to spell attack rolls."
				]
			}
		}
	},
	"wand of web" : {
		name : "Wand of Web",
		source : [["SRD", 249], ["D", 212]],
		type : "wand",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "This wand has 7 charges and regains 1d6+1 expended charges daily at dawn. As an action, I can expend 1 of its charges to cast Web (save DC 15) from it. If I expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 of its charges to cast the Web spell (save DC 15) from it.\n   The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into ashes and is destroyed.",
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		spellFirstColTitle : "Ch",
		fixedDC : 15,
		spellcastingBonus : {
			name : "1 charge",
			spells : ["web"],
			selection : ["web"],
			firstCol : 1
		}
	},
	"wand of wonder" : {
		name : "Wand of Wonder",
		source : [["SRD", 249], ["D", 212]],
		type : "wand",
		rarity : "rare",
		magicItemTable : "G",
		description : "This wand has 7 charges and regains 1d6+1 expended charges daily at dawn. If I expend its last charge, roll a d20. On a 1, the wand crumbles into dust and is destroyed. As an action while holding it, I can expend 1 charge, choose a target within 120 ft, and roll a 1d100 to see what happens, see the Notes page.",
		descriptionFull : "This wand has 7 charges. While holding it, you can use an action to expend 1 of its charges and choose a target within 120 feet of you. The target can be a creature, an object, or a point in space. Roll d100 and consult the following table to discover what happens." + desc([
			"If the effect causes you to cast a spell from the wand, the spell's save DC is 15. If the spell normally has a range expressed in feet, its range becomes 120 feet if it isn't already.",
			"If an effect covers an area, you must center the spell on and include the target. If an effect has multiple possible subjects, the DM randomly determines which ones are affected.",
			"The wand regains 1d6+1 expended charges daily at dawn. If you expend the wand's last charge, roll a d20. On a 1, the wand crumbles into dust and is destroyed.\n",
			toUni("d100 and effects"),
			toUni("01-05") + ". You cast Slow.",
			toUni("06-10") + ". You cast Faerie Fire.",
			toUni("11-15") + ". You are stunned until the start of your next turn, believing something awesome just happened.",
			toUni("16-20") + ". You cast Gust of Wind.",
			toUni("21-25") + ". You cast Detect Thoughts on the target you chose. If you didn't target a creature, you instead take 1d6 psychic damage.",
			toUni("26-30") + ". You cast Stinking Cloud.",
			toUni("31-33") + ". Heavy rain falls in a 60-foot radius centered on the target. The area becomes lightly obscured. The rain falls until the start of your next turn.",
			toUni("34-36") + ". An animal appears in the unoccupied space nearest the target. The animal isn't under your control and acts as it normally would. Roll a d100 to determine which animal appears. On a 01-25, a rhinoceros appears; on a 26-50, an elephant appears; and on a 51-100, a rat appears.",
			toUni("37-46") + ". You cast Lightning Bolt.",
			toUni("47-49") + ". A cloud of 600 oversized butterflies fills a 30-foot radius centered on the target. The area becomes heavily obscured. The butterflies remain for 10 minutes.",
			toUni("50-53") + ". You enlarge the target as if you had cast Enlarge/Reduce. If the target can't be affected by that spell or if you didn't target a creature, you become the target.",
			toUni("54-58") + ". You cast Darkness.",
			toUni("59-62") + ". Grass grows on the ground in a 60-foot radius centered on the target. If grass is already there, it grows to ten times its normal size and remains overgrown for 1 minute.",
			toUni("63-65") + ". An object of the DM's choice disappears into the Ethereal Plane. The object must be neither worn nor carried, within 120 feet of the target, and no larger than 10 feet in any dimension.",
			toUni("66-69") + ". You shrink yourself as if you had cast Enlarge/Reduce on yourself.",
			toUni("70-79") + ". You cast Fireball.",
			toUni("80-84") + ". You cast Invisibility.",
			toUni("85-87") + ". Leaves grow from the target. If you chose a point in space as the target, leaves sprout from the creature nearest to that point. Unless they are picked off, the leaves turn brown and fall off after 24 hours.",
			toUni("88-90") + ". A stream of 1d4 \xD7 10 gems, each worth 1 gp, shoots from the wand's tip in a line 30 feet long and 5 feet wide. Each gem deals 1 bludgeoning damage, and the total damage of the gems is divided equally among all creatures in the line.",
			toUni("91-95") + ". A burst of colorful shimmering light extends from you in a 30-foot radius. You and each creature in the area that can see must succeed on a DC 15 Constitution saving throw or become blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
			toUni("96-97") + ". The target's skin turns bright blue for 1d10 days. If you chose a point in space, the creature nearest to that point is affected.",
			toUni("98-00") + ". If you targeted a creature, it must make a DC 15 Constitution saving throw. If you didn't target a creature, you become the target and must make the saving throw. If the saving throw fails by 5 or more, the target is instantly petrified. On any other failed save, the target is restrained and begins to turn to stone. While restrained in this way, the target must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the target is freed by the Greater Restoration spell or similar magic."
		]),
		attunement : true,
		weight : 1,
		prerequisite : "Requires attunement by a spellcaster",
		prereqeval : function(v) { return v.isSpellcaster; },
		usages : 7,
		recovery : "dawn",
		additional : "regains 1d6+1",
		toNotesPage : [{
			name : "Table of Effects",
			popupName : "Wand of Wonder's Table of Effects",
			note : [
				"As an action I can expend 1 of the wand's 7 charges and choose a target within 120 ft of me. The target can be a creature, an object, or a point in space. Roll a d100 and consult the effect below to discover what happens.",
				"If the effect causes me to cast a spell from the wand, the spell's save DC is 15. If the spell normally has a range expressed in feet, its range becomes 120 ft if it isn't already.",
				"If an effect covers an area, I must center the spell on and include the target. If an effect has multiple possible subjects, the DM randomly determines which ones are affected.",
				"\nd100 RESULT AND EFFECTS",
				"01-05: I cast Slow.",
				"06-10: I cast Faerie Fire.",
				"11-15: I am stunned until the start of my next turn, believing something awesome just happened.",
				"16-20: I cast Gust of Wind.",
				"21-25: I cast Detect Thoughts on the target I chose. If I didn't target a creature, I instead take 1d6 psychic damage.",
				"26-30: I cast Stinking Cloud.",
				"31-33: Heavy rain falls in a 60-ft radius centered on the target. The area becomes lightly obscured. The rain falls until the start of my next turn.",
				"34-36: An animal appears in the unoccupied space nearest the target. The animal isn't under my control and acts as it normally would. Roll a d100 to determine which animal appears. On a 01-25, a rhinoceros appears; on a 26-50, an elephant appears; and on a 51-100, a rat appears.",
				"37-46: I cast Lightning Bolt.",
				"47-49: A cloud of 600 oversized butterflies fills a 30-ft radius centered on the target. The area becomes heavily obscured. The butterflies remain for 10 minutes.",
				"50-53: I enlarge the target as if I had cast Enlarge/Reduce. If the target can't be affected by that spell or if I didn't target a creature, I become the target.",
				"54-58: I cast Darkness.",
				"59-62: Grass grows on the ground in a 60-ft radius centered on the target. If grass is already there, it grows to ten times its normal size and remains overgrown for 1 minute.",
				"63-65: An object of the DM's choice disappears into the Ethereal Plane. The object must be neither worn nor carried, within 120 ft of the target, and no larger than 10 ft in any dimension.",
				"66-69: I shrink myself as if I had cast Enlarge/Reduce on myself.",
				"70-79: I cast Fireball.",
				"80-84: I cast Invisibility.",
				"85-87: Leaves grow from the target. If I chose a point in space as the target, leaves sprout from the creature nearest to that point. Unless they are picked off, the leaves turn brown and fall off after 24 hours.",
				"88-90: A stream of 1d4 \xD7 10 gems, each worth 1 gp, shoots from the wand's tip in a line 30 ft long and 5 ft wide. Each gem deals 1 bludgeoning damage, and the total damage of the gems is divided equally among all creatures in the line.",
				"91-95: A burst of colorful shimmering light extends from me in a 30-ft radius. Me and each creature in the area that can see must succeed on a DC 15 Constitution saving throw or become blinded for 1 minute. A creature can repeat the saving throw at the end of each of its turns, ending the effect on itself on a success.",
				"96-97: The target's skin turns bright blue for 1d10 days. If I chose a point in space, the creature nearest to that point is affected.",
				"98-00: If I targeted a creature, it must make a DC 15 Constitution saving throw. If I didn't target a creature, I become the target and must make the saving throw. If the saving throw fails by 5 or more, the target is instantly petrified. On any other failed save, the target is restrained and begins to turn to stone. While restrained in this way, the target must repeat the saving throw at the end of its next turn, becoming petrified on a failure or ending the effect on a success. The petrification lasts until the target is freed by the Greater Restoration spell or similar magic."
			]
		}],
		fixedDC : 15,
		spellcastingBonus : {
			name : "Random option",
			spells : ["slow", "faerie fire", "gust of wind", "detect thoughts", "stinking cloud", "lightning bolt", "enlarge/reduce", "darkness", "fireball", "invisibility"],
			selection : ["slow", "faerie fire", "gust of wind", "detect thoughts", "stinking cloud", "lightning bolt", "enlarge/reduce", "darkness", "fireball", "invisibility"],
			times : 10
		},
		spellChanges : {
			"darkness" : { range : "120 ft", changes : "All Wand of Wonder spells have a range of 120 ft." },
			"enlarge/reduce" : { range : "120 ft", changes : "All Wand of Wonder spells have a range of 120 ft." },
			"fearie fire" : { range : "120 ft", changes : "All Wand of Wonder spells have a range of 120 ft." },
			"stinking cloud" : { range : "120 ft", changes : "All Wand of Wonder spells have a range of 120 ft." }
		}
	},
	"weapon, +1, +2, or +3" : {
		name : "Weapon, +1, +2, or +3",
		source : [["SRD", 250], ["D", 213]],
		type : "weapon (any)",
		description : "I have a bonus to attack and damage rolls made with this magic weapon. The bonus is determined by the rarity of the magic item: uncommon (+1), rare (+2), or very rare (+3). Select the bonus using the little square button in this magic item line.",
		descriptionFull : "You have a bonus to attack and damage rolls made with this magic weapon. The bonus is determined by the weapon's rarity: uncommon (+1), rare (+2), or very rare (+3).",
		allowDuplicates : true,
		chooseGear : {
			type : "weapon",
			prefixOrSuffix : "brackets",
			descriptionChange : ["replace", "weapon"]
		},
		choices : ["+1 Weapon (uncommon)", "+2 Weapon (rare)", "+3 Weapon (very rare)"],
		"+1 weapon (uncommon)" : {
			name : "Weapon +1",
			nameTest : "+1 Weapon",
			rarity : "uncommon",
			magicItemTable : "F",
			description : "I have a +1 bonus to attack and damage rolls made with this magic weapon.",
			allowDuplicates : true
		},
		"+2 weapon (rare)" : {
			name : "Weapon +2",
			nameTest : "+2 Weapon",
			rarity : "rare",
			magicItemTable : "G",
			description : "I have a +2 bonus to attack and damage rolls made with this magic weapon.",
			allowDuplicates : true
		},
		"+3 weapon (very rare)" : {
			name : "Weapon +3",
			nameTest : "+3 Weapon",
			rarity : "very rare",
			magicItemTable : "H",
			description : "I have a +3 bonus to attack and damage rolls made with this magic weapon.",
			allowDuplicates : true
		}
	},
	"well of many worlds" : {
		name : "Well of Many Worlds",
		source : [["SRD", 250], ["D", 213]],
		type : "wondrous item",
		rarity : "legendary",
		magicItemTable : "I",
		description : "As an action, I can unfold this black cloth, 6 ft in diameter, and place it on a solid surface, whereupon it creates a two-way portal to another world or plane, a random one each time. I can use an action to grab it from the edges and fold it, closing the portal. Once used in this way, it can't do so again for 1d8 hours.",
		descriptionFull : "This fine black cloth, soft as silk, is folded up to the dimensions of a handkerchief. It unfolds into a circular sheet 6 feet in diameter.\n   You can use an action to unfold and place the well of many worlds on a solid surface, whereupon it creates a two-way portal to another world or plane of existence. Each time the item opens a portal, the DM decides where it leads. You can use an action to close an open portal by taking hold of the edges of the cloth and folding it up. Once well of many worlds has opened a portal, it can't do so again for 1d8 hours.",
		action : [["action", " (place/fold)"]],
		usages : 1,
		recovery : "1d8 h"
	},
	"wind fan" : {
		name : "Wind Fan",
		source : [["SRD", 250], ["D", 213]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "While holding this fan, I can use an action to cast Gust of Wind (save DC 13) from it. Once used, the fan shouldn't be used again until the next dawn. Each time it is used again before then, it has a cumulative 20% chance of not working and tearing into useless, nonmagical tatters.",
		descriptionFull : "While holding this fan, you can use an action to cast the Gust of Wind spell (save DC 13) from it. Once used, the fan shouldn't be used again until the next dawn. Each time it is used again before then, it has a cumulative 20% chance of not working and tearing into useless, nonmagical tatters.",
		usages : 1,
		recovery : "dawn",
		additional : "more uses +20% to destroy",
		fixedDC : 13,
		spellcastingBonus : {
			name : "Once per dawn",
			spells : ["gust of wind"],
			selection : ["gust of wind"],
			firstCol : "oncelr"
		}
	},
	"winged boots" : {
		name : "Winged Boots",
		source : [["SRD", 250], ["D", 214]],
		type : "wondrous item",
		rarity : "uncommon",
		magicItemTable : "F",
		description : "These boots grant me a flying speed equal to my walking speed. I can use them to fly for up to 4 hours, all at once or incremental, using a minimum of 1 minute each time. If I'm flying when the duration expires, I descend 30 ft per round. They regain 2 hours of flying capability for every 12 hours they aren't in use.",
		descriptionFull : "While you wear these boots, you have a flying speed equal to your walking speed. You can use the boots to fly for up to 4 hours, all at once or in several shorter flights, each one using a minimum of 1 minute from the duration. If you are flying when the duration expires, you descend at a rate of 30 feet per round until you land.\n   The boots regain 2 hours of flying capability for every 12 hours they aren't in use.",
		attunement : true,
		usages : "240 min",
		recovery : "Special",
		additional : "regains 2h/12h"
	},
	"wings of flying" : {
		name : "Wings of Flying",
		source : [["SRD", 250], ["D", 214]],
		type : "wondrous item",
		rarity : "rare",
		magicItemTable : "G",
		description : "While wearing this cloak, I can use an action to speak its command word. This turns the cloak into a pair of bat wings or bird wings on my back for 1 hour or until I repeat the command word as an action. The wings give me a flying speed of 60 ft. When they disappear, I can't use them again for 1d12 hours.",
		descriptionFull : "While wearing this cloak, you can use an action to speak its command word. This turns the cloak into a pair of bat wings or bird wings on your back for 1 hour or until you repeat the command word as an action. The wings give you a flying speed of 60 feet. When they disappear, you can't use them again for 1d12 hours.",
		attunement : true,
		action : [["action", " (start/stop)"]],
		usages : 1,
		recovery : "1d12 h"
	}
/*	Excluding artifacts for now as most would require new functionality
	"orb of dragonkind" : {
		name : "Orb of Dragonkind",
		source : [["SRD", 252], ["D", 225]],
		type : "wondrous item",
		rarity : "artifact",
		description : "",
		descriptionFull : "Ages past, on the world of Krynn, elves and humans waged a terrible war against evil dragons. When the world seemed doomed, the wizards of the Towers of High Sorcery came together and worked their greatest magic, forging five Orbs of Dragonkind (or Dragon Orbs) to help them defeat the dragons. One orb was taken to each of the five towers, and there they were used to speed the war toward a victorious end. The wizards used the orbs to lure dragons to them, then destroyed the dragons with powerful magic.\n   As the Towers of High Sorcery fell in later ages, the orbs were destroyed or faded into legend, and only three are thought to survive. Their magic has been warped and twisted over the centuries, so although their primary purpose of calling dragons still functions, they also allow some measure of control over dragons.\n   Each orb contains the essence of an evil dragon, a presence that resents any attempt to coax magic from it. Those lacking in force of personality might find themselves enslaved to an orb.\n   An orb is an etched crystal globe about 10 inches in diameter. When used, it grows to about 20 inches in diameter, and mist swirls inside it.\n   While attuned to an orb, you can use an action to peer into the orb's depths and speak its command word. You must then make a DC 15 Charisma check. On a successful check, you control the orb for as long as you remain attuned to it. On a failed check, you become charmed by the orb for as long as you remain attuned to it.\n   While you are charmed by the orb, you can't voluntarily end your attunement to it, and the orb casts Suggestion on you at will (save DC 18), urging you to work toward the evil ends it desires. The dragon essence within the orb might want many things: the annihilation of a particular people, freedom from the orb, to spread suffering in the world, to advance the worship of Tiamat, or something else the DM decides.\n   " + toUni("Random Properties") + ". An Orb of Dragon kind has the following random properties:\n \u2022 2 minor beneficial properties\n \u2022 1 minor detrimental property\n \u2022 1 major detrimental property\n\n" + toUni("Spells") + ". The orb has 7 charges and regains 1d4+3 expended charges daily at dawn. If you control the orb, you can use an action and expend 1 or more charges to cast one of the following spells (save DC 18) from it: Cure Wounds (5th-level version, 3 charges), Daylight (1 charge), Death Ward (2 charges), or Scrying (3 charges). You can also use an action to cast the Detect Magic spell from the orb without using any charges.\n   " + toUni("Call Dragons") + ". While you control the orb, you can use an action to cause the artifact to issue a telepathic call that extends in all directions for 40 miles. Evil dragons in range feel compelled to come to the orb as soon as possible by the most direct route. Dragon deities such as Tiamat are unaffected by this call. Dragons drawn to the orb might be hostile toward you for compelling them against their will. Once you have used this property, it can't be used again for 1 hour.\n   " + toUni("Destroying an Orb") + ". An Orb of Dragonkind appears fragile but is impervious to most damage, including the attacks and breath weapons of dragons. A Disintegrate spell or one good hit from a +3 magic weapon is sufficient to destroy an orb, however.",
		weight : 3,
		attunement : true
	}
*/
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Race w/Subrace (RaceList)
 *  - Race Variant (RaceSubList) 
 **/
var RaceList = {
	"dragonborn" : {
		regExpSearch : /dragonborn/i,
		name : "Dragonborn",
		source : [["SRD", 5], ["P", 34]],
		plural : "Dragonborn",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", "Draconic"],
		weaponOptions : {
			regExpSearch : /^(?=.*breath)(?=.*weapon).*$/i,
			name : "Breath weapon",
			source : [["SRD", 5], ["P", 34]],
			ability : 3,
			type : "Natural",
			damage : [2, 6, "fire"],
			range : "15-ft cone",
			description : "Hits all in area; Dex save, success - half damage; Usable only once per short rest",
			abilitytodamage : false,
			dc : true,
			dbBreathWeapon : true
		},
		weaponsAdd : ["Breath Weapon"],
		age : " reach adulthood by 15 and live around 80 years",
		height : " stand well over 6 feet tall (5'6\" + 2d8\")",
		weight : " weigh around 240 lb (175 + 2d8 \xD7 2d6 lb)",
		heightMetric : " stand well over 1,8 metres tall (170 + 5d8 cm)",
		weightMetric : " weigh around 110 kg (80 + 5d8 \xD7 4d6 / 10 kg)",
		scores : [2, 0, 0, 0, 0, 1],
		trait : "Dragonborn (+2 Strength, +1 Charisma)\nDraconic Ancestry: Choose one type of dragon using the \"Racial Options\" button. I gain a breath weapon and damage resistance as determined by the dragon type chosen.\nBreath Weapon: Exhale destructive energy as an action with a size, shape, saving throw type, and damage type as found in the table. All in the area must make a saving throw with DC 8 + Con modifier + prof bonus. It does 2d6 (+1d6 at level 6, 11, 16) damage, half as much damage on a successful save. I can use it again after a short rest.",
		features : {
			"draconic ancestry" : {
				name : "Draconic Ancestry",
				limfeaname : "Breath Weapon",
				minlevel : 1,
				usages : 1,
				additional : levels.map(function (n) {
					return (n < 6 ? 2 : n < 11 ? 3 : n < 16 ? 4 : 5) + 'd6';
				}),
				recovery : "short rest",
				action : ["action", ""],
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.theWea.dbBreathWeapon && CurrentRace.known === 'dragonborn' && CurrentRace.variant) {
								fields.Damage_Type = CurrentRace.dmgres[0];
								fields.Description = fields.Description.replace(/(dex|con) save/i, ((/cold|poison/i).test(CurrentRace.dmgres[0]) ? 'Con' : 'Dex') + ' save');
								fields.Range = (/black|blue|brass|bronze|copper/i).test(CurrentRace.variant) ? '5-ft \u00D7 30-ft line' : '15-ft cone';
							};
						}
					],
					atkCalc : [
						function (fields, v, output) {
							if (v.theWea.dbBreathWeapon && CurrentRace.known === 'dragonborn' && CurrentRace.level > 5) {
								output.die = output.die.replace('2d6', (CurrentRace.level < 11 ? 3 : CurrentRace.level < 16 ? 4 : 5) + 'd6');
							};
						}
					]
				}
			}
		},
		variants : ["black", "blue", "brass", "bronze", "copper", "gold", "green", "red", "silver", "white"]
	},
	"hill dwarf" : {
		regExpSearch : /^((?=.*(neidar|klar))|((?=.*\b(dwarfs?|dwarves|dwarfish|dwarvish|dwarven)\b)(?=.*\b(hill|gold)\b))).*$/i,
		name : "Hill dwarf",
		sortname : "Dwarf, Hill",
		source : [["SRD", 3], ["P", 20]],
		plural : "Hill dwarves",
		size : 3,
		speed : {
			walk : { spd : 25, enc : 25 }
		},
		languageProfs : ["Common", "Dwarvish"],
		vision : [["Darkvision", 60]],
		savetxt : { adv_vs : ["poison"] },
		dmgres : ["Poison"],
		weaponProfs : [false, false, ["battleaxe", "handaxe", "warhammer", "light hammer"]],
		toolProfs : [["Smith, brewer, or mason tools", 1]],
		age : " are considered young until they are 50 and live about 350 years",
		height : " stand between 4 and 5 feet tall (3'8\" + 2d4\")",
		weight : " weigh around 150 lb (115 + 2d4 \xD7 2d6 lb)",
		heightMetric : " stand between 1,2 and 1,5 metres tall (110 + 5d4 cm)",
		weightMetric : " weigh around 70 kg (55 + 5d4 \xD7 4d6 / 10 kg)",
		scores : [0, 0, 2, 0, 1, 0],
		trait : "Hill Dwarf (+2 Constitution, +1 Wisdom)\n\nStonecunning: Whenever I make an Intelligence (History) check related to the origin of stonework, I am considered proficient in the History skill and add double my proficiency bonus to the check, instead of my normal proficiency bonus.\n\nDwarven Toughness: My hit point maximum increases by 1 for every level I have.",
		calcChanges : {
			hp : function (totalHD) { return [totalHD, "Dwarven Toughness"]; }
		}
	},
	"high elf" : {
		regExpSearch : /^(?!.*half)((?=.*(silvanesti|qualinesti))|((?=.*\b(elfs?|elves|elvish|elven)\b)(?=.*\b(high|sun|moon|grey|gray|valleys?|silvers?)\b))).*$/i,
		name : "High elf",
		sortname : "Elf, High",
		source : [["SRD", 4], ["P", 23]],
		plural : "High elves",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", "Elvish", 1],
		vision : [["Darkvision", 60]],
		savetxt : {
			text : ["Magic can't put me to sleep"],
			adv_vs : ["charmed"]
		},
		weaponProfs : [false, false, ["longsword", "shortsword", "longbow", "shortbow"]],
		skills : ["Perception"],
		age : " typically claim adulthood around age 100 and can live to be 750 years old",
		height : " range from under 5 to over 6 feet tall (4'6\" + 2d10\")",
		weight : " weigh around 115 lb (90 + 2d10 \xD7 1d4 lb)",
		heightMetric : " range from under 1,5 to over 1,8 metres tall (140 + 5d10 cm)",
		weightMetric : " weigh around 55 kg (40 + 5d10 \xD7 2d4 / 10 kg)",
		scores : [0, 2, 0, 1, 0, 0],
		trait : "High Elf (+2 Dexterity, +1 Intelligence)\nTrance: Elves don't need to sleep, but meditate semiconsciously, for 4 hours a day. While meditating, I can dream after a fashion; such dreams are actually mental exercises that have become reflexive through years of practice. After resting in this way, I gain the same benefit that a human does from 8 hours of sleep, thus needing only 4 hours for a long rest.\nCantrip: I know one cantrip of my choice from the wizard spell list. Intelligence is my spellcasting ability for it.",
		spellcastingAbility : 4,
		spellcastingBonus : {
			name : "High Elf Cantrip",
			"class" : "wizard",
			level : [0, 0],
			firstCol : 'atwill'
		}
	},
	"rock gnome" : {
		regExpSearch : /^((?=.*\bgnomes?\b)(?=.*\b(rocks?|tinker|tinkering)\b)).*$/i,
		name : "Rock gnome",
		sortname : "Gnome, Rock",
		source : [["SRD", 6], ["P", 37]],
		plural : "Rock gnomes",
		size : 4,
		speed : {
			walk : { spd : 25, enc : 15 }
		},
		languageProfs : ["Common", "Gnomish"],
		toolProfs : ["Tinker's tools"],
		vision : [["Darkvision", 60]],
		savetxt : { text : ["Adv. on Int/Wis/Cha saves vs. magic"] },
		age : " start adult life around age 40 and can live 350 to almost 500 years",
		height : " are 3 to 4 feet tall (2'11\" + 2d4\")",
		weight : " weigh around 40 lb (35 + 2d4 lb)",
		heightMetric : " are 90 to 120 cm tall (2'11\" + 5d4)",
		weightMetric : " weigh around 18 kg (16 + 5d4 / 10 kg)",
		scores : [0, 0, 1, 2, 0, 0],
		trait : "Rock Gnome (+1 Constitution, +2 Intelligence)" + (typePF ? "\n" : " ") + "Artificer's Lore: Add twice my proficiency bonus to Intelligence (History) checks with magic, alchemical, and technological items.\nTinker: Construct a Tiny clockwork device (AC 5, 1 HP) using tinker's tools, 1 hour, and 10 gp of material components, that functions for 24 hours. I can have up to 3 active." + (typePF ? "\n - " : " -") + "Clockwork Toy: animal, monster, or person that can move 5 ft per turn in a random direction, making appropriate noises;" + (typePF ? "\n - " : " -") + "Fire Starter: 1 action to produce miniature flame to light things;" + (typePF ? "\n - " : " -") + "Music Box: plays single song at a moderate volume."
	},
	"lightfoot halfling" : {
		regExpSearch : /^((?=.*(hairfoot|tallfellow))|((?=.*\b(halflings?|hobbits?)\b)(?=.*lightfoot))).*$/i,
		name : "Lightfoot halfling",
		sortname : "Halfling, Lightfoot",
		source : [["SRD", 4], ["P", 28]],
		plural : "Lightfoot halflings",
		size : 4,
		speed : {
			walk : { spd : 25, enc : 15 }
		},
		languageProfs : ["Common", "Halfling"],
		savetxt : { adv_vs : ["frightened"] },
		age : " reach adulthood at age 20 and live around 150 years",
		height : " average about 3 feet tall (2'7\" + 2d4\")",
		weight : " weigh around 40 lb (35 + 2d4 lb)",
		heightMetric : " average about 90 cm tall (80 + 5d4)",
		weightMetric : " weigh around 18 kg (16 + 5d4 / 10 kg)",
		scores : [0, 2, 0, 0, 0, 1],
		trait : "Lightfoot Halfling (+2 Dexterity, +1 Charisma)" + (typePF ? "\n" : "") + "\nLucky: When I roll a 1 on an attack roll, ability check, or saving throw, I can reroll the die and must use the new roll." + (typePF ? "\n" : "") + "\nHalfling Nimbleness: I can move through the space of any creature that is of a size larger than me." + (typePF ? "\n" : "") + "\nNaturally Stealthy: I can attempt to hide even when I am obscured only by a creature that is at least one size larger than me."
	},
	"half-elf" : {
		regExpSearch : /^(?=.*half)(?=.*(elf|elv|drow|silvanesti|qualinesti|grugach|kagonesti)).*$/i,
		name : "Half-elf",
		source : [["SRD", 6], ["P", 39]],
		plural : "Half-elves",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", "Elvish", 1],
		vision : [["Darkvision", 60]],
		savetxt : {
			text : ["Magic can't put me to sleep"],
			adv_vs : ["charmed"]
		},
		skillstxt : "Choose any two skills",
		age : " reach adulthood around age 20 and often live over 180 years",
		height : " range from 5 to 6 feet tall (4'9\" + 2d8\")",
		weight : " weigh around 155 lb (110 + 2d8 \xD7 2d4 lb)",
		heightMetric : " range from 1,5 to 1,8 metres tall (145 + 5d8 cm)",
		weightMetric : " weigh around 70 kg (50 + 5d8 \xD7 4d4 / 10 kg)",
		scorestxt : "+2 Charisma and +1 to two other ability scores of my choice",
		scores : [0, 0, 0, 0, 0, 2],
		trait : "Half-Elf (+2 Charisma and +1 to two other ability scores of my choice)\n\nSkill Versatility: I gain proficiency in two skills of my choice."
	},
	"half-orc" : {
		regExpSearch : /^(?=.*half)(?=.*\bor(c|k)).*$/i,
		name : "Half-orc",
		source : [["SRD", 7], ["P", 41]],
		plural : "Half-orcs",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", "Orc"],
		vision : [["Darkvision", 60]],
		skills : ["Intimidation"],
		age : " reach adulthood around age 14 and rarely live longer than 75 years",
		height : " range from 5 to well over 6 feet tall (4'10\" + 2d10\")",
		weight : " weigh around 215 lb (140 + 2d10 \xD7 2d6 lb)",
		heightMetric : " range from 1,5 to well over 1,8 metres tall (150 + 5d10 cm)",
		weightMetric : " weigh around 100 kg (65 + 5d10 \xD7 4d6 / 10 kg)",
		scores : [2, 0, 1, 0, 0, 0],
		features : {
			"relentless endurance" : {
				name : "Relentless Endurance",
				minlevel : 1,
				usages : 1,
				recovery : "long rest"
			},
			"savage attacks" : {
				name : "Savage Attacks",
				minlevel : 1,
				calcChanges : {
					atkAdd : [
						function (fields, v) {
							if (v.isMeleeWeapon && (/d\d+/).test(fields.Damage_Die)) {
								if (v.extraCritM) {
									v.extraCritM += 1;
									var extraCritRegex = /\d+(d\d+ extra on a crit(ical)?( hit)? in melee)/i;
									fields.Description = fields.Description.replace(extraCritRegex, v.extraCritM + '$1');
								} else {
									v.extraCritM = 1;
									fields.Description += (fields.Description ? '; ' : '') + v.extraCritM + fields.Damage_Die.replace(/.*(d\d+).*/, '$1') + ' extra on a crit in melee';
								}
							}
						},
						"My melee weapon attacks roll 1 additional dice on a critical hit."
					]
				}
			}
		},
		trait : "Half-Orc (+2 Strength, +1 Constitution)" + (typePF ? "\n" : " ") + "\nRelentless Endurance: When I am reduced to 0 hit points but not killed outright, I can drop to 1 hit point instead. I can't use this feature again until I finish a long rest.\n\nSavage Attacks: When I score a critical hit with a melee weapon attack, I can roll one of the weapon's damage dice one additional time and add it to the extra damage of the critical hit."
	},
	"human" : {
		regExpSearch : /human/i,
		name : "Human",
		source : [["SRD", 5], ["P", 31]],
		plural : "Humans",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", 1],
		age : " reach adulthood in their late teens and live less than 100 years",
		height : " range from barely 5 to well over 6 feet tall (4'8\" + 2d10\")",
		weight : " weigh around 165 lb (110 + 2d10 \xD7 2d4 lb)",
		heightMetric : " range from barely 1,5 to well over 1,8 metres tall (145 + 5d10 cm)",
		weightMetric : " weigh around 75 kg (50 + 5d10 \xD7 4d4 / 10 kg)",
		scorestxt : "+1 to all ability scores",
		scores : [1, 1, 1, 1, 1, 1, 1],
		trait : "Human (+1 to all ability scores)",

	},
	"tiefling" : {
		regExpSearch : /^((?=.*tiefling)|(?=.*planetouched)(?=.*(hell|abyss|fiend|devil|asmodeus))).*$/i,
		name : "Tiefling",
		source : [["SRD", 7], ["P", 43], ["MToF", 21]],
		plural : "Tieflings",
		size : 3,
		speed : {
			walk : { spd : 30, enc : 20 }
		},
		languageProfs : ["Common", "Infernal"],
		vision : [["Darkvision", 60]],
		dmgres : ["Fire"],
		age : " reach adulthood in their late teens and live around 100 years",
		height : " range from 5 to over 6 feet tall (4'9\" + 2d8\")",
		weight : " weigh around 155 lb (110 + 2d8 \xD7 2d4 lb)",
		heightMetric : " range from 1,5 to over 1,8 metres tall (145 + 5d8 cm)",
		weightMetric : " weigh around 70 kg (50 + 5d8 \xD7 4d4 / 10 kg)",
		scores : [0, 0, 0, 1, 0, 2],
		trait : "Tiefling (+1 Intelligence, +2 Charisma)\n\nInfernal Legacy:\n   I know the Thaumaturgy cantrip.\n   At 3rd level, I can cast the Hellish Rebuke spell once per long rest as a 2nd-level spell.\n   At 5th level, I can also cast the Darkness spell once per long rest.\n   Charisma is my spellcasting ability for these spells.",
		spellcastingAbility : 6,
		spellcastingBonus : {
			name : "Infernal Legacy (level 1)",
			spells : ["thaumaturgy"],
			selection : ["thaumaturgy"],
			firstCol : 'atwill'
		},
		features : {
			"hellish rebuke" : {
				name : "Infernal Legacy (level 3)",
				limfeaname : "Hellish Rebuke (3d10)",
				minlevel : 3,
				usages : 1,
				recovery : "long rest",
				spellcastingBonus : {
					name : "Infernal Legacy (level 3)",
					spells : ["hellish rebuke"],
					selection : ["hellish rebuke"],
					firstCol : "oncelr"
				},
				spellChanges : {
					"hellish rebuke" : {
						description : "Cast when taking damage, creature that dealt damage takes 3d10 Fire damage; save halves",
						changes : "Using Infernal Legacy, I cast Hellish Rebuke as if I'm using a 2nd-level spell slot, doing 3d10 damage."
					}
				}
			},
			"darkness" : {
				name : "Infernal Legacy (level 5)",
				limfeaname : "Darkness",
				minlevel : 5,
				usages : 1,
				recovery : "long rest",
				spellcastingBonus : {
					name : "Infernal Legacy (level 5)",
					spells : ["darkness"],
					selection : ["darkness"],
					firstCol : "oncelr"
				}
			}
		}
	}
};

var RaceSubList = {
	"dragonborn-black" : {
		regExpSearch : /black/i,
		name : "Black dragonborn",
		trait : "Black Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Acid Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 5 ft by 30 ft line."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 acid damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Acid"]
	},
	"dragonborn-blue" : {
		regExpSearch : /blue/i,
		name : "Blue dragonborn",
		trait : "Blue Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Lightning Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 5 ft by 30 ft line."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 lightning damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Lightning"]
	},
	"dragonborn-brass" : {
		regExpSearch : /brass/i,
		name : "Brass dragonborn",
		trait : "Brass Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Fire Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 5 ft by 30 ft line."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 fire damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Fire"]
	},
	"dragonborn-bronze" : {
		regExpSearch : /bronze/i,
		name : "Bronze dragonborn",
		trait : "Bronze Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Lightning Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 5 ft by 30 ft line."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 lightning damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Lightning"]
	},
	"dragonborn-copper" : {
		regExpSearch : /copper/i,
		name : "Copper dragonborn",
		trait : "Copper Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Acid Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 5 ft by 30 ft line."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 acid damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Acid"]
	},
	"dragonborn-gold" : {
		regExpSearch : /gold/i,
		name : "Gold dragonborn",
		trait : "Gold Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Fire Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 15 ft cone."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 fire damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Fire"]
	},
	"dragonborn-green" : {
		regExpSearch : /green/i,
		name : "Green dragonborn",
		trait : "Green Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Poison Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 15 ft cone."
		+ "\n   " + "All in the area must make a Con saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 poison damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Poison"]
	},
	"dragonborn-red" : {
		regExpSearch : /red/i,
		name : "Red dragonborn",
		trait : "Red Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Fire Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 15 ft cone."
		+ "\n   " + "All in the area must make a Dex saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 fire damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Fire"]
	},
	"dragonborn-silver" : {
		regExpSearch : /silver/i,
		name : "Silver dragonborn",
		trait : "Silver Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Cold Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 15 ft cone."
		+ "\n   " + "All in the area must make a Con saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 cold damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Cold"]
	},
	"dragonborn-white" : {
		regExpSearch : /white/i,
		name : "White dragonborn",
		trait : "White Dragonborn (+2 Strength, +1 Charisma)"
		+ "\n" + "Cold Breath Weapon:"
		+ "\n   " + "As an action, I exhale destructive energy in a 15 ft cone."
		+ "\n   " + "All in the area must make a Con saving throw with DC 8 + Con modifier + prof bonus."
		+ "\n   " + "It does 2d6 cold damage, half as much damage on a successful save."
		+ "\n   " + "The damage increases to 3d6 at level 6, 4d6 at level 11, and 5d6 at level 16."
		+ "\n   " + "I can't use this feature again until I finish a short rest.",
		dmgres : ["Cold"]
	}
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Source (SourceList)
 **/
var SourceList = {
	// Basic source
	"SRD" : {
		name : "System Reference Document 5.1",
		abbreviation : "SRD",
		group : "Primary Sources",
		url : "https://media.wizards.com/2016/downloads/DND/SRD-OGL_V5.1.pdf",
		date : "2016/05/04"
	},
	// Sources for custom scripts
	"DMguild" : {
		name : "Dungeon Masters Guild [online]",
		abbreviation : "DMguild",
		group : "default",
		url : "https://www.dmsguild.com/"
	},
	"HB" : {
		name : "Homebrew",
		abbreviation : "Homebrew",
		group : "default"
	},
	// Sources for all official WotC backgrounds, so that they are easier to use with the AL +1 rule
	"ALbackground" : {
		name : "All official WotC backgrounds",
		abbreviation : "WotC",
		group : "Primary Sources",
		url : "https://flapkan.com/faq#What-is-the-source-All-official-WotC-backgrounds-and-how-does-it-work"
	}
};

/**
 * This module makes available the MPMB Character Sheet v13 base data.
 * Definitions in this module are for:
 *  - Spells (SpellsList)
 *  - Spell Schools (spellSchoolList)
 *  - Spell Levels (spellLevelList)
 *  - Helper Texts (AtHigherLevels, AllSpellsArray, AllSpellsObject, AddSpellsMenu, AllCasterClasses)
 **/
var AtHigherLevels = "\n   " + toUni("At Higher Levels") + ": ";

var spellLevelList = ["Cantrips (0-level)", "1st-level", "2nd-level", "3rd-level", "4th-level", "5th-level", "6th-level", "7th-level", "8th-level", "9th-level", "Talents", "Disciplines"];

var spellSchoolList = {
	"Abjur" : "abjuration",
	"Conj" : "conjuration",
	"Div" : "divination",
	"Ench" : "enchantment",
	"Evoc" : "evocation",
	"Illus" : "illusion",
	"Necro" : "necromancy",
	"Trans" : "transmutation",
	"Avatar" : "avatar",
	"Awake" : "awakened",
	"Immor" : "immortal",
	"Nomad" : "nomad",
	"Wu Jen" : "wu jen"
}

var SpellsList = {
	"acid splash" : {
		name : "Acid Splash",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 114], ["P", 211]],
		level : 0,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "1 crea or 2 crea within 5 ft of each other save or 1d6 Acid dmg; +1d6 at CL 5, 11, and 17",
		descriptionCantripDie : "1 crea or 2 crea within 5 ft of each other save or `CD`d6 Acid dmg",
		descriptionFull : "You hurl a bubble of acid. Choose one creature you can see within range, or choose two creatures you can see within range that are within 5 feet of each other. A target must succeed on a Dexterity saving throw or take 1d6 acid damage." + "\n   " + "This spell's damage increases by 1d6 when you reach 5th Level (2d6), 11th level (3d6) and 17th level (4d6)."
	},
	"aid" : {
		name : "Aid",
		classes : ["cleric", "paladin"],
		source : [["SRD", 114], ["P", 211]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A tiny strip of white cloth",
		duration : "8 h",
		description : "3 creatures gain 5+5/SL current HP and HP max for the duration",
		descriptionFull : "Your spell bolsters your allies with toughness and resolve. Choose up to three creatures within range. Each target's hit point maximum and current hit points increase by 5 for the duration." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, a target's hit points increase by an additional 5 for each slot level above 2nd."
	},
	"alarm" : {
		name : "Alarm",
		classes : ["ranger", "wizard"],
		source : [["SRD", 114], ["P", 211]],
		ritual : true,
		level : 1,
		school : "Abjur",
		time : "1 min",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A tiny bell and a piece of fine silver wire",
		duration : "8 h",
		description : "Door, window, or 20-ft cube area; audible (60 ft) or mental alarm (1 mile) if undesignated crea enters",
		descriptionFull : "You set an alarm against unwanted intrusion. Choose a door, a window, or an area within range that is no larger than a 20-foot cube. Until the spell ends, an alarm alerts you whenever a tiny or larger creature touches or enters the warded area. When you cast the spell, you can designate creatures that won't set off the alarm. You also choose whether the alarm is mental or audible." + "\n   " + "A mental alarm alerts you with a ping in your mind if you are within 1 mile of the warded area. This ping awakens you if you are sleeping." + "\n   " + "An audible alarm produces the sound of a hand bell for 10 seconds within 60 feet."
	},
	"alter self" : {
		name : "Alter Self",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 114], ["P", 211]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "Change appearance, gain +1 magical 1d6 natural weapons, or water breathing and swim spd",
		descriptionFull : "You assume a different form. When you cast the spell, choose one of the following options, the effects of which last for the duration of the spell. While the spell lasts, you can end one option as an action to gain the benefits of a different one." + "\n   " + toUni("Aquatic Adaptation") + ": You adapt your body to an aquatic environment, sprouting gills, and growing webbing between your fingers. You can breathe underwater and gain a swimming speed equal to your walking speed." + "\n   " + toUni("Change Appearance") + ": You transform your appearance. You decide what you look like, including your height, weight, facial features, sound of your voice, hair length, coloration, and distinguishing characteristics, if any. You can make yourself appear as a member of another race, though none of your statistics change. You also don't appear as a creature of a different size than you, and your basic shape stays the same, if you're bipedal, you can't use this spell to become quadrupedal, for instance. At any time for the duration of the spell, you can use your action to change your appearance in this way again." + "\n   " + toUni("Natural Weapons") + ": You grow claws, fangs, spines, horns, or a different natural weapon of your choice. Your unarmed strikes deal 1d6 bludgeoning, piercing, or slashing damage, as appropriate to the natural weapon you chose, and you are proficient with you unarmed strikes. Finally, the natural weapon is magic and you have a +1 bonus to the attack and damage rolls you make using it."
	},
	"animal friendship" : {
		name : "Animal Friendship",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 115], ["P", 212]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A morsel of food",
		duration : "24 h",
		save : "Wis",
		description : "1+1/SL beasts Int<4 save or charmed for the duration",
		descriptionFull : "This spell lets you convince a beast that you mean it no harm. Choose a beast that you can see within range. It must see and hear you. If the beast's Intelligence is 4 or higher, the spell fails. Otherwise, the beast must succeed on a Wisdom saving throw or be charmed by you for the spell's duration. If you or one of your companions harms the target, the spell ends." + AtHigherLevels + "When you cast this spell using a 2nd level spell slot or higher, you can affect one additional beast for each slot level above 1st."
	},
	"animal messenger" : {
		name : "Animal Messenger",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 115], ["P", 212]],
		ritual : true,
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A morsel of food",
		duration : "24 h",
		description : "Tiny beast delivers 25 word message up to 25 miles (50 miles if flyer); +48h/SL duration",
		descriptionFull : "By means of this spell, you use an animal to deliver a message. Choose a Tiny beast you can see within range, such as a squirrel, a blue ray, or a bird. You specify a location, which you must have visited, and a recipient who matches a general description, such as a man or woman dressed in the uniform of the town guard or a red-haired dwarf wearing a pointed hat. You also speak a message of up to twenty-five words. The target beast travels for the duration of the spell towards the specified location, covering about 50 miles per 24 hours for a flying messenger or 25 miles for other animals." + "\n   " + "When the messenger arrives, it delivers your message to the creature that you described, replicating the sound of your voice. The messenger speaks only to a creature matching the description you gave. If the messenger doesn't reach its destination before the spell ends, the message is lost, and the beast makes its way back to where you cast this spell." + AtHigherLevels + "If you cast this spell using a spell slot of 3rd level or higher, the duration of the spell increases by 48 hours for each slot level above 2nd."
	},
	"animal shapes" : {
		name : "Animal Shapes",
		classes : ["druid"],
		source : [["SRD", 115], ["P", 212]],
		level : 8,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Conc, 24 h",
		description : "Any willing creatures transform into up to Large CR4 beasts; retain Wis, Int, Cha, but nothing else",
		descriptionFull : "Your magic turns others into beasts. Choose any number of willing creatures that you can see within range. You transform each target into the form of a large or smaller beast with a challenge rating of 4 or lower. On subsequent turns, you can use your actions to transform affected creatures into new forms." + "\n   " + "The transformation lasts for the duration for each target, or until the target drops to 0 hit points or dies. You can choose a different form for each target. A target's game statistics are replaced by the statistics of the chosen beast, though the target retains its alignment and Intelligence, Wisdom, and Charisma scores. The target assumes the hit points of its new form, and when it reverts to its normal form, it returns to the number of hit point it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form. As long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious. The creature is limited in the actions it can perform by the nature of its new form, and it can't speak or cast spells." + "\n   " + "The target's gear melds into the new form. The target can't activate, wield, or otherwise benefit from any of its equipment."
	},
	"animate dead" : {
		name : "Animate Dead",
		classes : ["cleric", "wizard"],
		source : [["SRD", 115], ["P", 212]],
		level : 3,
		school : "Necro",
		time : "1 min",
		range : "10 ft",
		components : "V,S,M",
		compMaterial : "A drop of blood, a piece of flesh, and a pinch of bone dust",
		duration : "Instantaneous",
		description : "Turn corpses into 1+2/SL Skeletons or Zombies; control for 24h; bns a command within 60 ft",
		descriptionFull : "This spell creates an undead servant. Choose a pile of bones or a corpse of a Medium or Small humanoid within range. Your spell imbues the target with a foul mimicry of life, raising it as an undead creature. The target becomes a skeleton if you chose bones or a zombie if you chose a corpse (the DM has the creature's game statistics)." + "\n   " + "On each of your turns, you can use a bonus action to mentally command any creature you made with this spell if the creature is within 60 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete." + "\n   " + "The creature is under your control for 24 hours, after which it stops obeying any command you've given it. To maintain the control of the creature for another 24 hours, you must cast this spell on the creature again before the current 24-hour period ends. This use of the spell reasserts your control over up to four creatures you have animated with this spell, rather than animating a new one." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, you animate or reassert control over two additional undead creatures for each slot above 3rd. Each of the creatures must come from a different corpse or pile of bones."
	},
	"animate objects" : {
		name : "Animate Objects",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 116], ["P", 213]],
		level : 5,
		school : "Trans",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "10+2/SL nonmagical objects not worn or carried; bns a command within 500 ft; see book",
		descriptionFull : "Objects come to life at your command. Choose up to ten nonmagical objects within range that are not being worn or carried. Medium targets count as two objects, Large targets count as four objects, Huge targets count as eight objects. You can't animate any object larger than Huge. Each target animates and becomes a creature under your control until the spell ends or until reduced to 0 hit points." + "\n   " + "As a bonus action, you can mentally command any creature you made with this spell if the creature is within 500 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete." + "\n\n" + toUni("Animated Object Statistics") + "\n" + toUni("Size") + "\t" + toUni("HP   ") + toUni("AC   ") + toUni("To Hit    ") + toUni("Damage") + "\t" + toUni("Str   ") + toUni("Dex") + "\nTiny\t20    18        +8        1d4+4\t  4       18" + "\nSmall\t25    16        +6        1d8+2\t  6       14" + "\nMedium\t40    13        +5        2d6+1\t10       12" + "\nLarge\t50    10        +6        2d10+2\t14       10" + "\nHuge\t80    10        +8        2d12+4\t18         6" + "\n\n" + "An animated object is a construct with AC, hit points, attacks, Strength, and Dexterity determine by its size. Its Constitution is 10 and its Intelligence and Wisdom are 3, and its Charisma is 1. Its speed is 30 feet, if the objects lack legs or other appendages it can use for locomotion, it instead has a flying speed of 30 feet and can hover. If the object is securely attached to a surface or larger object, such as a chain bolted to a wall, its speed is 0. It has blindsight with a radius of 30 feet and is blind beyond that distance. When the animated object drops to 0 hit points, it reverts to its original object form, and any remaining damage carries over to its original object form." + "\n   " + "If you command an object to attack, it can make a single melee attack against a creature within 5 feet of it. It makes a slam attack with an attack bonus and bludgeoning damage determine by its size. The DM might rule that a specific object inflicts slashing or piercing damage based on its form." + AtHigherLevels + "If you cast this spell using a spell slot of 6th level or higher, you can animate two additional objects for each slot level above 5th."
	},
	"antilife shell" : {
		name : "Antilife Shell",
		classes : ["druid"],
		source : [["SRD", 116], ["P", 213]],
		level : 5,
		school : "Abjur",
		time : "1 a",
		range : "10-ft rad",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "Only undead and constructs can come within 10 ft; if forced upon living creature the spell ends",
		descriptionFull : "A shimmering barrier extends out from you in a 10-foot radius and moves with you, remaining centered on you and hedging out creatures other than undead and constructs." + "\n   " + "The barrier lasts for the duration. The barrier prevents an affected creature from passing or reaching through. An affected creature can cast spells or make attacks with ranged or reach weapons through the barrier." + "\n   " + "If you move so that an affect creature is forced to pass through the barrier, the spell ends."
	},
	"antimagic field" : {
		name : "Antimagic Field",
		classes : ["cleric", "wizard"],
		source : [["SRD", 117], ["P", 213]],
		level : 8,
		school : "Abjur",
		time : "1 a",
		range : "10-ft rad",
		components : "V,S,M",
		compMaterial : "A pinch of powdered iron or iron filings",
		duration : "Conc, 1 h",
		description : "No magical effects functions in area except those created by an artefact or a deity",
		descriptionFull : "A 10-foot-radius invisible sphere of antimagic surrounds you. This area is divorced from the magical energy that suffuses the multiverse. Within the sphere, spells can't be cast, summoned creatures disappear, and even magic items become mundane. Until the spell ends, the sphere moves with you, centered on you." + "\n   " + "Spells and other magical effects, except those created by an artifact or a deity, are suppressed in the sphere and can't protrude into it. A slot expended to cast a suppressed spell is consumed. While an effect is suppressed, it doesn't function, but the time it spends suppressed counts against its duration." + "\n   " + toUni("Targeted Effects") + ": Spells and other magical effects, such as magic missile and charm person, that target a creature or an object in the sphere have no effect on that target." + "\n   " + toUni("Areas of Magic") + ": The area of another spell or magical effect, such as fireball, can't extend into the sphere. If the sphere overlaps an area of magic, the part of the area that is covered by the sphere is suppressed. For example, the flames created by a wall of fire are suppressed within the sphere, creating a gap in the wall if the overlap is large enough." + "\n   " + toUni("Spells") + ": Any active spell or other magical effect on a creature or an object in the sphere is suppressed while the creature or object is in it." + "\n   " + toUni("Magic Items") + ": The properties and powers of magic items are suppressed in the sphere. For example, a +1 long sword in the sphere functions as a nonmagical long sword. A magic weapon's properties and powers are suppressed if it is used against a target in the sphere or wielded by an attacker in the sphere. If a magic weapon or piece of magic ammunition fully leaves the sphere (For example, if you fire a magic arrow or throw a magic spear at a target outside the sphere), the magic of the item ceases to be suppressed as soon as it exits." + "\n   " + toUni("Magical Travel") + ": Teleportation and planar travel fail to work in the sphere, whether the sphere is the destination or the departure point for such magical travel. A portal to another location, world, or plane of existence, as well as an opening to an extradimensional space such as that created by the rope trick spells, temporarily closes while in the sphere." + "\n   " + toUni("Creatures and Objects") + ": A creature or object summoned or created by magic temporarily winks out of existence in the sphere. Such a creature instantly reappears once the space the creature occupied is no longer within the sphere." + "\n   " + toUni("Dispel Magic") + ": Spells and magical effects such as dispel magic have no effect on the sphere. Likewise, the spheres created by different antimagic field spells don't nullify each other."
	},
	"antipathy/sympathy" : {
		name : "Antipathy/Sympathy",
		classes : ["druid", "wizard"],
		source : [["SRD", 117], ["P", 214]],
		level : 8,
		school : "Ench",
		time : "1 h",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "Either a lump of alum soaked in vinegar for the antipathy effect or a drop of honey for the sympathy effect",
		duration : "10 days",
		save : "Wis",
		description : "Creature, object, or area up to 200-ft cube attracts or repels specific type of intelligent crea; see book",
		descriptionFull : "This spell attracts or repels creatures of your choice. You target something within range, either a Huge or smaller object or creature or an area that is no larger than a 200-foot cube. Then specify a kind of intelligent creature, such as red dragons, goblins, or vampires. You invest the target with an aura that either attracts or repels the specified creatures for the duration. Choose antipathy or sympathy as the aura's effect." + "\n   " + toUni("Antipathy") + ": The enchantment causes creatures of the kind you designated to feel an intense urge to leave the area and avoid the target. When such a creature can see the target or comes within 60 feet of it, the creature must succeed on a Wisdom saving throw or become frightened. The creature remains frightened while it can see the target or is within 60 feet of it. While frightened by the target, the creature must use its movement to move to the nearest safe spot from which it can't see the target. If the creature moves more than 60 feet from the target and can't see it, the creature is no longer frightened, but the creature becomes frightened again if it regains sight of the target or moves within 60 feet of it." + "\n   " + toUni("Sympathy") + ": The enchantment causes the specified creatures to feel an intense urge to approach the target while within 60 feet of it or able to see it. When such a creature can see the target or comes within 60 feet of it, the creature must succeed on a Wisdom saving throw or use its movement on each of its turns to enter the area or move within reach of the target. When the creature has done so, it can't willingly move away from the target. If the target damages or otherwise harms an affected creature, the affected creature can make a Wisdom saving throw to end the effect, as described below." + "\n   " + toUni("Ending the Effect") + ": If an affected creature ends its turn while not within 60 feet of the target or able to see it, the creature makes a Wisdom saving throw. ON a successful save, the creature is no longer affected by the target and recognizes the feeling of repugnance or attraction as magical. In addition, a creature affected by the spells is allowed another Wisdom saving throw every 24 hours while the spell persists." + "\n   " + "A creature that successfully saves against this effect is immune to it for 1 minute, after which time it can be affected again."
	},
	"arcane eye" : {
		name : "Arcane Eye",
		classes : ["wizard"],
		source : [["SRD", 118], ["P", 214]],
		level : 4,
		school : "Div",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A bit of bat fur",
		duration : "Conc, 1 h",
		description : "Create invisible, moving (unlimited range, 30 ft/rnd) 1\" magic eye with darkvision I see through",
		descriptionFull : "You create an invisible, magical eye within range that hovers in the air for the duration." + "\n   " + "You mentally receive visual information from the eye, which has normal vision and darkvision out to 30 feet. The eye can look in every direction." + "\n   " + "As an action, you can move the eye up to 30 feet in any direction. There is no limit to how far away from you the eye can move, but it can't enter another plane of existence. A solid barrier blocks the eye's movement, but the eye can pass through an opening as small as 1 inch in diameter."
	},
	"arcane lock" : {
		name : "Arcane Lock",
		classes : ["wizard"],
		source : [["SRD", 118], ["P", 215]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Gold dust worth at least 25 gp, which the spell consumes",
		duration : "Till dispelled",
		description : "Entryway locked; password or designated crea opens; +10 DC break/pick lock (25gp cons.)",
		descriptionFull : "You touch a closed door, window, gate, chest, or other entryway, and it becomes locked for the duration. You and the creatures you designate when you cast this spell can open the object normally. You can also set a password that, when spoken within 5 feet of the object, suppresses this spell for 1 minute. Otherwise, it is impassable until it is broken or the spell is dispelled or suppressed. Casting knock on the object suppresses arcane lock for 10 minutes." + "\n   " + "While affected by this spell, the object is more difficult to break or force open; the DC to break it or pick any locks on it increases by 10."
	},
	"astral projection" : {
		name : "Astral Projection",
		classes : ["cleric", "warlock", "wizard"],
		source : [["SRD", 119], ["P", 215]],
		level : 9,
		school : "Necro",
		time : "1 h",
		range : "10 ft",
		components : "V,S,M\u2020",
		compMaterial : "For each creature you affect with this spell, you must provide one jacinth worth at least 1,000 gp and one ornately carved bar of silver worth at least 100 gp, all of which the spell consumes",
		duration : "Special (D)",
		description : "Me + 8 willing crea projected to Astral Plane with identical statistics (per crea 1100gp cons.)",
		descriptionFull : "You and up to eight willing creatures within range project your astral bodies into the Astral Plane (the spell fails and the casting is wasted if you are already on that plane). The material body you leave behind is unconscious and in a state of suspended animation, it doesn't need food or air and doesn't age." + "\n   " + "Your astral body resembles your mortal form in almost every way, replicating your game statistics and possessions. The principal difference is the addition of a silvery cord that extends from between your shoulder blades and trails behind you, fading to invisibility after 1 foot. This cord is your tether to your material body. As long as the tether remains intact, you can find your way home. If the cord is cut-something that can happen only when an effect specifically states that it does-your soul and body are separated, killing you instantly." + "\n   " + "Your astral form can freely travel through the Astral Plane and can pass through portals there leading to any other plane. If you enter a new plane or return to the plane you were on when casting this spell, your body and possessions are transported along the silver cord, allowing you to re-enter your body as you enter the new plane. Your astral form is a separate incarnation. Any damage or other effects that apply to it have no effect on your physical body, nor do they persist when you return to it." + "\n   " + "The spell ends for you and your companions when you use your action to dismiss it. When the spell ends, the affected creature returns to its physical body, and it awakens." + "\n   " + "The spell might also end early for you or one of your companions. A successful dispel magic spell used against an astral or physical body ends the spell for that creature. If a creature's original body or its astral form drops to 0 hit points, the spell ends for that creature. If the spell ends and the silver cord is intact, the cord pulls the creature's astral form back to its body, ending its state of suspended animation." + "\n   " + "If you are returned to your body prematurely, your companions remain in their astral forms and must find their own way back to their bodies, usually by dropping to 0 hit points."
	},
	"augury" : {
		name : "Augury",
		classes : ["cleric"],
		source : [["SRD", 120], ["P", 215]],
		ritual : true,
		level : 2,
		school : "Div",
		time : "1 min",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "Specially marked sticks, bones, or similar tokens worth at least 25 gp",
		duration : "Instantaneous",
		description : "Omen about specific course of action I plan to take in the next 30 min (25gp)",
		descriptionFull : "By casting gem-inlaid sticks, rolling dragon bones, laying out ornate cards, or employing some other divining tool, you receive an omen from an otherworldly entity about the results of a specific course of action that you plan to take within the next 30 minutes. The DM chooses from the following possible omens." + "\n " + "\u2022 Weal, for good results" + "\n " + "\u2022 Woe, for bad results" + "\n " + "\u2022 Weal and woe, for both good and bad results" + "\n " + "\u2022 Nothing, for results that aren't especially good or bad" + "\n\n" + "The spell doesn't take into account any possible circumstances that might change the outcome, such as the casting of additional spells or the loss or gain of a companion." + "\n   " + "If you cast the spell two or more times before completing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get a random reading. The DM makes this roll in secret."
	},
	"awaken" : {
		name : "Awaken",
		classes : ["bard", "druid"],
		source : [["SRD", 120], ["P", 216]],
		level : 5,
		school : "Trans",
		time : "8 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "An agate worth at least 1,000 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Give beast or plant Int 10 and ability to move. Follows commands for 30 days (1000gp cons.)",
		descriptionFull : "After spending the casting time tracing magical pathways within a precious gemstone, you touch a huge or smaller beast or plant. The target must have either no Intelligence score or an Intelligence of 3 or less. The target gains an Intelligence of 10. The target also gains the ability to speak one language you know. If the target is a plant, it gains the ability to move its limbs, roots, vines, creepers, and so forth, and it gains senses similar to a human's. Your DM chooses statistics appropriate for the awakened plant, such as the statistics for the awakened shrub or the awakened tree." + "\n   " + "The awakened beast or plant is charmed by you for 30 days or until you and your companions do anything harmful to it. When the charmed condition ends, the awakened creature chooses whether to remain friendly to you, based on how you treated it while it was charmed."
	},
	"bane" : {
		name : "Bane",
		classes : ["bard", "cleric"],
		source : [["SRD", 120], ["P", 216]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A drop of blood",
		duration : "Conc, 1 min",
		save : "Cha",
		description : "3+1/SL creatures save or have to subtract 1d4 on every attack or save for the duration",
		descriptionFull : "Up to three creatures of your choice that you can see within range must make Charisma saving throws. Whenever a target that fails this saving throw makes an attack roll or a saving throw before the spell ends, the target must roll a d4 and subtract the number rolled from the attack roll or saving throw." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st."
	},
	"banishment" : {
		name : "Banishment",
		classes : ["cleric", "paladin", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 120], ["P", 217]],
		level : 4,
		school : "Abjur",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "An item distasteful to the target",
		duration : "Conc, 1 min",
		save : "Cha",
		description : "1+1/SL crea save or banished; crea return if spell lasts < 1 min",
		descriptionFull : "You attempt to send one creature that you can see within range to another place of existence. The target must succeed on a Charisma saving throw or be banished." + "\n   " + "If the target is native to the plane of existence you're on, you banish the target to a harmless demiplane. While there, the target is incapacitated. The target remains there until the spell ends, at which point the target reappears in the space it left or in the nearest unoccupied space if that space is occupied." + "\n   " + "If the target is native to a different plane of existence that the one you're on, the target is banished with a faint popping noise, returning to its home plane. If the spell ends before 1 minute has passed, the target reappears in the space it left or in the nearest unoccupied space if that space is occupied. Otherwise, the target doesn't return." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, you can target one additional creature for each slot level above 4th."
	},
	"barkskin" : {
		name : "Barkskin",
		classes : ["druid", "ranger"],
		source : [["SRD", 121], ["P", 217]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A handful of oak bark",
		duration : "Conc, 1 h",
		description : "1 willing crea AC cannot be reduced below 16, regardless of armor it is wearing",
		descriptionFull : "You touch a willing creature. Until the spell ends, the target's skin has a rough, bark-like appearance, and the target's AC can't be less than 16, regardless of what kind of armor it is wearing."
	},
	"beacon of hope" : {
		name : "Beacon of Hope",
		classes : ["cleric"],
		source : [["SRD", 121], ["P", 217]],
		level : 3,
		school : "Abjur",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "Any crea in range adv. on Wis/Death saves and gains max HP from any healing",
		descriptionFull : "This spell bestows hope and vitality. Choose any number of creatures within range. For the duration, each target has advantage on Wisdom saving throws and death saving throws, and regains the maximum number of hit points possible from any healing."
	},
	"bestow curse" : {
		name : "Bestow Curse",
		classes : ["bard", "cleric", "wizard"],
		source : [["SRD", 121], ["P", 218]],
		level : 3,
		school : "Necro",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 creature save or cursed, see book; duration SL4:conc, 10 min; SL5:8h; SL7:24h; SL9:until dispelled",
		descriptionFull : "You touch a creature, and that creature must succeed on a Wisdom saving throw or become cursed for the duration of the spell. When you cast this spell, choose the nature of the curse from the following options." + "\n " + "\u2022 Choose one ability score. While cursed, the target has disadvantage on ability checks and saving throws made with that ability score." + "\n " + "\u2022 While cursed, the target has disadvantage on attack rolls against you." + "\n " + "\u2022 While cursed, the target must make a Wisdom saving throw at the start of each of its turns. If it fails, it wastes its action that turn doing nothing." + "\n " + "\u2022 While the target is cursed, your attacks and spells deal an extra 1d8 necrotic damage to the target." + "\n\n" + "A remove curse spell ends this effect. At the DM's option, you may choose an alternative curse effect, but it should be no more powerful than those described above. The DM has final say on such a curse's effect." + AtHigherLevels + "If you cast this spell using a spell slot of 4th level or higher, the duration is concentration, up to 10 minutes. If you use a spell slot of 5th level or higher, the duration is 8 hours. If you use a spell slot of 7th level or higher, the duration is 24 hours. If you use a 9th level spell slot, the spell lasts until it is dispelled. Using a spell slot of 5th level or higher grants a duration that doesn't require concentration."
	},
	"bigby's hand" : {
		name : "Bigby's Hand",
		nameAlt : "Arcane Hand",
		classes : ["wizard"],
		source : [["SRD", 118], ["P", 218]],
		level : 5,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "An eggshell and a snakeskin glove",
		duration : "Conc, 1 min",
		description : "Large hand attacks, pushes, grapples or shields, see book; AC 20, my max HP; bns a move 60 ft",
		descriptionFull : "You create a Large hand of shimmering, translucent force in an unoccupied space that you can see within range. The hand lasts for the spell's duration, and it moves at your command, mimicking the movements of your own hand." + "\n   " + "The hand is an object that has AC 20 and hit points equal to your hit point maximum. If it drops to 0 hit points, the spell ends. It has a Strength of 26 (+8) and a Dexterity of 10 (+0). The hand doesn't fill its space." + "\n   " + "When you cast the spell and as a bonus action on your subsequent turns, you can move the hand up to 60 feet and then cause one of the following effects with it." + "\n   " + "Clenched Fist. The hand strikes one creature or object within 5 feet of it. Make a melee spell attack for the hand using your game statistics. On a hit, the target takes 4d8 force damage." + "\n   " + "Forceful Hand. The hand attempts to push a creature within 5 feet of it in a direction you choose. Make a check with the hand's Strength contested by the Strength (Athletics) check of the target. If the target is Medium or smaller, you have advantage on the check. If you succeed, the hand pushes the target up to 5 feet plus a number of feet equal to five times your spellcasting ability modifier. The hand moves with the target to remain within 5 feet of it." + "\n   " + "Grasping Hand. The hand attempts to grapple a Huge or smaller creature within 5 feet of it. You use the hand's Strength score to resolve the grapple. If the target is Medium or smaller, you have advantage on the check. While the hand is grappling the target, you can use a bonus action to have the hand crush it. When you do so, the target takes bludgeoning damage equal to 2d6 + your spellcasting ability modifier." + "\n   " + "Interposing Hand. The hand interposes itself between you and a creature you choose until you give the hand a different command. The hand moves to stay between you and the target, providing you with half cover against the target. The target can't move through the hand's space if its Strength score is less than or equal to the hand's Strength score. If its Strength score is higher than the hand's Strength score, the target can move toward you through the hand's space, but that space is difficult terrain for the target." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the damage from the clenched fist option increases by 2d8 and the damage from the grasping hand increases by 2d6 for each slot level above 5th."
	},
	"blade barrier" : {
		name : "Blade Barrier",
		classes : ["cleric"],
		source : [["SRD", 122], ["P", 218]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "90 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		save : "Dex",
		description : "100\u00D720\u00D75ft (l\u00D7w\u00D7h) wall or 30 rad 20\u00D75ft (w\u00D7h) ring; 6d10 Slashing dmg; save halves; 3/4 cover",
		descriptionMetric : "60\u00D76\u00D71,5m (l\u00D7w\u00D7h) wall or 9 rad 6\u00D71,5m (w\u00D7h) ring; 6d10 Slashing dmg; save halves; 3/4 cover",
		descriptionFull : "You create a vertical wall of whirling, razor-sharp blades made of magical energy. The wall appears within range and lasts for the duration. You can make a straight wall up to 100 feet long, 20 feet high, and 5 feet thick, or a ringed wall up to 60 feet in diameter, 20 feet high, and 5 feet thick. The wall provides three-quarters cover to creatures behind it, and its space is difficult terrain." + "\n   " + "When a creature enters the wall's area for the first time on a turn or starts its turn there, the creature must make a Dexterity saving throw. On a failed save, the creature takes 6d10 slashing damage. On a successful save, the creature takes half as much damage."
	},
	"bless" : {
		name : "Bless",
		classes : ["cleric", "paladin"],
		source : [["SRD", 122], ["P", 219]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A sprinkling of holy water",
		duration : "Conc, 1 min",
		description : "3+1/SL creatures can add 1d4 on every attack roll or saving throw during the duration",
		descriptionFull : "You bless up to three creatures of your choice within range. Whenever a target makes an attack roll or a saving throw before the spell ends, the target can roll a d4 and add the number rolled to the attack roll or saving throw." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st."
	},
	"blight" : {
		name : "Blight",
		classes : ["druid", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 122], ["P", 219]],
		level : 4,
		school : "Necro",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Con",
		description : "1 creature takes 8d8+1d8/SL Necrotic dmg; save halves; plants have dis. on save",
		descriptionFull : "Necromantic energy washes over a creature of your choice that you can see within range, draining moisture and vitality from it. The target must make a Constitution saving throw. The target takes 8d8 necrotic damage on a failed save, or half as much damage on a successful one. This spell has no effect on undead or constructs." + "\n   " + "If you target a plant creature or a magical plant, it makes the saving throw with disadvantage, and the spell deals maximum damage to it." + "\n   " + "If you target a nonmagical plant that isn't a creature, such as a tree or shrub, it doesn't make a saving throw, it simply withers and dies." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d8 for each slot level above 4th."
	},
	"blindness/deafness" : {
		name : "Blindness/Deafness",
		classes : ["bard", "cleric", "sorcerer", "wizard"],
		source : [["SRD", 122], ["P", 219]],
		level : 2,
		school : "Necro",
		time : "1 a",
		range : "30 ft",
		components : "V",
		duration : "1 min",
		save : "Con",
		description : "1+1/SL crea save or blinded or deafened; extra save at end of every turn",
		descriptionFull : "You can blind or deafen a foe. Choose one creature that you can see within range to make a Constitution saving throw. If it fails, the target is either blinded or deafened (your choice) for the duration. At the end of each of its turns, the target can make a Constitution saving throw. On a success, the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
	},
	"blink" : {
		name : "Blink",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 122], ["P", 219]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "1 min (D)",
		description : "50% chance every turn to travel to Ethereal Plane and return to an empty space within 10 ft next turn",
		descriptionFull : "Roll a d20 at the end of each of your turns for the duration of the spell. On a roll of 11 or higher, you vanish from your current plane of existence and appear in the Ethereal Plane (the spell fails and the casting is wasted if you were already on that plane). At the start of you next turn, and when the spell ends if you are on the Ethereal Plane, you return to an unoccupied space of your choice that you can see within 10 feet of the space you vanished from. If no unoccupied space is available within that range, you appear in the nearest unoccupied space (chosen at random if more than one space is equally near). You can dismiss this spell as an action." + "\n   " + "While on the Ethereal Plane, you can see and hear the plane you originated from, which is cast in shades of gray, and you can't see anything more than 60 feet away. You can only affect and be affected by other creatures on the Ethereal Plane. Creature that aren't there can't perceive you or interact with you, unless they have the ability to do so."
	},
	"blur" : {
		name : "Blur",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 123], ["P", 219]],
		level : 2,
		school : "Illus",
		time : "1 a",
		range : "Self",
		components : "V",
		duration : "Conc, 1 min",
		description : "Enemies have dis. on attacks vs. me; no effect against crea without vision or immune to illus.",
		descriptionFull : "Your body becomes blurred, shifting and wavering to all who can see you. For the duration, any creature has disadvantage on attack rolls against you. An attacker is immune to this effect if it doesn't rely on sight, as with blindsight, or can see through illusions, as with truesight."
	},
	"branding smite" : {
		name : "Branding Smite",
		classes : ["paladin"],
		source : [["SRD", 123], ["P", 219]],
		level : 2,
		school : "Evoc",
		time : "1 bns",
		range : "Self",
		components : "V",
		duration : "Conc, 1 min",
		description : "Next weapon hit +2d6+1d6/SL Radiant dmg; invisible target becomes visible for spell duration",
		descriptionFull : "The next time you hit a creature with a weapon attack before this spell ends, the weapon gleams with astral radiance as you strike. The attack deals an extra 2d6 radiant damage to the target, which becomes visible if it is invisible, and the target sheds dim light in a 5-foot radius and can't become invisible until the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the extra damage increases by 1d6 for each slot level above 2nd."
	},
	"burning hands" : {
		name : "Burning Hands",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 123], ["P", 220]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "15-ft cone",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "All in area 3d6+1d6/SL Fire dmg; save halves; unattended flammable objects ignite",
		descriptionFull : "As you hold your hands with thumbs touching and fingers spread, a thin sheet of flames shoots forth from your outstretched fingertips. Each creature in a 15-foot cone must make a Dexterity saving throw. A creature takes 3d6 fire damage on a failed save, or half as much damage on a successful one." + "\n   " + "The fire ignites any flammable objects in the area that aren't being worn or carried." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
	},
	"call lightning" : {
		name : "Call Lightning",
		classes : ["druid"],
		source : [["SRD", 123], ["P", 220]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		save : "Dex",
		description : "60-ft rad 10-ft high cloud; 1 a all in 5-ft rad under cloud 3d10+1d10/SL Lightning dmg; save half",
		descriptionFull : "A storm cloud appears in the shape of a cylinder that is 10 feet tall with a 60-foot radius, centered on a point you can see within range directly above you. The spell fails if you can't see a point in the air where the storm cloud could appear (for example, if you are in a room that can't accommodate the cloud)." + "\n   " + "When you cast the spell, choose a point you can see under the cloud. A bolt of lightning flashes down from the cloud to that point. Each creature within 5 feet of that point must make a Dexterity saving throw. A creature takes 3d10 lightning damage on a failed save, or half as much damage on a successful one. On each of your turns until the spell ends, you can use your action to call down lightning in this way again, targeting the same point or a different one." + "\n   " + "If you are outdoors in stormy conditions when you cast this spell, the spell gives you control over the existing storm instead of creating a new one. Under such conditions, the spell's damage increases by 1d10." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher level, the damage increases by 1d10 for each slot level above 3rd."
	},
	"calm emotions" : {
		name : "Calm Emotions",
		classes : ["bard", "cleric"],
		source : [["SRD", 123], ["P", 221]],
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Cha",
		description : "20-ft rad all humanoids save or I suppress either charm/fear effects or hostility ",
		descriptionFull : "You attempt to suppress strong emotions in a group of people. Each humanoid in a 20-foot-radius sphere centered on a point you choose within range must make a Charisma saving throw a creature can choose to fail this saving throw if it wishes. If a creature fails its saving throw, choose one of the following two effects." + "\n   " + "You can suppress any effect causing a target to be charmed or frightened. When this spell ends, any suppressed effect resumes, provided that its duration has not expired in the meantime." + "\n   " + "Alternatively, you can make a target indifferent about creatures of your choice that it is hostile toward. This indifference ends if the target is attacked or harmed by a spell or if it witnesses any of its friends being harmed. When the spell ends, the creature becomes hostile again, unless the DM rules otherwise."
	},
	"chain lightning" : {
		name : "Chain Lightning",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 124], ["P", 221]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "A bit of fur, a piece of amber, glass, or crystal rod, and three silver pins",
		duration : "Instantaneous",
		save : "Dex",
		description : "Lightning bolt 1 crea and 3+1/SL crea within 30 ft; 10d8 Lightning dmg; save halves",
		descriptionFull : "You create a bolt of lightning that arcs toward a target of your choice that you can see within range. Three bolts then leap from that target to as many as three other targets, each of which must be within 30 feet of the first target. A target can be a creature or an object and can be targeted by only one of the bolts." + "\n   " + "A target must make a Dexterity saving throw. The target takes 10d8 lightning damage on a failed save, or half as much on a successful one." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, one additional bolt leaps from the first target to another target for each slot level above 6th."
	},
	"charm person" : {
		name : "Charm Person",
		classes : ["bard", "druid", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 124], ["P", 221]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "1 h",
		save : "Wis",
		description : "1+1/SL humanoids, each max 30 ft apart, save or charmed; adv. on save if me/ally is fighting it",
		descriptionFull : "You attempt to charm a humanoid you can see within range. It must make a Wisdom saving throw, and does so with advantage if you or your companions are fighting it. If it fails the saving throw, it is charmed by you until the spell ends or until you or your companions do anything harmful to it. The charmed creature regards you as a friendly acquaintance. When the spell ends, the creature knows it was charmed by you." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st. The creatures must be within 30 feet of each other when you target them."
	},
	"chill touch" : {
		name : "Chill Touch",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 124], ["P", 221]],
		level : 0,
		school : "Necro",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "1 rnd",
		description : "Spell attack for 1d8 Necrotic dmg; can't regain HP; undead dis. atks vs. me; +1d8 at CL 5, 11, and 17",
		descriptionCantripDie : "Spell attack for `CD`d8 Necrotic dmg; can't regain hp; undead dis. atks vs. me",
		descriptionFull : "You create a ghostly, skeletal hand in the space of a creature within range. Make a ranged spell attack against the creature to assail it with the chill of the grave. On a hit, the target takes 1d8 necrotic damage, and it can't regain hit points until the start of your next turn. Until then, the hand clings to the target." + "\n   " + "If you hit an undead target, it also has disadvantage on attack rolls against you until the end of your next turn." + "\n   " + "This spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
	},
	"circle of death" : {
		name : "Circle of Death",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 124], ["P", 221]],
		level : 6,
		school : "Necro",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M\u0192",
		compMaterial : "The powder of a crushed black pearl worth at least 500 gp",
		duration : "Instantaneous",
		save : "Con",
		description : "60-ft rad all 8d6+2d6/SL Necrotic dmg; save halves (500gp)",
		descriptionFull : "A sphere of negative energy ripples out in a 60-foot-radius sphere from a point within range. Each creature in that area must make a Constitution saving throw. A target takes 8d6 necrotic damage on a failed save, or half as much damage on a successful one." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the damage increases by 2d6 for each slot level above 6th."
	},
	"clairvoyance" : {
		name : "Clairvoyance",
		classes : ["bard", "cleric", "sorcerer", "wizard"],
		source : [["SRD", 124], ["P", 222]],
		level : 3,
		school : "Div",
		time : "10 min",
		range : "1 mile",
		components : "V,S,M\u0192",
		compMaterial : "A focus worth at least 100 gp, either a jeweled horn for hearing or a glass eye for scrying",
		duration : "Conc, 10 min",
		description : "See or hear a familiar place; 1 a to switch between seeing and hearing (100gp)",
		descriptionFull : "You create an invisible sensor within range in a location familiar to you (a place you have visited or seen before) or in an obvious location that is unfamiliar to you (such as behind a door, around a corner, or in a grove of trees). The sensor remains in place for the duration, and it can't be attacked or otherwise interacted with. When you cast the spell, you choose seeing or hearing. You can use the chosen sense through the sensor as if you were in its space. As your action, you can switch between seeing and hearing. A creature that can see the sensor (such as a creature benefitting from see invisibility or truesight) sees a luminous, intangible orb about the size of your fist." + "\n   " + "When you cast the spell, you choose seeing or hearing. You can use the chosen sense through the sensor as if you were in its space. As your action, you can switch between seeing and hearing. A creature that can see the sensor (such as a creature benefitting from see invisibility or truesight) sees a luminous, intangible orb about the size of your fist." + "\n   " + "A creature that can see the sensor (such as a creature benefitting from see invisibility or truesight) sees a luminous, intangible orb about the size of your fist."
	},
	"clone" : {
		name : "Clone",
		classes : ["wizard"],
		source : [["SRD", 125], ["P", 222]],
		level : 8,
		school : "Necro",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A diamond worth at least 1,000 gp and at least 1 cubic inch of flesh of the creature that is to be cloned, which the spell consumes, and a vessel worth at least 2,000 gp that has a sealable lid and is large enough to hold a Medium creature, such as a huge urn, coffin, mud-filled cyst in the ground, or crystal container filled with salt water",
		duration : "Instantaneous",
		description : "Create a clone of a living crea; after death its soul can move to the clone (1K gp cons.; 2K gp)",
		descriptionFull : "This spell grows an inert duplicate of a living creature as a safeguard against death. This clone forms inside as a sealed vessel and grows to full size and maturity after 120 days you can also choose to have the clone be a younger version of the same creature. It remains inert and endures indefinitely, as long as its vessel remains undisturbed." + "\n   " + "At any time after the clone matures, if the original creature dies, its soul transfers to the clone, provided that the soul is free and willing to return. The clone is physically identical to the original and has the same personality, memories, and abilities, but none of the original's equipment. The original creature's physical remains, if they still exist, become inert and can't thereafter be restored to life, since the creature's soul is elsewhere."
	},
	"cloudkill" : {
		name : "Cloudkill",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 125], ["P", 222]],
		level : 5,
		school : "Conj",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		save : "Con",
		description : "20-ft rad 5d8+1d8/SL Poison dmg; save halves; move 10 ft/rnd; heavily obscured, difficult terrain",
		descriptionFull : "You create a 20-foot-radius sphere of poisonous, yellow-green fog centered on a point you choose within range. The fog spreads around corners. It lasts for the duration or until strong wind disperses the fog, ending the spell. Its area is heavily obscured." + "\n   " + "When a creature enters the spell's area for the first time on a turn or starts its turn there, that creature must make a Constitution saving throw. The creature takes 5d8 poison damage on a failed save, or half as much damage on a successful one. Creatures are affected even if they hold their breath or don't need to breathe." + "\n   " + "The fog moves 10 feet away from you at the start of each of your turns, rolling along the surface of the ground. The vapors, being heavier than air, sink to the lowest level of the land, even pouring down openings." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d8 for each slot level above 5th."
	},
	"color spray" : {
		name : "Color Spray",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 125], ["P", 222]],
		level : 1,
		school : "Illus",
		time : "1 a",
		range : "15-ft cone",
		components : "V,S,M",
		compMaterial : "A pinch of powder or sand that is colored red, yellow, and blue",
		duration : "1 rnd",
		description : "6d10+2d10/SL HP of crea blinded, starting with the lowest current HP crea",
		descriptionFull : "A dazzling array of flashing, colored light springs from your hand. Roll 6d10, the total is how many hit points of creatures this spell can effect. Creatures in a 15-foot cone originating from you are affected in ascending order of their current hit points (ignoring unconscious creatures and creatures that can't see)." + "\n   " + "Starting with the creature that has the lowest current hit points, each creature affected by this spell is blinded until the end of your next turn. Subtract each creature's hit points from the total before moving on to the creature with the next lowest hit points. A creature's hit points must be equal to or less than the remaining total for the creature to be affected." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d10 for each slot level above 1st."
	},
	"command" : {
		name : "Command",
		classes : ["cleric", "paladin"],
		source : [["SRD", 125], ["P", 223]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "1 rnd",
		save : "Wis",
		description : "1+1/SL crea, each max 30 ft apart, save or follow one word command, e.g. approach, drop, flee, halt",
		descriptionFull : "You speak a one-word command to a creature you can see within range. The target must succeed on a Wisdom saving throw or follow the command on its next turn. The spell has no effect if the target is undead, if it doesn't understand your language, or if your command is directly harmful to it." + "\n   " + "Some typical commands and their effects follow. You might issue a command other than one described here. If you do so, the DM determines how the target behaves. If the target can't follow your command, the spell ends." + "\n   " + toUni("Approach") + ": The target moves toward you by the shortest and most direct route, ending its turn if it moves within 5 feet of you." + "\n   " + toUni("Drop") + ": The target drops whatever it is holding and then ends its turn." + "\n   " + toUni("Flee") + ": The target spends its turn moving away from you by the fastest available means." + "\n   " + toUni("Grovel") + ": The target falls prone and then ends its turn." + "\n   " + toUni("Halt") + ": The target doesn't move and takes no actions. A flying creature stays aloft, provided that it is able to do so. If it must move to stay aloft, it flies the minimum distance needed to remain in the air." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can affect one additional creature for each slot level above 1st. The creatures must be within 30 feet of each other when you target them."
	},
	"commune" : {
		name : "Commune",
		classes : ["cleric"],
		source : [["SRD", 126], ["P", 223]],
		ritual : true,
		level : 5,
		school : "Div",
		time : "1 min",
		range : "Self",
		components : "V,S,M",
		compMaterial : "Incense and a vial of holy or unholy water",
		duration : "1 min",
		description : "Ask up to three yes/no questions to my deity or a divine proxy (25gp)",
		descriptionFull : "You contact your deity or a divine proxy and ask up to three questions that can be answered with a yes or no. You must ask your questions before the spell ends. You receive a correct answer for each question." + "\n   " + "Divine beings aren't necessarily omniscient, so you might receive \"unclear\" as an answer if a question pertains to information that lies beyond the deity's knowledge. In a case where a one-word answer could be misleading or contrary to the deity's interests, the DM might offer a short phrase as an answer instead." + "\n   " + "If you cast the spell two or more times before finishing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get no answer. The DM makes this roll in secret."
	},
	"commune with nature" : {
		name : "Commune with Nature",
		nameShort : "Commune w. Nature",
		classes : ["druid", "ranger"],
		source : [["SRD", 126], ["P", 224]],
		ritual : true,
		level : 5,
		school : "Div",
		time : "1 min",
		range : "Self",
		components : "V,S",
		duration : "Instantaneous",
		description : "Know 3 facts about natural features in 3 miles rad (300 ft rad underground)",
		descriptionFull : "You briefly become one with nature and gain knowledge of the surrounding territory. In the outdoors, the spell gives you knowledge of the land within 3 miles of you. In caves and other natural underground settings, the radius is limited to 300 feet. The spell doesn't function where nature has been replaced by construction, such as in dungeons and towns." + "\n   " + "You instantly gain knowledge of up to three facts of your choice about any of the following subjects as they relate to the area - terrain and bodies of water; prevalent plants, minerals, animals, or peoples; powerful celestials, fey, fiends, elementals, or undead; influence from other planes of existence; buildings." + "\n   " + "For example, you could determine the location of powerful undead in the area, the location of major sources of safe drinking water, and the location of any nearby towns."
	},
	"comprehend languages" : {
		name : "Comprehend Languages",
		nameShort : "Comp. Languages",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 126], ["P", 224]],
		ritual : true,
		level : 1,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A pinch of soot and salt",
		duration : "1 h",
		description : "Understand all spoken language or written language when touched; does not help vs. cyphers",
		descriptionFull : "For the duration, you understand the literal meaning of any spoken language that you hear. You also understand any spoken language that you hear. You also understand any written language that you see, but you must be touching the surface of which the words are written. It takes about 1 minute to read one page of text." + "\n   " + "This spell doesn't decode secret messages in a text or glyph, such as an arcane sigil, that isn't part of a written language."
	},
	"compulsion" : {
		name : "Compulsion",
		classes : ["bard"],
		source : [["SRD", 126], ["P", 224]],
		level : 4,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "Any crea that hear me save or I can, as bns, have it move fully in one direction; save again after move",
		descriptionFull : "Creatures of your choice that you can see within range and that can hear you must make a Wisdom saving throw. A target automatically succeeds on this saving throw if it can't be charmed. On a failed save, a target is affected by this spell. Until the spell ends, you can use a bonus action on each of your turns to designate a direction that is horizontal to you. Each affected target must use as much of its movement as possible to move in that direction on its next turn. It can take its action before it moves. After moving in this way, it can make another Wisdom saving throw to try to end the effect." + "\n   " + "A target isn't compelled to move into an obviously deadly hazard, such as a fire pit, but it will provoke opportunity attacks to move in the designated direction."
	},
	"cone of cold" : {
		name : "Cone of Cold",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 127], ["P", 224]],
		level : 5,
		school : "Evoc",
		time : "1 a",
		range : "60-ft cone",
		components : "V,S,M",
		compMaterial : "A small crystal or glass cone",
		duration : "Instantaneous",
		save : "Con",
		description : "8d8+1d8/SL Cold dmg; save halves; crea killed become frozen statues until thawed",
		descriptionFull : "A blast of cold air erupts from your hands. Each creature in a 60-foot cone must make a Constitution saving throw. A creature takes 8d8 cold damage on a failed save, or half as much damage on a successful one." + "\n   " + "A creature killed by this spell becomes a frozen statue until it thaws." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d8 for each slot level above 5th."
	},
	"confusion" : {
		name : "Confusion",
		classes : ["bard", "druid", "sorcerer", "wizard"],
		source : [["SRD", 127], ["P", 224]],
		level : 4,
		school : "Ench",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "Three nut shells",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "10+5/SL-ft rad all save or confused, see book; extra save at end of every turn",
		descriptionFull : "This spell assaults and twists creatures' minds, spawning delusions and provoking uncontrolled actions. Each creature in a 10-foot-radius sphere centered on a point you choose within range must succeed on a Wisdom saving throw when you cast this spell or be affected by it." + "\n   " + "An affected target can't take reactions and must roll a d10 at the start of each of its turns to determine its behavior for that turn." + "\n\n" + toUni("d10") + "\t" + toUni("Behavior") + "\n   " + "1\tThe creature uses all its movement to move in a random direction. To determine the direction, roll a d8 and assign a direction to each die face. The creature doesn't take an action this turn." + "\n   " + "2-6\tThe creature doesn't move or take actions this turn." + "\n   " + "7-8\tThe creature uses its action to make a melee attack against a randomly determined creature within its reach. If there is no creature within its reach, the creature does nothing this turn." + "\n   " + "9-10\tThe creature can act and move normally." + "\n\n" + "At the end of its turns, an affected target can make a Wisdom saving throw. If it succeeds, this effect ends for that target." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, the radius of the sphere increases by 5 feet for each slot above 4th."
	},
	"conjure animals" : {
		name : "Conjure Animals",
		classes : ["druid", "ranger"],
		source : [["SRD", 127], ["P", 225]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "Summon 2+2/2SL CR of beasts; obey my verbal commands",
		descriptionFull : "You summon fey spirits that take the form of beasts and appear in unoccupied spaces that you can see within range. Choose one of the following options for what appears." + "\n " + "\u2022 One beast of challenge rating 2 or lower" + "\n " + "\u2022 Two beasts of challenge rating 1 or lower" + "\n " + "\u2022 Four beasts of challenge rating 1/2 or lower" + "\n " + "\u2022 Eight beasts of challenge rating 1/4 or lower" + "\n\n" + "Each beast is also considered fey, and it disappears when it drops to 0 hit points or when the spell ends." + "\n   " + "The summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which has its own turns. They obey any verbal commands that you issue to them (no action required by you). If you don't issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions. The DM has the creatures' statistics." + AtHigherLevels + "When you cast this spell using certain higher-level spell slots, you choose one of the summoning options above, and more creatures appear - twice as many with a 5th-level slot, three times as many with a 7th-level slot, and four times as many with a 9th-level slot."
	},
	"conjure celestial" : {
		name : "Conjure Celestial",
		classes : ["cleric"],
		source : [["SRD", 127], ["P", 225]],
		level : 7,
		school : "Conj",
		time : "1 min",
		range : "90 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "CR 4+1/2SL celestial; obeys my verbal commands if they do not go against its alignment",
		descriptionFull : "You summon a celestial of challenge rating 4 or lower, which appears in an unoccupied space that you can see within range. The celestial disappears when it drops to 0 hit points or when the spell ends." + "\n   " + "The celestial is friendly to you and your companions for the duration. Roll initiative for the celestial, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you), as long as they don't violate its alignment. If you don't issue any commands to the celestial, it defends itself from hostile creatures but otherwise takes no actions The DM has the celestial's statistics. At Higher Levels:" + "\n   " + "When you cast this spell using a 9th-level spell slot, you summon a celestial of challenge rating 5 or lower."
	},
	"conjure elemental" : {
		name : "Conjure Elemental",
		classes : ["druid", "wizard"],
		source : [["SRD", 128], ["P", 225]],
		level : 5,
		school : "Conj",
		time : "1 min",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "Burning incense for air, soft clay for earth, sulfur and phosphorus for fire, or water and sand for water",
		duration : "Conc, 1 h",
		description : "CR 5+1/SL elemental; obeys my verbal commands; breaks free on broken conc.",
		descriptionFull : "You call forth an elemental servant. Choose an area of air, earth, fire, or water that fills a 10-foot cube within range. An elemental of challenge rating 5 or lower appropriate to the area you chose appears in an unoccupied space within 10 feet of it. For example, a fire elemental emerges from a bonfire, and an earth elemental rises up from the ground. The elemental disappears when it drops to 0 hit points or when the spell ends." + "\n   " + "The elemental is friendly to you and your companions for the duration. Roll initiative for the elemental, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you). If you don't issue any commands to the elemental, it defends itself from hostile creatures but otherwise takes no actions." + "\n   " + "If your concentration is broken, the elemental doesn't disappear. Instead, you lose control of the elemental, it becomes hostile toward you and your companions, and it might attack. An uncontrolled elemental can't be dismissed by you, and it disappears 1 hour after you summoned it. The DM has the elemental's statistics." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the challenge rating increases by 1 for each slot level above 5th."
	},
	"conjure fey" : {
		name : "Conjure Fey",
		classes : ["druid", "warlock"],
		source : [["SRD", 128], ["P", 226]],
		level : 6,
		school : "Conj",
		time : "1 min",
		range : "90 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "CR 6+1/SL fey; obeys my verbal commands not against its align.; breaks free on broken conc.",
		descriptionFull : "You summon a fey creature of challenge rating 6 or lower, or a fey spirit that takes the form of a beast of challenge rating 6 or lower. It appears in an unoccupied space that you can see within range. The fey creature disappears when it drops to 0 hit points or when the spell ends." + "\n   " + "The fey creature is friendly to you and your companions for the duration. Roll initiative for the creature, which has its own turns. It obeys any verbal commands that you issue to it (no action required by you), as long as they don't violate its alignment. If you don't issue any commands to the fey creature, it defends itself from hostile creatures but otherwise takes no actions." + "\n   " + "If your concentration is broken, the fey creature doesn't disappear. Instead, you lose control of the fey creature, it becomes hostile toward you and your companions, and it might attack. An uncontrolled fey creature can't be dismissed by you, and it disappears 1 hour after you summoned it. The DM has the fey creature's statistics." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the challenge rating increases by 1 for each slot level above 6th."
	},
	"conjure minor elementals" : {
		name : "Conjure Minor Elementals",
		nameShort : "Conj. Minor Elementals",
		classes : ["druid", "wizard"],
		source : [["SRD", 128], ["P", 226]],
		level : 4,
		school : "Conj",
		time : "1 min",
		range : "90 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "Summon 2+2/2SL CR of elementals; obey my verbal commands",
		descriptionFull : "You summon elementals that appear in unoccupied spaces that you can see within range. You choose one the following options for what appears." + "\n " + "\u2022 One elemental of challenge rating 2 or lower" + "\n " + "\u2022 Two elementals of challenge rating 1 or lower" + "\n " + "\u2022 Four elementals of challenge rating 1/2 or lower" + "\n " + "\u2022 Eight elementals of challenge rating 1/4 or lower." + "\n\n" + "An elemental summoned by this spell disappears when it drops to 0 hit points or when the spell ends." + "\n   " + "The summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which has its own turns. They obey any verbal commands that you issue to them (no action required by you). If you don't issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions. The DM has the creatures' statistics." + AtHigherLevels + "When you cast this spell using certain higher-level spell slots, you choose one of the summoning options above, and more creatures appear - twice as many with a 6th-level slot and three times as many with an 8th-level slot."
	},
	"conjure woodland beings" : {
		name : "Conjure Woodland Beings",
		nameShort : "Conj. Woodland Beings",
		classes : ["druid", "ranger"],
		source : [["SRD", 129], ["P", 226]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "One holly berry per creature summoned",
		duration : "Conc, 1 h",
		description : "Summon 2+2/2SL CR of fey; obey my verbal commands",
		descriptionFull : "You summon fey creatures that appear in unoccupied spaces that you can see within range. Choose one of the following options for what appears." + "\n " + "\u2022 One fey creature of challenge rating 2 or lower" + "\n " + "\u2022 Two fey creatures of challenge rating 1 or lower" + "\n " + "\u2022 Four fey creatures of challenge rating 1/2 or lower" + "\n " + "\u2022 Eight fey creatures of challenge rating 1/4 or lower" + "\n\n" + "A summoned creature disappears when it drops to 0 hit points or when the spell ends. The summoned creatures are friendly to you and your companions. Roll initiative for the summoned creatures as a group, which have their own turns. They obey any verbal commands that you issue to them (no action required by you). If you don't issue any commands to them, they defend themselves from hostile creatures, but otherwise take no actions. The DM has the creatures' statistics." + AtHigherLevels + "When you cast this spell using certain higher-level spell slots, you choose one of the summoning options above, and more creatures appear - twice as many with a 6th-level slot and three times as many with an 8th-level slot."
	},
	"contact other plane" : {
		name : "Contact Other Plane",
		classes : ["warlock", "wizard"],
		source : [["SRD", 129], ["P", 226]],
		ritual : true,
		level : 5,
		school : "Div",
		time : "1 min",
		range : "Self",
		components : "V",
		duration : "1 min",
		save : "Int",
		description : "I make DC 15 save to ask extraplanar entity 5 questions with one word answers; insane on fail",
		descriptionFull : "You mentally contact a demigod, the spirit of a long-dead sage, or some other mysterious entity from another plane. Contacting this extraplanar intelligence can strain or even break your mind. When you cast this spell, make a DC 15 Intelligence saving throw. On a failure, you take 6d6 psychic damage and are insane until you finish a long rest. While insane, you can't take actions, can't understand what other creatures say, can't read, and speak only in gibberish. A greater restoration spell cast on you ends this effect." + "\n   " + "On a successful save, you can ask the entity up to five questions. You must ask your questions before the spell ends. The DM answers each question with one word, such as yes, no, maybe, never, irrelevant, unclear (if the entity doesn't know the answer to the question). If a one-word answer would be misleading, the DM might instead offer a short phrase as an answer."
	},
	"contagion" : {
		name : "Contagion",
		classes : ["cleric", "druid"],
		source : [["SRD", 129], ["P", 227]],
		level : 5,
		school : "Necro",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "7 days",
		save : "Con",
		description : "Melee spell attack for poisoned; save each rnd, 3 success: spell ends, 3 fail: poison ends, disease; see B",
		descriptionFull : "Your touch inflicts disease. Make a melee spell attack against a creature within your reach. On a hit, the target is poisoned." + "\n   " + "At the end of each of the poisoned target's turns, the target must make a Constitution saving throw. If the target succeeds on three of these saves, it is no longer poisoned, and the spell ends. If the target fails three of these saves, the target is no longer poisoned, but choose one of the diseases below. The target is subjected to the chosen disease for the spell's duration." + "\n   " + "Since this spell induces a natural disease in its target, any effect that removes a disease or otherwise ameliorates a disease's effects apply to it." + "\n   " + toUni("Blinding Sickness") + ": Pain grips the creature's mind, and its eyes turn milky white. The creature has disadvantage on Wisdom checks and Wisdom saving throws and is blinded." + "\n   " + toUni("Filth Fever") + ": A raging fever sweeps through the creature's body. The creature has disadvantage on Strength checks, Strength saving throws, and attack rolls that use Strength." + "\n   " + toUni("Flesh Rot") + ": The creature's flesh decays. The creature has disadvantage on Charisma checks and vulnerability to all damage." + "\n   " + toUni("Mindfire") + ": The creature's mind becomes feverish. The creature has disadvantage on Intelligence checks and Intelligence saving throws, and the creature behaves as if under the effects of the confusion spell during combat." + "\n   " + toUni("Seizure") + ": The creature is overcome with shaking. The creature has disadvantage on Dexterity checks, Dexterity saving throws, and attack rolls that use Dexterity." + "\n   " + toUni("Slimy Doom") + ": The creature begins to bleed uncontrollably. The creature has disadvantage on Constitution checks and Constitution saving throws. In addition, whenever the creature takes damage, it is stunned until the end of its next turn."
	},
	"contingency" : {
		name : "Contingency",
		classes : ["wizard"],
		source : [["SRD", 130], ["P", 227]],
		level : 6,
		school : "Evoc",
		time : "10 min",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "A statuette of yourself carved from ivory and decorated with gems worth at least 1,500 gp",
		duration : "10 days",
		description : "Prepare another SL<6 spell I can cast to activate when some condition is met (1500gp)",
		descriptionFull : "Choose a spell of 5th level or lower that you can cast, that has a casting time of 1 action, and that can target you. You cast that spell—called the contingent spell—as part of casting contingency, expending spell slots for both, but the contingent spell doesn't come into effect. Instead, it takes effect when a certain circumstance occurs. You describe that circumstance when you cast the two spells. For example, a contingency cast with water breathing might stipulate that water breathing comes into effect when you are engulfed in water or a similar liquid." + "\n   " + "The contingent spell takes effect immediately after the circumstance is met for the first time, whether or not you want it to, and then contingency ends." + "\n   " + "The contingent spell takes effect only on you, even if it can normally target others. You can use only one contingency spell at a time. If you cast this spell again, the effect of another contingency spell on you ends. Also, contingency ends on you if its material component is ever not on your person."
	},
	"continual flame" : {
		name : "Continual Flame",
		classes : ["cleric", "wizard"],
		source : [["SRD", 130], ["P", 227]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Ruby dust worth 50 gp, which the spell consumes",
		duration : "Till dispelled",
		description : "Create a permanent flame (50gp cons.)",
		descriptionFull : "A flame, equivalent in brightness to a torch, springs forth from an object that you touch. The effect looks like a regular flame, but it creates no heat and doesn't use oxygen. A continual flame can be covered or hidden but not smothered or quenched."
	},
	"control water" : {
		name : "Control Water",
		classes : ["cleric", "druid", "wizard"],
		source : [["SRD", 130], ["P", 227]],
		level : 4,
		school : "Trans",
		time : "1 a",
		range : "300 ft",
		components : "V,S,M",
		compMaterial : "A drop of water and a pinch of dust",
		duration : "Conc, 10 min",
		description : "Control an amount of water in a 100 ft cube as 1 a; flood, part, redirect, or whirlpool, see book",
		descriptionFull : "Until the spell ends, you control any freestanding water inside an area you choose that is a cube up to 100 feet on a side. You can choose from any of the following effects when you cast this spell. As an action on your turn, you can repeat the same effect or choose a different one." + "\n   " + toUni("Flood") + ": You cause the water level of all standing water in the area to rise by as much as 20 feet. If the area includes a shore, the flooding water spills over onto dry land. If you choose an area in a large body of water, you instead create a 20-foot tall wave that travels from one side of the area to the other and then crashes down. Any Huge or smaller vehicles in the wave's path are carried with it to the other side. Any Huge or smaller vehicles struck by the wave have a 25 percent chance of capsizing. The water level remains elevated until the spell ends or you choose a different effect. If this effect produced a wave, the wave repeats on the start of your next turn while the flood effect lasts." + "\n   " + toUni("Part Water") + ": You cause water in the area to move apart and create a trench. The trench extends across the spell's area, and the separated water forms a wall to either side. The trench remains until the spell ends or you choose a different effect. The water then slowly fills in the trench over the course of the next round until the normal water level is restored." + "\n   " + toUni("Redirect Flow") + ": You cause flowing water in the area to move in a direction you choose, even if the water has to flow over obstacles, up walls, or in other unlikely directions. The water in the area moves as you direct it, but once it moves beyond the spell's area, it resumes its flow based on the terrain conditions. The water continues to move in the direction you chose until the spell ends or you choose a different effect." + "\n   " + toUni("Whirlpool") + ": This effect requires a body of water at least 50 feet square and 25 feet deep. You cause a whirlpool to form in the center of the area. The whirlpool forms a vortex that is 5 feet wide at the base, up to 50 feet wide at the top, and 25 feet tall. Any creature or object in the water and within 25 feet of the vortex is pulled 10 feet toward it. A creature can swim away from the vortex by making a Strength (Athletics) check against your spell save DC. When a creature enters the vortex for the first time on a turn or starts its turn there, it must make a Strength saving throw. On a failed save, the creature takes 2d8 bludgeoning damage and is caught in the vortex until the spell ends. On a successful save, the creature takes half damage, and isn't caught in the vortex. A creature caught in the vortex can use its action to try to swim away from the vortex as described above, but has disadvantage on the Strength (Athletics) check to do so. The first time each turn that an object enters the vortex, the object takes 2d8 bludgeoning damage, this damage occurs each round it remains in the vortex."
	},
	"control weather" : {
		name : "Control Weather",
		classes : ["cleric", "druid", "wizard"],
		source : [["SRD", 131], ["P", 228]],
		level : 8,
		school : "Trans",
		time : "10 min",
		range : "5-mile rad",
		components : "V,S,M",
		compMaterial : "Burning incense and bits of earth and wood mixed in water",
		duration : "Conc, 8 h",
		description : "Change current weather; changes take 1d4\u00D710 min; change precipitation, temperature, wind, see B",
		descriptionFull : "You take control of the weather within 5 miles of you for the duration. You must be outdoors to cast this spell. Moving to a place where you don't have a clear path to the sky ends the spell early." + "\n   " + "When you cast the spell, you change the current weather conditions, which are determined by the DM based on the climate and season. You can change precipitation, temperature, and wind. It takes 1d4 \u00D7 10 minutes for the new conditions to take effect. Once they do so, you can change the conditions again. When the spell ends, the weather gradually returns to normal." + "\n   " + "When you change the weather conditions, find a current condition on the following tables and change its stage by one, up or down. When changing the wind, you can change its direction." + "\n\n" + toUni("Precipitation") + "\n " + toUni("Stage") + "\t" + toUni("Condition") + "\n     " + "1\tClear" + "\n     " + "2\tLight clouds" + "\n     " + "3\tOvercast or ground fog" + "\n     " + "4\tRain, hail or snow" + "\n     " + "5\tTorrential rain, driving hail or blizzard" + "\n\n" + toUni("Temperature") + "\t\t" + toUni("Wind") + "\n " + toUni("Stage") + "\t" + toUni("Condition") + "\t " + toUni("Stage") + "\t" + toUni("Condition") + "\n     " + "1\tUnbearable heat" + "\t     " + "1\tCalm" + "\n     " + "2\tHot" + "\t\t     " + "2\tModerate wind" + "\n     " + "3\tWarm" + "\t\t     " + "3\tStrong wind" + "\n     " + "4\tCool" + "\t\t     " + "4\tGale" + "\n     " + "5\tCold" + "\t\t     " + "5\tStorm" + "\n     " + "6\tArctic cold"
	},
	"counterspell" : {
		name : "Counterspell",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 131], ["P", 228]],
		level : 3,
		school : "Abjur",
		time : "1 rea",
		range : "60 ft",
		components : "S",
		duration : "Instantaneous",
		description : "Stop a spell being cast; make DC 10+SL spellcasting ability check if above the spell slot lvl used",
		descriptionFull : "You attempt to interrupt a creature in the process of casting a spell. If the creature is casting a spell of 3rd level or lower, its spell fails and has no effect. If it is casting a spell of 4th level or higher, make an ability check using your spellcasting ability. The DC equals 10 + the spell's level. On a success, the creature's spell fails and has no effect." + "\n   " + "At Higher Level. When you cast this spell using a spell slot of 4th level or higher, the interrupted spell has no effect if its level is less than or equal to the level of the spell slot you used."
	},
	"create food and water" : {
		name : "Create Food and Water",
		classes : ["cleric", "paladin"],
		source : [["SRD", 131], ["P", 229]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Create 45 pounds of food and 30 gallons of water; enough for 15 humanoids or 5 steeds for 24h",
		descriptionFull : "You create 45 pounds of food and 30 gallons of water on the ground or in containers within range, enough to sustain up to fifteen humanoids or five steeds for 24 hours. The food is bland but nourishing, and spoils if uneaten after 24 hours. The water is clean and doesn't go bad."
	},
	"create or destroy water" : {
		name : "Create or Destroy Water",
		classes : ["cleric", "druid"],
		source : [["SRD", 132], ["P", 229]],
		level : 1,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A drop of water if creating water or a few grains of sand if destroying it",
		duration : "Instantaneous",
		description : "Create/destroy 10+2/SL gal of water in open container or create rain/destroy fog in 30+5/SL-ft cu",
		descriptionFull : "You either create or destroy water." + "\n   " + toUni("Create Water") + ": You create up to 10 gallons of clean water within range in an open container. Alternatively, the water falls as rain in a 30-foot cube within range, extinguishing exposed flames in the area." + "\n   " + toUni("Destroy Water") + ": You destroy up to 10 gallons of water in an open container within range. Alternatively, you destroy fog in a 30-foot cube within range." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you create or destroy 10 additional gallons of water, or the size of the cube increases by 5 feet, for each slot level above 1st."
	},
	"create undead" : {
		name : "Create Undead",
		classes : ["cleric", "warlock", "wizard"],
		source : [["SRD", 132], ["P", 229]],
		level : 6,
		school : "Necro",
		time : "1 min",
		range : "10 ft",
		components : "V,S,M\u2020",
		compMaterial : "One clay pot filled with grave dirt, one clay pot filled with brackish water, and one 150 gp black onyx stone for each corpse.",
		duration : "Instantaneous",
		description : "Turn corpses into 3+1/SL ghoul a.o.; control 24h; bns a command 120 ft; see B (150gp/corpse cons.)",
		descriptionFull : "You can cast this spell only at night. Choose up to three corpses of Medium or Small humanoids within range. Each corpse becomes a ghoul under your control. (The DM has game statistics for these creatures.)" + "\n   " + "As a bonus action on each of your turns, you can mentally command any creature you animated with this spell if the creature is within 120 feet of you (if you control multiple creatures, you can command any or all of them at the same time, issuing the same command to each one). You decide what action the creature will take and where it will move during its next turn, or you can issue a general command, such as to guard a particular chamber or corridor. If you issue no commands, the creature only defends itself against hostile creatures. Once given an order, the creature continues to follow it until its task is complete." + "\n   " + "The creature is under your control for 24 hours, after which it stops obeying any command you have given it. To maintain control of the creature for another 24 hours, you must cast this spell on the creature before the current 24-hour period ends. This use of the spell reasserts your control over up to three creatures you have animated with this spell, rather than animating new ones." + AtHigherLevels + "When you cast this spell using a 7th-level spell slot, you can animate or reassert control over four ghouls. When you cast this spell using an 8th-level spell slot, you can animate or reassert control over five ghouls or two ghasts or wights. When you cast this spell using a 9th-level spell slot, you can animate or reassert control over six ghouls, three ghasts or wights, or two mummies."
	},
	"creation" : {
		name : "Creation",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 132], ["P", 229]],
		level : 5,
		school : "Illus",
		time : "1 min",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A tiny piece of matter of the same type of the item you plan to create",
		duration : "Special",
		description : "Create a nonliving object up to a 5+5/SL-ft cube of vegetable matter, stone, metal, gems or rare metals",
		descriptionFull : "You pull wisps of shadow material from the Shadowfell to create a nonliving object of vegetable matter within range - soft goods, rope, wood, or something similar. You can also use this spell to create mineral objects such as stone, crystal, or metal. The object created must be no larger than a 5-foot cube, and the object must be of a form and material that you have seen before." + "\n   " + "The duration depends on the object's material. If the object is composed of multiple materials, use the shortest duration." + "\n\n" + toUni("Material") + "\t\t" + toUni("Duration") + "\n" + "Vegetable matter\t1 day" + "\n" + "Stone or crystal\t12 hours" + "\n" + "Precious metals\t1 hour" + "\n" + "Gems\t\t10 minutes" + "\n\n" + "Adamantine/Mithral - 1 minute" + "\n   " + "Using any material created by this spell as another spell's material component causes that spell to fail." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the cube increases by 5 feet for each slot level above 5th."
	},
	"cure wounds" : {
		name : "Cure Wounds",
		classes : ["bard", "cleric", "druid", "paladin", "ranger"],
		source : [["SRD", 132], ["P", 230]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 living creature heals 1d8+1d8/SL+spellcasting ability modifier HP",
		descriptionFull : "A creature you touch regains a number of hit points equal to 1d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the healing increases by 1d8 for each slot level above 1st."
	},
	"dancing lights" : {
		name : "Dancing Lights",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 133], ["P", 230]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A bit of phosphorous or wychwood, or a glowworm",
		duration : "Conc, 1 min",
		description : "4 torch-sized lights or 1 humanoid-sized light; 10-ft rad dim light; bns a to move 60 ft",
		descriptionFull : "You create up to four torch-sized lights within range, making them appear as torches, lanterns, or glowing orbs that hover in the air for the duration. You can also combine the four lights into one glowing vaguely humanoid form of Medium size. Whichever form you choose, each light sheds dim light in a 10-foot radius." + "\n   " + "As a bonus action on your turn, you can move the lights up to 60 feet to a new spot within range. A light must be within 20 feet of another light created by this spell, and a light winks out if it exceeds the spell's range."
	},
	"darkness" : {
		name : "Darkness",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 133], ["P", 230]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,M",
		compMaterial : "Bat fur and a drop of pitch or piece of coal",
		duration : "Conc, 10 min",
		description : "15-ft rad darkness on point or object; darkvision doesn't work; only magical light of SL 3+ works in it",
		descriptionFull : "Magical darkness spreads from a point you choose within range to fill a 15-foot-radius sphere for the duration. The darkness spreads around corners. A creature with darkvision can't see through this darkness, and nonmagical light can't illuminate it." + "\n   " + "If the point you choose is on an object you are holding or one that isn't being worn or carried, the darkness emanates from the object and moves with it. Completely covering the source of the darkness with an opaque object, such as a bowl or a helm, blocks the darkness." + "\n   " + "If any of this spell's area overlaps with an area of light created by a spell of 2nd level or lower, the spell that created the light is dispelled."
	},
	"darkvision" : {
		name : "Darkvision",
		classes : ["druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 133], ["P", 230]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Either a pinch of dried carrot or an agate",
		duration : "8 h",
		description : "1 willing creature has darkvision 60 ft for the duration",
		descriptionFull : "You touch a willing creature to grant it the ability to see in the dark. For the duration, that creature has darkvision out to a range of 60 feet."
	},
	"daylight" : {
		name : "Daylight",
		classes : ["cleric", "druid", "paladin", "ranger", "sorcerer"],
		source : [["SRD", 133], ["P", 230]],
		level : 3,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "1 h",
		description : "60-ft rad bright light + 60-ft dim light on point or object; only magical darkness of SL 4+ works in it",
		descriptionFull : "A 60-foot-radius sphere of light spreads out from a point you choose within range. The sphere is bright light and sheds dim light for an additional 60 feet." + "\n   " + "If you chose a point on an object you are holding or one that isn't being worn or carried, the light shines from the object with and moves with it. Completely covering the affected object with an opaque object, such as a bowl or a helm, blocks the light." + "\n   " + "If any of this spell's area overlaps with an area of darkness created by a spell of 3rd level or lower, the spell that created the darkness is dispelled."
	},
	"death ward" : {
		name : "Death Ward",
		classes : ["cleric", "paladin"],
		source : [["SRD", 133], ["P", 230]],
		level : 4,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "8 h",
		description : "Once, when crea drops to 0 HP it drops to 1 HP instead; or negates first instantaneous kill effect",
		descriptionFull : "You touch a creature and grant it a measure of protection from death. The first time the target would drop to 0 hit points as a result of taking damage, the target instead drops to 1 hit point, and the spell ends. If the spell is still in effect when the target is subjected to an effect that would kill it instantaneously without dealing damage, that effect is instead negated against the target, and the spells ends."
	},
	"delayed blast fireball" : {
		name : "Delayed Blast Fireball",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 133], ["P", 230]],
		level : 7,
		school : "Evoc",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "A tine ball of bat guano and sulfur",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "Create bead; at chosen moment, or if conc. is broken, 20-ft rad 12d6+1d6/SL Fire dmg; save halves",
		descriptionFull : "A beam of yellow light flashes from your pointing finger, then condenses to linger at a chosen point within range as a glowing bead for the duration. When the spell ends, either because your concentration is broken or because you decide to end it, the bead blossoms with a low roar into an explosion of flame that spreads around corners. Each creature in a 20-foot-radius sphere centered on that point must make a Dexterity saving throw. A creature takes fire damage equal to the total accumulated damage on a failed save, or half as much damage on a successful one." + "\n   " + "The spell's base damage is 12d6. If at the end of your turn the bead has not yet detonated, the damage increases by 1d6." + "\n   " + "If the glowing bead is touched before the interval has expired, the creature touching it must make a Dexterity saving throw. On a failed save, the spell ends immediately, causing the bead to erupt in flame. On a successful save, the creature can throw the bead up to 40 feet. When it strikes a creature or a solid object, the spell ends, and the bead explodes." + "\n   " + "The fire damages objects in the area and ignites flammable objects that aren't being worn or carried." + AtHigherLevels + "When you cast this spell using a spell slot of 8th level or higher, the base damage increases by 1d6 for each slot level above 7th."
	},
	"demiplane" : {
		name : "Demiplane",
		classes : ["warlock", "wizard"],
		source : [["SRD", 134], ["P", 231]],
		level : 8,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "S",
		duration : "1 h",
		description : "Create door to a demiplane of 30-ft cube; when spell ends, creatures inside remain trapped",
		descriptionFull : "You create a shadowy door on a flat solid surface that you can see within range. The door is large enough to allow Medium creatures to pass through unhindered. When opened, the door leads to a demiplane that appears to be an empty room 30 feet in each dimension, made of wood or stone. When the spell ends, the door disappears, and any creatures or objects inside the demiplane remain trapped there, as the door also disappears from the other side." + "\n   " + "Each time you cast this spell, you can create a new demiplane, or have the shadowy door connect to a demiplane you created with a previous casting of this spell. Additionally, if you know the nature and contents of a demiplane created by a casting of this spell by another creature, you can have the shadowy door connect to its demiplane instead."
	},
	"detect evil and good" : {
		name : "Detect Evil and Good",
		classes : ["cleric", "paladin"],
		source : [["SRD", 134], ["P", 231]],
		level : 1,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "Know if aberration, celestial, elemental, fey, fiend, undead, and des-/consecrated area within 30 ft",
		descriptionFull : "For the duration, you know if there is an aberration, celestial, elemental, fey, fiend, or undead within 30 feet of you, as well as where the creature is located. Similarly, you know if there is a place of object within 30 feet of you that has been magically consecrated or desecrated. The spell can penetrate most barriers, but it is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
	},
	"detect magic" : {
		name : "Detect Magic",
		classes : ["bard", "cleric", "druid", "paladin", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 134], ["P", 231]],
		ritual : true,
		level : 1,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "Know presence of magic within 30 ft; 1 a to see auras and determine school",
		descriptionFull : "For the duration, you sense the presence of magic within 30 feet of you. If you sense magic in this way, you can use your action to see a faint aura around any visible creature or object in the area that bears magic, and you learn its school of magic, if any." + "\n   " + "The spell can penetrate most barriers, but is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
	},
	"detect poison and disease" : {
		name : "Detect Poison and Disease",
		nameShort : "Detect Poison/Disease",
		classes : ["cleric", "druid", "paladin", "ranger"],
		source : [["SRD", 134], ["P", 231]],
		ritual : true,
		level : 1,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A yew leaf",
		duration : "Conc, 10 min",
		description : "Know presence, location, and type of poisons, poisonous creatures, and diseases within 30 ft",
		descriptionFull : "For the duration, you can sense the presence and location of poisons, poisonous creatures, and diseases within 30 feet of you. You also identify the kind of poison, poisonous creature, or disease in each case." + "\n   " + "The spell can penetrate most barriers, but is blocked by 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood or dirt."
	},
	"detect thoughts" : {
		name : "Detect Thoughts",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 135], ["P", 231]],
		level : 2,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A copper piece",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 a read thoughts of visible Int>3 crea or detect presence of invisible within 30 ft; save for probing",
		descriptionFull : "For the duration, you can read the thoughts of certain creatures. When you cast the spell and as your action on each turn until the spell ends, you can focus your mind on any one creature that you can see within 30 feet of you. If the creature you choose has an Intelligence of 3 or lower or doesn't speak any language, the creature is unaffected." + "\n   " + "You initially learn the surface thoughts of the creature - what is most on its mind in that moment. As an action, you can either shift your attention to another creature's thoughts or attempt to probe deeper into the same creature's mind. If you probe deeper, the target must make a Wisdom saving throw. If it fails, you gain insight into its reasoning (if any), its emotional state, and something that looms large in its mind (such as something it worries over, loves, or hates). If it succeeds, the spell ends. Either way, the target knows that you are probing into its mind, and unless you shift your attention to another creature's thoughts, the creature can use its action on its turn to make an Intelligence check contested by your Intelligence check if it succeeds, the spell ends." + "\n   " + "Questions verbally directed at the target creature naturally shape the course of its thoughts, so this spell is particularly effective as part of an interrogation." + "\n   " + "You can also use this spell to detect the presence of thinking creatures you can't see. When you cast the spell or as your action during the duration, you can search for thoughts within 30 feet of you. The spell can penetrate barriers, but 2 feet of rock, 2 inches of any metal other than lead, or a thin sheet of lead blocks you. You can't detect a creature with an Intelligence of 3 or lower or one that doesn't speak any language." + "\n   " + "Once you detect the presence of a creature in this way, you can read its thoughts for the rest of the duration as described above, even if you can't see it, but it must still be within range."
	},
	"dimension door" : {
		name : "Dimension Door",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 135], ["P", 233]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "500 ft",
		components : "V",
		duration : "Instantaneous",
		description : "Teleport myself and 1 willing crea within 5 ft, up to 500 ft to a place I can see, specify, or describe",
		descriptionFull : "You teleport yourself from your current location to any other spot within range. You arrive at exactly the spot desired. It can be a place you can see, one you can visualize, or one you can describe by stating distance and direction, such as 200 feet straight downward or upward to the northwest at a 45-degree angle, 300 feet." + "\n   " + "You can bring along objects as long as their weight doesn't exceed what you can carry. You can also bring one willing creature of your size or smaller who is carrying gear up to its carrying capacity. The creature must be within 5 feet of you when you cast this spell." + "\n   " + "If you would arrive in a place already occupied by an object or a creature, you and any creature traveling with you each take 4d6 force damage, and the spell fails to teleport you."
	},
	"disguise self" : {
		name : "Disguise Self",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 135], ["P", 233]],
		level : 1,
		school : "Illus",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "1 h (D)",
		description : "Alter appearance; Int(Investigation) check vs. spell DC to determine disguise",
		descriptionFull : "You make yourself, including your clothing, armor, weapons, and other belongings on your person, look different until the spell ends or until you use your action to dismiss it. You can seem 1 foot shorter or taller and can appear thin, fat, or in between. You can't change your body type, so you must adopt a form that has the same basic arrangement of limbs. Otherwise, the extent of the illusion is up to you." + "\n   " + "The changes wrought by this spell fail to hold up to physical inspection. For example, if you use this spell to add a hat to your outfit, objects pass through the hat, and anyone who touches it would feel nothing or would feel your head and hair. If you use this spell to appear thinner than you are, the hand of someone who reaches out to touch you would bump into you while it was seemingly still in midair." + "\n   " + "To discern that you are disguised, a creature can use its action to inspect your appearance and must succeed on an Intelligence (Investigation) check against your spell save DC."
	},
	"disintegrate" : {
		name : "Disintegrate",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 135], ["P", 233]],
		level : 6,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A lodestone and a pinch of dust",
		duration : "Instantaneous",
		save : "Dex",
		description : "1 crea save or 10d6+3d6/SL+40 Force dmg; or up to 10-ft cube nonmagical object is destroyed",
		descriptionFull : "A thin green ray springs from your pointing finger to a target that you can see within range. The target can be a creature, an object, or a creation of magical force, such as the wall created by Wall of Force." + "\n   " + "A creature targeted by this spell must make a Dexterity saving throw. On a failed save, the target takes 10d6+40 force damage. The target is disintegrated if this damage leaves it with 0 hit points." + "\n   " + "A disintegrated creature and everything it is wearing and carrying, except magic items, are reduced to a pile of fine gray dust. The creature can be restored to life only by means of a true resurrection or a wish spell." + "\n   " + "This spell automatically disintegrates a Large or smaller nonmagical object or a creation of magical force. If the target is a Huge or larger object or creation of force, this spell disintegrates a 10-foot-cube portion of it. A magic item is unaffected by this spell." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the damage increases by 3d6 for each slot level above 6th."
	},
	"dispel evil and good" : {
		name : "Dispel Evil and Good",
		classes : ["cleric", "paladin"],
		source : [["SRD", 136], ["P", 233]],
		level : 5,
		school : "Abjur",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "Holy water or powdered silver and iron",
		duration : "Conc, 1 min",
		description : "Cele., elem., fey, fiends, and undead dis. on attacks vs. me; end early for dismissal/break enchantment",
		descriptionFull : "Shimmering energy surrounds and protects you from fey, undead, and creatures originating from beyond the Material Plane. For the duration, celestials, elementals, fey, fiends, and undead have disadvantage on attack rolls against you. You can end the spell early by using either of the following special functions." + "\n   " + toUni("Break Enchantment") + ": As your action, you touch a creature you can reach that is charmed, frightened, or possessed by a celestial, an elemental, a fey, a fiend, or an undead. The creature you touch is no longer charmed, frightened, or possessed by such creatures." + "\n   " + toUni("Dismissal") + ": As your action, make a melee spell attack against a celestial, an elemental, a fey, a fiend, or an undead you can reach. On a hit, you attempt to drive the creature back to its home plane. The creature must succeed on a Charisma saving throw or be sent back to its home plane (if it isn't there already). If they aren't on their home plane, undead are sent to the Shadowfell, and fey are sent to the Feywild."
	},
	"dispel magic" : {
		name : "Dispel Magic",
		classes : ["bard", "cleric", "druid", "paladin", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 136], ["P", 234]],
		level : 3,
		school : "Abjur",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Dispel all magical effects on crea or object; make DC 10+SL spellcasting ability check if above SL used",
		descriptionFull : "Choose one creature, object, or magical effect within range. Any spell of 3rd level or lower on the target ends. For each spell of 4th level or higher on the target, make an ability check using your spellcasting ability. The DC equals 10 + the spell's level. On a successful check, the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, you automatically end the effects of a spell on the target if the spell's level is equal to or less than the level of the spell slot you used."
	},
	"divination" : {
		name : "Divination",
		classes : ["cleric"],
		source : [["SRD", 136], ["P", 234]],
		ritual : true,
		level : 4,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M\u2020",
		compMaterial : "Incense and a sacrificial offering appropriate to your religion, together worth at least 25 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Get answer to one question about a goal, event, or activity to occur within the next 7 days (25gp cons.)",
		descriptionFull : "Your magic and an offering put you in contact with a god or a god's servants. You ask a single question concerning a specific goal, event, or activity to occur within 7 days. The DM offers a truthful reply. The reply might be a short phrase, a cryptic rhyme, or an omen." + "\n   " + "The spell doesn't take into account any possible circumstances that might change the outcome, such as the casting of additional spells or the loss or gain of a companion." + "\n   " + "If you cast this spell two or more times before finishing your next long rest, there is a cumulative 25 percent chance for each casting after the first that you get a random reading. The DM makes this roll in secret."
	},
	"divine favor" : {
		name : "Divine Favor",
		classes : ["paladin"],
		source : [["SRD", 136], ["P", 234]],
		level : 1,
		school : "Evoc",
		time : "1 bns",
		range : "Self",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "My weapon attacks deal an +1d4 Radiant damage for the duration",
		descriptionFull : "Your prayer empowers you with divine radiance. Until the spell ends, your weapon attacks deal and extra 1d4 radiant damage on a hit."
	},
	"divine word" : {
		name : "Divine Word",
		classes : ["cleric"],
		source : [["SRD", 137], ["P", 234]],
		level : 7,
		school : "Evoc",
		time : "1 bns",
		range : "30 ft",
		components : "V",
		duration : "Instantaneous",
		save : "Cha",
		description : "Any crea save or deaf/blind/stunned/dead depending on current HP; banishes extraplanar crea",
		descriptionFull : "You utter a divine word, imbued with the power that shaped the world at the dawn of creation. Choose any number of creatures you can see within range. Each creature that can hear you must make a Charisma saving throw. On a failed save, a creature suffers an effect based on its current hit points." + "\n " + "\u2022 50 hit points or fewer - deafened for 1 minute" + "\n " + "\u2022 40 hit points or fewer - deafened and blinded for 10 minutes" + "\n " + "\u2022 30 hit points or fewer - blinded, deafened, and stunned for 1 hour" + "\n " + "\u2022 20 hit points or fewer - killed instantly" + "\n\n" + "Regardless of its current hit points, a celestial, an elemental, a fey, or a fiend that fails its save is forced back to its plane of origin (if it isn't there already) and can't return to your current plane for 24 hours by any means short of a wish spell."
	},
	"dominate beast" : {
		name : "Dominate Beast",
		classes : ["druid", "sorcerer"],
		source : [["SRD", 137], ["P", 234]],
		level : 4,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 beast save or charmed, follows telepathic commands, 1 a for complete control; +SL for duration",
		descriptionFull : "You attempt to beguile a beast that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw." + "\n   " + "While the beast is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as Attack that creature, Run over there, or Fetch that object. If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability." + "\n   " + "You can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time, you can also cause the creature to use a reaction, but this requires you to use your own reaction as well." + "\n   " + "Each time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends." + AtHigherLevels + "When you cast this spell with a 5th-level spell slot, the duration is concentration, up to 10 minutes. When you use a 6th-level spell slot, the duration is concentration, up to 1 hour. When you use a spell slot of 7th level or higher, the duration is concentration, up to 8 hours."
	},
	"dominate monster" : {
		name : "Dominate Monster",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 137], ["P", 235]],
		level : 8,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		save : "Wis",
		description : "1 crea save or charmed, follows telepathic commands, 1 a for complete control; SL9: conc, 8h",
		descriptionFull : "You attempt to beguile a creature that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw." + "\n   " + "While the creature is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as Attack that creature, Run over there, or Fetch that object. If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability." + "\n   " + "You can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time, you can also cause the creature to use a reaction, but this requires you to use your own reaction as well." + "\n   " + "Each time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends." + AtHigherLevels + "When you cast this spell with a 9th-level spell slot, the duration is concentration, up to 8 hours."
	},
	"dominate person" : {
		name : "Dominate Person",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 138], ["P", 235]],
		level : 5,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 humanoid save or charmed, follows telepathic commands, 1 a for complete control; +SL for dur.",
		descriptionFull : "You attempt to beguile a humanoid that you can see within range. It must succeed on a Wisdom saving throw or be charmed by you for the duration. If you or creatures that are friendly to you are fighting it, it has advantage on the saving throw." + "\n   " + "While the target is charmed, you have a telepathic link with it as long as the two of you are on the same plane of existence. You can use this telepathic link to issue commands to the creature while you are conscious (no action required), which it does its best to obey. You can specify a simple and general course of action, such as Attack that creature, Run over there, or Fetch that object. If the creature completes the order and doesn't receive further direction from you, it defends and preserves itself to the best of its ability." + "\n   " + "You can use your action to take total and precise control of the target. Until the end of your next turn, the creature takes only the actions you choose, and doesn't do anything that you don't allow it to do. During this time you can also cause the creature to use a reaction, but this requires you to use your own reaction as well." + "\n   " + "Each time the target takes damage, it makes a new Wisdom saving throw against the spell. If the saving throw succeeds, the spell ends." + AtHigherLevels + "When you cast this spell using a 6th-level spell slot, the duration is concentration, up to 10 minutes. When you use a 7th-level spell slot, the duration is concentration, up to 1 hour. When you use a spell slot of 8th level or higher, the duration is concentration, up to 8 hours."
	},
	"drawmij's instant summons" : {
		name : "Drawmij's Instant Summons",
		nameShort : "Draw. Instant Sum.",
		nameAlt : "Instant Summons",
		classes : ["wizard"],
		source : [["SRD", 157], ["P", 235]],
		ritual : true,
		level : 6,
		school : "Conj",
		time : "1 min",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "A sapphire worth 1,000 gp",
		duration : "Till dispelled",
		description : "Link object to sapphire (1000gp); 1 a crush gem to summon the unattended object or learn of wielder",
		descriptionFull : "You touch an object weighing 10 pounds or less whose longest dimension is 6 feet or less. The spell leaves an invisible mark on its surface and invisibly inscribes the name of the item on the sapphire you use as the material component. Each time you cast this spell, you must use a different sapphire." + "\n   " + "At any time thereafter, you can use your action to speak the item's name and crush the sapphire. The item instantly appears in your hand regardless of physical or planar distances, and the spell ends." + "\n   " + "If another creature is holding or carrying the item, crushing the sapphire doesn't transport the item to you, but instead you learn who the creature possessing the object is and roughly where that creature is located at that moment." + "\n   " + "Dispel magic or a similar effect successfully applied to the sapphire ends this spell's effect."
	},
	"dream" : {
		name : "Dream",
		classes : ["bard", "warlock", "wizard"],
		source : [["SRD", 138], ["P", 236]],
		level : 5,
		school : "Illus",
		time : "1 min",
		range : "Special",
		components : "V,S,M",
		compMaterial : "A handful of sand, a dab of ink, and a writing quill plucked from a sleeping bird",
		duration : "8 h",
		description : "Me or willing crea enters a crea's dreams, manifesting as a messenger with whom it can communicate",
		descriptionFull : "This spell shapes a creature's dreams. Choose a creature known to you as the target of this spell. The target must be on the same plane of existence as you. Creatures that don't sleep, such as elves, can't be contacted by this spell. You, or a willing creature you touch, enters a trance state, acting as a messenger. While in the trance, the messenger is aware of his or her surroundings, but can't take actions or move." + "\n   " + "If the target is asleep, the messenger appears in the target's dreams and can converse with the target as long as it remains asleep, through the duration of the spell. The messenger can also shape the environment of the dream, creating landscapes, objects, and other images. The messenger can emerge from the trance at any time, ending the effect of the spell early. The target recalls the dream perfectly upon waking. If the target is awake when you cast the spell, the messenger knows it, and can either end the trance (and the spell) or wait for the target to fall asleep, at which point the messenger appears in the target's dreams." + "\n   " + "You can make the messenger appear monstrous and terrifying to the target. If you do, the messenger can deliver a message of no more than ten words and then the target must make a Wisdom saving throw. On a failed save, echoes of the phantasmal monstrosity spawn a nightmare that lasts the duration of the target's sleep and prevents the target from gaining any benefit from that rest. In addition, when the target wakes up, it takes 3d6 psychic damage." + "\n   " + "If you have a body part, lock of hair, clipping from a nail, or similar portion of the target's body, the target makes its saving throw with disadvantage."
	},
	"druidcraft" : {
		name : "Druidcraft",
		classes : ["druid"],
		source : [["SRD", 138], ["P", 236]],
		level : 0,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Small nature effect; predict weather, expedite small plant growth, snuff light, harmless sensory effect",
		descriptionFull : "Whispering to the spirits of nature, you create one of the following effects within range." + "\n " + "\u2022 You create a tiny, harmless sensory effect that predicts what the weather will be at your location for the next 24 hours. The effect might manifest as a golden orb for clear skies, a cloud for rain, falling snowflakes for snow, and so on. This effect persists for 1 round." + "\n " + "\u2022 You instantly make a flower blossom, a seed pod open, or a leaf bud bloom." + "\n " + "\u2022 You create an instantaneous, harmless sensory effect, such as falling leaves, a puff of wind, the sound of a small animal, or the faint odor of skunk. The effect must fit in a 5-foot cube." + "\n " + "\u2022 You instantly light or snuff out a candle, a torch, or a small campfire."
	},
	"earthquake" : {
		name : "Earthquake",
		classes : ["cleric", "druid", "sorcerer"],
		source : [["SRD", 139], ["P", 236]],
		level : 8,
		school : "Evoc",
		time : "1 a",
		range : "500 ft",
		components : "V,S,M",
		compMaterial : "A pinch of dirt, a piece of rock, and a lump of clay",
		duration : "Conc, 1 min",
		description : "Cause an earthquake in a 100-ft rad, damaging structures and creating dangerous fissures, see book",
		descriptionFull : "You create a seismic disturbance at a point on the ground that you can see within range. For the duration, an intense tremor rips through the ground in a 100-foot- radius circle centered on that point and shakes creatures and structures in contact with the ground in that area." + "\n   " + "The ground in the area becomes difficult terrain. Each creature on the ground that is concentrating must make a Constitution saving throw. On a failed save, the creature's concentration is broken." + "\n   " + "When you cast this spell and at the end of each turn you spend concentrating on it, each creature on the ground in the area must make a Dexterity saving throw. On a failed save, the creature is knocked prone." + "\n   " + "This spell can have additional effects depending on the terrain in the area, as determined by the DM." + "\n   " + "Fissures. Fissures open throughout the spell's area at the start of your next turn after you cast the spell. A total of 1d6 such fissures open in locations chosen by the DM. Each is 1d10 \u00D7 10 feet deep, 10 feet wide, and extends from one edge of the spell's area to the opposite side. A creature standing on a spot where a fissure opens must succeed on a Dexterity saving throw or fall in. A creature that successfully saves moves with the fissure's edge as it opens. A fissure that opens beneath a structure causes it to automatically collapse (see below)." + "\n   " + "Structures. The tremor deals 50 bludgeoning damage to any structure in contact with the ground in the area when you cast the spell and at the start of each of your turns until the spell ends. If a structure drops to 0 hit points, it collapses and potentially damages nearby creatures. A creature within half the distance of a structure's height must make a Dexterity saving throw. On a failed save, the creature takes 5d6 bludgeoning damage, is knocked prone, and is buried in the rubble, requiring a DC 20 Strength (Athletics) check as an action to escape. The DM can adjust the DC higher or lower, depending on the nature of the rubble. On a successful save, the creature takes half as much damage and doesn't fall prone or become buried."
	},
	"eldritch blast" : {
		name : "Eldritch Blast",
		classes : ["warlock"],
		source : [["SRD", 139], ["P", 237]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Spell attack beam 1d10 Force damage; beams can be combined or split; CL5:2, CL11:3, CL17:4 beams",
		descriptionCantripDie : "Spell attack for `CD` beam(s), each 1d10 Force damage; beams can be combined or split",
		descriptionFull : "A beam of crackling energy streaks toward a creature within range. Make a ranged spell attack against the target. On a hit, the target takes 1d10 force damage." + "\n   " + "The spell creates more than one beam when you reach higher levels - two beams at 5th level, three beams at 11th level, and four beams at 17th level. you can direct the beams at the same target or at different ones. Make a separate attack roll for each beam."
	},
	"enhance ability" : {
		name : "Enhance Ability",
		classes : ["bard", "cleric", "druid", "sorcerer"],
		source : [["SRD", 139], ["P", 237]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Fur or a feather from a beast",
		duration : "Conc, 1 h",
		description : "1+1/SL crea adv. on checks with 1 stat; choosing Str, Dex, Con gives secondary benefits",
		descriptionFull : "You touch a creature and bestow upon it a magical enhancement. Choose one of the following effects - the target gains the effect until the spell ends." + "\n   " + toUni("Bear's Endurance") + ": The target has advantage on Constitution checks. It also gains 2d6 temporary hit points, which are lost when the spell ends." + "\n   " + toUni("Bull's Strength") + ": The target has advantage on Strength checks, and his or her carrying capacity doubles." + "\n   " + toUni("Cat's Grace") + ": The target has advantage on Dexterity checks. It also doesn't take damage from falling 20 feet or less if it isn't incapacitated." + "\n   " + toUni("Eagle's Splendor") + ": The target has advantage on Charisma checks." + "\n   " + toUni("Fox's Cunning") + ": The target has advantage on Intelligence checks." + "\n   " + toUni("Owl's Wisdom") + ": The target has advantage on Wisdom checks." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
	},
	"enlarge/reduce" : {
		name : "Enlarge/Reduce",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 140], ["P", 237]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A pinch of powdered iron",
		duration : "Conc, 1 min",
		save : "Con",
		description : "1 crea/object save or enlarged (Str adv. +1d4 weapon dmg), reduced (Str dis. -1d4 weapon dmg)",
		descriptionFull : "You cause a creature or an object you can see within range to grow larger or smaller for the duration. Choose either a creature or an object that is neither worn nor carried. If the target is unwilling, it can make a Constitution saving throw. On a success, the spell has no effect." + "\n   " + "If the target is a creature, everything it is wearing and carrying changes size with it. Any item dropped by an affected creature returns to normal size at once." + "\n   " + toUni("Enlarge") + ": The target's size doubles in all dimensions, and its weight is multiplied by eight. This growth increases its size by one category - from Medium to Large, for example. If there isn't enough room for the target to double its size, the creature or object attains the maximum possible size in the space available. Until the spell ends, the target also has advantage on Strength checks and Strength saving throws. The target's weapons also grow to match its new size. While these weapons are enlarged, the target's attack with them deal 1d4 extra damage." + "\n   " + toUni("Reduce") + ": The target's size is halved in all dimensions, and its weight is reduced to one-eighth of normal. This reduction decreases its size by one category - from Medium to Small, for example. Until the spell ends, the target also has disadvantage on Strength checks and Strength saving throws. The target's weapons also shrink to match its new size. While these weapons are reduced, the target's attacks with them deal 1d4 less damage (this can't reduce the damage below 1)."
	},
	"entangle" : {
		name : "Entangle",
		classes : ["druid"],
		source : [["SRD", 140], ["P", 238]],
		level : 1,
		school : "Conj",
		time : "1 a",
		range : "90 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Str",
		description : "20-ft square save or restrained; Str check vs. Spell DC to escape; for duration area is difficult terrain",
		descriptionFull : "Grasping weeds and vines sprout from the ground in a 20-foot square starting from a point within range. For the duration, these plants turn the ground in the area into difficult terrain." + "\n   " + "A creature in the area when you cast the spell must succeed on a Strength saving throw or be restrained by the entangling plants until the spell ends. A creature restrained by the plants can use its action to make a Strength check against your spell save DC. On a success, it frees itself." + "\n   " + "When the spell ends, the conjured plants wilt away."
	},
	"enthrall" : {
		name : "Enthrall",
		classes : ["bard", "warlock"],
		source : [["SRD", 140], ["P", 238]],
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "1 min",
		save : "Wis",
		description : "While I speak, any crea save (adv. if fighting) or dis. on Wis(Perception) for any other than me",
		descriptionFull : "You weave a distracting string of words, causing creatures of your choice that you can see within range and that can hear you to make a Wisdom saving throw. Any creature that can't be charmed succeeds on this saving throw automatically, and if you or your companions are fighting a creature, it has advantage on the save. On a failed save, the target has disadvantage on Wisdom (Perception) checks made to perceive any creature other than you until the spell ends or until the target can no longer hear you. The spell ends if you are incapacitated or can no longer speak."
	},
	"etherealness" : {
		name : "Etherealness",
		classes : ["bard", "cleric", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 140], ["P", 238]],
		level : 7,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "8 h (D)",
		description : "Me or 3/SL willing go to Ethereal Plane; move there, but able to perceive 60 ft into the normal plane",
		descriptionFull : "You step into the border regions of the Ethereal Plane, in the area where it overlaps with your current plane. You remain in the Border Ethereal for the duration or until you use your action to dismiss the spell. During this time, you can move in any direction. If you move up or down, every foot of movement costs an extra foot. You can see and hear the plan you originated from, but everything there looks gray, and you can't see anything more than 60 feet away." + "\n   " + "While on the Ethereal Plane, you can only affect and be affected by other creatures on that plane. Creatures that aren't on the Ethereal Plane can't perceive you and can't interact with you, unless a special ability or magic has given them the ability to do so." + "\n   " + "You ignore all objects and effects that aren't on the Ethereal Plane, allowing you to move through objects you perceive on the plan you originated from." + "\n   " + "When the spell ends, you immediately return to the plane you originated from in the spot you currently occupy. If you occupy the same spot as a solid object or creature when this happens, you are immediately shunted to the nearest unoccupied space that you can occupy and take force damage equal to twice the number of feet you are moved." + "\n   " + "This spell has no effect if you cast it while you are on the Ethereal Plane or a plane that doesn't border it, such as one of the Outer Planes." + AtHigherLevels + "When you cast this spell using a spell slot of 8th level or higher, you can target up to three willing creatures (including you) for each slot level above 7th. The creatures must be within 10 feet of you when you cast the spell."
	},
	"evard's black tentacles" : {
		name : "Evard's Black Tentacles",
		nameAlt : "Black Tentacles",
		classes : ["wizard"],
		source : [["SRD", 121], ["P", 238]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "A piece of tentacle from a giant octopus or a giant squid",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "All that enter/start 20-ft rad save or restrained \u0026 3d6 Bludgeoning dmg/rnd; Str/Dex check to escape",
		descriptionFull : "Squirming, ebony tentacles fill a 20-foot square on ground that you can see within range. For the duration, these tentacles turn the ground in the area into difficult terrain." + "\n   " + "When a creature enters the affected area for the first time on a turn or starts its turn there, the creature must succeed on a Dexterity saving throw or take 3d6 bludgeoning damage and be restrained by the tentacles until the spell ends. A creature that starts its turn in the area and is already restrained by the tentacles takes 3d6 bludgeoning damage." + "\n   " + "A creature restrained by the tentacles can use its action to make a Strength or Dexterity check (its choice) against your spell save DC. On a success, it frees itself."
	},
	"expeditious retreat" : {
		name : "Expeditious Retreat",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 141], ["P", 238]],
		level : 1,
		school : "Trans",
		time : "1 bns",
		range : "Self",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "I can take Dash action now, and as a bonus action for the duration",
		descriptionFull : "This spell allows you to move at an incredible pace. When you cast this spell, and then as a bonus action on each of your turns until the spell ends, you can take the Dash action."
	},
	"eyebite" : {
		name : "Eyebite",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 141], ["P", 238]],
		level : 6,
		school : "Necro",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 crea/rnd within 60 ft save or either fall asleep, panicked, or sickened, my choice",
		descriptionFull : "For the spell's duration, your eyes become an inky void imbued with dread power. One creature of your choice within 60 feet of you that you can see must succeed on a Wisdom saving throw or be affected by one of the following effects of your choice for the duration. On each of your turns until the spell ends, you can use your action to target another creature but can't target a creature again if it has succeeded on a saving throw against this casting of Eyebite." + "\n   " + toUni("Asleep") + ": The target falls unconscious. It wakes up if it takes any damage or if another creature uses its action to shake the sleeper awake." + "\n   " + toUni("Panicked") + ": The target is frightened of you. On each of its turns, the frightened creature must take the Dash action and move away from you by the safest and shortest available route, unless there is nowhere to move. If the target moves to a place at least 60 feet away from you where it can no longer see you, this effect ends." + "\n   " + toUni("Sickened") + ": The target has disadvantage on attack rolls and ability checks. At the end of each of its turns, it can make another Wisdom saving throw. If it succeeds, the effect ends."
	},
	"fabricate" : {
		name : "Fabricate",
		classes : ["wizard"],
		source : [["SRD", 141], ["P", 239]],
		level : 4,
		school : "Trans",
		time : "10 min",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Create simple object from raw materials; or complex object if proficient in the appropriate tools",
		descriptionFull : "You convert raw materials into products of the same material. For example, you can fabricate a wooden bridge from a clump of trees, a rope from a patch of hemp, and clothes from flax or wool." + "\n   " + "Choose raw materials that you can see within range. You can fabricate a Large or smaller object (contained within a 10-foot cube, or eight connected 5-foot cubes), given a sufficient quantity of raw material. If you are working with metal, stone, or another mineral substance, however, the fabricated object can be no larger than Medium (contained within a single 5-foot cube). The quality of objects made by the spell is commensurate with the quality of the raw materials." + "\n   " + "Creatures or magic items can't be created or transmuted by this spell. You also can't use it to create items that ordinarily require a high degree of craftsmanship, such as jewelry, weapons, glass, or armor, unless you have proficiency with the type of artisan's tools used to craft such objects."
	},
	"faerie fire" : {
		name : "Faerie Fire",
		classes : ["bard", "druid"],
		source : [["SRD", 141], ["P", 239]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "20-ft cube all obj/crea save or outlined in 10 ft dim light and attacks have adv.; see invisible crea",
		descriptionFull : "Each object in a 20-foot cube within range is outlined in blue, green, or violet light (your choice). Any creature in the area when the spell is cast is also outlined in light if it fails a Dexterity saving throw. For the duration, objects and affected creatures shed dim light in a 10-foot radius." + "\n   " + "Any attack roll against an affected creature or object has advantage if the attacker can see it, and the affected creature or object can't benefit from being invisible."
	},
	"false life" : {
		name : "False Life",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 142], ["P", 239]],
		level : 1,
		school : "Necro",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A small amount of alcohol or distilled spirits",
		duration : "1 h",
		description : "I gain 1d4+4+5/SL temporary hit points for the duration",
		descriptionFull : "Bolstering yourself with a necromantic facsimile of life, you gain 1d4+4 temporary hit points for the duration." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you gain 5 additional temporary hit points for each slot level above 1st."
	},
	"fear" : {
		name : "Fear",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 142], ["P", 239]],
		level : 3,
		school : "Illus",
		time : "1 a",
		range : "30-ft cone",
		components : "V,S,M",
		compMaterial : "A white feather or the heart of a hen",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "All crea save or drop what it is holding and frightened; extra save at end of turn if not in line of sight",
		descriptionFull : "You project a phantasmal image of a creature's worst fears. Each creature in a 30-foot cone must succeed on a Wisdom saving throw or drop whatever it is holding and become frightened for the duration." + "\n   " + "While frightened by this spell, a creature must take the Dash action and move away from you by the safest available route on each of its turns, unless there is nowhere to move. If the creature ends its turn in a location where it doesn't have line of sight to you, the creature can make a Wisdom saving throw. On a successful save, the spell ends for that creature."
	},
	"feather fall" : {
		name : "Feather Fall",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 142], ["P", 239]],
		level : 1,
		school : "Trans",
		time : "1 rea",
		range : "60 ft",
		components : "V,M",
		compMaterial : "A small feather or piece of down",
		duration : "1 min",
		description : "5 creatures descent only 60 ft/rnd for duration or until landed, taking no falling damage",
		descriptionFull : "Reaction - When you or a creature within 60 feet of you falls Choose up to five falling creatures within range. A falling creature's rate of descent slows to 60 feet per round until the spell ends. If the creature lands before the spell ends, it takes no falling damage and can land on its feet, and the spell ends for that creature."
	},
	"feeblemind" : {
		name : "Feeblemind",
		classes : ["bard", "druid", "warlock", "wizard"],
		source : [["SRD", 142], ["P", 239]],
		level : 8,
		school : "Ench",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "A handful of clay, crystal, glass, or mineral spheres",
		duration : "Instantaneous",
		save : "Int",
		description : "1 crea 4d6 Psychic dmg and save or Int and Cha become 1; extra save every 30 days to end spell",
		descriptionFull : "You blast the mind of a creature that you can see within range, attempting to shatter its intellect and personality. The target takes 4d6 psychic damage and must make an Intelligence saving throw." + "\n   " + "On a failed save, the creature's Intelligence and Charisma scores become 1. The creature can't cast spells, activate magic items, understand language, or communicate in any intelligible way. The creature can, however, identify its friends, follow them, and even protect them." + "\n   " + "At the end of every 30 days, the creature can repeat its saving throw against this spell. If it succeeds on its saving throw, the spell ends." + "\n   " + "The spell can also be ended by greater restoration, heal or wish."
	},
	"find familiar" : {
		name : "Find Familiar",
		classes : ["wizard"],
		source : [["SRD", 143], ["P", 240]],
		ritual : true,
		level : 1,
		school : "Conj",
		time : "1 h",
		range : "10 ft",
		components : "V,S,M\u2020",
		compMaterial : "10 gp worth of charcoal, incense, and herbs that must be consumed by fire in a brass brazier",
		duration : "Instantaneous",
		description : "Gain the services of a familiar; can see through its eyes; it can deliver touch spells; see B (10gp cons.)",
		descriptionFull : "You gain the service of a familiar, a spirit that takes an animal form you choose - bat, cat, crab, frog (toad), hawk, lizard, octopus, owl, poisonous snake, fish (quipper), rat, raven, sea horse, spider, or weasel. Appearing in an unoccupied space within range, the familiar has the statistics of the chosen form, though it is a celestial, fey or fiend (your choice) instead of a beast." + "\n   " + "Your familiar acts independently of you, but it always obeys your commands. In combat, it rolls its own initiative and acts on its own turn. A familiar can't attack, but it can take other actions as normal." + "\n   " + "When the familiar drops to 0 hit points, it disappears, leaving behind no physical form. It reappears after you cast this spell again. While your familiar is within 100 feet of you, you can communicate with it telepathically. Additionally, as an action, you can see through your familiar's eyes and hear what it hears until the start of your next turn, gaining the benefits of any special senses that the familiar has. During this time, you are deaf and blind with regard to your own senses." + "\n   " + "As an action, you can temporarily dismiss your familiar. It disappears into a pocket dimension where it awaits you summons. Alternatively, you can dismiss it forever. As an action while it is temporarily dismissed, you can cause it to reappear in any unoccupied space within 30 feet of you." + "\n   " + "You can't have more than one familiar at a time. If you cast this spell while you already have a familiar, you instead cause it to adopt a new form. Choose one of the forms from the above list. Your familiar transforms into the chosen creature." + "\n   " + "Finally, when you cast a spell with a range of touch, your familiar can deliver the spell as if it had cast the spell. Your familiar must be within 100 feet of you, and it must use its reaction to deliver the spell when you cast it. If the spell requires an attack roll, you use your attack modifier for the roll."
	},
	"find steed" : {
		name : "Find Steed",
		classes : ["paladin"],
		source : [["SRD", 143], ["P", 240]],
		level : 2,
		school : "Conj",
		time : "10 min",
		range : "30 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Gain the services of a steed; communicate with each other telepathically; share spells with it; see book",
		descriptionFull : "You summon a spirit that assumes the form of an unusually intelligent, strong, and loyal steed, creating a long-lasting bond with it. Appearing in an unoccupied space within range, the steed takes on a form that you choose, such as a warhorse, a pony, a camel, an elk, or a mastiff. (Your DM might allow other animals to be summoned as steeds.) The steed has the statistics of the chosen form, though it is a celestial, fey, or fiend (your choice) instead of its normal type. Additionally, if your steed has an Intelligence of 5 or less, its Intelligence becomes 6, and it gains the ability to understand one language of your choice that you speak." + "\n   " + "Your steed serves you as a mount, both in combat and out, and you have an instinctive bond with it that allows you to fight as a seamless unit. While mounted on your steed, you can make any spell you cast that targets only you also target your steed." + "\n   " + "When the steed drops to 0 hit points, it disappears, leaving behind no physical form. You can also dismiss your steed at any time as an action, causing it to disappear. In either case, casting this spell again summons the same steed, restored to its hit point maximum." + "\n   " + "While your steed is within 1 mile of you, you can communicate with each other telepathically." + "\n   " + "You can't have more than one steed bonded by this spell at a time. As an action, you can release the steed from its bond at any time, causing it to disappear."
	},
	"find the path" : {
		name : "Find the Path",
		classes : ["bard", "cleric", "druid"],
		source : [["SRD", 143], ["P", 240]],
		level : 6,
		school : "Div",
		time : "1 min",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "A set of divinatory tools - such as bones, ivory sticks, cards, teeth, or carved runes - worth 100 gp and an object from the location you wish to find",
		duration : "Conc, 1 day",
		description : "Know the shortest route to a location I am familiar with and are on the same plane with (100gp)",
		descriptionFull : "This spell allows you to find the shortest, most direct physical route to a specific fixed location that you are familiar with on the same plane of existence. If you name a destination on another plan of existence, a destination that moves (such as a mobile fortress), or a destination that isn't specific (such as a green dragon's lair), the spell fails." + "\n   " + "For the duration, as long as you are on the same plane of existence as the destination, you know how far it is and in what direction it lies. While you are traveling there, whenever you are presented with a choice of paths along the way, you automatically determine which path is the shortest and most direct route (but not necessarily the safest route) to the destination."
	},
	"find traps" : {
		name : "Find Traps",
		classes : ["cleric", "druid", "ranger"],
		source : [["SRD", 144], ["P", 241]],
		level : 2,
		school : "Div",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Sense presence of any trap within line of sight; not exact location, but general nature of trap",
		descriptionFull : "You sense the presence of any trap within range that is within line of sight. A trap, for the purpose of this spell, includes anything that would inflict a sudden or unexpected effect you consider harmful or undesirable, which was specifically intended as such by its creator. Thus, the spell would sense an area affected by the alarm spell, a glyph of warding, or a mechanical pit trap, but it would not reveal a natural weakness in the floor, an unstable ceiling, or a hidden sinkhole." + "\n   " + "This spell merely reveals that a trap is present. You don't learn the location of each trap, but you do learn the general nature of the danger posed by a trap you sense."
	},
	"finger of death" : {
		name : "Finger of Death",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 144], ["P", 241]],
		level : 7,
		school : "Necro",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Con",
		description : "1 crea 7d8+30 Necrotic dmg; save halves; crea killed becomes zombie under my command",
		descriptionFull : "You send negative energy coursing through a creature that you can see within range, causing it searing pain. The target must make a Constitution saving throw. It takes 7d8+30 necrotic damage on a failed save, or half as much damage on a successful one." + "\n   " + "A humanoid killed by this spell rises at the start of your next turn as a zombie that is permanently under your command, following your verbal orders to the best of its ability."
	},
	"fire bolt" : {
		name : "Fire Bolt",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 144], ["P", 241]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Spell attack for 1d10 Fire dmg; unattended flammable objects ignite; +1d10 at CL 5, 11, and 17",
		descriptionCantripDie : "Spell attack for `CD`d10 Fire dmg; unattended flammable objects ignite",
		descriptionFull : "You hurl a mote of fire at a creature or object within range. Make a ranged spell attack against the target. On a hit, the target takes 1d10 fire damage. A flammable object hit by this spell ignites if it isn't being worn or carried." + "\n   " + "This spell's damage increases by 1d10 when you reach 5th level (2d10), 11th level (3d10), and 17th level (4d10)."
	},
	"fire shield" : {
		name : "Fire Shield",
		classes : ["wizard"],
		source : [["SRD", 144], ["P", 241]],
		level : 4,
		school : "Evoc",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A bit of phosphorous or a firefly",
		duration : "10 min (D)",
		description : "Fiery shield gives either Fire or Cold dmg resist. and deals 2d8 of the other dmg type to melee attackers",
		descriptionFull : "Thin and wispy flames wreathe your body for the duration, shedding bright light in a 10-foot radius and dim light for an additional 10 feet. You can end the spell early by using an action to dismiss it." + "\n   " + "The flames provide you with a warm shield or a chill shield, as you choose. The warm shield grants you resistance to cold damage, and the chill shield grants you resistance to fire damage." + "\n   " + "In addition, whenever a creature within 5 feet of you hits you with a melee attack, the shield erupts with flame. The attacker takes 2d8 fire damage from a warm shield, or 2d8 cold damage from a cold shield."
	},
	"fire storm" : {
		name : "Fire Storm",
		classes : ["cleric", "druid", "sorcerer"],
		source : [["SRD", 145], ["P", 241]],
		level : 7,
		school : "Evoc",
		time : "1 a",
		range : "150 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "10 connected 10-ft cubes all crea 7d10 Fire dmg; save halves; unattended flammable objects ignite",
		descriptionFull : "A storm made up of sheets of roaring flame appears in a location you choose within range. The area of the storm consists of up to ten 10-foot cubes, which you can arrange as you wish. Each cube must have at least one face adjacent to the face of another cube. Each creature in the area must make Dexterity saving throw. It takes 7d10 fire damage on a failed save, or half as much damage on a successful one." + "\n   " + "The fire damages objects in the area and ignites flammable objects that aren't being worn or carried. If you choose, plant life in the area is unaffected by this spell."
	},
	"fireball" : {
		name : "Fireball",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 144], ["P", 241]],
		level : 3,
		school : "Evoc",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "A tiny ball of bat guana and sulfur",
		duration : "Instantaneous",
		save : "Dex",
		description : "20-ft rad all crea 8d6+1d6/SL Fire dmg; save halves; unattended flammable objects ignite",
		descriptionFull : "A bright streak flashes from your pointing finger to a point you choose within range then blossoms with a low roar into an explosion of flame. Each creature in a 20-foot radius must make a Dexterity saving throw. A target takes 8d6 fire damage on a failed save, or half as much damage on a successful one." + "\n   " + "The fire spreads around corners. It ignites flammable objects in the area that aren't being worn or carried." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd."
	},
	"flame blade" : {
		name : "Flame Blade",
		classes : ["druid"],
		source : [["SRD", 145], ["P", 242]],
		level : 2,
		school : "Evoc",
		time : "1 bns",
		range : "Self",
		components : "V,S,M",
		compMaterial : "Leaf of sumac",
		duration : "Conc, 10 min",
		description : "Summon fiery blade; 1 a to make a melee spell attack for 3d6+1d6/2SL Fire dmg; 10 ft bright light",
		descriptionFull : "You evoke a fiery blade in your free hand. The blade is similar in size and shape to a scimitar, and it lasts for the duration. If you let go of the blade, it disappears, but you can evoke the blade again as a bonus action." + "\n   " + "You can use your action to make a melee spell attack with the fiery blade. On a hit, the target takes 3d6 fire damage." + "\n   " + "The flaming blade sheds bright light in a 10-foot radius and dim light for an additional 10 feet." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for every two slot levels above 2nd."
	},
	"flame strike" : {
		name : "Flame Strike",
		classes : ["cleric"],
		source : [["SRD", 145], ["P", 242]],
		level : 5,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "Pinch of sulfur",
		duration : "Instantaneous",
		save : "Dex",
		description : "10-ft rad 40-ft high all crea 4d6 Fire and 4d6 Radiant dmg; save halves; +1d6/SL Fire or Radiant",
		descriptionFull : "A vertical column of divine fire roars down from the heavens in a location you specify. Each creature in a 10-foot radius, 40-foot-high cylinder centered on a point within range must make a Dexterity saving throw. A creature takes 4d6 fire damage and 4d6 radiant damage on a failed save, or half as much damage on a successful one." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the fire damage or the radiant damage (your choice) increases by 1d6 for each slot level above 5th."
	},
	"flaming sphere" : {
		name : "Flaming Sphere",
		classes : ["druid", "wizard"],
		source : [["SRD", 145], ["P", 242]],
		level : 2,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A bit of tallow, a pinch of brimstone, and a dusting of powdered iron",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "2.5-ft rad flaming sphere; bns a move 30 ft; all within 5-ft rad 2d6+1d6/SL Fire dmg; save halves",
		descriptionFull : "A 5-foot-diameter sphere of fire appears in an unoccupied space of your choice within range and lasts for the duration. Any creature that ends its turn within 5 feet of the sphere must make a Dexterity saving throw. The creature takes 2d6 fire damage on a failed save, or half as much damage on a successful one." + "\n   " + "As a bonus action, you can move the sphere up to 30 feet. If you ram the sphere into a creature, that creature must make the saving throw against the sphere's damage, and the sphere stops moving this turn." + "\n   " + "When you move the sphere, you can direct it over barriers up to 5 feet tall and jump it across pits up to 10 feet wide. The sphere ignites flammable objects not being worn or carried, and it sheds bright light in a 20-foot radius and dim light for an additional 20 feet." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d6 for each slot level above 2nd."
	},
	"flesh to stone" : {
		name : "Flesh to Stone",
		classes : ["warlock", "wizard"],
		source : [["SRD", 145], ["P", 243]],
		level : 6,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A pinch of lime, water, and earth",
		duration : "Conc, 1 min",
		save : "Con",
		description : "1 crea save or restrained; save at end of turn, 3 consecutive fail: petrified, 3 consecutive success: free",
		descriptionFull : "You attempt to turn one creature that you can see within range into stone. If the targets body is made of flesh, the creature must make a Constitution saving throw. On a failed save, it is restrained as its flesh begins to harden. On a successful save, the creature isn't affected." + "\n   " + "A creature restrained by this spell must make another Constitution saving throw at the end of each of its turns. If it successfully saves against this spell three times, the spell ends. If it fails saves three times, it is turned to stone and subjected to the petrified condition for the duration. The successes and failures don't need to be consecutive, keep track of both until the target collects three of a kind." + "\n   " + "If the creature is physically broken while petrified, it suffers from similar deformities if it reverts to its original state." + "\n   " + "If you maintain your concentration on this spell for the entire possible duration, the creature is turned to stone until the effect is removed."
	},
	"fly" : {
		name : "Fly",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 146], ["P", 243]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A wing feather from any bird",
		duration : "Conc, 10 min",
		description : "1+1/SL willing creatures gain fly 60 ft speed",
		descriptionFull : "You touch a willing creature. The target gains a flying speed of 60 feet for the duration. When the spell ends, the target falls if it is still aloft, unless it can stop the fall." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, you can target one additional creature for each slot level above 3rd."
	},
	"fog cloud" : {
		name : "Fog Cloud",
		classes : ["druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 146], ["P", 243]],
		level : 1,
		school : "Conj",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "20-ft+20-ft/SL rad fog that spreads around corners; heavily obscures; 10 mph wind disperses it",
		descriptionFull : "You create a 20-foot-radius sphere of fog centered on a point within range. The sphere spreads around corners, and its area is heavily obscured. It lasts for the duration or until a wind of moderate or greater speed (at least 10 miles per hour) disperses it." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the radius of the fog increases by 20 feet for each slot level above 1st."
	},
	"forbiddance" : {
		name : "Forbiddance",
		classes : ["cleric"],
		source : [["SRD", 146], ["P", 243]],
		ritual : true,
		level : 6,
		school : "Abjur",
		time : "10 min",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "A sprinkling of holy water, rare incense, and powdered ruby worth at least 1,000 gp",
		duration : "1 day",
		description : "40K sq ft 30 ft high no extraplanar travel; 1 crea type 5d10 Radiant/Necrotic dmg/rnd (1000gp)",
		descriptionFull : "You create a ward against magical travel that protects up to 40,000 square feet of floor space to a height of 30 feet above the floor. For the duration, creatures can't teleport into the area or use portals, such as those created by the gate spell, to enter the area. The spell proofs the area against planar travel, and therefore prevents creatures from accessing the area by way of the Astral Plane, Ethereal Plane, Feywild, Shadowfell, or the plane shift spell." + "\n   " + "In addition, the spell damages types of creatures that you choose when you cast it. Choose one or more of the following - celestials, elementals, fey, fiends, and undead. When a chosen creature enters the spell's area for the first time on a turn or starts its turn there, the creature takes 5d10 radiant or necrotic damage (your choice when you cast this spell)." + "\n   " + "When you cast this spell, you can designate a password. A creature that speaks the password as it enters the area takes no damage from the spell." + "\n   " + "The spell's area can't overlap with the area of another forbiddance spell. If you cast forbiddance every day for 30 days in the same location, the spell lasts until it is dispelled, and the material components are consumed on the last casting."
	},
	"forcecage" : {
		name : "Forcecage",
		classes : ["bard", "warlock", "wizard"],
		source : [["SRD", 147], ["P", 243]],
		level : 7,
		school : "Evoc",
		time : "1 a",
		range : "100 ft",
		components : "V,S,M\u0192",
		compMaterial : "Ruby dust worth 1,500 gp",
		duration : "1 h",
		save : "Cha",
		description : "20-ft cube cage, or 10-ft cube solid; blocks all spells; extraplanar travel in/out on save (1500gp)",
		descriptionFull : "An immobile, invisible, cube-shaped prison composed of magical force springs into existence around an area you choose within range. The prison can be a cage or a solid box as you choose." + "\n   " + "A prison in the shape of a cage can be up to 20 feet on a side and is made from 1/2-inch diameter bars spaced 1/2 inch apart." + "\n   " + "A prison in the shape of a box can be up to 10 feet on a side, creating a solid barrier that prevents any matter from passing through it and blocking any spells cast into or out of the area." + "\n   " + "When you cast the spell, any creature that is completely inside the cage's area is trapped. Creatures only partially within the area, or those too large to fit inside the area, are pushed away from the center of the area until they are completely outside the area." + "\n   " + "A creature inside the cage can't leave it by nonmagical means. If the creature tries to use teleportation or interplanar travel to leave the cage, it must first make a Charisma saving throw. On a success, the creature can use that magic to exit the cage. On a failure, the creature can't exit the cage and wastes the use of the spell or effect. The cage also extends into the Ethereal Plane, blocking ethereal travel." + "\n   " + "This spell can't be dispelled by dispel magic."
	},
	"foresight" : {
		name : "Foresight",
		classes : ["bard", "druid", "warlock", "wizard"],
		source : [["SRD", 147], ["P", 244]],
		level : 9,
		school : "Div",
		time : "1 min",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A hummingbird feather",
		duration : "8 h",
		description : "1 willing crea can't be surprised; adv. on attacks, ability checks, and saves; dis. on attacks vs. target",
		descriptionFull : "You touch a willing creature and bestow a limited ability to see into the immediate future. For the duration, the target can't be surprised and has advantage on attack rolls, ability checks, and saving throws. Additionally, other creatures have disadvantage on attack rolls against the target for the duration." + "\n   " + "This spell immediately ends if you cast it again before its duration ends."
	},
	"freedom of movement" : {
		name : "Freedom of Movement",
		classes : ["bard", "cleric", "druid", "ranger"],
		source : [["SRD", 147], ["P", 244]],
		level : 4,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A leather strap, bound around the arm or a similar appendage",
		duration : "1 h",
		description : "1 willing crea; magic cannot reduce speed, paralyze, restrain; use 5 ft to escape nonmagical restrains",
		descriptionFull : "You touch a willing creature. For the duration, the target's movement is unaffected by difficult terrain, and spells and other magical effects can neither reduce the target's speed nor cause the target to be paralyzed or restrained." + "\n   " + "The target can also spend 5 feet of movement to automatically escape from nonmagical restraints, such as manacles or a creature that has it grappled. Finally, being underwater imposes no penalties on the target's movement or attacks."
	},
	"gaseous form" : {
		name : "Gaseous Form",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 148], ["P", 244]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A bit of gauze and a wisp of smoke",
		duration : "Conc, 1 h",
		description : "1 willing crea into a misty cloud with fly 10 ft, resist. to nonmagical dmg, adv. on Str/Dex/saves",
		descriptionFull : "You transform a willing creature you touch, along with everything it's wearing and carrying, into a misty cloud for the duration. The spell ends if the creature drops to 0 hit points. An incorporeal creature isn't affected." + "\n   " + "While in this form, the target's only method of movement is a flying speed of 10 feet. The target can enter and occupy the space of another creature. The target has resistance to nonmagical damage, and it has advantage on Strength, Dexterity, and Constitution saving throws. The target can pass through small holes, narrow openings, and even mere cracks, though it treats liquids as though they were solid surfaces. The target can't fall and remains hovering in the air even when stunned or otherwise incapacitated." + "\n   " + "While in the form of a misty cloud, the target can't talk or manipulate objects, and any objects it was carrying or holding can't be dropped, used, or otherwise interacted with. The target can't attack or cast spells."
	},
	"gate" : {
		name : "Gate",
		classes : ["cleric", "sorcerer", "wizard"],
		source : [["SRD", 148], ["P", 244]],
		level : 9,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M\u0192",
		compMaterial : "A diamond worth at least 5,000 gp",
		duration : "Conc, 1 min",
		description : "Create a portal to a precise location on a different plane; can transport named crea to me (5000gp)",
		descriptionFull : "You conjure a portal linking an unoccupied space you can see within range to a precise location on a different plane of existence. The portal is a circular opening, which you can make 5 to 20 feet in diameter. You can orient the portal in any direction you choose. The portal lasts for the duration." + "\n   " + "The portal has a front and a back on each plane where it appears. Travel through the portal is possible only by moving through its front. Anything that does so is instantly transported to the other plane, appearing in the unoccupied space nearest to the portal." + "\n   " + "Deities and other planar rulers can prevent portals created by this spell from opening in their presence or anywhere within their domains." + "\n   " + "When you cast this spell, you can speak the name of a specific creature (a pseudonym, title, or nickname doesn't work). If that creature is on a plane other than the one you are on, the portal opens in the named creature's immediate vicinity and draws the creature through it to the nearest unoccupied space on your side of the portal. You gain no special power over the creature, and it is free to act as the DM deems appropriate. It might leave, attack you, or help you."
	},
	"geas" : {
		name : "Geas",
		classes : ["bard", "cleric", "druid", "paladin", "wizard"],
		source : [["SRD", 148], ["P", 244]],
		level : 5,
		school : "Ench",
		time : "1 min",
		range : "60 ft",
		components : "V",
		duration : "30 days (D)",
		save : "Wis",
		description : "1 crea save or charmed; it must obeys commands or 5d10 Psychic dmg; SL7: 1 year, SL9: until disp.",
		descriptionFull : "You place a magical command on a creature that you can see within range, forcing it to carry out some service or refrain from some action or course of activity as you decide. If the creature can understand you, it must succeed on a Wisdom saving throw or become charmed by you for the duration. While the creature is charmed by you, it takes 5d10 psychic damage each time it acts in a manner directly counter to your instructions, but no more than once each day. A creature that can't understand you is unaffected by the spell." + "\n   " + "You can issue any command you choose, short of an activity that would result in certain death. Should you issue a suicidal command, the spell ends." + "\n   " + "You can end the spell early by using an action to dismiss it. A remove curse, greater restoration, or wish spell also ends it." + AtHigherLevels + "When you cast this spell using a spell slot of 7th or 8th level, the duration is 1 year. When you cast this spell using a spell slot of the spell lasts until it is ended by one of the spells mentioned above."
	},
	"gentle repose" : {
		name : "Gentle Repose",
		classes : ["cleric", "wizard"],
		source : [["SRD", 148], ["P", 245]],
		ritual : true,
		level : 2,
		school : "Necro",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A pinch of salt and one copper piece placed on each of the corpse's eyes, which must remain there for the duration",
		duration : "10 days",
		description : "1 corpse protected from decay and prevent it from becoming undead; add duration to raising dead",
		descriptionFull : "You touch a corpse or other remains. For the duration, the target is protected from decay and can't become undead." + "\n   " + "The spell also effectively extends the time limit on raising the target from the dead, since days spent under the influence of this spell don't count against the time limit of spells such as raise dead."
	},
	"giant insect" : {
		name : "Giant Insect",
		classes : ["druid"],
		source : [["SRD", 149], ["P", 245]],
		level : 4,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "Transform centipedes, spiders, wasps, or scorpions into giant versions; obey my verbal commands",
		descriptionFull : "You transform up to ten centipedes, three spiders, five wasps, or one scorpion within range into giant versions of their natural forms for the duration. A centipede becomes a giant centipede, a spider becomes a giant spider, a wasp becomes a giant wasp, and a scorpion becomes a giant scorpion." + "\n   " + "Each creature obeys your verbal commands, and in combat, they act on your turn each round. The DM has the statistics for these creatures and resolves their actions and movement." + "\n   " + "A creature remains in its giant size for the duration, until it drops to 0 hit points, or until you use an action to dismiss the effect on it." + "\n   " + "The DM might allow you to choose different targets. For example, if you transform a bee, its giant version might have the same statistics as a giant wasp."
	},
	"glibness" : {
		name : "Glibness",
		classes : ["bard", "warlock"],
		source : [["SRD", 149], ["P", 245]],
		level : 8,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V",
		duration : "1 h",
		description : "I can choose to roll a 15 on any Charisma check; magic cannot detect if I am lying",
		descriptionFull : "Until the spell ends, when you make a Charisma check, you can replace the number you roll with a 15. Additionally, no matter what you say, magic that would determine if you are telling the truth indicates that you are being truthful."
	},
	"globe of invulnerability" : {
		name : "Globe of Invulnerability",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 149], ["P", 245]],
		level : 6,
		school : "Abjur",
		time : "1 a",
		range : "10-ft rad",
		components : "V,S,M",
		compMaterial : "A glass or crystal bead that shatters when the spell ends",
		duration : "Conc, 1 min",
		description : "SL<(6+1/SL) cast outside area cannot effect inside area; casting with a higher spell slot does not help",
		descriptionFull : "An immobile, faintly shimmering barrier springs into existence in a 10-foot radius around you and remains for the duration." + "\n   " + "Any spell of 5th level or lower cast from outside the barrier can't affect creatures or objects within it, even if the spell is cast using a higher level spell slot. Such a spell can target creatures and objects within the barrier, but the spell has no effect on them. Similarly, the area within the barrier is excluded from the areas affected by such spells." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the barrier blocks spells of one level higher for each slot level above 6th."
	},
	"glyph of warding" : {
		name : "Glyph of Warding",
		classes : ["bard", "cleric", "wizard"],
		source : [["SRD", 149], ["P", 245]],
		level : 3,
		school : "Abjur",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Incense and powdered diamond worth at least 200 gp, which the spell consumes",
		duration : "Till triggered",
		description : "Create a glyph that triggers on set condition; Int(Investigation) vs. Spell DC; see book (200gp cons.)",
		descriptionFull : "When you cast this spell, you inscribe a glyph that later unleashes a magical effect. You inscribe it either on a surface (such as a table or a section of floor or wall) or within an object that can be closed (such as a book, a scroll, or a treasure chest) to conceal the glyph. The glyph can cover an area no larger than 10 feet in diameter. If the surface or object is moved more than 10 feet from where you cast this spell, the glyph is broken, and the spell ends without being triggered." + "\n   " + "The glyph is nearly invisible and requires a successful Intelligence (Investigation) check against your spell save DC to be found." + "\n   " + "You decide what triggers the glyph when you cast the spell. For glyphs inscribed on a surface, the most typical triggers include touching or standing on the glyph, removing another object covering the glyph, approaching within a certain distance of the glyph, or manipulating the object on which the glyph is inscribed. For glyphs inscribed within an object, the most common triggers include opening that object, approaching within a certain distance of the object, or seeing or reading the glyph. Once a glyph is triggered, this spell ends." + "\n   " + "You can further refine the trigger so the spell activates only under certain circumstances or according to physical characteristics (such as height or weight), creature kind (for example, the ward could be set to affect aberrations or drow), or alignment. You can also set conditions for creatures that don't trigger the glyph, such as those who say a certain password." + "\n   " + "When you inscribe the glyph, choose explosive runes or a spell glyph." + "\n   " + toUni("Explosive Runes") + ": When triggered, the glyph erupts with magical energy in a 20-foot-radius sphere centered on the glyph. The sphere spreads around corners. Each creature in the aura must make a Dexterity saving throw. A creature takes 5d8 acid, cold, fire, lightning, or thunder damage on a failed saving throw (your choice when you create the glyph), or half as much damage on a successful one." + "\n   " + toUni("Spell Glyph") + ": You can store a prepared spell of 3rd level or lower in the glyph by casting it as part of creating the glyph. The spell must target a single creature or an area. The spell being stored has no immediate effect when cast in this way. When the glyph is triggered, the stored spell is cast. If the spell has a target, it targets the creature that triggered the glyph. If the spell affects an area, the area is centered on that creature. If the spell summons hostile creatures or creates harmful objects or traps, they appear as close as possible to the intruder and attack it. If the spell requires concentration, it lasts until the end of its full duration." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage of an explosive runes glyph increases by 1d8 for each slot level above 3rd. If you create a spell glyph, you can store any spell of up to the same level as the slot you use for the glyph of warding."
	},
	"goodberry" : {
		name : "Goodberry",
		classes : ["druid", "ranger"],
		source : [["SRD", 150], ["P", 246]],
		level : 1,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A sprig of mistletoe",
		duration : "Instantaneous",
		description : "Create 10 berries; 1 a to eat 1 berry for 1 HP and nourishment for 1 day; berries lose potency after 24h",
		descriptionFull : "Up to ten berries appear in your hand and are infused with magic for the duration. A creature can use its action to eat one berry. Eating a berry restores 1 hit point, and the berry provides enough nourishment to sustain a creature for one day." + "\n   " + "The berries lose their potency if they have not been consumed within 24 hours of the casting of this spell."
	},
	"grease" : {
		name : "Grease",
		classes : ["wizard"],
		source : [["SRD", 150], ["P", 246]],
		level : 1,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A bit of pork rind or butter",
		duration : "1 min",
		save : "Dex",
		description : "10-ft square difficult terrain; all entering, in area at casting or at end of turn save or fall prone",
		descriptionFull : "Slick grease covers the ground in a 10-foot square centered on a point within range and turns it into difficult terrain for the duration." + "\n   " + "When the grease appears, each creature standing in its area must succeed on a Dexterity saving throw or fall prone. A creature that enters the area or ends its turn there must also succeed on a Dexterity saving throw or fall prone."
	},
	"greater invisibility" : {
		name : "Greater Invisibility",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 150], ["P", 246]],
		level : 4,
		school : "Illus",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "1 crea invisible until end of the spell; anything the target is wearing or carrying is also invisible",
		descriptionFull : "You or a creature you touch becomes invisible until the spell ends. Anything the target is wearing or carrying is invisible as long as it is on the target's person."
	},
	"greater restoration" : {
		name : "Greater Restoration",
		classes : ["bard", "cleric", "druid"],
		source : [["SRD", 150], ["P", 246]],
		level : 5,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Diamond dust worth 100 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Reduce exhaustion or end charm, petrify, curse, stat or max HP reduction (100gp cons.)",
		descriptionFull : "You imbue a creature you touch with positive energy to undo a debilitating effect. You can reduce the target's exhaustion level by one, or end one of the following effects on the target." + "\n " + "\u2022 One effect that charmed or petrified the target" + "\n " + "\u2022 One curse, including the target's attunement to a cursed magic item" + "\n " + "\u2022 Any reduction to one of the target's ability scores" + "\n " + "\u2022 One effect reducing the target's hit point maximum."
	},
	"guardian of faith" : {
		name : "Guardian of Faith",
		classes : ["cleric"],
		source : [["SRD", 150], ["P", 246]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "30 ft",
		components : "V",
		duration : "8 h",
		save : "Dex",
		description : "Place spectre; hostiles coming in 10 ft of it 20 Radiant dmg; save half; vanishes after it deals 60 dmg",
		descriptionFull : "A Large spectral guardian appears and hovers for the duration in an unoccupied space of your choice that you can see within range. The guardian occupies that space and is indistinct except for a gleaming sword and shield emblazoned with the symbol of your deity." + "\n   " + "Any creature hostile to you that moves to a space within 10 feet of the guardian for the first time on a turn must succeed on a Dexterity saving throw. The creature takes 20 radiant damage on a failed save, or half as much damage on a successful one. The guardian vanishes when it has dealt a total of 60 damage."
	},
	"guards and wards" : {
		name : "Guards and Wards",
		classes : ["bard", "wizard"],
		source : [["SRD", 151], ["P", 248]],
		level : 6,
		school : "Abjur",
		time : "10 min",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "Burning incense, a small measure of brimstone and oil, a knotted string, a small amount of umber hulk blood, and a small silver rod worth at least 10 gp",
		duration : "24 h",
		description : "Protect an area with an assortment of effects including fog, web, illusions and locks; see book (10gp)",
		descriptionFull : "You create a ward that protects up to 2,500 square feet of floor space (an area 50 feet square, or one hundred 5-foot squares or twenty-five 10-foot squares). The warded area can be up to 20 feet tall, and shaped as you desire. You can ward several stories of a stronghold by dividing the area among them, as long as you can walk into each contiguous area while you are casting the spell." + "\n   " + "When you cast this spell, you can specify individuals that are unaffected by any or all of the effects that you choose. You can also specify a password that, when spoken aloud, makes the speaker immune to these effects." + "\n   " + "Guards and wards creates the following effects within the warded area." + "\n   " + toUni("Corridors") + ": Fog fills all the warded corridors, making them heavily obscured. In addition, at each intersection or branching passage offering a choice of direction, there is a 50 percent chance that a creature other than you will believe it is going in the opposite direction from the one it chooses." + "\n   " + toUni("Doors") + ": All doors in the warded area are magically locked, as if sealed by an arcane lock spell. In addition, you can cover up to ten doors with an illusion (equivalent to the illusory object function of the minor illusion spell) to make them appear as plain sections of wall." + "\n   " + toUni("Stairs") + ": Webs fill all stairs in the warded area from top to bottom, as the web spell. These strands regrow in 10 minutes if they are burned or torn away while guards and wards lasts." + "\n   " + toUni("Other Spell Effect") + ": You can place your choice of one of the following magical effects within the warded area of the stronghold." + "\n " + "\u2022 Place dancing lights in four corridors. You can designate a simple program that the lights repeat as long as guards and wards lasts." + "\n " + "\u2022 Place magic mouth in two locations." + "\n " + "\u2022 Place stinking cloud in two locations. The vapors appear in the places you designate they return within 10 minutes if dispersed by wind while guards and wards lasts." + "\n " + "\u2022 Place a constant gust of wind in one corridor or room. Place a suggestion in one location. You select an area of up to 5 feet square, and any creature that enters or passes through the area receives the suggestion mentally." + "\n\n" + "The whole warded area radiates magic. A dispel magic cast on a specific effect, if successful, removes only that effect." + "\n   " + "You can create a permanently guarded and warded structure by casting this spell there every day for one year."
	},
	"guidance" : {
		name : "Guidance",
		classes : ["cleric", "druid"],
		source : [["SRD", 151], ["P", 248]],
		level : 0,
		school : "Div",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "1 willing creature adds 1d4 to ability check of its choice, after rolling, once during the duration",
		descriptionFull : "You touch one willing creature. Once before the spell ends, the target can roll a d4 and add the number rolled to one ability check of its choice. It can roll the die before or after making the ability check. The spell then ends."
	},
	"guiding bolt" : {
		name : "Guiding Bolt",
		classes : ["cleric"],
		source : [["SRD", 151], ["P", 248]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "1 rnd",
		description : "Spell attack for 4d6+1d6/SL Radiant dmg and next attack against target has advantage",
		descriptionFull : "A flash of light streaks toward a creature of your choice within range. Make a ranged spell attack against the target. On a hit, the target takes 4d6 radiant damage, and the next attack roll made against this target before the end of your next turn has advantage, thanks to the mystical dim light glittering on the target until then." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d6 for each slot level above 1st."
	},
	"gust of wind" : {
		name : "Gust of Wind",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 152], ["P", 248]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "60-ft line",
		components : "V,S,M",
		compMaterial : "A legume seed",
		duration : "Conc, 1 min",
		save : "Str",
		description : "60-ft long 10-ft wide line of wind; crea starting turn in wind save or pushed 15 ft; see book",
		descriptionFull : "A line of strong wind 60 feet long and 10 feet wide blasts from you in a direction you choose for the spell's duration. Each creature that starts its turn in the line must succeed on a Strength saving throw or be pushed 15 feet away from you in a direction following the line." + "\n   " + "Any creature in the line must spend 2 feet of movement for every 1 foot it moves when moving closer to you." + "\n   " + "The gust disperses gas or vapor, and it extinguishes candles, torches, and similar unprotected flames in the area. It causes protected flames, such as those of lanterns, to dance wildly and has a 50 percent chance to extinguish them." + "\n   " + "As a bonus action on each of your turns before the spell ends, you can change the direction in which the line blasts from you."
	},
	"hallow" : {
		name : "Hallow",
		classes : ["cleric"],
		source : [["SRD", 152], ["P", 249]],
		level : 5,
		school : "Evoc",
		time : "24 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Herbs, oils, and incense worth at least 1,000 gp, which the spell consumes",
		duration : "Till dispelled",
		description : "30-ft rad protected against celestials, elementals, fey, fiend, and undead; add additional effects; see B",
		descriptionFull : "You touch a point and infuse an area around it with holy (or unholy) power. The area can have a radius up to 60 feet, and the spell fails if the radius includes an area already under the effect a hallow spell. The affected area is subject to the following effects." + "\n   " + "First, celestials, elementals, fey, fiends, and undead can't enter the area, nor can such creatures charm, frighten, or possess creatures within it. Any creature charmed, frightened, or possessed by such a creature is no longer charmed, frightened, or possessed upon entering the area. You can exclude one or more of those types of creatures from this effect." + "\n   " + "Second, you can bind an extra effect to the area. Choose the effect from the following list, or choose an effect offered by the DM. Some of these effects apply to creatures in the area, you can designate whether the effect applies to all creatures, creatures that follow a specific deity or leader, or creatures of a specific sort, such as ores or trolls. When a creature that would be affected enters the spell's area for the first time on a turn or starts its turn there, it can make a Charisma saving throw. On a success, the creature ignores the extra effect until it leaves the area." + "\n   " + toUni("Courage") + ": Affected creatures can't be frightened while in the area." + "\n   " + toUni("Darkness") + ": Darkness fills the area. Normal light, as well as magical light created by spells of a lower level than the slot you used to cast this spell, can't illuminate the area." + "\n   " + toUni("Daylight") + ": Bright light fills the area. Magical darkness created by spells of a lower level than the slot you used to cast this spell can't extinguish the light." + "\n   " + toUni("Energy Protection") + ": Affected creatures in the area have resistance to one damage type of your choice, except for bludgeoning, piercing, or slashing." + "\n   " + toUni("Energy Vulnerability") + ": Affected creatures in the area have vulnerability to one damage type of your choice, except for bludgeoning, piercing, or slashing." + "\n   " + toUni("Everlasting Rest") + ": Dead bodies interred in the area can't be turned into undead." + "\n   " + toUni("Extradimensional Interference") + ": Affected creatures can't move or travel using teleportation or by extradimensional or interplanar means." + "\n   " + toUni("Fear") + ": Affected creatures are frightened while in the area." + "\n   " + toUni("Silence") + ": No sound can emanate from within the area, and no sound can reach into it." + "\n   " + toUni("Tongues") + ": Affected creatures can communicate with any other creature in the area, even if they don't share a common language."
	},
	"hallucinatory terrain" : {
		name : "Hallucinatory Terrain",
		classes : ["bard", "druid", "warlock", "wizard"],
		source : [["SRD", 152], ["P", 249]],
		level : 4,
		school : "Illus",
		time : "10 min",
		range : "300 ft",
		components : "V,S,M",
		compMaterial : "A stone, a twig, and a bit of green plant",
		duration : "24 h",
		description : "150-ft cube of terrain resembles some other sort of terrain; Int (Investigation) vs. Spell DC; see book",
		descriptionFull : "You make natural terrain in a 150-foot cube in range look, sound, and smell like some other sort of natural terrain. Thus, open fields or a road can be made to resemble a swamp, hill, crevasse, or some other difficult or impassable terrain. A pond can be made to seem like a grassy meadow, a precipice like a gentle slope, or a rock-strewn gully like a wide and smooth road. Manufactured structures, equipment, and creatures within the area aren't changed in appearance." + "\n   " + "The tactile characteristics of the terrain are unchanged, so creatures entering the area are likely to see through the illusion. If the difference isn't obvious by touch, a creature carefully examining the illusion can attempt an Intelligence (Investigation) check against your spell save DC to disbelieve it. A creature who discerns the illusion for what it is, sees it as a vague image superimposed on the terrain."
	},
	"harm" : {
		name : "Harm",
		classes : ["cleric"],
		source : [["SRD", 153], ["P", 249]],
		level : 6,
		school : "Necro",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Con",
		description : "1 crea 14d6 Necrotic dmg, reduce max HP by same; not <1 HP; save halves and no max HP reduce",
		descriptionFull : "You unleash a virulent disease on a creature that you can see within range. The target must make a Constitution saving throw. On a failed save, it takes 14d6 necrotic damage, or half as much damage on a successful save. The damage can't reduce the target's hit points below 1. If the target fails the saving throw, its hit point maximum is reduced for 1 hour by an amount equal to the necrotic damage it took. Any effect that removes a disease allows a creature's hit point maximum to return to normal before that time passes."
	},
	"haste" : {
		name : "Haste",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 153], ["P", 250]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A shaving of licorice root",
		duration : "Conc, 1 min",
		description : "1 willing crea +2 AC, speed doubled, adv. on Dex saves, extra action (1 attack, dash, disengage, hide)",
		descriptionFull : "Choose a willing creature that you can see within range. Until the spell ends, the target's speed is doubled, it gains a +2 bonus to AC, it has advantage on Dexterity saving throws, and it gains an additional action on each of its turns. That action can be used only to take the Attack (one weapon attack only), Dash, Disengage, Hide, or Use an Object action." + "\n   " + "When the spell ends, the target can't move or take actions until after its next turn, as a wave of lethargy sweeps over it."
	},
	"heal" : {
		name : "Heal",
		classes : ["cleric", "druid"],
		source : [["SRD", 153], ["P", 250]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 living creature heals 70+10/SL HP and is cured of blindness, deafness, and all diseases",
		descriptionFull : "Choose a creature that you can see within range. A surge of positive energy washes through the creature, causing it to regain 70 hit points. The spell also ends blindness, deafness, and any diseases affecting the target. This spell has no effect on constructs or undead." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the amount of healing increases by 10 for each slot level above 6th."
	},
	"healing word" : {
		name : "Healing Word",
		classes : ["bard", "cleric", "druid"],
		source : [["SRD", 153], ["P", 250]],
		level : 1,
		school : "Evoc",
		time : "1 bns",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		description : "1 living creature heals 1d4+1d4/SL+spellcasting ability modifier HP",
		descriptionFull : "A creature of your choice that you can see within range regains hit points equal to 1d4 + your spellcasting ability modifier. This spell has no effect on undead or constructs." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the healing increases by 1d4 for each slot level above 1st."
	},
	"heat metal" : {
		name : "Heat Metal",
		classes : ["bard", "druid"],
		source : [["SRD", 153], ["P", 250]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A piece of iron and a flame",
		duration : "Conc, 1 min",
		save : "Con",
		description : "1 metal obj 2d8+1d8/SL Fire dmg to touch; save or drop obj; if held: dis. atk/chk; bns a reheat obj",
		descriptionFull : "Choose a manufactured metal object, such as a metal weapon or a suit of heavy or medium metal armor, that you can see within range. You cause the object to glow red-hot. Any creature in physical contact with the object takes 2d8 fire damage when you cast the spell. Until the spell ends, you can use a bonus action on each of your subsequent turns to cause this damage again." + "\n   " + "If a creature is holding or wearing the object and takes the damage from it, the creature must succeed on a Constitution saving throw or drop the object if it can. If it doesn't drop the object, it has disadvantage on attack rolls and ability checks until the start of your next turn." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d8 for each slot above 2nd."
	},
	"hellish rebuke" : {
		name : "Hellish Rebuke",
		classes : ["warlock"],
		source : [["SRD", 154], ["P", 250]],
		level : 1,
		school : "Evoc",
		time : "1 rea",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "Cast when taking dmg, crea that dealt dmg 2d10+1d10/SL Fire dmg; save halves",
		descriptionFull : "You point your finger, and the creature that damaged you is momentarily surrounded by hellish flames. The creature must make a Dexterity saving throw. It takes 2d10 fire damage on a failed save, or half as much damage on a successful one." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st."
	},
	"heroes' feast" : {
		name : "Heroes' Feast",
		classes : ["cleric", "druid"],
		source : [["SRD", 154], ["P", 250]],
		level : 6,
		school : "Conj",
		time : "10 min",
		range : "30 ft",
		components : "V,S,M\u2020",
		compMaterial : "A gem-encrusted bowl worth at least 1,000 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Up to 12 crea; 1h to consume; for 24h: disease/poison immune, +2d10 max HP, see B (1000gp cons.)",
		descriptionFull : "You bring forth a great feast, including magnificent food and drink. The feast takes 1 hour to consume and disappears at the end of that time, and the beneficial effects don't set in until this hour is over. Up to twelve creatures can partake of the feast." + "\n   " + "A creature that partakes of the feast gains several benefits. The creature is cured of all diseases and poison, becomes immune to poison and being frightened, and makes all Wisdom saving throws with advantage. Its hit point maximum also increases by 2d10, and it gains the same number of hit points. These benefits last for 24 hours."
	},
	"heroism" : {
		name : "Heroism",
		classes : ["bard", "paladin"],
		source : [["SRD", 154], ["P", 250]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "1+1/SL crea immune to fear, gain spellcasting ability modifier temp. HP start of each turn as spell lasts",
		descriptionFull : "A willing creature you touch is imbued with bravery. Until the spell ends, the creature is immune to being frightened and gains temporary hit points equal to your spellcasting ability modifier at the start of each of its turns. When the spell ends, the target loses any remaining temporary hit points from this spell." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st."
	},
	"hold monster" : {
		name : "Hold Monster",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 154], ["P", 251]],
		level : 5,
		school : "Ench",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "A small, straight piece of iron",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1+1/SL crea (not undead), each max 30 ft apart, save or paralyzed; extra save at end of each turn",
		descriptionFull : "Choose a creature that you can see within range. The target must succeed on a Wisdom saving throw or be paralyzed for the duration. This spell has no effect on undead. At the end of each of its turns, the target can make another Wisdom saving throw. On a success, the spell ends on the target." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, you can target on additional creature for each slot level above 5th. The creatures must be within 30 feet of each other when you target them."
	},
	"hold person" : {
		name : "Hold Person",
		classes : ["bard", "cleric", "druid", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 154], ["P", 251]],
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A small, straight piece of iron",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1+1/SL humanoids, within 30 ft of each other, save or paralyzed; extra save at end of each turn",
		descriptionFull : "Choose a humanoid that you can see within range. The target must succeed on a Wisdom saving throw or be paralyzed for the duration. At the end of each of its turns, the target can make another Wisdom saving throw. On a success, the spell ends on the target." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, you can target on additional humanoid for each slot level above 2nd. The humanoids must be within 30 feet of each other when you target them."
	},
	"holy aura" : {
		name : "Holy Aura",
		classes : ["cleric"],
		source : [["SRD", 155], ["P", 251]],
		level : 8,
		school : "Abjur",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M\u0192",
		compMaterial : "A tiny reliquary worth at least 1,000 gp containing a sacred relic, such as a scrap of cloth from a saint's robe or a piece of parchment from a religious text",
		duration : "Conc, 1 min",
		save : "Con",
		description : "Any in area adv. on saves; dis. atks vs. targets; fiend/undead atk a target save or blinded (1000gp)",
		descriptionFull : "Divine light washes out from you and coalesces in a soft radiance in a 30-foot radius around you. Creatures of your choice in that radius when you cast this spell shed dim light in a 5-foot radius and have advantage on all saving throws, and other creatures have disadvantage on attack rolls against them until the spell ends. In addition, when a fiend or an undead hits an affected creature with a melee attack, the aura flashes with brilliant light. The attacker must succeed on a Constitution saving throw or be blinded until the spell ends."
	},
	"hunter's mark" : {
		name : "Hunter's Mark",
		classes : ["ranger"],
		source : [["SRD", 155], ["P", 251]],
		level : 1,
		school : "Div",
		time : "1 bns",
		range : "90 ft",
		components : "V",
		duration : "Conc, 1 h",
		description : "1 crea +1d6 dmg from my weapon atks; adv. Wis (Perception/Survival) vs. target; SL3: 8h; SL5: 24h",
		descriptionFull : "You choose a creature you can see within range and mystically mark it as your quarry. Until the spell ends, you deal an extra 1d6 damage to the target whenever you hit it with a weapon attack, and you have advantage on any Wisdom (Perception) or Wisdom (Survival) check you make to find it. If the target drops to 0 hit points before this spell ends, you can use a bonus action on a subsequent turn of yours to mark a new creature." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd or 4th level, you can maintain your concentration on the spell for up to 8 hours. When you use a spell slot of 5th level or higher, you can maintain your concentration on the spell for up to 24 hours."
	},
	"hypnotic pattern" : {
		name : "Hypnotic Pattern",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 155], ["P", 252]],
		level : 3,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "S,M",
		compMaterial : "A glowing stick o f incense or a crystal vial filled with phosphorescent material",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "30-ft cube all crea save or charmed, incapacitated, speed 0 for duration; ends if crea takes dmg",
		descriptionFull : "You create a twisting pattern of colors that weaves through the air inside a 30-foot cube within range. The pattern appears for a moment and vanishes. Each creature in the area who sees the pattern must make a Wisdom saving throw. On a failed save, the creature becomes charmed for the duration. While charmed by this spell, the creature is incapacitated and has a speed of 0." + "\n   " + "The spell ends for an affected creature if it takes any damage or if someone else uses an action to shake the creature out of its stupor."
	},
	"ice storm" : {
		name : "Ice Storm",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 155], ["P", 252]],
		level : 4,
		school : "Evoc",
		time : "1 a",
		range : "300 ft",
		components : "V,S,M",
		compMaterial : "A pinch of dust and a few drops of water",
		duration : "Instantaneous",
		save : "Dex",
		description : "20-ft rad 40-ft high all crea 2d8+1d8/SL Bludg. and 4d6 Cold dmg; save halves; 1 rnd difficult ter.",
		descriptionFull : "A hail of rock-hard ice pounds to the ground in a 20-foot-radius, 40-foot-high cylinder centered on a point within range. Each creature in the cylinder must make a Dexterity saving throw. A creature takes 2d8 bludgeoning damage and 4d6 cold damage on a failed save, or half as much damage on a successful one." + "\n   " + "Hailstones turn the storm's area of effect into difficult terrain until the end of your next turn." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, the bludgeoning damage increases by 1d8 for each slot level above 4th."
	},
	"identify" : {
		name : "Identify",
		classes : ["bard", "wizard"],
		source : [["SRD", 155], ["P", 252]],
		ritual : true,
		level : 1,
		school : "Div",
		time : "1 min",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "A pearl worth at least 100 gp and an owl feather",
		duration : "Instantaneous",
		description : "1 magical item or magic-imbued crea/obj; learn properties, how to use, and spells affecting it (100gp)",
		descriptionFull : "You choose one object that you must touch throughout the casting of the spell. If it is a magic item or some other magic-imbued object, you learn its properties and how to use them, whether it requires attunement to use, and how many charges it has, if any. You learn whether any spells are affecting the item and what they are. If the item was created by a spell, you learn which spell created it." + "\n   " + "If you instead touch a creature throughout the casting, you learn what spells, if any, are currently affecting it."
	},
	"illusory script" : {
		name : "Illusory Script",
		classes : ["bard", "warlock", "wizard"],
		source : [["SRD", 156], ["P", 252]],
		ritual : true,
		level : 1,
		school : "Illus",
		time : "1 min",
		range : "Touch",
		components : "S,M\u2020",
		compMaterial : "A lead-based ink worth at least 10 gp, which the spell consumes",
		duration : "10 days",
		description : "Write a message that only I, designated crea, and any with truesight can understand (10gp cons.)",
		descriptionFull : "You write on parchment, paper, or some other suitable writing material and imbue it with a potent illusion that lasts for the duration." + "\n   " + "To you and any creatures you designate when you cast the spell, the writing appears normal, written in your hand, and conveys whatever meaning you intended when you wrote the text. To all others, the writing appears as if it were written in an unknown or magical script that is unintelligible. Alternatively, you can cause the writing to appear to be an entirely different message, written in a different hand and language, though the language must be one you know." + "\n   " + "Should the spell be dispelled, the original script and the illusion both disappear." + "\n   " + "A creature with truesight can read the hidden message."
	},
	"imprisonment" : {
		name : "Imprisonment",
		classes : ["warlock", "wizard"],
		source : [["SRD", 156], ["P", 252]],
		level : 9,
		school : "Abjur",
		time : "1 min",
		range : "30 ft",
		components : "V,S,M\u2020",
		compMaterial : "A vellum depiction or a carved statuette in the likeness of the target, and a special component that varies according to the version of the spell you choose, worth at least 500 gp per Hit Die of the target",
		duration : "Till dispelled",
		save : "Wis",
		description : "1 crea save or trapped in chosen way with no means of escape; see book (500gp/HD cons.)",
		descriptionFull : "You create a magical restraint to hold a creature that you can see within range. The target must succeed on a Wisdom saving throw or be bound by the spell, if it succeeds, it is immune to this spell if you cast it again. While affected by this spell, the creature doesn't need to breathe, eat, or drink, and it doesn't age. Divination spells can't locate or perceive the target." + "\n   " + "When you cast the spell, you choose one of the following forms of imprisonment." + "\n   " + toUni("Burial") + ": The target is entombed far beneath the earth in a sphere of magical force that is just large enough to contain the target. Nothing can pass through the sphere, nor can any creature teleport or use planar travel to get into or out of it." + "\n   " + "The special component for this version of the spell is a small mithral orb." + "\n   " + toUni("Chaining") + ": Heavy chains, firmly rooted in the ground, hold the target in place. The target is restrained until the spell ends, and it can't move or be moved by any means until then." + "\n   " + "The special component for this version of the spell is a fine chain of precious metal." + "\n   " + toUni("Hedged Prison") + ": The spell transports the target into a tiny demiplane that is warded against teleportation and planar travel. The demiplane can be a labyrinth, a cage, a tower, or any similar confined structure or area of your choice." + "\n   " + "The special component for this version of the spell is a miniature representation of the prison made from jade." + "\n   " + toUni("Minimus Containment") + ": The target shrinks to a height of 1 inch and is imprisoned inside a gemstone or similar object. Light can pass through the gemstone normally (allowing the target to see out and other creatures to see in), but nothing else can pass through, even by means of teleportation or planar travel. The gemstone can't be cut or broken while the spell remains in effect." + "\n   " + "The special component for this version of the spell is a large, transparent gemstone, such as a corundum, diamond, or ruby." + "\n   " + toUni("Slumber") + ": The target falls asleep and can't be awoken." + "\n   " + "The special component for this version of the spell consists of rare soporific herbs." + "\n   " + toUni("Ending the Spell") + ": During the casting of the spell, in any of its versions, you can specify a condition that will cause the spell to end and release the target. The condition can be as specific or as elaborate as you choose, but the DM must agree that the condition is reasonable and has a likelihood of coming to pass. The conditions can be based on a creature's name, identity, or deity but otherwise must be based on observable actions or qualities and not based on intangibles such as level, class, or hit points." + "\n   " + "A dispel magic spell can end the spell only if it is cast as a 9th-level spell, targeting either the prison or the special component used to create it." + "\n   " + "You can use a particular special component to create only one prison at a time. If you cast the spell again using the same component, the target of the first casting is immediately freed from its binding."
	},
	"incendiary cloud" : {
		name : "Incendiary Cloud",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 157], ["P", 253]],
		level : 8,
		school : "Conj",
		time : "1 a",
		range : "150 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "20-ft rad all 10d8 Fire damage; save halves; heavily obscures; move 10 ft/rnd in chosen direction",
		descriptionFull : "A swirling cloud of smoke shot through with white-hot embers appears in a 20-foot-radius sphere centered on a point within range. The cloud spreads around corners and is heavily obscured. It lasts for the duration or until a wind of moderate or greater speed (at least 10 miles per hour) disperses it." + "\n   " + "When the cloud appears, each creature in it must make a Dexterity saving throw. A creature takes 10d8 fire damage on a failed save, or half as much damage on a successful one. A creature must also make this saving throw when it enters the spell's area for the first time on a turn or ends its turn there." + "\n   " + "The cloud moves 10 feet directly away from you in a direction that you choose at the start of each of your turns."
	},
	"inflict wounds" : {
		name : "Inflict Wounds",
		classes : ["cleric"],
		source : [["SRD", 157], ["P", 253]],
		level : 1,
		school : "Necro",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "Spell attack for 3d10+1d10/SL Necrotic dmg",
		descriptionFull : "Make a melee spell attack against a creature you can reach. On a hit, the target takes 3d10 necrotic damage." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d10 for each slot level above 1st."
	},
	"insect plague" : {
		name : "Insect Plague",
		classes : ["cleric", "druid", "sorcerer"],
		source : [["SRD", 157], ["P", 254]],
		level : 5,
		school : "Conj",
		time : "1 a",
		range : "300 ft",
		components : "V,S,M",
		compMaterial : "A few grains of sugar, some kernels of grain, and a smear of fat",
		duration : "Conc, 10 min",
		save : "Con",
		description : "20-ft rad all 4d10+1d10/SL Piercing dmg; save halves; ignores cover; lightly obscures; difficult ter.",
		descriptionFull : "Swarming, biting locusts fill a 20-foot-radius sphere centered on a point you choose within range. The sphere spreads around corners. The sphere remains for the duration, and its area is lightly obscured. The sphere's area is difficult terrain." + "\n   " + "When the area appears, each creature in it must make a Constitution saving throw. A creature takes 4d10 piercing damage on a failed save, or half as much damage on a successful one. A creature must also make this saving throw when it enters the spell's area for the first time on a turn or ends its turn there." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the damage increases by 1d10 for each slot level above 5th."
	},
	"invisibility" : {
		name : "Invisibility",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 157], ["P", 254]],
		level : 2,
		school : "Illus",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "An eyelash encased in gum arabic",
		duration : "Conc, 1 h",
		description : "1+1/SL crea invisible; attacking/casting makes the crea visible; anything worn/carried also invisible",
		descriptionFull : "A creature you touch becomes invisible until the spell ends. Anything the target is wearing or carrying is invisible as long as it is on the target's person. The spell ends for a target that attacks or casts a spell." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, you can target one additional creature for each slot level above 2nd."
	},
	"jump" : {
		name : "Jump",
		classes : ["druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 158], ["P", 254]],
		level : 1,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A grasshopper's hind leg",
		duration : "1 min",
		description : "1 creature's jump distance is tripled for the duration",
		descriptionFull : "You touch a creature. The creature's jump distance is tripled until the spell ends."
	},
	"knock" : {
		name : "Knock",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 158], ["P", 254]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		description : "1 object is unlocked (1 lock), unstuck, unbarred, arcane lock suppressed for 10 min; audible for 300 ft",
		descriptionFull : "Choose an object that you can see within range. The object can be a door, a box, a chest, a set of manacles, a padlock, or another object that contains a mundane or magical means that prevents access." + "\n   " + "A target that is held shut by a mundane lock or that is stuck or barred becomes unlocked, unstuck, or unbarred. If the object has multiple locks, only one of them is unlocked." + "\n   " + "If you choose a target that is held shut with arcane lock, that spell is suppressed for 10 minutes, during which time the target can be opened and shut normally." + "\n   " + "When you cast the spell, a loud knock, audible from as far away as 300 feet, emanates from the target object."
	},
	"legend lore" : {
		name : "Legend Lore",
		classes : ["bard", "cleric", "wizard"],
		source : [["SRD", 158], ["P", 254]],
		level : 5,
		school : "Div",
		time : "10 min",
		range : "Self",
		components : "V,S,M\u2020",
		compMaterial : "Incense worth at least 250 gp, which the spell consumes, and four ivory strips worth at least 50 gp each",
		duration : "Instantaneous",
		description : "Learn summary of lore of named or described person, place, or object (200gp; 250gp cons.)",
		descriptionFull : "Name or describe a person, place, or object. The spell brings to your mind a brief summary of the significant lore about the thing you named. The lore might consist of current tales, forgotten stories, or even secret lore that has never been widely known. If the thing you named isn't of legendary importance, you gain no information." + "\n   " + "The more information you already have about the thing, the more precise and detailed the information you receive is. The information you learn is accurate but might be couched in figurative language. For example, if you have a mysterious magic axe on hand, the spell might yield this information - Woe to the evildoer whose hand touches the axe, for even the haft slices the hand of the evil ones. Only a true Child of Stone, lover and beloved of Moradin, may awaken the true powers of the axe, and only with the sacred word Rudnogg on the lips."
	},
	"leomund's secret chest" : {
		name : "Leomund's Secret Chest",
		nameAlt : "Secret Chest",
		classes : ["wizard"],
		source : [["SRD", 177], ["P", 254]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "An exquisite chest, 3 feet by 2 feet by 2 feet, constructed from rare materials worth at least 5,000 gp, and a Tiny replica made from the same materials worth at least 50 gp",
		duration : "Instantaneous",
		description : "Hide chest with content in Ethereal Plane for 60 days, after that chance of loss; 1 a reappear (5050gp)",
		descriptionFull : "You hide a chest, and all its contents, on the Ethereal Plane. You must touch the chest and the miniature replica that serves as a material component for the spell. The chest can contain up to 12 cubic feet of nonliving material (3 feet by 2 feet by 2 feet)." + "\n   " + "While the chest remains on the Ethereal Plane, you can use an action and touch the replica to recall the chest. It appears in an unoccupied space on the ground within 5 feet of you. You can send the chest back to the Ethereal Plane by using an action and touching both the chest and the replica." + "\n   " + "After 60 days, there is a cumulative 5 percent chance per day that the spell's effect ends. This effect ends if you cast this spell again, if the smaller replica chest is destroyed, or if you choose to end the spell as an action. If the spell ends and the larger chest is on the Ethereal Plane, it is irretrievably lost."
	},
	"leomund's tiny hut" : {
		name : "Leomund's Tiny Hut",
		nameAlt : "Tiny Hut",
		classes : ["bard", "wizard"],
		source : [["SRD", 187], ["P", 255]],
		ritual : true,
		level : 3,
		school : "Evoc",
		time : "1 min",
		range : "10-ft rad",
		components : "V,S,M",
		compMaterial : "A small crystal bead",
		duration : "8 h",
		description : "10-ft rad immobile dome of force holds 9 Medium crea; blocks magic; ends if I leave; see book",
		descriptionFull : "A 10-foot-radius immobile dome of force springs into existence around and above you and remains stationary for the duration. The spell ends if you leave its area." + "\n   " + "Nine creatures of Medium size or smaller can fit inside the dome with you. The spell fails if its area includes a larger creature or more than nine creatures. Creatures and objects within the dome when you cast this spell can move through it freely. All other creatures and objects are barred from passing through it. Spells and other magical effects can't extend through the dome or be cast through it. The atmosphere inside the space is comfortable and dry, regardless of the weather outside." + "\n   " + "Until the spell ends, you can command the interior to become dimly lit or dark. The dome is opaque from the outside, of any color you choose, but it is transparent from the inside."
	},
	"lesser restoration" : {
		name : "Lesser Restoration",
		classes : ["bard", "cleric", "druid", "paladin", "ranger"],
		source : [["SRD", 158], ["P", 255]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 crea cured of 1 disease, or 1 condition: blinded, deafened, paralyzed, or poisoned",
		descriptionFull : "You touch a creature and can end either one disease or one condition afflicting it. The condition can be blinded, deafened, paralyzed, or poisoned."
	},
	"levitate" : {
		name : "Levitate",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 158], ["P", 255]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "Either a small leather loop or a piece of golden wire bent into a cup shape with a long shank on one end",
		duration : "Conc, 10 min",
		save : "Con",
		description : "1 crea/obj up to 500 lb save or rise vertically, up to 20 ft; 1 a (move a if self) move up/down 20 ft",
		descriptionFull : "One creature or loose object of your choice that you can see within range rises vertically, up to 20 feet, and remains suspended there for the duration. The spell can levitate a target that weighs up to 500 pounds. An unwilling creature that succeeds on a Constitution saving throw is unaffected." + "\n   " + "The target can move only by pushing or pulling against a fixed object or surface within reach (such as a wall or a ceiling), which allows it to move as if it were climbing. You can change the target's altitude by up to 20 feet in either direction on your turn. If you are the target, you can move up or down as part of your move. Otherwise, you can use your action to move the target, which must remain within the spell's range." + "\n   " + "When the spell ends, the target floats gently to the ground if it is still aloft."
	},
	"light" : {
		name : "Light",
		classes : ["bard", "cleric", "sorcerer", "wizard"],
		source : [["SRD", 159], ["P", 255]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "Touch",
		components : "V,M",
		compMaterial : "A firefly or phosphorescent moss",
		duration : "1 h (D)",
		description : "1 obj up to 10-ft cube sheds bright light 20-ft rad and dim light 20-ft; cannot have multiple instances",
		descriptionFull : "You touch one object that is no larger than 10 feet in any dimension. Until the spell ends, the object sheds bright light in a 20-foot radius and dim light for an additional 20 feet. The light can be colored as you like. Completely covering the object with something opaque blocks the light. The spell ends if you cast it again or dismiss it as an action." + "\n   " + "If you target an object held or worn by a hostile creature, that creature must succeed on a Dexterity saving throw to avoid the spell."
	},
	"lightning bolt" : {
		name : "Lightning Bolt",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 159], ["P", 255]],
		level : 3,
		school : "Evoc",
		time : "1 a",
		range : "100-ft line",
		components : "V,S,M",
		compMaterial : "A bit of fur and a rod of amber, crystal, or glass",
		duration : "Instantaneous",
		save : "Dex",
		description : "100-ft long 5-ft wide all 8d6+1d6/SL Lightn. dmg; save halves; unattended flammable obj ignite",
		descriptionFull : "A stroke of lightning forming a line of 100 feet long and 5 feet wide blasts out from you in a direction you choose. Each creature in the line must make a Dexterity saving throw. A creature takes 8d6 lightning damage on a failed save, or half as much damage on a successful one." + "\n   " + "The lightning ignites flammable objects in the area that aren't being worn or carried." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot above 3rd."
	},
	"locate animals or plants" : {
		name : "Locate Animals or Plants",
		nameShort : "Locate Animal/Plants",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 159], ["P", 256]],
		ritual : true,
		level : 2,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A bit of fur from a bloodhound",
		duration : "Instantaneous",
		description : "Learn direction and distance to closest named or described kind of beast or plant within 5 miles",
		descriptionFull : "Describe or name a specific kind of beast or plant. Concentrating on the voice of nature in your surroundings, you learn the direction and distance to the closest creature or plant of that kind within 5 miles, if any are present."
	},
	"locate creature" : {
		name : "Locate Creature",
		classes : ["bard", "cleric", "druid", "paladin", "ranger", "wizard"],
		source : [["SRD", 159], ["P", 256]],
		level : 4,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A bit of fur from a bloodhound",
		duration : "Conc, 1 h",
		description : "Learn direction to closest named or described kind or specific creature within 1000 ft; see book",
		descriptionFull : "Describe or name a creature that is familiar to you. You sense the direction to the creature's location, as long as that creature is within 1,000 feet of you. If the creature is moving, you know the direction of its movement." + "\n   " + "The spell can locate a specific creature known to you, or the nearest creature of a specific kind (such as a human or a unicorn), so long as you have seen such a creature up close - within 30 feet - at least once. If the creature you described or named is in a different form, such as being under the effects of a polymorph spell, this spell doesn't locate the creature." + "\n   " + "This spell can't locate a creature if running water at least 10 feet wide blocks a direct path between you and the creature."
	},
	"locate object" : {
		name : "Locate Object",
		classes : ["bard", "cleric", "druid", "paladin", "ranger", "wizard"],
		source : [["SRD", 159], ["P", 256]],
		level : 2,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A forked twig",
		duration : "Conc, 10 min",
		description : "Learn direction to closest named or described kind or specific object within 1000 ft; see book",
		descriptionFull : "Describe or name an object that is familiar to you. You sense the direction to the object's location, as long as that object is within 1,000 feet of you. If the object is in motion, you know the direction of its movement." + "\n   " + "The spell can locate a specific object known to you, as long as you have seen it up close - within 30 feet - at least once. Alternatively, the spell can locate the nearest object of a particular kind, such as a certain kind of apparel, jewelry, furniture, tool, or weapon." + "\n   " + "This spell can't locate an object if any thickness of lead, even a thin sheet, blocks a direct path between you and the object."
	},
	"longstrider" : {
		name : "Longstrider",
		classes : ["bard", "druid", "ranger", "wizard"],
		source : [["SRD", 160], ["P", 256]],
		level : 1,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A pinch of dirt",
		duration : "1 h",
		description : "1+1/SL creature's speed increases by 10 ft for the duration",
		descriptionFull : "You touch a creature. The target's speed increases by 10 feet until the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, you can target one additional creature for each slot level above 1st."
	},
	"mage armor" : {
		name : "Mage Armor",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 160], ["P", 256]],
		level : 1,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A piece of cured leather",
		duration : "8 h (D)",
		description : "1 crea that isn't wearing armor has AC 13 + Dex modifier for the duration; spell ends if it dons armor",
		descriptionFull : "You touch a willing creature who isn't wearing armor, and a protective magical force surrounds it until the spell ends. The target's base AC becomes 13 + its Dexterity modifier. The spell ends it if the target dons armor or if you dismiss the spell as an action."
	},
	"mage hand" : {
		name : "Mage Hand",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 160], ["P", 256]],
		level : 0,
		school : "Conj",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "1 min (D)",
		description : "Create spectral hand for simple tasks or carry up to 10 lb; 1 a to control; can't have multiple instances",
		descriptionFull : "A spectral, floating hand appears at a point you choose within range. The hand lasts for the duration or until you dismiss it as an action. The hand vanishes if it is ever more than 30 feet away from you or if you cast this spell again." + "\n   " + "You can use your action to control the hand. You can use the hand to manipulate an object, open an unlocked door or container, stow or retrieve an item from an open container, or pour the contents out of a vial. You can move the hand up to 30 feet each time you use it." + "\n   " + "The hand can't attack, activate magical items, or carry more than 10 pounds."
	},
	"magic circle" : {
		name : "Magic Circle",
		classes : ["cleric", "paladin", "warlock", "wizard"],
		source : [["SRD", 160], ["P", 256]],
		level : 3,
		school : "Abjur",
		time : "1 min",
		range : "10 ft",
		components : "V,S,M\u2020",
		compMaterial : "Holy water or powdered silver and iron worth at least 100 gp, which the spell consumes",
		duration : "1 h",
		description : "Celes., elem., fey, fiends, or undead can't enter/leave; dis. on atk; +1h/SL dura.; see B (100gp cons.)",
		descriptionFull : "You create a 10-foot-radius, 20-foot-tall cylinder of magical energy centered on a point on the ground that you can see within range. Glowing runes appear wherever the cylinder intersects with the floor or other surface." + "\n   " + "Choose one or more of the following types of creatures - celestials, elementals, fey, fiends, or undead. The circle affects a creature of the chosen type in the following ways." + "\n " + "\u2022 The creature can't willingly enter the cylinder by nonmagical means. If the creature tries to use teleportation or interplanar travel to do so, it must first succeed on a Charisma saving throw." + "\n " + "\u2022 The creature has disadvantage on attack rolls against targets within the cylinder." + "\n " + "\u2022 Targets within the cylinder can't be charmed, frightened, or possessed by the creature." + "\n\n" + "When you cast this spell, you can elect to cause its magic to operate in the reverse direction, preventing a creature of the specified type from leaving the cylinder and protecting targets outside it." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the duration increases by 1 hour for each slot level above 3rd."
	},
	"magic jar" : {
		name : "Magic Jar",
		classes : ["wizard"],
		source : [["SRD", 160], ["P", 257]],
		level : 6,
		school : "Necro",
		time : "1 min",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "A gem, crystal, reliquary, or some other ornamental container worth at least 500 gp",
		duration : "Till dispelled",
		description : "Transport my soul into container from which I can attempt to possess humanoids; see B (500gp)",
		descriptionFull : "Your body falls into a catatonic state as your soul leaves it and enters the container you used for the spell's material component. While your soul inhabits the container, you are aware of your surroundings as if you were in the container's space. You can't move or use reactions. The only action you can take is to project your soul up to 100 feet out of the container, either returning to your living body (and ending the spell) or attempting to possess a humanoids body." + "\n   " + "You can attempt to possess any humanoid within 100 feet of you that you can see (creatures warded by a protection from evil and good or magic circle spells can't be possessed). The target must make a Charisma saving throw. On a failure, your soul moves into the target's body, and the target's soul becomes trapped in the container. On a success, the target resists your efforts to possess it, and you can't attempt to possess it again for 24 hours." + "\n   " + "Once you possess a creature's body, you control it. Your game statistics are replaced by the statistics of the creature though you retain your alignment and your Intelligence, Wisdom, and Charisma scores. You retain the benefit of your own class feature. If the target has any class levels, you can't use any of its class features." + "\n   " + "Meanwhile, the possessed creature's soul can perceive from the container using its own senses, but it can't move or take actions at all." + "\n   " + "While possessing a body, you can use your action to return from the host body to the container if it is within 100 feet of you, returning the host creature's soul to its body. If the host body dies while you're in it, the creature dies, and you must make a Charisma saving throw against your own spellcasting DC. On a success, you return to the container if it is within 100 feet of you. Otherwise, you die." + "\n   " + "If the container is destroyed or the spell ends, your soul immediately returns to your body. If your body is more than 100 feet away from you, or if your body is dead when you attempt to return to it, you die. If another creature's soul is in the container when it is destroyed, the creature's soul returns to its body if the body is alive and within 100 feet. Otherwise, that creature dies." + "\n   " + "When the spell ends, the container is destroyed."
	},
	"magic missile" : {
		name : "Magic Missile",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 161], ["P", 257]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "3+1/SL darts hit creature(s) I can see for 1d4+1 Force dmg per dart",
		descriptionFull : "You create three glowing darts of magical force. Each dart hits a creature of your choice that you can see within range. A dart deals 1d4+1 force damage to its target. The darts all strike simultaneously and you can direct them to hit one creature or several." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the spell creates one more dart for each slot above 1st."
	},
	"magic mouth" : {
		name : "Magic Mouth",
		classes : ["bard", "wizard"],
		source : [["SRD", 161], ["P", 257]],
		ritual : true,
		level : 2,
		school : "Illus",
		time : "1 min",
		range : "30 ft",
		components : "V,S,M\u2020",
		compMaterial : "A small bit of honeycomb and jade dust worth at least 10 gp, which the spell consumes",
		duration : "Till dispelled",
		description : "Implant a 25 word message in an object that is uttered on chosen trigger condition (10g cons.)",
		descriptionFull : "You implant a message within an object in range, a message that is uttered when a trigger condition is met. Choose an object that you can see and that isn't being worn or carried by another creature. Then speak the message, which must be 25 words or less, though it can be delivered over as long as 10 minutes. Finally, determine the circumstance that will trigger the spell to deliver your message." + "\n   " + "When that circumstance occurs, a magical mouth appears on the object and recites the message in your voice and at the same volume you spoke. If the object you chose has a mouth or something that looks like a mouth (for example, the mouth of a statue), the magical mouth appears there so that words appear to come from the object's mouth. When you cast this spell, you can have the spell end after it delivers its message, or it can remain and repeats its message whenever the trigger occurs." + "\n   " + "The triggering circumstance can be as general or as detailed as you like, though it must be based on visual or audible conditions that occur within 30 feet of the object. For example, you could instruct the mouth to speak when any creature moves within 30 feet of the object or when a silver bell rings within 30 feet of it."
	},
	"magic weapon" : {
		name : "Magic Weapon",
		classes : ["paladin", "wizard"],
		source : [["SRD", 161], ["P", 257]],
		level : 2,
		school : "Trans",
		time : "1 bns",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "1 nonmagical weapon becomes magical with +1 bonus to attack and damage; SL4: +2, SL6: +3",
		descriptionFull : "You touch a nonmagical weapon. Until the spell ends, that weapon becomes a magic weapon with a +1 bonus to attack rolls and damage rolls." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the bonus increases to +2. When you use a spell slot of 6th level or higher, the bonus increases to +3."
	},
	"major image" : {
		name : "Major Image",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 162], ["P", 258]],
		level : 3,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A bit of fleece",
		duration : "Conc, 10 min",
		description : "20-ft cube illusion includes visible, audible, olfactory, temperature; 1 a move it; SL6: no conc.; see B",
		descriptionFull : "You create the image of an object, a creature, or some other visible phenomenon that is no larger than a 20-foot cube. The image appears at a spot that you can see within range and lasts for the duration. It seems completely real, including sounds, smells, and temperature appropriate to the thing depicted. You can't create sufficient heat or cold to cause damage, a sound loud enough to deal thunder damage or deafen a creature, or a smell that might sicken a creature (like a troglodyte's stench)." + "\n   " + "As long as you are within range of the illusion, you can use your action to cause the image to move to any other spot within range. As the image changes location, you can alter its appearance so that its movements appear natural for the image. For example, if you create an image of a creature and move it, you can alter the image so that it appears to be walking. Similarly, you can cause the illusion to make different sounds at different times, even making it carry on a conversation, for example." + "\n   " + "Physical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and its other sensory qualities become faint to the creature." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the spell lasts until dispelled, without requiring your concentration."
	},
	"mass cure wounds" : {
		name : "Mass Cure Wounds",
		classes : ["bard", "cleric", "druid"],
		source : [["SRD", 162], ["P", 258]],
		level : 5,
		school : "Evoc", // errata from conjuration
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "6 living creatures within 30-ft rad heal 3d8+1d8/SL+spellcasting ability modifier HP",
		descriptionFull : "A wave of healing energy washes out from a point of your choice within range. Choose up to six creatures in a 30-foot-radius sphere centered on that point. Each target regains hit points equal to 3d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs." + AtHigherLevels + "When you cast this spell using a spell slot of 6th level or higher, the healing increases by 1d8 for each slot level above 5th."
	},
	"mass heal" : {
		name : "Mass Heal",
		classes : ["cleric"],
		source : [["SRD", 163], ["P", 258]],
		level : 9,
		school : "Evoc", // errata from conjuration
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Split 700 HP of healing over creatures in range; also cured of blindness, deafness, and all diseases",
		descriptionFull : "A flood of healing energy flows from you into injured creatures around you. You restore up to 700 hit points, divided as you choose among any number of creatures that you can see within range. Creatures healed by this spell are also cured of all diseases and any effect making them blinded or deafened. This spell has no effect on undead or constructs."
	},
	"mass healing word" : {
		name : "Mass Healing Word",
		classes : ["cleric"],
		source : [["SRD", 163], ["P", 258]],
		level : 3,
		school : "Evoc",
		time : "1 bns",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		description : "6 living creatures heal 1d4+1d4/SL+spellcasting ability modifier HP",
		descriptionFull : "As you call out words of restoration, up to six creatures of your choice that you can see within range regain hit points equal to 1d4 + your spellcasting ability modifier. This spell has no effect on undead or constructs." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the healing increases by 1d4 for each slot level above 3rd."
	},
	"mass suggestion" : {
		name : "Mass Suggestion",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 163], ["P", 258]],
		level : 6,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,M",
		compMaterial : "A snake's tongue and either a bit of honeycomb or a drop of sweet oil",
		duration : "24 h",
		save : "Wis",
		description : "12 crea save or follow stated course of action; SL7: 10 day; SL8: 30 days; SL9: 366 days; see book",
		descriptionFull : "You suggest a course of activity (limited to a sentence or two) and magically influence up to twelve creatures of your choice that you can see within range and that can hear and understand you. Creatures that can't be charmed are immune to this effect. The suggestion must be worded in such a manner as to make the course of action sound reasonable. Asking the creature to stab itself, throw itself onto a spear, immolate itself, or do some other obviously harmful act automatically negates the effect of the spell." + "\n   " + "Each target must make a Wisdom saving throw. On a failed save, it pursues the course of action you described to the best of its ability. The suggested course of action can continue for the entire duration. If the suggested activity can be completed in a shorter time, the spell ends when the subject finishes what it was asked to do." + "\n   " + "You can also specify conditions that will trigger a special activity during the duration. For example, you might suggest that a group of soldiers give all their money to the first beggar they meet. If the condition isn't met before the spell ends, the activity isn't performed." + "\n   " + "If you or any of your companions damage a creature affected by this spell, the spell ends for that creature." + AtHigherLevels + "When you cast this spell using a 7th-level spell slot, the duration is 10 days. When you use an 8th-level spell slot, the duration is 30 days. When you use a 9th-level spell slot, the duration is a year and a day."
	},
	"maze" : {
		name : "Maze",
		classes : ["wizard"],
		source : [["SRD", 163], ["P", 258]],
		level : 8,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		save : "Int",
		description : "1 crea banished to labyrinthine demiplane; DC 20 Int check each rnd to escape; appears in same spot",
		descriptionFull : "You banish a creature that you can see within range into a labyrinthine demiplane. The target remains there for the duration or until it escapes the maze." + "\n   " + "The target can use its action to attempt to escape. When it does so, it makes a DC 20 Intelligence check. If it succeeds, it escapes, and the spell ends (a minotaur or goristro demon automatically succeeds)." + "\n   " + "When the spell ends, the target reappears in the space it left or, if that space is occupied, in the nearest unoccupied space."
	},
	"meld into stone" : {
		name : "Meld into Stone",
		classes : ["cleric", "druid"],
		source : [["SRD", 163], ["P", 259]],
		ritual : true,
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "8 h",
		description : "I merge into a stone object large enough to contain me; can't see through the stone; see book",
		descriptionFull : "You step into a stone object or surface large enough to fully contain your body, melding yourself and all the equipment you carry with the stone for the duration. Using your movement, you step into the stone at a point you can touch. Nothing of your presence remains visible or otherwise detectable by nonmagical senses." + "\n   " + "While merged with the stone, you can't see what occurs outside it, and any Wisdom (Perception) checks you make to hear sounds outside it are made with disadvantage. You remain aware of the passage of time and can cast spells on yourself while merged in the stone. You can use your movement to leave the stone where you entered it, which ends the spell. You otherwise can't move." + "\n   " + "Minor physical damage to the stone doesn't harm you, but its partial destruction or a change in its shape (to the extent that you no longer fit within it) expels you and deals 6d6 bludgeoning damage to you. The stone's complete destruction (or transmutation into a different substance) expels you and deals 50 bludgeoning damage to you. If expelled, you fall prone in an unoccupied space closest to where you first entered."
	},
	"melf's acid arrow" : {
		name : "Melf's Acid Arrow",
		nameAlt : "Acid Arrow",
		classes : ["wizard"],
		source : [["SRD", 114], ["P", 259]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "Powdered rhubarb leaf and an adder's stomach",
		duration : "Instantaneous",
		description : "Spell attack for 4d4+1d4/SL and 2d4+1d4/SL Acid dmg next turn; on miss half dmg no next turn",
		descriptionFull : "A shimmering green arrow streaks toward a target within range and bursts in a spray of acid. Make a ranged spell attack against the target. On a hit, the target takes 4d4 acid damage immediately and 2d4 acid damage at the end of its next turn. On a miss, the arrow splashes the target with acid for half as much of the initial damage and no damage at the end of its next turn." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the damage (both initial and later) increases by 1d4 for each slot level above 2nd."
	},
	"mending" : {
		name : "Mending",
		classes : ["bard", "cleric", "druid", "sorcerer", "wizard"],
		source : [["SRD", 164], ["P", 259]],
		level : 0,
		school : "Trans",
		time : "1 min",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Two lodestones",
		duration : "Instantaneous",
		description : "Repair a single broken object no larger than 1 cu ft; can't restore magic to broken magic item",
		descriptionFull : "This spell repairs a single break or tear in an object you touch, such as broken chain link, two halves of a broken key, a torn clack, or a leaking wineskin. As long as the break or tear is no larger than 1 foot in any dimension, you mend it, leaving no trace of the former damage." + "\n   " + "This spell can physically repair a magic item or construct, but the spell can't restore magic to such an object."
	},
	"message" : {
		name : "Message",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 164], ["P", 259]],
		level : 0,
		school : "Trans",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A short piece of copper wire",
		duration : "1 rnd",
		description : "1 crea I point to hears whispered message and can reply with a whisper; nobody can overhear",
		descriptionFull : "You point your finger toward a creature within range and whisper a message. The target (and only the target) hears the message and can reply in a whisper that only you can hear." + "\n   " + "You can cast this spell through solid objects if you are familiar with the target and know it is beyond the barrier. Magical silence, 1 foot of stone, 1 inch of common metal, a thin sheet of lead, or 3 feet of wood blocks the spell. The spell doesn't have to follow a straight line and can travel freely around corners or through openings."
	},
	"meteor swarm" : {
		name : "Meteor Swarm",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 164], ["P", 259]],
		level : 9,
		school : "Evoc",
		time : "1 a",
		range : "1 mile",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "4\u00D7 40-ft rad all 20d6 Bludgeoning dmg and 20d6 Fire dmg; save halves; areas do not stack",
		descriptionFull : "Blazing orbs of fire plummet to the ground at four different points you can see within range. Each creature in a 40-foot-radius sphere centered on each point you choose must make a Dexterity saving throw. The sphere spreads around corners. A creature takes 20d6 fire damage and 20d6 bludgeoning damage on a failed save, or half as much damage on a successful one. A creature in the area of more than one fiery burst is affected only once." + "\n   " + "The spell damages objects in the area and ignites flammable objects that aren't being worn or carried."
	},
	"mind blank" : {
		name : "Mind Blank",
		classes : ["bard", "wizard"],
		source : [["SRD", 164], ["P", 259]],
		level : 8,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "24 h",
		description : "1 crea immune to charms, psychic damage, divination, mind reading, and any mind altering effects",
		descriptionFull : "Until the spell ends, one willing creature you touch is immune to psychic damage, any effect that would sense its emotions or read its thoughts, divination spells, and the charmed condition. The spell even foils wish spells and spells or effects of similar power used to affect the target's mind or to gain information about the target."
	},
	"minor illusion" : {
		name : "Minor Illusion",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 164], ["P", 260]],
		level : 0,
		school : "Illus",
		time : "1 a",
		range : "30 ft",
		components : "S,M",
		compMaterial : "A bit of fleece",
		duration : "1 min (D)",
		description : "5-ft cube illusion includes visible or audible; Int(Investigation) check vs. Spell DC; see book",
		descriptionFull : "You create a sound or an image of an object within range that lasts for the duration. The illusion also ends if you dismiss it as an action or cast this spell again." + "\n   " + "If you create a sound, its volume can range from a whisper to a scream. It can be your voice, someone else's voice, a lion's roar, a beating of drums, or any other sound you choose. The sound continues unabated throughout the duration, or you can make discrete sounds at different times before the spell ends." + "\n   " + "If you create an image of an object - such as a chair, muddy footprints, or a small chest - it must be no larger than a 5-foot cube. The image can't create sound, light, smell, or any other sensory effect. Physical interaction with the image reveals it to be an illusion, because things can pass through it." + "\n   " + "If a creature uses its action to examine the sound or image, the creature can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the illusion becomes faint to the creature."
	},
	"mirage arcane" : {
		name : "Mirage Arcane",
		classes : ["bard", "druid", "wizard"],
		source : [["SRD", 165], ["P", 260]],
		level : 7,
		school : "Illus",
		time : "10 min",
		range : "Sight",
		components : "V,S",
		duration : "10 days",
		description : "1 sq mile alter terrain illusion includes visible, audible, olfactory, tactile; can make difficult ter.; see B",
		descriptionMetric : "260 ha alter terrain illusion includes visible, audible, olfactory, tactile; can make difficult ter.; see B",
		descriptionFull : "You make terrain in an area up to 1 mile square look, sound, smell, and even feel like some other sort of terrain. The terrain's general shape remains the same, however. Open fields or a road could be made to resemble a swamp, hill, crevasse, or some other difficult or impassable terrain. A pond can be made to seem like a grassy meadow, a precipice like a gentle slope, or a rock-strewn gully like a wide and smooth road." + "\n   " + "Similarly, you can alter the appearance of structures, or add them where none are present. The spell doesn't disguise, conceal, or add creatures." + "\n   " + "The illusion includes audible, visual, tactile, and olfactory elements, so it can turn clear ground into difficult terrain (or vice versa) or otherwise impede movement through the area. Any piece of the illusory terrain (such as a rock or stick) that is removed from the spell's area disappears immediately." + "\n   " + "Creatures with truesight can see through the illusion to the terrain's true form, however, all other elements of the illusion remain, so while the creature is aware of the illusion's presence, the creature can still physically interact with the illusion."
	},
	"mirror image" : {
		name : "Mirror Image",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 165], ["P", 260]],
		level : 2,
		school : "Illus",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "1 min (D)",
		description : "Create three illusionary duplicates of me; destroyed if hit; randomize attacks; AC 10 + my Dex mod",
		descriptionFull : "Three illusory duplicates of yourself appear in your space. Until the spell ends, the duplicates move with you and mimic your actions, shifting position so it's impossible to track which image is real. You can use your action to dismiss the illusory duplicates." + "\n   " + "Each time a creature targets you with an attack during the spell's duration, roll a d20 to determine whether the attack instead targets one of your duplicates." + "\n   " + "If you have three duplicates, you must roll a 6 or higher to change the attack's target to a duplicate. With two duplicates, you must roll an 8 or higher. With one duplicate, you must roll an 11 or higher." + "\n   " + "A duplicate's AC equals 10 + your Dexterity modifier. If an attack hits a duplicate, the duplicate is destroyed. A duplicate can be destroyed only by an attack that hits it. It ignores all other damage and effects. The spell ends when all three duplicates are destroyed." + "\n   " + "A creature is unaffected by this spell if it can't see, if it relies on senses other than sight, such as blindsight, or if it can perceive illusions as false, as with truesight."
	},
	"mislead" : {
		name : "Mislead",
		classes : ["bard", "wizard"],
		source : [["SRD", 165], ["P", 260]],
		level : 5,
		school : "Illus",
		time : "1 a",
		range : "Self",
		components : "S",
		duration : "Conc, 1 h",
		description : "I go invisible; create illusionary duplicate of me, 1 a move it, bns a switch between its senses and mine",
		descriptionFull : "You become invisible at the same time that an illusory double of you appears where you are standing. The double lasts for the duration, but the invisibility ends if you attack or cast a spell." + "\n   " + "You can use your action to move your illusory double up to twice your speed and make it gesture, speak, and behave in whatever way you choose. You can see through its eyes and hear through its ears as if you were located where it is. On each of your turns as a bonus action, you can switch from using its senses to using your own, or back again. While you are using its senses, you are blinded and deafened in regard to your own surroundings."
	},
	"misty step" : {
		name : "Misty Step",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 165], ["P", 260]],
		level : 2,
		school : "Conj",
		time : "1 bns",
		range : "Self",
		components : "V",
		duration : "Instantaneous",
		description : "I teleport 30 feet to a unoccupied space I can see",
		descriptionFull : "Briefly surrounded by silvery mist, you teleport up to 30 feet to an unoccupied space that you can see."
	},
	"modify memory" : {
		name : "Modify Memory",
		classes : ["bard", "wizard"],
		source : [["SRD", 166], ["P", 261]],
		level : 5,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 crea save or charmed, alter 1 memory of last (SL6: 7, SL7: 30, SL8: 365) day; SL:9 any memory",
		descriptionFull : "You attempt to reshape another creature's memories. One creature that you can see must make a Wisdom saving throw. If you are fighting the creature, it has advantage on the saving throw. On a failed save, the target becomes charmed by you for the duration. The charmed target is incapacitated and unaware of its surroundings, though it can still hear you. If it takes any damage or is targeted by another spell, this spell ends, and none of the target's memories are modified." + "\n   " + "While this charm lasts, you can affect the target's memory of an event that it experienced within the last 24 hours and that lasted no more than 10 minutes. You can permanently eliminate all memory of the event, allow the target to recall the event with perfect clarity and exacting detail, change its memory of the details of the event, or create a memory of some other event." + "\n   " + "You must speak to the target to describe how its memories are affected, and it must be able to understand your language for the modified memories to take root. Its mind fills in any gaps in the details of your description. If the spell ends before you have finished describing the modified memories, the creature's memory isn't altered. Otherwise, the modified memories take hold when the spell ends." + "\n   " + "A modified memory doesn't necessarily affect how a creature behaves, particularly if the memory contradicts the creature's natural inclinations, alignment, or beliefs. An illogical modified memory, such as implanting a memory of how much the creature enjoyed dousing itself in acid, is dismissed, perhaps as a bad dream. The DM might deem a modified memory too nonsensical to affect a creature in a significant manner." + "\n   " + "A remove curse or greater restoration spell cast on the target restores the creature's true memory." + AtHigherLevels + "If you cast this spell using a spell slot of 6th level or higher, you can alter the target's memories of an event that took place up to 7 days ago (6th level), 30 days ago (7th level), 1 year ago (8th level), or any time in the creature's past (9th level)."
	},
	"moonbeam" : {
		name : "Moonbeam",
		classes : ["druid"],
		source : [["SRD", 166], ["P", 261]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "Several seeds of any moonseed plant and a piece of opalescent feldspar",
		duration : "Conc, 1 min",
		save : "Con",
		description : "5-ft rad 40-ft high with dim light; all save or 2d10+1d10/SL; 1 a to move it 60 ft; see book",
		descriptionFull : "A silvery beam of pale light shines down in a 5-foot radius, 40-foot-high cylinder centered on a point within range. Until the spell ends, dim light fills the cylinder." + "\n   " + "When a creature enters the spell's area for the first time on a turn or starts its turn there, it is engulfed in ghostly flames that cause searing pain, and it must make a Constitution saving throw. It takes 2d10 radiant damage on a failed save, or half as much damage on a successful one." + "\n   " + "A shapechanger makes its saving throw with disadvantage. If it fails, it also instantly reverts to its original form and can't assume a different form until it leaves the spell's light." + "\n   " + "On each of your turns after you cast this spell, you can use an action to move the beam up to 60 feet in any direction." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the damage increases by 1d10 for each slot level above 2nd."
	},
	"mordenkainen's faithful hound" : {
		name : "Mordenkainen's Faithful Hound",
		nameShort : "Mor. Faithful Hound",
		nameAlt : "Faithful Hound",
		classes : ["wizard"],
		source : [["SRD", 142], ["P", 261]],
		level : 4,
		school : "Conj",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A tiny silver whistle, a piece of bone, and a thread",
		duration : "8 h (D)",
		description : "Invisible, immobile dog melee atks as spell atk for 4d8 Piercing dmg; sees invisible/ethereal; see book",
		descriptionFull : "You conjure a phantom watchdog in an unoccupied space that you can see within range, where it remains for the duration, until you dismiss it as an action, or until you move more than 100 feet away from it." + "\n   " + "The hound is invisible to all creatures except you and can't be harmed. When a Small or larger creature comes within 30 feet of it without first speaking the password that you specify when you cast this spell, the hound starts barking loudly. The hound sees invisible creatures and can see into the Ethereal Plane. It ignores illusions." + "\n   " + "At the start of each of your turns, the hound attempts to bite one creature within 5 feet of it that is hostile to you. The hound's attack bonus is equal to your spellcasting ability modifier + your proficiency bonus. On a hit, it deals 4d8 piercing damage."
	},
	"mordenkainen's magnificent mansion" : {
		name : "Mordenkainen's Magnificent Mansion",
		nameShort : "Mor. Magni. Mansion",
		nameAlt : "Magnificent Mansion",
		classes : ["bard", "wizard"],
		source : [["SRD", 162], ["P", 261]],
		level : 7,
		school : "Conj",
		time : "1 min",
		range : "300 ft",
		components : "V,S,M\u0192",
		compMaterial : "A miniature portal carved from ivory, a small piece of polished marble, and a tiny silver spoon, each item worth at least 5 gp",
		duration : "24 h",
		description : "Create extradimensional mansion with rooms, food and servants to serve 100 people; see book (15gp)",
		descriptionFull : "You conjure an extradimensional dwelling in range that lasts for the duration. You choose where its one entrance is located. The entrance shimmers faintly and is 5 feet wide and 10 feet tall. You and any creature you designate when you cast the spell can enter the extradimensional dwelling as long as the portal remains open. You can open or close the portal if you are within 30 feet of it. While closed, the portal is invisible." + "\n   " + "Beyond the portal is a magnificent foyer with numerous chambers beyond. The atmosphere is clean, fresh, and warm." + "\n   " + "You can create any floor plan you like, but the space can't exceed 50 cubes, each cube being 10 feet on each side. The place is furnished and decorated as you choose. It contains sufficient food to serve a nine course banquet for up to 100 people. A staff of 100 near-transparent servants attends all who enter. You decide the visual appearance of these servants and their attire. They are completely obedient to your orders. Each servant can perform any task a normal human servant could perform, but they can't attack or take any action that would directly harm another creature. Thus the servants can fetch things, clean, mend, fold clothes, light fires, serve food, pour wine, and so on. The servants can go anywhere in the mansion but can't leave it. Furnishings and other objects created by this spell dissipate into smoke if removed from the mansion. When the spell ends, any creatures inside the extradimensional space are expelled into the open spaces nearest to the entrance."
	},
	"mordenkainen's private sanctum" : {
		name : "Mordenkainen's Private Sanctum",
		nameShort : "Mor. Private Sanctum",
		nameAlt : "Private Sanctum",
		classes : ["wizard"],
		source : [["SRD", 171], ["P", 262]],
		level : 4,
		school : "Abjur",
		time : "10 min",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A thin sheet of lead, a piece of opaque glass, a wad of cotton or cloth, and powdered chrysolite",
		duration : "24 h (D)",
		description : "Up to 100+100/SL ft cube is magically secured in chosen way; see book",
		descriptionFull : "You make an area within range magically secure. The area is a cube that can be as small as 5 feet to as large as 100 feet on each side. The spell lasts for the duration or until you use an action to dismiss it." + "\n   " + "When you cast the spell, you decide what sort of security the spell provides, choosing any or all of the following properties." + "\n " + "\u2022 Sound can't pass through the barrier at the edge of the warded area." + "\n " + "\u2022 The barrier of the warded area appears dark and foggy, preventing vision (including darkvision) through it." + "\n " + "\u2022 Sensors created by divination spells can't appear inside the protected area or pass through the barrier at its perimeter." + "\n " + "\u2022 Creatures in the area can't be targeted by divination spells." + "\n " + "\u2022 Nothing can teleport into or out of the warded area." + "\n " + "\u2022 Planar travel is blocked within the warded area." + "\n\n" + "Casting this spell on the same spot every day for a year makes this effect permanent." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, you can increase the size of the cube by 100 feet for each slot level beyond 4th. Thus you could protect a cube that can be up to 200 feet on one side by using a spell slot of 5th level."
	},
	"mordenkainen's sword" : {
		name : "Mordenkainen's Sword",
		nameAlt : "Arcane Sword",
		classes : ["bard", "wizard"],
		source : [["SRD", 119], ["P", 262]],
		level : 7,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M\u0192",
		compMaterial : "A miniature platinum sword with a grip and pommel of copper and zinc, worth 250 gp",
		duration : "Conc, 1 min",
		description : "Hovering sword makes melee spell attacks for 3d10 Force dmg; bns a to move 20 ft and/or attack",
		descriptionFull : "You create a sword-shaped plane of force that hovers within range. It lasts for the duration." + "\n   " + "When the sword appears, you make a melee spell attack against a target of your choice within 5 feet of the sword. On a hit. the target takes 3d10 force damage. Until the spell ends, you can use a bonus action on each of your turns to move the sword up to 20 feet to a spot you can see and repeat this attack against the same target or a different one."
	},
	"move earth" : {
		name : "Move Earth",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 166], ["P", 263]],
		level : 6,
		school : "Trans",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "An iron blade and a small bag containing a mixture of soils - clay, loam, and sand",
		duration : "Conc, 2 h",
		description : "Every 10 min of concentration, gradually reshape 40 cu ft of dirt, sand, or clay; see book",
		descriptionFull : "Choose an area of terrain no larger than 40 feet on a side within range. You can reshape dirt, sand, or clay in the area in any manner you choose for the duration. You can raise or lower the area's elevation, create or fill in a trench, erect or flatten a wall, or form a pillar. The extent of any such changes can't exceed half the area's largest dimension. So, if you affect a 40-foot square, you can create a pillar up to 20 feet high, raise or lower the square's elevation by up to 20 feet, dig a trench up to 20 feet deep, and so on. It takes 10 minutes for these changes to complete." + "\n   " + "At the end of every 10 minutes you spend concentrating on the spell, you can choose a new area of terrain to affect." + "\n   " + "Because the terrain's transformation occurs slowly, creatures in the area can't usually be trapped or injured by the ground's movement." + "\n   " + "This spell can't manipulate natural stone or stone construction. Rocks and structures shift to accommodate the new terrain. If the way you shape the terrain would make a structure unstable, it might collapse." + "\n   " + "Similarly, this spell doesn't directly affect plant growth. The moved earth carries any plants along with it."
	},
	"nondetection" : {
		name : "Nondetection",
		classes : ["bard", "ranger", "wizard"],
		source : [["SRD", 167], ["P", 263]],
		level : 3,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A pinch of diamond dust worth 25 gp sprinkled over the target, which the spell consumes",
		duration : "8 h",
		description : "1 crea or object up to 10 cu ft hidden from all divination magic (25gp cons.)",
		descriptionFull : "For the duration, you hide a target that you touch from divination magic. The target can be a willing creature or a place or an object no larger than 10 feet in any dimension. The target can't be targeted by any divination magic or perceived through magical scrying sensors."
	},
	"nystul's magic aura" : {
		name : "Nystul's Magic Aura",
		nameAlt : "Arcanist's Magic Aura",
		classes : ["wizard"],
		source : [["SRD", 119], ["P", 263]],
		level : 2,
		school : "Illus",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A small square of silk",
		duration : "24 h",
		description : "Create a false magic item with chosen properties or shroud a magical item from detection",
		descriptionFull : "You place an illusion on a creature or an object you touch so that divination spells reveal false information about it. The target can be a willing creature or an object that isn't being carried or worn by another creature." + "\n   " + "When you cast the spell, choose one or both of the following effects. The effect lasts for the duration. If you cast this spell on the same creature or object every day for 30 days, placing the same effect on it each time, the illusion lasts until it is dispelled." + "\n   " + toUni("False Aura") + ": You change the way the target appears to spells and magical effects, such as detect magic, that detect magical auras. You can make a nonmagical object appear magical, a magical object appear nonmagical, or change the object's magical aura so that it appears to belong to a specific school of magic that you choose. When you use this effect on an object, you can make the false magic apparent to any creature that handles the item." + "\n   " + toUni("Mask") + ": You change the way the target appears to spells and magical effects that detect creature types, such as a paladin's Divine Sense or the trigger of a symbol spell. You choose a creature type and other spells and magical effects treat the target as if it were a creature of that type or of that alignment."
	},
	"otiluke's freezing sphere" : {
		name : "Otiluke's Freezing Sphere",
		nameAlt : "Freezing Sphere",
		classes : ["wizard"],
		source : [["SRD", 147], ["P", 263]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "300 ft",
		components : "V,S,M",
		compMaterial : "A small crystal sphere",
		duration : "Instantaneous",
		save : "Con",
		description : "60-ft rad all 10d6+1d6/SL Cold dmg; save halves; freezes water; can save up to 1 min before using",
		descriptionFull : "A frigid globe of cold energy streaks from your fingertips to a point of your choice within range, where it explodes in a 60-foot-radius sphere. Each creature within the area must make a Constitution saving throw. On a failed save, a creature takes 10d6 cold damage. On successful save, it takes half as much damage." + "\n   " + "If the globe strikes a body of water or a liquid that is principally water (not including water-based creatures), it freezes the liquid to a depth of 6 inches over an area 30 feet square. This ice lasts for 1 minute. Creatures that were swimming on the surface of frozen water are trapped in the ice. A trapped creature can use an action to make a Strength check against your spell save DC to break free." + "\n   " + "You can refrain from firing the globe after completing the spell, if you wish. A small globe about the size of a sling stone, cool to the touch, appears in your hand. At any time, you or a creature you give the globe to can throw the globe (to a range of 40 feet) or hurl it with a sling (to the sling's normal range). It shatters on impact, with the same effect as the normal casting of the spell. You can also set the globe down without shattering it. After 1 minute, if the globe hasn't already shattered, it explodes." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the damage increases by 1d6 for each slot level above 6th."
	},
	"otiluke's resilient sphere" : {
		name : "Otiluke's Resilient Sphere",
		nameAlt : "Resilient Sphere",
		classes : ["wizard"],
		source : [["SRD", 175], ["P", 264]],
		level : 4,
		school : "Evoc",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A hemispherical piece of clear crystal and a matching hemispherical piece of gum arabic",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "1 crea/obj up to Large save or enclosed in impenetrable sphere; can be moved as hamsterball ",
		descriptionFull : "A sphere of shimmering force encloses a creature or object of Large size or smaller within range. An unwilling creature must make a Dexterity saving throw. On a failed save, the creature is enclosed for the duration." + "\n   " + "Nothing, not physical objects, energy, or other spell effects, can pass through the barrier, in or out, though a creature in the sphere can breathe there. The sphere is immune to all damage, and a creature or object inside can't be damaged by attacks or effects originating from outside, nor can a creature inside the sphere damage anything outside it." + "\n   " + "The sphere is weightless and just large enough to contain the creature or object inside. An enclosed creature can use its action to push against the sphere's walls and thus roll the sphere at up to half the creature's speed. Similarly, the globe can be picked up and moved by other creatures." + "\n   " + "A disintegrate spell targeting the globe destroys it without harming anything inside it."
	},
	"otto's irresistible dance" : {
		name : "Otto's Irresistible Dance",
		nameAlt : "Irresistible Dance",
		classes : ["bard", "wizard"],
		source : [["SRD", 158], ["P", 264]],
		level : 6,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "1 crea dances in place, can't move, dis. on attacks/saves, adv. on atks vs. target; Wis save each rnd",
		descriptionFull : "Choose one creature that you can see within range. The target begins a comic dance in place - shuffling, tapping its feet, and capering for the duration. Creatures that can't be charmed are immune to this spell." + "\n   " + "A dancing creature must use all its movement to dance without leaving its space and has disadvantage on Dexterity saving throws and attack rolls. While the target is affected by this spell, other creatures have advantage on attack rolls against it. As an action, a dancing creature makes a Wisdom saving throw to regain control of itself. On a successful save, the spell ends."
	},
	"pass without trace" : {
		name : "Pass Without Trace",
		classes : ["druid", "ranger"],
		source : [["SRD", 167], ["P", 264]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "Ashes from a burned leaf of mistletoe and a sprig of spruce",
		duration : "Conc, 1 h",
		description : "Any within 30-ft rad +10 Dex(Stealth) checks, leave no tracks, can't be tracked by nonmagical means",
		descriptionFull : "A veil of shadows and silence radiates from you, masking you and your companions from detection. For the duration, each creature you choose within 30 feet of you (including you) has a +10 bonus to Dexterity (Stealth) checks and can't be tracked except by magical means. A creature that receives this bonus leaves behind no tracks or other traces of its passage."
	},
	"passwall" : {
		name : "Passwall",
		classes : ["wizard"],
		source : [["SRD", 167], ["P", 264]],
		level : 5,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A pinch of sesame seeds",
		duration : "1 h",
		description : "Create a passage (max. 5 ft wide, 8 ft tall, 20 ft deep) in a wooden, plaster or stone surface for 1 h",
		descriptionFull : "A passage appears at a point of your choice that you can see on a wooden, plaster, or stone surface (such as a wall, a ceiling, or a floor) within range, and lasts for the duration. You choose the opening's dimensions - up to 5 feet wide, 8 feet tall, and 20 feet deep. The passage creates no instability in a structure surrounding it." + "\n   " + "When the opening disappears, any creatures or objects still in the passage created by the spell are safely ejected to an unoccupied space nearest to the surface on which you cast the spell."
	},
	"phantasmal killer" : {
		name : "Phantasmal Killer",
		classes : ["wizard"],
		source : [["SRD", 167], ["P", 265]],
		level : 4,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 crea save or frightened; end of each turn save to end or 4d10+1d10/SL Psychic dmg", // errata from start of turn to end of turn
		descriptionFull : "You tap into the nightmares of a creature you can see within range and create an illusory manifestation of its deepest fears, visible only to that creature. The target must make a Wisdom saving throw. On a failed save, the target becomes frightened for the duration. At the end of each of the target's turns before the spell ends, the target must succeed on a Wisdom saving throw or take 4d10 psychic damage. On a successful save, the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d10 for each slot level above 4th."
	},
	"phantom steed" : {
		name : "Phantom Steed",
		classes : ["wizard"],
		source : [["SRD", 167], ["P", 265]],
		ritual : true,
		level : 3,
		school : "Illus",
		time : "1 min",
		range : "30 ft",
		components : "V,S",
		duration : "1 h (D)",
		description : "Summon quasi-real steed with 100 ft speed (10 mph); I designate rider; spells ends if it takes dmg",
		descriptionFull : "A Large quasi-real, horse-like creature appears on the ground in an unoccupied space of your choice within range. You decide the creature's appearance, but it is equipped with a saddle, bit, and bridle. Any of the equipment created by the spell vanishes in a puff of smoke if it is carried more than 10 feet away from the steed." + "\n   " + "For the duration, you or a creature you choose can ride the steed. The creature uses the statistics for a riding horse, except it has a speed of 100 feet and can travel 10 miles in an hour, or 13 miles at a fast pace. When the spell ends, the steed gradually fades, giving the rider 1 minute to dismount. The spell ends if you use an action to dismiss it or if the steed takes any damage."
	},
	"planar ally" : {
		name : "Planar Ally",
		classes : ["cleric"],
		source : [["SRD", 168], ["P", 265]],
		level : 6,
		school : "Conj",
		time : "10 min",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Otherwordly entity sends celestial, elemental or fiend to a location near me; see book",
		descriptionFull : "You beseech an otherworldly entity for aid. The being must be known to you - a god, a primordial, a demon prince, or some other being of cosmic power. That entity sends a celestial, an elemental, or a fiend loyal to it to aid you, making the creature appear in an unoccupied space within range. If you know a specific creature's name, you can speak that name when you cast this spell to request that creature, though you might get a different creature anyway (DM's choice)." + "\n   " + "When the creature appears, it is under no compulsion to behave in any particular way. You can ask the creature to perform a service in exchange for payment, but it isn't obliged to do so. The requested task could range from simple (fly us across the chasm, or help us fight a battle) to complex (spy on our enemies, or protect us during our foray into the dungeon). You must be able to communicate with the creature to bargain for its services." + "\n   " + "Payment can take a variety of forms. A celestial might require a sizable donation of gold or magic items to an allied temple, while a fiend might demand a living sacrifice or a gift of treasure. Some creatures might exchange their service for a quest undertaken by you." + "\n   " + "As a rule of thumb, a task that can be measured in minutes requires a payment worth 100 gp per minute. A task measured in hours requires 1,000 gp per hour. And a task measured in days (up to 10 days) requires 10,000 gp per day. The DM can adjust these payments based on the circumstances under which you cast the spell. If the task is aligned with the creature's ethos, the payment might be halved or even waived. Nonhazardous tasks typically require only half the suggested payment, while especially dangerous tasks might require a greater gift. Creatures rarely accept tasks that seem suicidal." + "\n   " + "After the creature completes the task, or when the agreed-upon duration of service expires, the creature returns to its home plane after reporting back to you, if appropriate to the task and if possible. If you are unable to agree on a price for the creature's service, the creature immediately returns to its home plane." + "\n   " + "A creature enlisted to join your group counts as a member of it, receiving a full share of experience points awarded."
	},
	"planar binding" : {
		name : "Planar Binding",
		classes : ["bard", "cleric", "druid", "wizard"],
		source : [["SRD", 168], ["P", 265]],
		level : 5,
		school : "Abjur",
		time : "1 h",
		range : "60 ft",
		components : "V,S,M\u2020",
		compMaterial : "A jewel worth at least 1,000 gp, which the spell consumes",
		duration : "24 h",
		save : "Cha",
		description : "1 celestial/elem/fey/fiend save or bound; SL6: 10, SL7: 30, SL8: 180, SL9: 366 days (1000gp cons.)",
		descriptionFull : "With this spell, you attempt to bind a celestial, an elemental, a fey, or a fiend to your service. The creature must be within range for the entire casting of the spell. (Typically, the creature is first summoned into the center of an inverted magic circle in order to keep it trapped while this spell is cast.) At the completion of the casting, the target must make a Charisma saving throw. On a failed save, it is bound to serve you for the duration. If the creature was summoned or created by another spell, that spell's duration is extended to match the duration of this spell." + "\n   " + "A bound creature must follow your instructions to the best of its ability. You might command the creature to accompany you on an adventure, to guard a location, or to deliver a message. The creature obeys the letter of your instructions, but if the creature is hostile to you, it strives to twist your words to achieve its own objectives. If the creature carries out your instructions completely before the spell ends, it travels to you to report this fact if you are on the same plane of existence. If you are on a different plane of existence, it returns to the place where you bound it and remains there until the spell ends." + AtHigherLevels + "When you cast this spell using a spell slot of a higher level, the duration increases to 10 days with a 6th-level slot, to 30 days with a 7th-level slot, to 180 days with an 8th-level slot, and to a year and a day with a 9th-level spell slot."
	},
	"plane shift" : {
		name : "Plane Shift",
		classes : ["cleric", "druid", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 168], ["P", 266]],
		level : 7,
		school : "Conj",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "A forked, metal rod worth at least 250 gp, atttuned to a particular plane of existence",
		duration : "Instantaneous",
		save : "Cha",
		description : "Me + 8 willing crea teleport to different plane; or spell attack + save or transported to random plane",
		descriptionFull : "You and up to eight willing creatures who link hands in a circle are transported to a different plane of existence. You can specify a target destination in general terms, such as the City of Brass on the Elemental Plane of Fire or the palace of Dispater on the second level of the Nine Hells, and you appear in or near that destination. If you are trying to reach the City of Brass, for example, you might arrive in its Street of Steel, before its Gate of Ashes, or looking at the city from across the Sea of Fire, at the DM's discretion." + "\n   " + "Alternatively, if you know the sigil sequence of a teleportation circle on another plane of existence, this spell can take you to that circle. If the teleportation circle is too small to hold all the creatures you transported, they appear in the closest unoccupied spaces next to the circle." + "\n   " + "You can use this spell to banish an unwilling creature to another plane. Choose a creature within your reach and make a melee spell attack against it. On a hit, the creature must make a Charisma saving throw. If the creature fails the save, it is transported to a random location on the plane of existence you specify. A creature so transported must find its own way back to your current plane of existence."
	},
	"plant growth" : {
		name : "Plant Growth",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 169], ["P", 266]],
		level : 3,
		school : "Trans",
		time : "1 a/8h",
		range : "150 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 a: 100-ft rad plants overgrow for 1/4 speed; 8h: 1 mile diameter plants yield double food at harvest",
		descriptionFull : "This spell channels vitality into plants within a specific area. There are two possible uses for the spell, granting either immediate or long-term benefits." + "\n   " + "If you cast this spell using 1 action, choose a point within range. All normal plants in a 100-foot radius centered on that point become thick and overgrown. A creature moving through the area must spend 4 feet of movement for every 1 foot it moves." + "\n   " + "You can exclude one or more areas of any size within the spell's area from being affected." + "\n   " + "If you cast this spell over 8 hours, you enrich the land. All plants in a half-mile radius centered on a point within range become enriched for 1 year. The plants yield twice the normal amount of food when harvested."
	},
	"poison spray" : {
		name : "Poison Spray",
		classes : ["druid", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 169], ["P", 266]],
		level : 0,
		school : "Conj",
		time : "1 a",
		range : "10 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Con",
		description : "1 creature save or 1d12 Poison dmg; +1d12 at CL 5, 11, and 17",
		descriptionCantripDie : "1 creature save or `CD`d12 Poison dmg",
		descriptionFull : "You extend your hand toward a creature you can see within range and project a puff of noxious gas from your palm. The creature must succeed on a Constitution saving throw or take 1d12 poison damage." + "\n   " + "This spell's damage increases by 1d12 when you reach 5th level (2d12), 11th level (3d12), and 17 level (4d12)."
	},
	"polymorph" : {
		name : "Polymorph",
		classes : ["bard", "druid", "sorcerer", "wizard"],
		source : [["SRD", 169], ["P", 266]],
		level : 4,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A caterpillar cocoon",
		duration : "Conc, 1 h",
		save : "Wis",
		description : "1 creature with > 0 HP save or transformed into beast of choice of same CR or lower; see book",
		descriptionFull : "This spell transforms a creature that you can see within range into a new form. An unwilling creature must make a Wisdom saving throw to avoid the effect. The spell has no effect on a shapechanger or a creature with 0 hit points" + "\n   " + "The transformation lasts for the duration, or until the target drops to 0 hit points or dies. The new form can be any beast whose challenge rating is equal to or less than the target's (or the target's level, if it doesn't have a challenge rating). The target's game statistics, including mental ability scores, are replaced by the statistics of the chosen beast. It retains its alignment and personality." + "\n   " + "The target assumes the hit points of its new form. When it reverts to its normal form, the creature returns to the number of hit points it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form. As long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious." + "\n   " + "The creature is limited in the actions it can perform by the nature of its new form, and it can't speak, cast spells, or take any other action that requires hands or speech." + "\n   " + "The target's gear melds into the new form. The creature can't activate, use, wield, or otherwise benefit from any of its equipment."
	},
	"power word kill" : {
		name : "Power Word Kill",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 170], ["P", 266]],
		level : 9,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		description : "1 creature with 100 current HP or less dies",
		descriptionFull : "You utter a word of power that can compel one creature you can see within range to die instantly. If the creature you chose has 100 hit points or fewer, it dies. Otherwise, the spell has no effect."
	},
	"power word stun" : {
		name : "Power Word Stun",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 170], ["P", 267]],
		level : 8,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		save : "Con",
		description : "1 creature with 150 current HP or less is stunned; save at end of each turn to end spell",
		descriptionFull : "You speak a word of power that can overwhelm the mind of one creature you can see within range, leaving it dumbfounded. If the target has 150 hit points or fewer, it is stunned. Otherwise, the spell has no effect." + "\n   " + "The stunned target must make a Constitution saving throw at the end of each of its turns. On a successful save, this stunning effect ends."
	},
	"prayer of healing" : {
		name : "Prayer of Healing",
		classes : ["cleric"],
		source : [["SRD", 170], ["P", 267]],
		level : 2,
		school : "Evoc",
		time : "10 min",
		range : "30 ft",
		components : "V",
		duration : "Instantaneous",
		description : "6 living creatures heal 2d8+1d8/SL+spellcasting ability modifier HP",
		descriptionFull : "Up to six creatures of your choice that you can see within range each regain hit points equal to 2d8 + your spellcasting ability modifier. This spell has no effect on undead or constructs." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, the healing increases by 1d8 for each slot level above 2nd."
	},
	"prestidigitation" : {
		name : "Prestidigitation",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 170], ["P", 267]],
		level : 0,
		school : "Trans",
		time : "1 a",
		range : "10 ft",
		components : "V,S",
		duration : "1 h (D)",
		description : "Minor trick; harmless sensory effect, illusory image, snuff light, clean/soil/chill/warm/flavor etc.",
		descriptionFull : "This spell is a minor magical trick that novice spellcasters use for practice. You create one of the following magical effects within range." + "\n " + "\u2022 You create an instantaneous, harmless sensory effect, such as a shower of sparks, a puff of wind, faint musical notes, or an odd odor." + "\n " + "\u2022 You instantaneously light or snuff out a candle, a torch, or a small campfire." + "\n " + "\u2022 You instantaneously clean or soil an object no larger than 1 cubic foot." + "\n " + "\u2022 You chill, warm, or flavor up to 1 cubic foot of nonliving material for 1 hour." + "\n " + "\u2022 You make a color, a small mark, or a symbol appear on an object or a surface for 1 hour." + "\n " + "\u2022 You create a nonmagical trinket or an illusory image that can fit in your hand and that lasts until the end of your next turn." + "\n\n" + "If you cast this spell multiple times, you can have up to three of its non-instantaneous effects active at a time, and you can dismiss such an effect as an action."
	},
	"prismatic spray" : {
		name : "Prismatic Spray",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 170], ["P", 267]],
		level : 7,
		school : "Evoc",
		time : "1 a",
		range : "60-ft cone",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "All random effect, see book: either 10d6 dmg, restrained, or blinded; save halves/negates",
		descriptionFull : "Eight multicolored rays of light flash from your hand. Each ray is a different color and has a different power and purpose. Each creature in a 60-foot cone must make a Dexterity saving throw. For each target, roll a d8 to determine which color ray affects it." + "\n   " + toUni("1-Red") + ": The target takes 10d6 fire damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("2-Orange") + ": The target takes 10d6 acid damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("3-Yellow") + ": The target takes 10d6 lightning damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("4-Green") + ": The target takes 10d6 poison damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("5-Blue") + ": The target takes 10d6 cold damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("6-Indigo") + ": On a failed save, the target is restrained. It must then make a Constitution saving throw at the end of each of its turns. If it successfully saves three times, the spell ends. If it fails its save three times, it permanently turns to stone and is subjected to the petrified condition. The successes and failures don't need to be consecutive, keep track of both until the target collects three of a kind." + "\n   " + toUni("7-Violet") + ": On a failed save, the target is blinded. It must then make a Wisdom saving throw at the start of your next turn. A successful save ends the blindness. If it fails that save, the creature is transported to another plane of existence of the DM's choosing and is no longer blinded. (Typically, a creature that is on a plane that isn't its home plane is banished home, while other creatures are usually cast into the Astral or Ethereal planes.)" + "\n   " + toUni("8-Special") + ": The target is struck by two rays. Roll twice more, rerolling any 8."
	},
	"prismatic wall" : {
		name : "Prismatic Wall",
		classes : ["wizard"],
		source : [["SRD", 171], ["P", 267]],
		level : 9,
		school : "Abjur",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "10 min",
		save : "Con",
		description : "Up to 90 ft long 30 ft high 5 inch thick; all in 20 ft save or blinded; 7 layers with effects, see book",
		descriptionFull : "A shimmering, multicolored plane of light forms a vertical opaque wall - up to 90 feet long, 30 feet high, and 1 inch thick - entered on a point you can see within range. Alternatively, you can shape the wall into a sphere up to 30 feet in diameter centered on a point you choose within range. The wall remains in place for the duration. If you position the wall so that it passes through a space occupied by a creature, the spell fails, and your action and the spell slot are wasted." + "\n   " + "The wall sheds bright light out to a range of 100 feet and dim light for an additional 100 feet. You and creatures you designate at the time you cast the spell can pass through and remain near the wall without harm. If another creature that can see the wall moves to within 20 feet of it or starts its turn there, the creature must succeed on a Constitution saving throw or become blinded for 1 minute." + "\n   " + "The wall consists of seven layers, each with a different color. When a creature attempts to reach into or pass through the wall, it does so one layer at a time through all the wall's layers. As it passes or reaches through each layer, the creature must make a Dexterity saving throw or be affected by that layer's properties as described below." + "\n   " + "The wall can be destroyed, also one layer at a time, in order from red to violet, by means specific to each layer. Once a layer is destroyed, it remains so for the duration of the spell. An antimagic field has no effect on a prismatic wall." + "\n   " + toUni("Red") + ": The creature takes 10d6 fire damage on a failed save, or half as much damage on a successful one. While this layer is in place, nonmagical ranged attacks can't pass through the wall. The layer can be destroyed by dealing at least 25 cold damage to it." + "\n   " + toUni("Orange") + ": The creature takes 10d6 acid damage on a failed save, or half as much damage on a successful one. While this layer is in place, magical ranged attacks can't pass through the wall. The layer is destroyed by a strong wind." + "\n   " + toUni("Yellow") + ": The creature takes 10d6 lightning damage on a failed save, or half as much damage on a successful one. This layer can be destroyed by dealing at least 60 force damage to it." + "\n   " + toUni("Green") + ": The creature takes 10d6 poison damage on a failed save, or half as much damage on a successful one. A passwall spell, or another spell of equal or greater level that can open a portal on a solid surface, destroys this layer." + "\n   " + toUni("Blue") + ": The creature takes 10d6 cold damage on a failed save, or half as much damage on a successful one. This layer can be destroyed by dealing at least 25 fire damage to it." + "\n   " + toUni("Indigo") + ": On a failed save, the creature is restrained. It must then make a Constitution saving throw at the end of each of its turns. If it successfully saves three times, the spell ends. If it fails its save three times, it permanently turns to stone and is subjected to the petrified condition. The successes and failures don't need to be consecutive, keep track of both until the creature collects three of a kind. While this layer is in place, spells can't be cast through the wall. The layer is destroyed by bright light shed by a daylight spell or a similar spell of equal or higher level." + "\n   " + toUni("Violet") + ": On a failed save, the creature is blinded. It must then make a Wisdom saving throw at the start of your next turn. A successful save ends the blindness. If it fails that save, the creature is transported to another plane of the DM's choosing and is no longer blinded. (Typically, a creature that is on a plane that isn't its home plane is banished home, while other creatures are usually cast into the Astral or Ethereal planes.) This layer is destroyed by a dispel magic spell or a similar spell of equal or higher level that can end spells and magical effects."
	},
	"produce flame" : {
		name : "Produce Flame",
		classes : ["druid"],
		source : [["SRD", 172], ["P", 269]],
		level : 0,
		school : "Conj",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "10 min (D)",
		description : "Flame 10 ft bright light; once 30 ft ranged spell attack for 1d8 Fire dmg; +1d8 at CL 5, 11, and 17",
		descriptionCantripDie : "Flame 10 ft bright light; once 30 ft ranged spell attack for `CD`d8 Fire dmg",
		descriptionFull : "A flickering flame appears in your hand. The flame remains there for the duration and harms neither you nor your equipment. The flame sheds bright light in a 10-foot radius and dim light for an additional 10 feet. The spell ends if you dismiss it as an action or if you cast it again." + "\n   " + "You can also attack with the flame, although doing so ends the spell. When you cast this spell, or as an action on a later turn, you can hurl the flame at a creature within 30 feet of you. Make a ranged spell attack. On a hit, the target takes 1d8 fire damage." + "\n   " + "This spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
	},
	"programmed illusion" : {
		name : "Programmed Illusion",
		classes : ["bard", "wizard"],
		source : [["SRD", 172], ["P", 269]],
		level : 6,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M\u0192",
		compMaterial : "A bit of fleece and jade dust worth at least 25 gp",
		duration : "Till dispelled",
		description : "30-ft cube illusion includes visible, audible; triggers on set condition; see book (25gp)",
		descriptionFull : "You create an illusion of an object, a creature, or some other visible phenomenon within range that activates when a specific condition occurs. The illusion is imperceptible until then. It must be no larger than a 30-foot cube, and you decide when you cast the spell how the illusion behaves and what sounds it makes. This scripted performance can last up to 5 minutes." + "\n   " + "When the condition you specify occurs, the illusion springs into existence and performs in the manner you described. Once the illusion finishes performing, it disappears and remains dormant for 10 minutes. After this time, the illusion can be activated again." + "\n   " + "The triggering condition can be as general or as detailed as you like, though it must be based on visual or audible conditions that occur within 30 feet of the area. For example, you could create an illusion of yourself to appear and warn off others who attempt to open a trapped door, or you could set the illusion to trigger only when a creature says the correct word or phrase." + "\n   " + "Physical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and any noise it makes sounds hollow to the creature."
	},
	"project image" : {
		name : "Project Image",
		classes : ["bard", "wizard"],
		source : [["SRD", 172], ["P", 270]],
		level : 7,
		school : "Illus",
		time : "1 a",
		range : "500 miles",
		components : "V,S,M\u0192",
		compMaterial : "A small replica of you made from materials worth at least 5 gp",
		duration : "Conc, 1 day",
		description : "Project image of me to familiar place; 1 a manipulate; bns a switch between its senses and mine (5gp)",
		descriptionFull : "You create an illusory copy of yourself that lasts for the duration. The copy can appear at any location within range that you have seen before, regardless of intervening obstacles. The illusion looks and sounds like you but is intangible. If the illusion takes any damage, it disappears, and the spell ends." + "\n   " + "You can use your action to move this illusion up to twice your speed, and make it gesture, speak, and behave in whatever way you choose. It mimics your mannerisms perfectly." + "\n   " + "You can see through its eyes and hear through its ears as if you were in its space. On your turn as a bonus action, you can switch from using its senses to using your own, or back again. While you are using its senses, you are blinded and deafened in regard to your own surroundings." + "\n   " + "Physical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image, and any noise it makes sounds hollow to the creature."
	},
	"protection from energy" : {
		name : "Protection from Energy",
		classes : ["cleric", "druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 173], ["P", 270]],
		level : 3,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Conc, 1 h",
		description : "1 creature gains resistance to either Acid, Cold, Fire, Lightning, or Thunder damage for duration",
		descriptionFull : "For the duration, the willing creature you touch has resistance to one damage type of your choice - acid, cold, fire, lightning, or thunder."
	},
	"protection from evil and good" : {
		name : "Protection from Evil and Good",
		nameShort : "Prot. from Evil/Good",
		classes : ["cleric", "paladin", "warlock", "wizard"],
		source : [["SRD", 173], ["P", 270]],
		level : 1,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Holy water or powdered silver and iron, which the spell consumes",
		duration : "Conc, 10 min",
		description : "1 crea immune fear/charm/possess by abber./celest./elem./fey/fiends/undead, they also dis. on atks",
		descriptionFull : "Until the spell ends, one willing creature you touch is protected against certain types of creatures - aberrations, celestials, elementals, fey, fiends, and undead." + "\n   " + "The protection grants several benefits. Creatures of those types have disadvantage on attack rolls against the target. The target also can't be charmed, frightened, or possessed by them. If the target is already charmed, frightened, or possessed by such a creature, the target has advantage on any new saving throw against the relevant effect."
	},
	"protection from poison" : {
		name : "Protection from Poison",
		classes : ["cleric", "druid", "paladin", "ranger"],
		source : [["SRD", 173], ["P", 270]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "1 h",
		description : "1 crea cured from 1 poison, gains resistance to Poison damage, and adv. on saves vs. being poisoned",
		descriptionFull : "You touch a creature. If it is poisoned, you neutralize the poison. If more than one poison afflicts the target, you neutralize on poison that you know is present, or you neutralize one at random." + "\n   " + "For the duration, the target has advantage on saving throws against being poisoned, and it has resistance to poison damage."
	},
	"purify food and drink" : {
		name : "Purify Food and Drink",
		classes : ["cleric", "druid", "paladin"],
		source : [["SRD", 173], ["P", 270]],
		ritual : true,
		level : 1,
		school : "Trans",
		time : "1 a",
		range : "10 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "5-ft rad of food and drink is rendered free of all poison and disease",
		descriptionFull : "All nonmagical food and drink within a 5-foot-radius sphere centered on a point of your choice within range is purified and rendered free of poison and disease."
	},
	"raise dead" : {
		name : "Raise Dead",
		classes : ["bard", "cleric", "paladin"],
		source : [["SRD", 173], ["P", 270]],
		level : 5,
		school : "Necro",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A diamond worth at least 500 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Restores a creature's body that has died in the last 10 days to life with 1 HP; see book (500gp cons.)",
		descriptionFull : "You return a dead creature you touch to life, provided that it has been dead no longer than 10 days. If the creature's soul is both willing and at liberty to rejoin the body, the creature returns to life with 1 hit point." + "\n   " + "This spell also neutralizes any poison and cures nonmagical diseases that affected the creature at the time it died. This spell doesn't, however, remove magical diseases, curses, or similar effects, if these aren't first removed prior to casting the spell, they take effect when the creature returns to life. The spell can't return an undead creature to life." + "\n   " + "This spell closes all mortal wounds, but it doesn't restore missing body parts. If the creature is lacking body parts or organs integral for its survival - its head, for instance - the spell automatically fails." + "\n   " + "Coming back from the dead is an ordeal. The target takes a -4 penalty to all attack rolls, saving throws, and ability checks. Every time the target finishes a long rest, the penalty is reduced by 1 until it disappears."
	},
	"rary's telepathic bond" : {
		name : "Rary's Telepathic Bond",
		nameShort : "Rary's Telepath. Bond",
		nameAlt : "Telepathic Bond",
		classes : ["wizard"],
		source : [["SRD", 185], ["P", 270]],
		ritual : true,
		level : 5,
		school : "Div",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "Pieces of eggshell from two different kinds of creatures",
		duration : "1 h",
		description : "8 willing crea with Int>2 gain a telepathic bond that works for any distance on the same plane",
		descriptionFull : "You forge a telepathic link among up to eight willing creatures of your choice within range, psychically linking each creature to all the others for the duration. Creatures with Intelligence scores of 2 or less aren't affected by this spell." + "\n   " + "Until the spell ends, the targets can communicate telepathically through the bond whether or not they have a common language. The communication is possible over any distance, though it can't extend to other planes of existence."
	},
	"ray of enfeeblement" : {
		name : "Ray of Enfeeblement",
		classes : ["warlock", "wizard"],
		source : [["SRD", 174], ["P", 271]],
		level : 2,
		school : "Necro",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Con",
		description : "Spell attack; crea does half dmg with weapon attacks that use Str; save at end of each turn to end",
		descriptionFull : "A black beam of enervating energy springs from your finger toward a creature within range. Make a ranged spell attack against the target. On a hit, the target deals only half damage with weapon attacks that use Strength until the spell ends." + "\n   " + "At the end of each of the target's turns, it can make a Constitution saving throw against the spell. On a success, the spell ends."
	},
	"ray of frost" : {
		name : "Ray of Frost",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 174], ["P", 271]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "Spell attack for 1d8 Cold dmg and -10 ft speed until start of my next turn; +1d8 at CL 5, 11, and 17",
		descriptionCantripDie : "Spell attack for `CD`d8 Cold dmg and -10 ft speed until start of my next turn",
		descriptionFull : "A frigid beam of blue-white light streaks toward a creature within range. Make a ranged spell attack against the target. On a hit, it takes 1d8 cold damage, and its speed is reduced by 10 feet until the start of your next turn." + "\n   " + "The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
	},
	"regenerate" : {
		name : "Regenerate",
		classes : ["bard", "cleric", "druid"],
		source : [["SRD", 174], ["P", 271]],
		level : 7,
		school : "Trans",
		time : "1 min",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A prayer wheel and holy water",
		duration : "1 h",
		description : "1 crea heals 4d8+15 HP and 1 HP/rnd for rest of duration; restores lost body parts in 2 min",
		descriptionFull : "You touch a creature and stimulate its natural healing ability. The target regains 4d8 + 15 hit points. For the duration of the spell, the target regains 1 hit point at the start of each of its turns (10 hit points each minute)." + "\n   " + "The target's severed body members (fingers, legs, tails, and so on), if any, are restored after 2 minutes. If you have the severed part and hold it to the stump, the spell instantaneously causes the limb to knit to the stump."
	},
	"reincarnate" : {
		name : "Reincarnate",
		classes : ["druid"],
		source : [["SRD", 174], ["P", 271]],
		level : 5,
		school : "Trans",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Rare oils and unguents worth at least 1,000 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Brings humanoid that died in last 10 days to life in a new random adult body, see book (1000gp cons.)",
		descriptionFull : "You touch a dead humanoid or a piece of a dead humanoid. Provided that the creature has been dead no longer than 10 days, the spell forms a new adult body for it and then calls the soul to enter that body. If the target's soul isn't free or willing to do so, the spell fails." + "\n   " + "The magic fashions a new body for the creature to inhabit, which likely causes the creature's race to change. The DM rolls a d100 and consults the following table to determine what form the creature takes when restored to life, or the DM chooses a form." + "\n\n   " + toUni("d100") + "\t" + toUni("Race") + "\n   " + "01-04\tDragonborn" + "\n   " + "05-13\tDwarf, hill" + "\n   " + "14-21\tDwarf, mountain" + "\n   " + "22-25\tElf, dark" + "\n   " + "26-34\tElf, high" + "\n   " + "35-42\tElf, wood" + "\n   " + "43-46\tGnome, forest" + "\n   " + "47-52\tGnome, rock" + "\n   " + "53-56\tHalf-elf" + "\n   " + "57-60\tHalf-orc" + "\n   " + "61-68\tHalfling, lightfoot" + "\n   " + "69-76\tHalfling, stout" + "\n   " + "77-96\tHuman" + "\n   " + "97-00\tTiefling" + "\n\n" + "The reincarnated creature recalls its former life and experiences. It retains the capabilities it had in its original form, except it exchanges its original race for the new one and changes its racial traits accordingly."
	},
	"remove curse" : {
		name : "Remove Curse",
		classes : ["cleric", "paladin", "warlock", "wizard"],
		source : [["SRD", 174], ["P", 271]],
		level : 3,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 creature or object is freed of all curses; cursed magic items break attunement with owner",
		descriptionFull : "At your touch, all curses affecting one creature or object end. If the object is a cursed magic item, its curse remains, but the spell breaks its owner's attunement to the object so it can be removed or discarded."
	},
	"resistance" : {
		name : "Resistance",
		classes : ["cleric", "druid"],
		source : [["SRD", 175], ["P", 272]],
		level : 0,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A miniature cloak",
		duration : "Conc, 1 min",
		description : "1 willing crea can add 1d4 to one saving throw after rolling, once during the duration",
		descriptionFull : "You touch one willing creature. Once before the spell ends, the target can roll a d4 and add the number rolled to one saving throw of its choice. It can roll the die before or after the saving throw. The spell then ends."
	},
	"resurrection" : {
		name : "Resurrection",
		classes : ["bard", "cleric"],
		source : [["SRD", 175], ["P", 272]],
		level : 7,
		school : "Necro",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A diamond worth at least 1,000 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Resurrects a creature, that has died in the last century, with whole body; see book (1000gp cons.)",
		descriptionFull : "You touch a dead creature that has been dead for no more than a century, that didn't die of old age, and that isn't undead. If its soul is free and willing, the target returns to life with all its hit points." + "\n   " + "This spell neutralizes any poisons and cures normal diseases afflicting the creature when it died. It doesn't, however, remove magical diseases, curses, and the like, if such affects aren't removed prior to casting the spell, they afflict the target on its return to life." + "\n   " + "This spell closes all mortal wounds and restores any missing body parts." + "\n   " + "Coming back from the dead is an ordeal. The target takes a -4 penalty to all attack rolls, saving throws, and ability checks. Every time the target finishes a long rest, the penalty is reduced by 1 until it disappears." + "\n   " + "Casting this spell to restore life to a creature that has been dead for one year or longer taxes you greatly. Until you finish a long rest, you can't cast spells again, and you have disadvantage on all attack rolls, ability checks, and saving throws."
	},
	"reverse gravity" : {
		name : "Reverse Gravity",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 175], ["P", 272]],
		level : 7,
		school : "Trans",
		time : "1 a",
		range : "100 ft",
		components : "V,S,M",
		compMaterial : "A lodestone and iron filings",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "50-ft rad 100-ft high everything falls upward; save to grab hold onto something solid",
		descriptionFull : "This spell reverses gravity in a 50-foot-radius, 100-foot high cylinder centered on a point within range. All creatures and objects that aren't somehow anchored to the ground in the area fall upward and reach the top of the area when you cast this spell. A creature can make a Dexterity saving throw to grab onto a fixed object it can reach, thus avoiding the fall." + "\n   " + "If some solid object (such as a ceiling) is encountered in this fall, falling objects and creatures strike it just as they would during a normal downward fall. If an object or creature reaches the top of the area without striking anything, it remains there, oscillating slightly, for the duration." + "\n   " + "At the end of the duration, affected objects and creatures fall back down."
	},
	"revivify" : {
		name : "Revivify",
		classes : ["cleric", "paladin"],
		source : [["SRD", 175], ["P", 272]],
		level : 3,
		school : "Necro", // errata from conjuration
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Diamonds worth 300 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Restores a creature's body that has died in the last min to life with 1 HP (300gp cons.)",
		descriptionFull : "You touch a creature that has died within the last minute. That creature returns to life with 1 hit point. This spell can't return to life a creature that has died of old age, nor can it restore any missing body parts."
	},
	"rope trick" : {
		name : "Rope Trick",
		classes : ["wizard"],
		source : [["SRD", 176], ["P", 272]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Powdered corn extract and a twisted loop of parchment",
		duration : "1 h",
		description : "Rope up to 60 ft stands vertical; extradimens. space with invisible 3\u00D75 ft entrance at top, for 8 crea",
		descriptionFull : "You touch a length of rope that is up to 60 feet long. One end of the rope then rises into the air until the whole rope hangs perpendicular to the ground. At the upper end of the rope, an invisible entrance opens to an extradimensional space that lasts until the spell ends." + "\n   " + "The extradimensional space can be reached by climbing to the top of the rope. The space can hold as many as eight Medium or smaller creatures. The rope can be pulled into the space, making the rope disappear from view outside the space." + "\n   " + "Attacks and spells can't cross through the entrance into or out of the extradimensional space, but those inside can see out of it as if through a 3-foot-by-5-foot window centered on the rope." + "\n   " + "Anything inside the extradimensional space drops out when the spell ends."
	},
	"sacred flame" : {
		name : "Sacred Flame",
		classes : ["cleric"],
		source : [["SRD", 176], ["P", 272]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Instantaneous",
		save : "Dex",
		description : "1 creature save or 1d8 Radiant dmg; no bonus for cover on save; +1d8 at CL 5, 11, and 17",
		descriptionCantripDie : "1 creature save or `CD`d8 Radiant dmg; no bonus for cover on save",
		descriptionFull : "Flame-like radiance descends on a creature that you can see within range. The target must succeed on a Dexterity saving throw or take 1d8 radiant damage. The target gains no benefit from cover for this saving throw." + "\n   " + "The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
	},
	"sanctuary" : {
		name : "Sanctuary",
		classes : ["cleric"],
		source : [["SRD", 176], ["P", 272]],
		level : 1,
		school : "Abjur",
		time : "1 bns",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A small silver mirror",
		duration : "1 min",
		save : "Wis",
		description : "1 crea warded; any who want to attack/target must first make save; doesn't protect vs. area spells",
		descriptionFull : "You ward a creature within range against attack. Until the spell ends, any creature who targets the warded creature with an attack or a harmful spell must first make a Wisdom saving throw. On a failed save, the creature must choose a new target or lose the attack or spell. This spell doesn't protect the warded creature from area effects, such as the explosion of a fireball." + "\n   " + "If the warded creature makes an attack, casts a spell that affects an enemy, or deals damage to another creature, this spell ends."
	},
	"scorching ray" : {
		name : "Scorching Ray",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 176], ["P", 273]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Instantaneous",
		description : "3+1/SL rays hit creature(s) on spell attack with each ray for 2d6 Fire dmg per ray",
		descriptionFull : "You create three rays of fire and hurl them at targets within range. You can hurl them at one target or several." + "\n   " + "Make a ranged spell attack for each ray. On a hit, the target takes 2d6 fire damage." + AtHigherLevels + "When you cast this spell using a spell slot of 3rd level or higher, you create one additional ray for each slot level above 2nd."
	},
	"scrying" : {
		name : "Scrying",
		classes : ["bard", "cleric", "druid", "warlock", "wizard"],
		source : [["SRD", 176], ["P", 273]],
		level : 5,
		school : "Div",
		time : "10 min",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "A focus worth at least 1,000 gp, such as a crystal ball, a silver mirror, or a font filled with holy water",
		duration : "Conc, 10 min",
		save : "Wis",
		description : "1 crea save or sensor follows it around; or create sensor in familiar location; see book (1000gp)",
		descriptionFull : "You can see and hear a particular creature you choose that is on the same plane of existence as you. The target must make a Wisdom saving throw, which is modified by how well you know the target and the sort of physical connection you have to it. If a target knows you're casting this spell, it can fail the saving throw voluntarily if it wants to be observed." + "\n\n" + toUni("Knowledge") + "\t\t\t   " + toUni("Save Modifier") + "\n" + "Secondhand (you have heard of the target)\t+5" + "\n" + "Firsthand (you have met the target)\t\t+0" + "\n" + "Familiar (you know the target well)\t\t-5" + "\n\n" + toUni("Connection") + "\t\t\t   " + toUni("Save Modifier") + "\n" + "Likeness or picture\t\t\t\t-2" + "\n" + "Possession or garment\t\t\t-4" + "\n" + "Body part, lock of hair, bit of nail, or the like\t-10" + "\n\n" + "On a successful save, the target isn't affected, and you can't use this spell against it again for 24 hours." + "\n   " + "On a failed save, the spell creates an invisible sensor within 10 feet of the target. You can see and hear through the sensor as if you were there. The sensor moves with the target, remaining within 10 feet of it for the duration. A creature that can see invisible objects sees the sensor as a luminous orb about the size of your fist." + "\n   " + "Instead of targeting a creature, you can choose a location you have seen before as the target of this spell. When you do, the sensor appears at that location and doesn't move."
	},
	"see invisibility" : {
		name : "See Invisibility",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 177], ["P", 274]],
		level : 2,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S,M",
		compMaterial : "A pinch of Talc and a small sprinkling of powdered silver",
		duration : "1 h",
		description : "See invisible/ethereal creatures and objects as if they were visible; ethereals are ghostly, translucent",
		descriptionFull : "For the duration, you see invisible creatures and objects as if they were visible, and you can see into the Ethereal Plane. Ethereal creatures and objects appear ghostly and translucent."
	},
	"seeming" : {
		name : "Seeming",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 177], ["P", 274]],
		level : 5,
		school : "Illus",
		time : "1 a",
		range : "30 ft",
		components : "V,S",
		duration : "8 h (D)",
		save : "Cha",
		description : "Any crea save or disguised by changing physical appearance; Int(Investigation) check vs. spell DC",
		descriptionFull : "This spell allows you to change the appearance of any number of creatures that you can see within range. You give each target you choose a new, illusory appearance. An unwilling target can make a Charisma saving throw, and if it succeeds, it is unaffected by this spell." + "\n   " + "The spell disguises physical appearances as well as clothing, armor, weapons, and equipment. You can make each creature seem 1 foot shorter or taller and appear thin, fat, or in-between. You can't change a target's body type, so you must choose a form that has the same basic arrangement of limbs. Otherwise, the extent of the illusion is up to you. The spell lasts for the duration, unless you use your action to dismiss it sooner." + "\n   " + "The changes wrought by this spell fail to hold up to physical inspections. For example, if you use this spell to add a hat to a creature's outfit objects pass through the hat, and anyone who touches it would feel nothing or would feel the creature's head and hair. If you use this spell to appear thinner then you are, the hand of someone who reaches out to touch you would bump into you while it was seemingly still in midair." + "\n   " + "A creature can use its action to inspect a target and make an Intelligence (Investigation) check against your spell save DC. If it succeeds, it becomes aware that the target is disguised."
	},
	"sending" : {
		name : "Sending",
		classes : ["bard", "cleric", "wizard"],
		source : [["SRD", 177], ["P", 274]],
		level : 3,
		school : "Evoc",
		time : "1 a",
		range : "Unlimited",
		components : "V,S,M",
		compMaterial : "A short piece of fine copper wire",
		duration : "1 rnd",
		description : "Send a 25 word message to a familiar creature; it recognizes me and can respond with 25 words",
		descriptionFull : "You send a short message of twenty-five words or less to a creature with you are familiar. The creature hears the message in its mind, recognizes you as the sender if it knows you, and can answer in a like manner immediately. The spell enables creatures with Intelligence scores of at least 1 to understand the meaning of your message." + "\n   " + "You can send the message across any distance and even to other planes of existence, but if the target is on a different plane than you, there is a 5 percent chance that the message doesn't arrive."
	},
	"sequester" : {
		name : "Sequester",
		classes : ["wizard"],
		source : [["SRD", 178], ["P", 274]],
		level : 7,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A powder composed of diamond, emerald, ruby, and sapphire dust worth at least 5,000 gp, which the spell consumes",
		duration : "Till dispelled",
		description : "1 willing crea/obj suspended, invisible, hidden from divination magic; see book (5000gp cons.)",
		descriptionFull : "By means of this spell, a willing creature or an object can be hidden away, safe from detection for the duration. When you cast the spell and touch the target, it becomes invisible and can't be targeted by divination spells or perceived through scrying sensors created by the divination of spells." + "\n   " + "If the target is a creature, it falls into a state of suspended animation. Time ceases to flow for it, and it doesn't grow older." + "\n   " + "You can set a condition for the spell to end early. The condition can be anything you choose, but it must occur or be visible within 1 mile of the target. Examples include after 1,000 years or when the tarrasque awakes. This spell also ends if the target takes any damage."
	},
	"shapechange" : {
		name : "Shapechange",
		classes : ["druid", "wizard"],
		source : [["SRD", 178], ["P", 274]],
		level : 9,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V,S,M\u0192",
		compMaterial : "A jade circlet worth at least 1,500 gp, which you must place on your head before you cast the spell",
		duration : "Conc, 1 h",
		description : "Take form of creature with CR of CL or lower; keep Int, Wis, Cha and alignment; see book (1500gp)",
		descriptionFull : "You assume the form of a different creature for the duration. The new form can be any creature with a challenge rating equal to your level or lower. The creature can't be a construct or an undead, and you must have seen the sort of creature at least once. You transform into an average example of that creature, one without any class levels or the Spellcasting trait." + "\n   " + "Your game statistics are replaced by the statistics of the chosen creature, though you retain your alignment and Intelligence, Wisdom, and Charisma scores You also retain all of your skill and saving throw proficiencies, in addition to gaining those of the creature, If the creature has the same proficiency as you, and the bonus listed in its statistics is higher than yours, use the creature's bonus in place of yours. You can't use any legendary actions or lair actions of the new form." + "\n   " + "You assume the hit points and Hit Dice of the new form. When you revert to your normal, you return to the number of hit points you had before you transformed. If you revert as a result of dropping to 0 hit points, any excess damage carries over to your normal form. As long as the excess damage doesn't reduce your normal form to 0 hit points, you aren't knocked unconscious." + "\n   " + "You retain the benefit of any features from your class, race, or other source and can use them, provided that your new form is physically capable of doing so. You can't use any special senses you have (for example, darkvision) unless your new form also has that sense. You can only speak if the creature can normally speak." + "\n   " + "When you transform, you choose whether your equipment falls to the ground, merges into the new form, or is worn by it. Worn equipment functions as normal. The DM determines whether it is practical for the new form to wear a piece of equipment, based on the creature's shape and size. Your equipment doesn't change shape or size to match the new form, and any equipment that the new form can't wear must either fall to the ground or merge into your new form. Equipment that merges has no effect in that state." + "\n   " + "During this spell's duration, you can use your action to assume a different form following the same restrictions and rules for the original form, with one exception - if your new form has more hit pints than your current one, your hit points remain at their current value."
	},
	"shatter" : {
		name : "Shatter",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 178], ["P", 275]],
		level : 2,
		school : "Evoc",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A chip of mica",
		duration : "Instantaneous",
		save : "Con",
		description : "10-ft rad all 3d8+1d8/SL Thunder dmg; save halves; nonmagical unattended objects also take dmg",
		descriptionFull : "A sudden loud ringing noise, painfully intense, erupts from a point of your choice within range. Each creature in a 10-foot-radius sphere centered on that point must make a Constitution saving throw. A creature takes 3d8 thunder damage on a failed save, or half as much damage on a successful one. A creature made of inorganic material such as stone, crystal, or metal has disadvantage on this saving throw." + "\n   " + "A nonmagical object that isn't being worn or carried also takes the damage if it's in the spell's area." + AtHigherLevels + "When you cast this spell using a spell slot of or higher, the damage increases by 1d8 for each slot level above 2nd."
	},
	"shield" : {
		name : "Shield",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 179], ["P", 275]],
		level : 1,
		school : "Abjur",
		time : "1 rea",
		range : "Self",
		components : "V,S",
		duration : "1 rnd",
		description : "If hit by attack +5 AC until start of next turn; or stop Magic Missile spell from doing any dmg to me",
		descriptionFull : "An invisible barrier of magical force appears and protects you. Until the start of your next turn, you have a +5 bonus to AC, including against the triggering attack, and you take no damage from magic missile."
	},
	"shield of faith" : {
		name : "Shield of Faith",
		classes : ["cleric", "paladin"],
		source : [["SRD", 179], ["P", 275]],
		level : 1,
		school : "Abjur",
		time : "1 bns",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A small parchment with a bit of holy text written on it",
		duration : "Conc, 10 min",
		description : "1 creature gains +2 AC for the duration",
		descriptionFull : "A shimmering field appears and surrounds a creature of your choice within range, granting it a +2 bonus to AC for the duration."
	},
	"shillelagh" : {
		name : "Shillelagh",
		classes : ["druid"],
		source : [["SRD", 179], ["P", 275]],
		level : 0,
		school : "Trans",
		time : "1 bns",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Mistletoe, a shamrock leaf, and a club or quarterstaff",
		duration : "1 min",
		description : "Club/quarterstaff I hold does 1d8 dmg and uses my spellcasting ability modifier instead of Str",
		descriptionFull : "The wood of a club or quarterstaff you are holding is imbued with nature's power. For the duration, you can use your spellcasting ability instead of Strength for the attack and damage rolls of melee attacks using that weapon, and the weapon's damage die becomes a d8. The weapon also becomes magical, if it isn't already. The spell ends if you cast it again or if you let go of the weapon."
	},
	"shocking grasp" : {
		name : "Shocking Grasp",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 179], ["P", 275]],
		level : 0,
		school : "Evoc",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "Spell attack, adv. if metal armor, 1d8 Lightning dmg, no rea 1 turn; +1d8 at CL 5, 11, and 17",
		descriptionCantripDie : "Spell attack, adv. if metal armor, `CD`d8 Lightning dmg, no rea 1 turn",
		descriptionFull : "Lightning springs from your hand to deliver a shock to a creature you try to touch. Make a melee spell attack against the target. You have advantage on the attack roll if the target is wearing armor made of metal. On a hit, the target takes 1d8 lightning damage, and it can't take reactions until the start of its next turn." + "\n   " + "The spell's damage increases by 1d8 when you reach 5th level (2d8), 11th level (3d8), and 17th level (4d8)."
	},
	"silence" : {
		name : "Silence",
		classes : ["bard", "cleric", "ranger"],
		source : [["SRD", 179], ["P", 275]],
		ritual : true,
		level : 2,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "20-ft rad no sound propagates; all within deafened, immune to Thunder dmg, can't use verbal comp.",
		descriptionFull : "For the duration, no sound can be created within or pass through a 20-foot-radius sphere centered on a point you choose within range. Any creature or object entirely inside the sphere is immune to thunder damage, and creatures are deafened while entirely inside it. Casting a spell that includes a verbal component is impossible there."
	},
	"silent image" : {
		name : "Silent Image",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 179], ["P", 276]],
		level : 1,
		school : "Illus",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A bit of fleece",
		duration : "Conc, 10 min",
		description : "15-ft cube illusion includes visible; 1 a move it; Int(Investigation) check vs. spell DC; see book",
		descriptionFull : "You create the image of an object, a creature, or some other visible phenomenon that is no larger than a 15-foot cube. The image appears at a spot within range and lasts for the duration. The image is purely visual, it isn't accompanied by sound, smell, or other sensory effects." + "\n   " + "You can use your action to cause the image to move to any spot within range. As the image changes location, you can alter its appearance so that its movements appear natural for the image. For example, if you create an image of a creature and move it, you can alter the image so that it appears to be walking." + "\n   " + "Physical interaction with the image reveals it to be an illusion, because things can pass through it. A creature that uses its action to examine the image can determine that it is an illusion with a successful Intelligence (Investigation) check against your spell save DC. If a creature discerns the illusion for what it is, the creature can see through the image."
	},
	"simulacrum" : {
		name : "Simulacrum",
		classes : ["wizard"],
		source : [["SRD", 180], ["P", 276]],
		level : 7,
		school : "Illus",
		time : "12 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Snow or ice in quantities sufficient to made a life-size copy of the duplicated creature; some hair, fingernail clippings, or other piece of that creature's body placed inside the snow or ice; and powdered ruby worth 1,500 gp, sprinkled over the duplicate and consumed by the spell",
		duration : "Till dispelled",
		description : "Create snow/ice duplicate of humanoid/beast; follows my verbal commands; see B (1500gp cons.)",
		descriptionFull : "You shape an illusory duplicate of one beast or humanoid that is within range for the entire casting time of the spell. The duplicate is a creature, partially real and formed from ice or snow, and it can take actions and otherwise be affected as a normal creature. It appears to be the same as the original, but it has half the creature's hit point maximum and is formed without any equipment. Otherwise, the illusion uses all the statistics of the creature it duplicates, except that it is a construct." + "\n   " + "The simulacrum is friendly to you and creatures you designate. It obeys your spoken commands, moving and acting in accordance with your wishes and acting on your turn in combat. The simulacrum lacks the ability to learn or become more powerful, so it never increases its level or other abilities, nor can it regain expended spell slots." + "\n   " + "If the simulacrum is damaged, you can repair it in an alchemical laboratory, using rare herbs and minerals worth 100 gp per hit point it regains. The simulacrum lasts until it drops to 0 hit points, at which point it reverts to snow and melts instantly." + "\n   " + "If you cast this spell again, any currently active duplicates you created with this spell are instantly destroyed."
	},
	"sleep" : {
		name : "Sleep",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 180], ["P", 276]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "A pinch of find sand, rose petals, or a cricket",
		duration : "1 min",
		description : "20-ft rad 5d8+2d8/SL HP of conscious creatures fall asleep, starting with the lowest current HP crea",
		descriptionFull : "This spell sends creatures into a magical slumber. Roll 5d8, the total is how many hit points of creatures this spell can affect. Creatures within 20 feet of a point you choose within range are affected in ascending order of their current hit points (ignoring unconscious creatures)." + "\n   " + "Starting with the creature that has the lowest current hit points, each creature affected by this spell falls unconscious until the spell ends, the sleeper takes damage, or someone uses an action to shake or slap the sleeper awake. Subtract each creature's hit points from the total before moving on to the creature with the next lowest hit points. A creature's hit points must be equal to or less than the remaining total for that creature to be affected." + "\n   " + "Undead and creatures immune to being charmed aren't affected by this spell." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, roll an additional 2d8 for each slot level above 1st."
	},
	"sleet storm" : {
		name : "Sleet Storm",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 180], ["P", 276]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "A pinch of dust and a few drops of water",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "40-ft rad 20-ft high; heavily obsc.; douses flames; difficult ter.; save or prone; Con save or lose conc.",
		descriptionFull : "Until the spell ends, freezing rain and sleet fall in a 20-foot-tall cylinder with a 40-foot radius centered on a point you choose within range. The area is heavily obscured, and exposed flames in the area are doused." + "\n   " + "The ground in the area is covered with slick ice, making it difficult terrain. When a creature enters the spell's area for the first time on a turn or starts its turn there, it must make a Dexterity saving throw. On a failed save, it falls prone." + "\n   " + "If a creature starts its turn in the spell's area and is concentrating on a spell, the creature must make a successful Constitution saving throw against your spell save DC or lose concentration"
	},
	"slow" : {
		name : "Slow",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 180], ["P", 277]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A drop of molasses",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "6 crea in 40-ft cube save or half spd, -2 AC, -2 Dex saves, no rea, only 1 a or bns a, 1 atk; see book",
		descriptionFull : "You alter time around up to six creatures of your choice in a 40-foot cube within range. Each target must succeed on a Wisdom saving throw or be affected by this spell for the duration." + "\n   " + "An affected target's speed is halved, it takes a -2 penalty to AC and Dexterity saving throws, and it can't use reactions. On its turn, it can use either an action or a bonus action, not both. Regardless of the creature's abilities or magic items, it can't make more than one melee or ranged attack during its turn." + "\n   " + "If the creature attempts to cast a spell with a casting time of 1 action, roll a d20. On an 11 or higher, the spell doesn't take effect until the creature's next turn, and the creature must use its action on that turn to complete the spell. If it can't, the spell is wasted." + "\n   " + "A creature affected by this spell makes another Wisdom saving throw at the end of each of its turns. On a successful save, the effect ends for it."
	},
	"spare the dying" : {
		name : "Spare the Dying",
		classes : ["cleric"],
		source : [["SRD", 181], ["P", 277]],
		level : 0,
		school : "Necro",
		time : "1 a",
		range : "Touch",
		components : "V,S",
		duration : "Instantaneous",
		description : "1 living creature with 0 current HP becomes stable",
		descriptionFull : "You touch a living creature that has 0 hit points. The creature becomes stable. This spell has no effect on undead or constructs."
	},
	"speak with animals" : {
		name : "Speak with Animals",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 181], ["P", 277]],
		ritual : true,
		level : 1,
		school : "Div",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "10 min",
		description : "Speak verbally with and understand beasts for duration; interaction limited by intelligence of beasts",
		descriptionFull : "You gain the ability to comprehend and verbally communicate with beasts for the duration. The knowledge and awareness of many beasts is limited by their intelligence, but at minimum, beasts can give you information about nearby locations and monsters, including whatever they can perceive or have perceived within the past day. You might be able to persuade a beast to perform a small favor for you, at the DM's discretion."
	},
	"speak with dead" : {
		name : "Speak with Dead",
		classes : ["bard", "cleric"],
		source : [["SRD", 181], ["P", 277]],
		level : 3,
		school : "Necro",
		time : "1 a",
		range : "10 ft",
		components : "V,S,M",
		compMaterial : "Burning incense",
		duration : "10 min",
		description : "1 corpse with mouth answers 5 questions with what it knew in life; can cast on same every 10 days",
		descriptionFull : "You grant the semblance of life and intelligence to a corpse of your choice within range, allowing it to answer the questions you pose. The corpse must still have a mouth and can't be undead. The spell fails if the corpse was the target of this spell within the last 10 days." + "\n   " + "Until the spell ends, you can ask the corpse up to five questions. The corpse knows only what it knew in life, including the languages it knew. Answers are usually brief, cryptic, or repetitive, and the corpse is under no compulsion to offer a truthful answer if you are hostile to it or it recognizes you as an enemy. This spell doesn't return the creature's soul to its body, only its animating spirit. Thus, the corpse can't learn new information, doesn't comprehend anything that has happened since it died, and can't speculate about future events."
	},
	"speak with plants" : {
		name : "Speak with Plants",
		classes : ["bard", "druid", "ranger"],
		source : [["SRD", 181], ["P", 277]],
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "30-ft rad",
		components : "V,S",
		duration : "10 min",
		description : "Speak with plants in range about last 24h events; turn difficult plant terrain to normal or vice versa",
		descriptionFull : "You imbue plants within 30 feet of you with limited sentience and animation, giving them the ability to communicate with you and follow your simple commands. You can question plants about events in the spell's area within the past day, gaining information about creatures that have passed, weather, and other circumstances." + "\n   " + "You can also turn difficult terrain caused by plant growth (such as thickets and undergrowth) into ordinary terrain that lasts for the duration. Or you can turn ordinary terrain where plants are present into difficult terrain that lasts for the duration, causing vines and branches to hinder pursuers, for example." + "\n   " + "Plants might be able to perform other tasks on your behalf, at the DM's discretion. The spell doesn't enable plants to uproot themselves and move about, but they can freely move branches, tendrils, and stalks." + "\n   " + "If a plant creature is in the area, you can communicate with it as if you shared a common language, but you gain no magical ability to influence it." + "\n   " + "This spell can cause the plants created by the entangle spell to release a restrained creature."
	},
	"spider climb" : {
		name : "Spider Climb",
		classes : ["sorcerer", "warlock", "wizard"],
		source : [["SRD", 182], ["P", 277]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "A drop of bitumen and a spider",
		duration : "Conc, 1 h",
		description : "1 gains climbing speed equal to walking speed; can go on walls and ceilings with hands free",
		descriptionFull : "Until the spell ends, one willing creature you touch gains the ability to move up, down, and across vertical surfaces and upside down along ceilings, while leaving its hands free. The target also gains a climbing speed equal to its walking speed."
	},
	"spike growth" : {
		name : "Spike Growth",
		classes : ["druid", "ranger"],
		source : [["SRD", 182], ["P", 277]],
		level : 2,
		school : "Trans",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "Seven sharp thorns or seven small twigs, each sharpened to a point",
		duration : "Conc, 10 min",
		description : "20-ft rad difficult terrain; all 2d4 Piercing dmg every 5 ft moved; Wis(Perc) vs. Spell DC to recognize",
		descriptionFull : "The ground in a 20-foot radius centered on a point within range twists and sprouts hard spikes and thorns. The area becomes difficult terrain for the duration. When a creature moves into or within the area, it takes 2d4 piercing damage for every 5 feet it travels." + "\n   " + "The transformation of the ground is camouflaged to look natural. Any creature that can't see the area at the time the spell is cast must make a Wisdom (Perception) check against your spell save DC to recognize the terrain as hazardous before entering it."
	},
	"spirit guardians" : {
		name : "Spirit Guardians",
		classes : ["cleric"],
		source : [["SRD", 182], ["P", 278]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "15-ft rad",
		components : "V,S,M",
		compMaterial : "A holy symbol",
		duration : "Conc, 10 min",
		save : "Wis",
		description : "Undesignated crea start turn/enter in area half speed, 3d8+1d8/SL Radiant/Necrotic dmg; save half",
		descriptionFull : "You call forth spirits to protect you. They flit around you to a distance of 15 feet for the duration. If you are good or neutral, their spectral form appears angelic or fey (your choice). If you are evil, they appear fiendish." + "\n   " + "When you cast this spell, you can designate any number of creatures you can see to be unaffected by it. An affected creature's speed is halved in the area, and when the creature enters the area for the first time on a turn or starts its turn there, it must make a Wisdom saving throw. On a failed save, the creature takes 3d8 radiant damage (if you are good or neutral) or 3d8 necrotic damage (if you are evil). On a successful save, the creature takes half as much damage." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d8 for each slot level above 3rd."
	},
	"spiritual weapon" : {
		name : "Spiritual Weapon",
		classes : ["cleric"],
		source : [["SRD", 182], ["P", 278]],
		level : 2,
		school : "Evoc",
		time : "1 bns",
		range : "60 ft",
		components : "V,S",
		duration : "1 min",
		description : "Create weapon; spell atk 1d8+1d8/2SL+ability modifier Force dmg; bns a to move 20 ft and/or attack",
		descriptionFull : "You create a floating, spectral weapon within range that lasts for the duration or until you cast this spell again. When you cast the spell, you can make a melee spell attack against a creature within 5 feet of the weapon. On a hit, the target takes force damage equal to 1d8 + your spellcasting ability modifier." + "\n   " + "As a bonus action on your turn, you can move the weapon up to 20 feet and repeat the attack against a creature within 5 feet of it." + "\n   " + "The weapon can take whatever form you choose. Clerics of deities who are associated with a particular weapon (as St. Cuthbert is known for his mace and Thor for his hammer) make this spell's effect resemble that weapon." + AtHigherLevels + "When you cast this spell using a spell slot 3rd level of or higher, the damage increases by 1d8 for every two slot levels above the 2nd."
	},
	"stinking cloud" : {
		name : "Stinking Cloud",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 182], ["P", 278]],
		level : 3,
		school : "Conj",
		time : "1 a",
		range : "90 ft",
		components : "V,S,M",
		compMaterial : "A rotten egg or several skunk cabbage leaves",
		duration : "Conc, 1 min",
		save : "Con",
		description : "20-ft rad; ignores cover, heavily obscures; all in area at start of turn save against poison or can't act",
		descriptionFull : "You create a 20-foot-radius sphere of yellow, nauseating gas centered on a point within range. The cloud spreads around corners, and its area is heavily obscured. The cloud lingers in the air for the duration." + "\n   " + "Each creature that is completely within the cloud at the start of its turn must make a Constitution saving throw against poison. On a failed save, the creature spends its action that turn retching and reeling. Creatures that don't need to breathe or are immune to poison automatically succeed on this saving throw." + "\n   " + "A moderate wind (at least 10 miles per hour) disperses the cloud after 4 rounds. A strong wind (at least 20 miles per hour) disperses it after 1 round."
	},
	"stone shape" : {
		name : "Stone Shape",
		classes : ["cleric", "druid", "wizard"],
		source : [["SRD", 183], ["P", 278]],
		level : 4,
		school : "Trans",
		time : "1 a",
		range : "Touch",
		components : "V,S,M",
		compMaterial : "Soft clay, which must be worked into roughly the desired shape of the stone object",
		duration : "Instantaneous",
		description : "Form 5 cu ft of stone into any shape; can have up to two hinges and a latch, but no finer mechanisms",
		descriptionFull : "You touch a stone object of Medium size or smaller or a section of stone no more than 5 feet in any dimension and form it into any shape that suits your purpose. So, for example, you could shape a large rock into a weapon, idol, or coffer, or make a small passage through a wall, as long as the wall is less than 5 feet thick. You could also shape a stone door or its frame to seal the door shut. The object you create can have up to two hinges and a latch, but finer mechanical detail isn't possible."
	},
	"stoneskin" : {
		name : "Stoneskin",
		classes : ["druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 183], ["P", 278]],
		level : 4,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Diamond dust worth 100 gp, which the spell consumes",
		duration : "Conc, 1 h",
		description : "1 willing crea resistance to nonmagical Bludgeoning, Piercing, and Slashing dmg (100gp cons.)",
		descriptionFull : "This spell turns the flesh of a willing creature you touch as hard as stone. Until the spell ends, the target has resistance to nonmagical bludgeoning, piercing, and slashing damage."
	},
	"storm of vengeance" : {
		name : "Storm of Vengeance",
		classes : ["druid"],
		source : [["SRD", 183], ["P", 279]],
		level : 9,
		school : "Conj",
		time : "1 a",
		range : "Sight",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Con",
		description : "360-ft rad all save or 2d6 Thunder dmg and deafened for 5 min; effect changes every round; see book",
		descriptionFull : "A churning storm cloud forms, centered on a point you can see and spreading to a radius of 360 feet. Lightning flashes in the area, thunder booms, and strong winds roar. Each creature under the cloud (no more than 5,000 feet beneath the cloud) when it appears must make a Constitution saving throw. On a failed save, a creature takes 2d6 thunder damage and becomes deafened for 5 minutes." + "\n   " + "Each round you maintain concentration on this spell, the storm produces different effects on your turn." + "\n   " + toUni("Round 2") + ": Acidic rain falls from the cloud. Each creature and object under the cloud takes 1d6 acid damage." + "\n   " + toUni("Round 3") + ": You call six bolts of lightning from the cloud to strike six creatures or objects of your choice beneath the cloud. A given creature or object can't be struck by more than one bolt. A struck creature must make a Dexterity saving throw. The creature takes 10d6 lightning damage on a failed save, or half as much damage on a successful one." + "\n   " + toUni("Round 4") + ": Hailstones rain down from the cloud. Each creature under the cloud takes 2d6 bludgeoning damage." + "\n   " + toUni("Round 5-10") + ": Gusts and freezing rain assail the area under the cloud. the area becomes difficult terrain and is heavily obscured. Each creature there takes 1d6 cold damage. Ranged weapon attacks in the area are impossible. The wind and rain count as a severe distraction for the purposes of maintaining concentration on spells. Finally, gusts of strong wind (ranging from 20 to 50 miles per hour) automatically disperse fog, mists, and similar phenomena in the area whether mundane or magical."
	},
	"suggestion" : {
		name : "Suggestion",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 183], ["P", 279]],
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,M",
		compMaterial : "A snake's tongue and either a bit of honeycomb or a drop of sweet oil",
		duration : "Conc, 8 h",
		save : "Wis",
		description : "1 crea save or follow understood reasonable stated course of action; ends if I or allies harm target",
		descriptionFull : "You suggest a course of activity (limited to a sentence or two) and magically influence a creature you can see within range that can hear and understand you. Creatures that can't be charmed are immune to this effect. The suggestion must be worded in such a manner as to make the course of action sound reasonable. Asking the creature to stab itself, throw itself onto a spear, immolate itself, or do some other obviously harmful act ends the spell." + "\n   " + "The target must make a Wisdom saving throw. On a failed save, it pursues the course of action you described to the best of its ability. The suggested course of action can continue for the entire duration. If the suggested activity can be completed in a shorter time, the spell ends when the subject finishes what it was asked to do." + "\n   " + "You can also specify conditions that will trigger a special activity during the duration. For example, you might suggest that a knight give her warhorse to the first beggar she meets. If the condition isn't met before the spell expires, the activity isn't performed." + "\n   " + "If you or any of your companions damage the target, the spell ends."
	},
	"sunbeam" : {
		name : "Sunbeam",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 184], ["P", 279]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "60-ft line",
		components : "V,S,M",
		compMaterial : "A magnifying glass",
		duration : "Conc, 1 min",
		save : "Con",
		description : "60-ft long 5-ft wide all 6d8 Radiant dmg, 1 rnd blind; save halves and not blinded; 1 a for new line",
		descriptionFull : "A beam of brilliant light flashes out from your hand in a 5-foot-wide, 60-foot-line. Each creature in the line must make a Constitution saving throw. On a failed save, a creature takes 6d8 radiant damage and is blinded until your next turn. On a successful save, it takes half as much damage and isn't blinded by this spell. Undead and oozes have disadvantage on this saving throw." + "\n   " + "You can create a new line of radiance as your action on any turn until the spell ends." + "\n   " + "For the duration, a mote of brilliant radiance shines in your hand. It sheds bright light in a 30-foot radius and dim light for an additional 30 feet. The light is sunlight."
	},
	"sunburst" : {
		name : "Sunburst",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 184], ["P", 279]],
		level : 8,
		school : "Evoc",
		time : "1 a",
		range : "150 ft",
		components : "V,S,M",
		compMaterial : "Fire and a piece of sunstone",
		duration : "Instantaneous",
		save : "Con",
		description : "60-ft rad all 12d6 Radiant dmg, 1 min blind; save halves and not blinded; save at end of each turn",
		descriptionFull : "Brilliant sunlight flashes in a 60-foot radius centered on a point you choose within range. Each creature in that light must make a Constitution saving throw. On a failed save, a creature takes 12d6 radiant damage and is blinded for 1 minute. On a successful save, it takes half as much damage and isn't blinded by this spell. Undead and oozes have disadvantage on this saving throw." + "\n   " + "A creature blinded by this spell makes another Constitution saving throw at the end of each of its turns. On a successful save, it is no longer blinded." + "\n   " + "This spell dispels any darkness in its area that was created by a spell."
	},
	"symbol" : {
		name : "Symbol",
		classes : ["bard", "cleric", "wizard"],
		source : [["SRD", 184], ["P", 280]],
		level : 7,
		school : "Abjur",
		time : "1 min",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "Mercury, phosphorus, and powdered diamond and opal with a total value of at least 1,000 gp, which the spell consumes",
		duration : "Till triggered",
		description : "Inscribe a glyph to activate for chosen effect on set trigger; see book (1000gp cons.)",
		descriptionFull : "When you cast this spell, you inscribe a harmful glyph either on a surface (such as a section of floor, a wall, or a table) or within an object that can be closed to conceal the glyph (such as a book, a scroll, or a treasure chest). If you choose a surface, the glyph can cover an area of the surface no larger than 10 feet in diameter. If you choose an object, that object must remain in its place, if the object is moved more than 10 feet from where you cast this spell, the glyph is broken, and the spell ends without being triggered." + "\n   " + "The glyph is nearly invisible, requiring an Intelligence (Investigation) check against your spell save DC to find it." + "\n   " + "You decide what triggers the glyph when you cast the spell. For glyphs inscribed on a surface, the most typical triggers include touching or stepping on the glyph, removing another object covering it, approaching within a certain distance of it, or manipulating the object that holds it. For glyphs inscribed within an object, the most common triggers are opening the object, approaching within a certain distance of it, or seeing or reading the glyph." + "\n   " + "You can further refine the trigger so the spell is activated only under certain circumstances or according to a creature's physical characteristics (such as height or weight), or physical kind (for example, the ward could be set to affect hags or shapechangers). You can also specify creatures that don't trigger the glyph, such as those who say a certain password." + "\n   " + "When you inscribe the glyph, choose one of the options below for its effect. Once triggered, the glyph glows, filling a 60-foot-radius sphere with dim light for 10 minutes, after which time the spell ends. Each creature in the sphere when the glyph activates is targeted by its effect, as is a creature that enters the sphere for the first time on a turn or ends its turn there." + "\n   " + toUni("Death") + ": Each target must make a Constitution saving throw, taking 10d10 necrotic damage on a failed save, or half as much damage on a successful save." + "\n   " + toUni("Discord") + ": Each target must make a Constitution saving throw. On a failed save, a target bickers and argues with other creatures for 1 minute. During this time, it is incapable of meaningful communication and has disadvantage on attack rolls and ability checks." + "\n   " + toUni("Fear") + ": Each target must make a Wisdom saving throw and becomes frightened for 1 minute on a failed save. While frightened, the target drops whatever it is holding and must move at least 30 feet away from the glyph on each of its turns, if able." + "\n   " + toUni("Hopelessness") + ": Each target must make a Charisma saving throw. On a failed save, the target is overwhelmed with despair for 1 minute. During this time, it can't attack or target any creature with harmful abilities, spells, or other magical effects." + "\n   " + toUni("Insanity") + ": Each target must make an Intelligence saving throw. On a failed save, the target is driven insane for 1 minute. An insane creature can't take actions, can't understand what other creatures say, can't read, and speaks only in gibberish. The DM controls its movement, which is erratic." + "\n   " + toUni("Pain") + ": Each target must make a Constitution saving throw and becomes incapacitated with excruciating pain for 1 minute on a failed save." + "\n   " + toUni("Sleep") + ": Each target must make a Wisdom saving throw and falls unconscious for 10 minutes on a failed save. A creature awakens if it takes damage or if someone uses an action to shake or slap it awake." + "\n   " + toUni("Stunning") + ": Each target must make a Wisdom saving throw and becomes stunned for 1 minute on a failed save."
	},
	"tasha's hideous laughter" : {
		name : "Tasha's Hideous Laughter",
		nameAlt : "Hideous Laughter",
		classes : ["bard", "wizard"],
		source : [["SRD", 154], ["P", 280]],
		level : 1,
		school : "Ench",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "Tiny tarts and a feather that is waved in the air",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "1 crea with Int>4 save or fall prone, incapacitated, can't stand; save end of each turn or if taking dmg",
		descriptionFull : "A creature of your choice that you can see within range perceives everything as hilariously funny and falls into fits of laugher if this spell affects it. The target must succeed on a Wisdom saving throw of fall prone, becoming incapacitated and unable to stand up for the duration. A creature with an Intelligence score of 4 or less isn't affected." + "\n   " + "At the end of each of its turns, and each time it takes damage, the target can make another Wisdom saving throw. The target has advantage on the saving throw if it's triggered by damage. On a success, the spell ends."
	},
	"telekinesis" : {
		name : "Telekinesis",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 185], ["P", 280]],
		level : 5,
		school : "Trans",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "Conc, 10 min",
		description : "Move Huge creature or 1000 lb object 30 ft as 1 a; ability check with spellcasting ability vs. Str; see B",
		descriptionFull : "You gain the ability to move or manipulate creatures or objects by thought. When you cast the spell, and as your action each round for the duration, you can exert your will on one creature or object that you can see within range, causing the appropriate effect below. You can affect the same target round after round, or choose a new one at any time. If you switch targets, the prior target is no longer affected by the spell." + "\n   " + toUni("Creature") + ": You can try to move a Huge or smaller creature. Make an ability check with your spellcasting ability contested by the creature's Strength check. If you win the contest, you move the creature up to 30 feet in any direction, including upward but not beyond the range of this spell. Until the end of your next turn, the creature is restrained in your telekinetic grip. A creature lifted upward is suspended in mid-air." + "\n   " + "On subsequent rounds, you can use your action to attempt to maintain your telekinetic grip on the creature by repeating the contest." + "\n   " + toUni("Object") + ": You can try to move an object that weighs up to 1,000 pounds. If the object isn't being worn or carried, you automatically move it up to 30 feet in any direction, but not beyond the range of this spell." + "\n   " + "If the object is worn or carried by a creature, you must make an ability check with your spellcasting ability contested by that creature's Strength check. If you succeed, you pull the object away from that creature and can move it up to 30 feet in any direction but not beyond the range of this spell." + "\n   " + "You can exert fine control on objects with your telekinetic grip, such as manipulating a simple tool, opening a door or a container, stowing or retrieving an item from an open container, or pouring the contents from a vial."
	},
	"teleport" : {
		name : "Teleport",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 185], ["P", 281]],
		level : 7,
		school : "Conj",
		time : "1 a",
		range : "10 ft",
		components : "V",
		duration : "Instantaneous",
		description : "I + 8 willing crea, or an object teleport to a place I know, have seen, or can describe; see book",
		descriptionFull : [
			"This spell instantly transports you and up to eight willing creatures of your choice that you can see within range, or a single object that you can see within range, to a destination you select. If you target an object, it must be able to fit entirely inside a 10-foot cube, and it can't be held or carried by an unwilling creature. The destination you choose must be known to you, and it must be on the same plane of existence as you. Your familiarity with the destination determines whether you arrive there successfully. The DM rolls d100 and consults the table.\n",
			toUni("Familiarity\tMishap\tSimilar\t  Off\t   On"),
			"\t\t\t  " + toUni("Area\tTarget\tTarget"),
			"Permanent Circle\t    -\t    -\t    -\t01-100",
			"Associated Object\t    -\t    -\t    -\t01-100",
			"Very Familiar\t01-05\t06-13\t14-24\t25-100",
			"Seen Casually\t01-33\t34-43\t44-53\t54-100",
			"Viewed Once\t01-43\t44-53\t54-73\t74-100",
			"Description\t01-43\t44-53\t54-73\t74-100",
			"False Description\t01-50\t51-100\t    -\t    -\n"
		].join("\n") + desc([
			toUni("Familiarity") + ": \"Permanent Circle\" means a permanent teleportation circle whose sigil sequence you know. \"Associated Object\" means that you possess an object taken from the desired destination within the last six months, such as a book from a wizard's library, bed linen from a royal suite, or a chunk of marble from a Lich's secret tomb.",
			"\"Very Familiar\" is a place you have been very often, a place you have carefully studied, or a place you can see when you cast the spell. \"Seen Casually\" is some place you have seen more than once but with which you aren't very familiar. \"Viewed Once\" is a place you have seen once, possibly using magic. \"Description\" is a place whose location and appearance you know through someone else's description, perhaps from a map.",
			"\"False Description\" is a place that doesn't exist. Perhaps you tried to scry an enemy's sanctum but instead viewed an illusion, or you are attempting to teleport to a familiar location that no longer exists.",
			toUni("On Target") + ": You and your group (or the target object) appear where you want to go.",
			toUni("Off Target") + ": You and your group (or the target object) appear a random distance away from the destination in a random direction. Distance off target is 1d10 \u00D7 1d10 percent of the distance that was to be travelled. For example, if you tried to travel 120 miles, landed off target, and rolled a 5 and 3 on the two d10s, then you would be off target by 15 percent, or 18 miles. The DM determines the direction off target randomly by rolling a d8 and designating 1 as north, 2 as north-east, 3 as east, and so on around the points of the compass. If you were teleporting to a coastal city and wound up 18 miles out at sea, you could be in trouble.",
			toUni("Similar Area") + ": You and your group (or the target object) wind up in a different area that's visually or thematically similar to the target area. If you are heading for your home laboratory, for example, you might wind up in another wizard's laboratory or in an alchemical supply shop that has many of the same tools and implements as your laboratory. Generally, you appear in the closest similar place, but since the spell has no range limit, you could conceivably wind up anywhere on the plane.",
			toUni("Mishap") + ": The spell's unpredictable magic results in a difficult journey. Each teleporting creature (or the target object) takes 3d10 force damage and the DM rerolls on the table to see where you wind up (multiple mishaps can occur, dealing damage each time)."
		])
	},
	"teleportation circle" : {
		name : "Teleportation Circle",
		classes : ["bard", "sorcerer", "wizard"],
		source : [["SRD", 186], ["P", 281]],
		level : 5,
		school : "Conj",
		time : "1 min",
		range : "10 ft",
		components : "V,M\u2020",
		compMaterial : "Rare chalks and inks infused with precious gems with 50 gp, which the spell consumes",
		duration : "1 rnd",
		description : "Create a circle to teleport to another teleportation circle on same plane; see book (50gp cons.)",
		descriptionFull : "As you cast the spell, you draw a 10-foot-diameter circle on the ground inscribed with sigils that link your location to a permanent teleportation circle of your choice whose sigil sequence you know and that is on the same plane of existence as you. A shimmering portal opens within the circle you drew and remains open until the end of your next turn. Any creature that enters the portal instantly appears within 5 feet of the destination circle or in the nearest unoccupied space if that space is occupied." + "\n   " + "Many major temples, guilds, and other important places have permanent teleportation circles inscribed somewhere within their confines. Each such circle includes a unique sigil sequence - a string of magical runes arranged in a particular pattern. When you first gain the ability to cast this spell, you learn the sigil sequences for two destinations on the Material Plane, determined by the DM. You can learn additional sigil sequences during your adventures. You can commit a new sigil sequence to memory after studying it for 1 minute." + "\n   " + "You can create a permanent teleportation circle by casting this spell in the same location every day for one year. You need not use the circle to teleport when you cast the spell in this way."
	},
	"tenser's floating disk" : {
		name : "Tenser's Floating Disk",
		nameAlt : "Floating Disk",
		classes : ["wizard"],
		source : [["SRD", 146], ["P", 282]],
		ritual : true,
		level : 1,
		school : "Conj",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A drop of mercury",
		duration : "1 h",
		description : "Create a 3 ft diameter disk that carries 500 lb and follows me if I move more than 20 ft away",
		descriptionFull : "This spell creates a circular, horizontal plane of force, 3 feet in diameter and 1 inch thick, that floats 3 feet above the ground in an unoccupied space of your choice that you can see within range. The disk remains for the duration, and can hold up to 500 pounds. If more weight is placed on it, the spell ends, and everything on the disk falls to the ground." + "\n   " + "The disk is immobile while you are within 20 feet of it. If you move more than 20 feet away from it, the disk follows you so that it remains within 20 feet of you. It can more across uneven terrain, up or down stairs, slopes and the like, but it can't cross an elevation change of 10 feet or more. For example, the disk can't move across a 10-foot-deep pit, nor could it leave such a pit if it was created at the bottom." + "\n   " + "If you move more than 100 feet from the disk (typically because it can't move around an obstacle to follow you), the spell ends."
	},
	"thaumaturgy" : {
		name : "Thaumaturgy",
		classes : ["cleric"],
		source : [["SRD", 187], ["P", 282]],
		level : 0,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V",
		duration : "1 min (D)",
		description : "Minor wonder; my voice booms, flames flicker, tremors in the ground, ominous sounds, etc.",
		descriptionFull : "You manifest a minor wonder, a sign of supernatural power, within range. You create one of the following magical effects within range." + "\n " + "\u2022 Your voice booms up to three times as loud as normal for 1 minute." + "\n " + "\u2022 You cause flames to flicker, brighten, dim, or change color for 1 minute." + "\n " + "\u2022 You cause harmless tremors in the ground for 1 minute." + "\n " + "\u2022 You create an instantaneous sound that originates from a point of your choice within range, such as a rumble of thunder, the cry of a raven, or ominous whispers." + "\n " + "\u2022 You instantaneously cause an unlocked door or window to fly open or slam shut." + "\n " + "\u2022 You alter the appearance of your eyes for 1 minute." + "\n\n" + "If you cast this spell multiple times, you can have up to three of its 1-minute effects active at a time, and you can dismiss such an effect as an action."
	},
	"thunderwave" : {
		name : "Thunderwave",
		classes : ["bard", "druid", "sorcerer", "wizard"],
		source : [["SRD", 187], ["P", 282]],
		level : 1,
		school : "Evoc",
		time : "1 a",
		range : "15-ft cube",
		components : "V,S",
		duration : "Instantaneous",
		save : "Con",
		description : "All crea/obj in area 2d8+1d8/SL Thunder dmg, pushed 10 ft away; save halves and not pushed",
		descriptionFull : "A wave of thunderous force sweeps out from you. Each creature in a 15-foot cube originating from you must make a Constitution saving throw. On a failed save, a creature takes 2d8 thunder damage and is pushed 10 feet away from you. On a successful save, the creature takes half as much damage and isn't pushed." + "\n   " + "In addition, unsecured objects that are completely within the area of effect are automatically pushed 10 feet away from you by the spell's effect, and the spell emits a thunderous boom audible out to 300 feet." + AtHigherLevels + "When you cast this spell using a spell slot of 2nd level or higher, the damage increases by 1d8 for each slot level above 1st."
	},
	"time stop" : {
		name : "Time Stop",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 187], ["P", 283]],
		level : 9,
		school : "Trans",
		time : "1 a",
		range : "Self",
		components : "V",
		duration : "Instantaneous",
		description : "I instantly take 1d4+1 turns; if affecting other creatures or worn or carried object the spell ends",
		descriptionFull : "You briefly stop the flow of time for everyone but yourself. No time passes for other creatures, while you take 1d4+1 turns in a row, during which you can use actions and move as normal." + "\n   " + "This spell ends if one of the actions you use during this period, or any effects that you create during this period, affects a creature other than you or an object being worn or carried by someone other than you. In addition, the spell ends if you move to a place more than 1,000 feet from the location where you cast it."
	},
	"tongues" : {
		name : "Tongues",
		classes : ["bard", "cleric", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 187], ["P", 283]],
		level : 3,
		school : "Div",
		time : "1 a",
		range : "Touch",
		components : "V,M",
		compMaterial : "A small clay model of a ziggurat",
		duration : "1 h",
		description : "1 crea understands all spoken languages, all with a language can understand what it means",
		descriptionFull : "This spell grants the creature you touch the ability to understand any spoken language it hears. Moreover, when the target speaks, any creature that knows at least one language and can hear the target understands what it says."
	},
	"transport via plants" : {
		name : "Transport via Plants",
		classes : ["druid"],
		source : [["SRD", 188], ["P", 283]],
		level : 6,
		school : "Conj",
		time : "1 a",
		range : "10 ft",
		components : "V,S",
		duration : "1 rnd",
		description : "For duration all can transport from a Large plant to a plant on the same plane that I have touched",
		descriptionFull : "This spell creates a magical link between a Large or larger inanimate plant within range and another plant, at any distance, on the same plane of existence. You must have seen or touched the destination plant at least once before. For the duration, any creature can step into the target plant and exit from the destination plant by using 5 feet of movement."
	},
	"tree stride" : {
		name : "Tree Stride",
		classes : ["druid", "ranger"],
		source : [["SRD", 188], ["P", 283]],
		level : 5,
		school : "Conj",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "I can teleport 1/rnd for 5 ft move through a tree to another tree of the same kind within 500 ft",
		descriptionFull : "You gain the ability to enter a tree and move from inside it to inside another tree of the same kind within 500 feet. Both trees must be living and at least the same size as you. You must use 5 feet of movement to enter a tree. You instantly know the location of all other trees of the same kind within 500 feet and, as part of the move used to enter the tree, can either pass into one of those trees or step out of the tree you're in. You appear in a spot of your choice within 5 feet of the destination tree, using another 5 feet of movement. If you have no movement left, you appear within 5 feet of the tree you entered." + "\n   " + "You can use this transportation ability once per round for the duration. You must end each turn outside a tree."
	},
	"true polymorph" : {
		name : "True Polymorph",
		classes : ["bard", "warlock", "wizard"],
		source : [["SRD", 188], ["P", 283]],
		level : 9,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A drop of mercury, a dollop of gum arabic, and a wisp of smoke",
		duration : "Conc, 1 h",
		save : "Wis",
		description : "1 crea/obj > 0 HP save or transformed into another crea/obj with equal CR or lower; see book",
		descriptionFull : "Choose one creature or nonmagical object that you can see within range. You transform the creature into a different creature, the creature into a nonmagical object, or the object into a creature (the object must be neither worn nor carried by another creature). The transformation lasts for the duration, or until the target drops to 0 hit points or dies. If you concentrate on this spell for the full duration, the transformation lasts until it is dispelled." + "\n   " + "This spell has no effect on a shapechanger or a creature with 0 hit points. An unwilling creature can make a Wisdom saving throw, and if it succeeds, it isn't affected by this spell." + "\n   " + toUni("Creature into Creature") + ": If you turn a creature into another kind of creature, the new form can be any kind you choose whose challenge rating is equal to or less than the target's (or its level, if the target doesn't have a challenge rating). The target's game statistics, including mental ability scores, are replaced by the statistics of the new form. It retains its alignment and personality." + "\n   " + "The target assumes the hit points of its new form, and when it reverts to its normal form, the creature returns to the number of hit points it had before it transformed. If it reverts as a result of dropping to 0 hit points, any excess damage carries over to its normal form. As long as the excess damage doesn't reduce the creature's normal form to 0 hit points, it isn't knocked unconscious." + "\n   " + "The creature is limited in the actions it can perform by the nature of its new form, and it can't speak, cast spells, or take any other action that requires hands or speech unless its new form is capable of such actions." + "\n   " + "The target's gear melds into the new form. The creature can't activate, use, wield, or otherwise benefit from any of its equipment." + "\n   " + toUni("Object into Creature") + ": You can turn an object into any kind of creature, as long as the creature's size is no larger than the object's size and the creature's challenge rating is 9 or lower. The creature is friendly to you and your companions. It acts on each of your turns. You decide what action it takes and how it moves. The DM has the creature's statistics and resolves all of its actions and movement." + "\n   " + "If the spell becomes permanent, you no longer control the creature. It might remain friendly to you, depending on how you have treated it." + "\n   " + toUni("Creature into Object") + ": If you turn a creature into an object, it transforms along with whatever it is wearing and carrying into that form, as long as the object's size is no larger than the creature's size. The creature's statistics become those of the object, and the creature has no memory of time spent in this form, after the spell ends and it returns to its normal form."
	},
	"true resurrection" : {
		name : "True Resurrection",
		classes : ["cleric", "druid"],
		source : [["SRD", 189], ["P", 284]],
		level : 9,
		school : "Necro",
		time : "1 h",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "A sprinkle of holy water and diamonds worth at least 25,000 gp, which the spell consumes",
		duration : "Instantaneous",
		description : "Resurrects a creature, that has died in last 200 years, with new body; see book (25000gp cons.)",
		descriptionFull : "You touch a creature that has been dead for no longer than 200 years and that died for any reason except old age. If the creature's soul is free and willing, the creature is restored to life with all its hit points." + "\n   " + "This spell closes all wounds, neutralizes any poison, cures all diseases, and lifts any curses affecting the creature when it died. The spell replaces damaged or missing organs and limbs. If the creature was undead, it is restored to its non-undead form." + "\n   " + "The spell can even provide a new body if the original no longer exists, in which case you must speak the creature's name. The creature then appears in an unoccupied space you choose within 10 feet of you."
	},
	"true seeing" : {
		name : "True Seeing",
		classes : ["bard", "cleric", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 189], ["P", 284]],
		level : 6,
		school : "Div",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u2020",
		compMaterial : "An ointment for the eyes that costs 25 gp, is made from mushroom powder, saffron, and fat, and is consumed by the spell",
		duration : "1 h",
		description : "1 willing crea gains truesight 120 ft; see through illusions, hidden doors, ethereal plane (25gp cons.)",
		descriptionFull : "This spell gives the willing creature you touch the ability to see things as they actually are. For the duration, the creature has truesight, notices secret doors hidden by magic, and can see into the Ethereal Plane, all out to a range of 120 feet."
	},
	"true strike" : {
		name : "True Strike",
		classes : ["bard", "sorcerer", "warlock", "wizard"],
		source : [["SRD", 189], ["P", 284]],
		level : 0,
		school : "Div",
		time : "1 a",
		range : "30 ft",
		components : "S",
		duration : "Conc, 1 rnd",
		description : "1 creature against whom I gain advantage on my next attack roll",
		descriptionFull : "You extend your hand and point a finger at a target in range. Your magic grants you a brief insight into the target's defenses. On your next turn, you gain advantage on your first attack roll against the target, provided that this spell hasn't ended."
	},
	"unseen servant" : {
		name : "Unseen Servant",
		classes : ["bard", "warlock", "wizard"],
		source : [["SRD", 189], ["P", 284]],
		ritual : true,
		level : 1,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A piece of string and a bit of wood",
		duration : "1 h",
		description : "Create a mindless, invisible, shapeless, Medium servant for simple tasks; bns a to mentally command it",
		descriptionFull : "This spell creates an invisible, mindless, shapeless, Medium force that performs simple tasks at your command until the spell ends. The servant springs into existence in an unoccupied space on the ground within range. It has AC 10, 1 hit point, and a Strength of 2, and it can't attack. If it drops to 0 hit points, the spell ends." + "\n   " + "Once on each of your turns as a bonus action, you can mentally command the servant to move up to 15 feet and interact with an object. The servant can perform simple tasks that a human servant could do, such as fetching things, cleaning, mending, folding clothes, lighting fires, serving food, and pouring wine. Once you give the command, the servant performs the task to the best of its ability until it completes the task, then waits for your next command." + "\n   " + "If you command the servant to perform a task that would move it more than 60 feet away from you, the spell ends."
	},
	"vampiric touch" : {
		name : "Vampiric Touch",
		classes : ["warlock", "wizard"],
		source : [["SRD", 189], ["P", 285]],
		level : 3,
		school : "Necro",
		time : "1 a",
		range : "Self",
		components : "V,S",
		duration : "Conc, 1 min",
		description : "Spell attack each turn as 1 a for 3d6+1d6/SL Necrotic dmg; I heal half the damage dealt",
		descriptionFull : "The touch of your shadow-wreathed hand can siphon force from others to heal your wounds. Make a melee spell attack against a creature within your reach. On a hit, the target takes 3d6 necrotic damage, and you regain hit points equal to half the amount of necrotic damage dealt. Until the spell ends, you can make the attack again on each of your turns as an action." + AtHigherLevels + "When you cast this spell using a spell slot of 4th level or higher, the damage increases by 1d6 for each slot level above 3rd."
	},
	"vicious mockery" : {
		name : "Vicious Mockery",
		classes : ["bard"],
		source : [["SRD", 189], ["P", 285]],
		level : 0,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V",
		duration : "Instantaneous",
		save : "Wis",
		description : "1 creature save or 1d4 Psychic dmg and dis. on next attack roll; +1d4 at CL 5, 11, and 17",
		descriptionCantripDie : "1 creature save or `CD`d4 Psychic dmg and dis. on next attack roll",
		descriptionFull : "You unleash a string of insults laced with subtle enchantments at a creature you can see within range. If the target can hear you (thought it need not understand you), it must succeed on a Wisdom saving throw or take 1d4 psychic damage and have disadvantage on the next attack roll it makes before the end of its next turn." + "\n   " + "This spell's damage increases by 1d4 when you reach 5th level (2d4), 11th level (3d4) and 17th level (4d4)."
	},
	"wall of fire" : {
		name : "Wall of Fire",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 190], ["P", 285]],
		level : 4,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A small piece of phosphorus",
		duration : "Conc, 1 min",
		save : "Dex",
		description : "60\u00D71\u00D720ft (l\u00D7w\u00D7h) or 10-ft rad all in and 10 ft on 1 side 5d8+1d8/SL Fire dmg; save halves; see B",
		descriptionMetric : "18\u00D70,3\u00D76m (l\u00D7w\u00D7h) or 3-m rad all in and 3 m on 1 side 5d8+1d8/SL Fire dmg; save halves; see B",
		descriptionFull : "You create a wall of fire on a solid surface within range. You can make the wall up to 60 feet long, 20 feet high, and 1 foot think, or a ringed wall up to 20 feet in diameter, 20 feet high, and 1 foot think. The wall is opaque and lasts for the duration." + "\n   " + "When the wall appears, each creature within its area must make a Dexterity saving throw. On a failed save, a creature takes 5d8 fire damage, or half as much damage on a successful save." + "\n   " + "One side of the wall, selected by you when you cast this spell, deals 5d8 fire damage to each creature that ends its turn within 10 feet of that side or inside the wall. A creature takes the same damage when it enters the wall for the first time on a turn or ends its turn there. The other side of the wall deals no damage." + AtHigherLevels + "When you cast this spell using a spell slot of 5th level or higher, the damage increases by 1d8 for each slot level above 4th."
	},
	"wall of force" : {
		name : "Wall of Force",
		classes : ["wizard"],
		source : [["SRD", 190], ["P", 285]],
		level : 5,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A pinch of powder made by crushing a clear gemstone",
		duration : "Conc, 10 min",
		description : "10 10\u00D710-ft panels or 10-ft rad (hemi)sphere invisible, impenetrable wall; can float in air; see book",
		descriptionFull : "An invisible wall of force springs into existence at a point you choose within range. The wall appears in any orientation you choose, as a horizontal or vertical barrier or at an angle. It can be free floating or resting on a solid surface. You can form it into a hemispherical dome or a sphere with a radius of up to 10 feet, or you can shape a flat surface made up of ten 10-foot-by-10-foot panels. Each panel must be contiguous with another panel. In any form, the wall is 1/4 inch thick. It lasts for the duration. If the wall cuts through a creature's space when it appears, the creature is pushed to one side of the wall (your choice which side)." + "\n   " + "Nothing can physically pass through the wall. It is immune to all damage and can't be dispelled by dispel magic. A disintegrate spell destroys the wall instantly, however. The wall also extends into the Ethereal Plane, blocking ethereal travel through the wall."
	},
	"wall of ice" : {
		name : "Wall of Ice",
		classes : ["wizard"],
		source : [["SRD", 190], ["P", 285]],
		level : 6,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A small piece of quartz",
		duration : "Conc, 10 min",
		save : "Dex",
		description : "10 10\u00D710-ft panels 1-ft thick wall; at casting 10d6 Cold dmg; save halves; can cut through; see book",
		descriptionFull : "You create a wall of ice on a solid surface within range. You can form it into a hemispherical dome or a sphere with radium of up to 10 feet, or you can shape a flat surface made up of ten 10-foot-square panels. Each panel must be contiguous with another panel. In any form, the wall is 1 foot thick and lasts for the duration." + "\n   " + "If the wall cuts through a creature's space when it appears, the creature within its area is pushed to one side of the wall and must make a Dexterity saving throw. On a failed save, the creature takes 10d6 cold damage, or half as much damage on a successful save." + "\n   " + "The wall is an object that can be damaged and thus breached. It has AC 12 and 30 hit points per 10-foot section, and it is vulnerable to fire damage. Reducing a 10-foot section of wall to 0 hit points destroys it and leaves behind a sheet of frigid air in the space the wall occupied. A creature moving through the sheet of frigid air for the first time on a turn must make a Constitution saving throw. The creature takes 5d6 cold damage on a failed save, or half as much damage on a successful one." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, the damage the wall deals when it appears increases by 2d6, and the damage from passing through the sheet of frigid air increases by 1d6 for each slot level above 6th."
	},
	"wall of stone" : {
		name : "Wall of Stone",
		classes : ["druid", "sorcerer", "wizard"],
		source : [["SRD", 190], ["P", 287]],
		level : 5,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A small block of granite",
		duration : "Conc, 10 min",
		description : "10 10\u00D710-ft panels 6\" thick wall connected with existing stone; half thickness, double surface; see B",
		descriptionMetric : "10 10\u00D73m panels 15cm thick wall connected with existing stone; half thickness, double surface; see B",
		descriptionFull : "A nonmagical wall of solid stone springs into existence at a point you choose within range. The wall is 6 inches thick and is composed of ten 10-foot-by-10-foot panels. Each panel must be contiguous with at least on other panel. Alternatively, you can create 10-foot-by-20-foot panels that are only 3 inches thick." + "\n   " + "If the wall cuts through a creature's space when it appears, the creature is pushed to one side of the wall (your choice). If a creature would be surrounded on all sides by the wall (or the wall and another solid surface), that creature can make a Dexterity saving throw. On a success, it can use its reaction to move up to its speed so that it is no longer enclosed by the wall." + "\n   " + "The wall can have any shape you desire, though it can't occupy the same space as a creature or object. the wall doesn't need to be vertical or resting on any firm foundation. It must, however, merge with and be solidly supported by existing stone. Thus you can use this spell to bridge a chasm or create a ramp." + "\n   " + "If you create a span greater than 20 feet in length, you must halve the size of each panel to create supports. You can crudely shape the wall to create crenellations, battlements, and so on." + "\n   " + "The wall is an object made of stone that can be damaged and thus breached. Each panel has AC 15 and 30 hit points per inch of thickness. Reducing a panel to 0 hit points destroys it and might cause connected panels to collapse at the DM's discretion." + "\n   " + "If you maintain your concentration on this spell for its whole duration, the wall becomes permanent and can't be dispelled. Otherwise, the wall disappears when the spell ends."
	},
	"wall of thorns" : {
		name : "Wall of Thorns",
		classes : ["druid"],
		source : [["SRD", 191], ["P", 287]],
		level : 6,
		school : "Conj",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A handful of thorns",
		duration : "Conc, 10 min",
		save : "Dex",
		description : "60\u00D75\u00D720ft (l\u00D7w\u00D7h) or 10-ft rad all 7d8+1d8/SL Piercing dmg; save halves; 1/4 move; see book",
		descriptionMetric : "18\u00D71,5\u00D76m (l\u00D7w\u00D7h) or 3-m rad all 7d8+1d8/SL Piercing dmg; save halves; 1/4 move; see book",
		descriptionFull : "You create a wall of tough, pliable, tangled brush bristling with needle-sharp thorns. The wall appears within range on a solid surface and lasts for the duration. You choose to make the wall up to 60 feet long, 10 feet high, and 5 feet thick or a circle that has a 20-foot diameter and is up to 20 feet high and 5 feet thick. The wall blocks line of sight." + "\n   " + "When the wall appears, each creature within its area must make a Dexterity saving throw. On a failed save, a creature takes 7d8 piercing damage, or half as much damage on a successful save." + "\n   " + "A creature can move through the wall, albeit slowly and painfully. For every 1 foot a creature moves through the wall, it must spend 4 feet of movement. Furthermore, the first time a creature enters the wall on a turn or ends its turn there, the creature must make a Dexterity saving throw. It takes 7d8 slashing damage on a failed save, or half as much on a successful save." + AtHigherLevels + "When you cast this spell using a spell slot of 7th level or higher, both types of damage increase by 1d8 for each slot level above 6th."
	},
	"warding bond" : {
		name : "Warding Bond",
		classes : ["cleric"],
		source : [["SRD", 191], ["P", 287]],
		level : 2,
		school : "Abjur",
		time : "1 a",
		range : "Touch",
		components : "V,S,M\u0192",
		compMaterial : "A pair of platinum rings worth at least 50 gp each, which you and target must wear for the duration",
		duration : "1 h (D)",
		description : "1 crea +1 AC, +1 saves, resistance all dmg; if takes dmg I take same dmg; ends if >60 ft away (100gp)",
		descriptionFull : "This spell wards a willing creature you touch and creates a mystic connection between you and the target until the spell ends. While the target is within 60 feet of you, it gains a +1 bonus to AC and saving throws, and it has resistance to all damage. Also, each time it takes damage, you take the same amount of damage." + "\n   " + "The spell ends if you drop to 0 hit points or if you and the target become separated by more than 60 feet. It also ends if the spell is cast again on either of the connected creatures. You can also dismiss the spell as an action."
	},
	"water breathing" : {
		name : "Water Breathing",
		classes : ["druid", "ranger", "sorcerer", "wizard"],
		source : [["SRD", 191], ["P", 287]],
		ritual : true,
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A short reed or piece of straw",
		duration : "24 h",
		description : "10 willing creatures can breathe underwater for the duration",
		descriptionFull : "This spell grants up to ten willing creatures you can see within range the ability to breathe underwater until the spell ends. Affected creatures also retain their normal mode of respiration."
	},
	"water walk" : {
		name : "Water Walk",
		classes : ["cleric", "druid", "ranger", "sorcerer"],
		source : [["SRD", 191], ["P", 287]],
		ritual : true,
		level : 3,
		school : "Trans",
		time : "1 a",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "A piece of cork",
		duration : "1 h",
		description : "10 willing creatures can move across any liquid for the duration; rise to surface if underwater",
		descriptionFull : "This spell grants the ability to move across any liquid surface - such as water, acid, mud, snow, quicksand, or lava - as if it were harmless solid ground (creatures crossing molten lava can still take damage from the heat). Up to ten willing creatures you can see within range gain this ability for the duration." + "\n   " + "If your target a creature submerged in a liquid, the spell carries the target to the surface of the liquid at a rate of 60 feet per round."
	},
	"web" : {
		name : "Web",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 192], ["P", 287]],
		level : 2,
		school : "Conj",
		time : "1 a",
		range : "60 ft",
		components : "V,S,M",
		compMaterial : "A bit of spiderweb",
		duration : "Conc, 1 h",
		save : "Dex",
		description : "20-ft cube, anchored, all save or restrained; dif. ter.; lightly obscures; Str check vs. Spell DC to free",
		descriptionFull : "You conjure a mass of thick, sticky webbing at a point of your choice within range. The webs fill a 20-foot cube from that point for the duration. The webs are difficult terrain and lightly obscure their area." + "\n   " + "If the webs aren't anchored between two solid masses (such as walls or trees) or layered across a floor, wall, or ceiling, the conjured web collapses on itself, and the spell ends at the start of your next turn. Webs layered over a flat surface have a depth of 5 feet." + "\n   " + "Each creature that starts its turn in the webs or that enters them during its turn must make a Dexterity saving throw. On a failed save, the creature is restrained as long as it remains in the webs or until it breaks free." + "\n   " + "A creature restrained by the webs can use its actions to make a Strength check against your spell save DC. If it succeeds, it is no longer restrained." + "\n   " + "The webs are flammable. Any 5-foot cube of webs exposed to fire burns away in 1 round, dealing 2d4 fire damage to any creature that starts its turn in the fire."
	},
	"weird" : {
		name : "Weird",
		classes : ["wizard"],
		source : [["SRD", 192], ["P", 288]],
		level : 9,
		school : "Illus",
		time : "1 a",
		range : "120 ft",
		components : "V,S",
		duration : "Conc, 1 min",
		save : "Wis",
		description : "30-ft rad all save or frightened for duration; extra save at end of each round or 4d10 Psychic dmg", // errata from start of turn to end of turn
		descriptionFull : "Drawing on the deepest fears of a group of creatures, you create illusory creatures in their minds, visible only to them. Each creature in a 30-foot-radius sphere centered on a point of your choice within range must make a Wisdom saving throw. On a failed save, a creature becomes frightened for the duration. The illusion calls on the creature's deepest fears, manifesting its worst nightmares as an implacable threat. At the end of each of the frightened creature's turns, it must succeed on a Wisdom saving throw or take 4d10 psychic damage. On a successful save, the spell ends for that creature."
	},
	"wind walk" : {
		name : "Wind Walk",
		classes : ["druid"],
		source : [["SRD", 192], ["P", 288]],
		level : 6,
		school : "Trans",
		time : "1 min",
		range : "30 ft",
		components : "V,S,M",
		compMaterial : "Fire and holy water",
		duration : "8 h",
		description : "Me + 10 willing creatures assume gaseous form with fly 300 ft, resist. to nonmagical dmg; see book",
		descriptionFull : "You and up to ten willing creatures you can see within range assume a gaseous form for the duration, appearing as wisps of cloud. While in this cloud form, a creature has a flying speed of 300 feet and has resistance to damage from nonmagical weapons. The only actions a creature can take in this form are the Dash action or to revert to its normal form. Reverting takes 1 minute, during which time a creature is incapacitated and can't move. Until the spell ends, a creature can revert to cloud form, which also requires the 1-minute transformation." + "\n   " + "If a creature is in cloud form and flying when the effect ends, the creature descends 60 feet per round for 1 minute until it lands, which it does safely. If it can't land after 1 minute, the creature falls the remaining distance."
	},
	"wind wall" : {
		name : "Wind Wall",
		classes : ["druid", "ranger"],
		source : [["SRD", 192], ["P", 288]],
		level : 3,
		school : "Evoc",
		time : "1 a",
		range : "120 ft",
		components : "V,S,M",
		compMaterial : "A tiny fan and a feather of exotic origin",
		duration : "Conc, 1 min",
		save : "Str",
		description : "50\u00D71\u00D715ft (l\u00D7w\u00D7h) wall, any line-shape, at cast all in 3d8 Bludg. dmg; save halves; blocks arrows",
		descriptionMetric : "15\u00D70,3\u00D74,5m (l\u00D7w\u00D7h) wall, any line-shape, at cast all in 3d8 Bludg. dmg; save halves; blocks arrows",
		descriptionFull : "A wall of strong wind rises from the ground at a point you choose within range. You can make the wall up to 50 feet long, 15 feet high, and 1 foot thick. You can shape the wall in any way you choose so long as it makes one continuous path along the ground. The wall lasts for the duration." + "\n   " + "When the wall appears, each creature within its area must make a Strength saving throw. A creature takes 3d8 bludgeoning damage on a failed save, or half as much damage on a successful one." + "\n   " + "The strong wind keeps fog, smoke, and other gases at bay. Small or smaller flying creatures or objects can't pass through the wall. Loose, lightweight materials brought into the wall fly upward. Arrows, bolts, and other ordinary projectiles launched at targets behind the wall are deflected upward and automatically miss. (Boulders hurled by giants or siege engines, and similar projectiles, are unaffected.) Creatures in gaseous form can't pass through it."
	},
	"wish" : {
		name : "Wish",
		classes : ["sorcerer", "wizard"],
		source : [["SRD", 193], ["P", 288]],
		level : 9,
		school : "Conj",
		time : "1 a",
		range : "Self",
		components : "V",
		duration : "Instantaneous",
		description : "Duplicate any 8th lvl or lower spell, create objects, heal, resurrect, alter time, etc.; see book",
		descriptionFull : "Wish is the mightiest spell a mortal creature can cast. By simply speaking aloud, you can alter the very foundations of reality in accord with your desires." + "\n   " + "The basic use of this spell is to duplicate any other spell of 8th level or lower. You don't need to meet any requirements in that spell, including costly components. The spell simply takes effect. Alternatively, you can create one of the following effects of your choice." + "\n " + "\u2022 You create one object of up to 25,000 gp in value that isn't a magic item. The object can be no more than 300 feet in any dimension, and it appears in an unoccupied space you can see on the ground." + "\n " + "\u2022 You allow up to twenty creatures that you can see to regain all hit points, and you end all effects on them described in the greater restoration spell." + "\n " + "\u2022 You grant up to ten creatures that you can see resistance to a damage type you choose." + "\n " + "\u2022 You grant up to ten creatures you can see immunity to a single spell or other magical effect for 8 hours. For instance, you could make yourself and all your companions immune to a lich's life drain attack." + "\n " + "\u2022 You undo a single recent event by forcing a reroll of any roll made within the last round (including your last turn). Reality reshapes itself to accommodate the new result. For example, a wish spell could undo an opponent's successful save, a foe's critical hit, or a friend's failed save. You can force the reroll to be made with advantage or disadvantage, and you can choose whether to use the reroll or the original roll." + "\n\n" + "You might be able to achieve something beyond the scope of the above examples. State your wish to the DM as precisely as possible. The DM has great latitude in ruling what occurs in such an instance, the greater the wish, the greater the likelihood that something goes wrong. This spell might simply fail, the effect you desire might only be partly achieved, or you might suffer some unforeseen consequence as a result of how you worded the wish. For example, wishing that a villain were dead might propel you forward in time to a period when that villain is no longer alive, effectively removing you from the game. Similarly, wishing for a legendary magic item or artifact might instantly transport you to the presence of the item's current owner." + "\n   " + "The stress of casting this spell to produce any effect other than duplicating another spell weakens you. After enduring that stress, each time you cast a spell until you finish a long rest, you take 1d10 necrotic damage per level of that spell. This damage can't be reduced or prevented in any way. In addition, your Strength drops to 3, if it isn't 3 or lower already, for 2d4 days. For each of those days that you spend resting and doing nothing more than light activity, your remaining recovery time decreases by 2 days. Finally, there is a 33 percent chance that you are unable to cast wish ever again if you suffer this stress."
	},
	"word of recall" : {
		name : "Word of Recall",
		classes : ["cleric"],
		source : [["SRD", 193], ["P", 289]],
		level : 6,
		school : "Conj",
		time : "1 a",
		range : "5 ft",
		components : "V",
		duration : "Instantaneous",
		description : "Me + 5 willing crea teleport to sanctuary of my deity, designated as such by casting this spell there",
		descriptionFull : "You and up to five willing creatures within 5 feet of you instantly teleport to a previously designated sanctuary. You and any creatures that teleport with you appear in the nearest unoccupied space to the spot you designated when you prepared your sanctuary (see below). If you cast this spell without first preparing a sanctuary, the spell has no effect." + "\n   " + "You must designate a sanctuary by casting this spell within a location, such as a temple, dedicated to or strongly linked to your deity. If you attempt to cast the spell in this manner in an area that isn't dedicated to your deity, the spell has no effect."
	},
	"zone of truth" : {
		name : "Zone of Truth",
		classes : ["bard", "cleric", "paladin"],
		source : [["SRD", 193], ["P", 289]],
		level : 2,
		school : "Ench",
		time : "1 a",
		range : "60 ft",
		components : "V,S",
		duration : "10 min",
		save : "Cha",
		description : "15-ft rad all in or enter save or unable to lie; I'm aware if saved or not; crea aware it cannot lie",
		descriptionFull : "You create a magical zone that guards against deception in a 15-foot-radius sphere centered on a point of your choice within range. Until the spell ends, a creature that enters the spell's area for the first time on a turn or starts its turn there must make a Charisma saving throw. On a failed save, a creature can't speak a deliberate lie while in the radius. You know whether each creature succeeds or fails on its saving throw." + "\n   " + "An affected creature is aware of the spell and can thus avoid answering questions to which it would normally respond with a lie. Such creatures can be evasive in its answers as long as it remains within the boundaries of the truth."
	}
};

var AllSpellsArray, AllSpellsObject, AddSpellsMenu, AllCasterClasses;
// BEGIN Module Shim


module.exports = {
    BackgroundFeatureList: BackgroundFeatureList,
    BackgroundSubList: BackgroundSubList,
    BackgroundList: BackgroundList,
    FightingStyles: FightingStyles,
    ClassList: ClassList,
    ClassSubList: ClassSubList,
    CreatureList: CreatureList,
    FeatsList: FeatsList,
    ArmourList: ArmourList,
    WeaponsList: WeaponsList,
    AmmoList: AmmoList,
    PacksList: PacksList,
    GearList: GearList,
    ToolsList: ToolsList,
    TreasureCheckpointsTable: TreasureCheckpointsTable,
    AddMagicItemsMenu: AddMagicItemsMenu,
    sentientItemConflictTxt: sentientItemConflictTxt,
    MagicItemsList: MagicItemsList,
    RaceList: RaceList,
    RaceSubList: RaceSubList,
    SourceList: SourceList,
    SpellsList: SpellsList,
    AtHigherLevels: AtHigherLevels,
    spellLevelList: spellLevelList,
    spellSchoolList: spellSchoolList,
    addContent: function(content) {
        eval(content);
    }
}